<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D の Java</title>
  
  <subtitle>别怕路长梦远</subtitle>
  <link href="https://pigpigletsgo.github.io/atom.xml" rel="self"/>
  
  <link href="https://pigpigletsgo.github.io/"/>
  <updated>2024-07-07T02:47:42.714Z</updated>
  <id>https://pigpigletsgo.github.io/</id>
  
  <author>
    <name>D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatis-plus查询，值为null，字段不显示问题</title>
    <link href="https://pigpigletsgo.github.io/bug/mybatis-plus%E6%9F%A5%E8%AF%A2%EF%BC%8C%E5%80%BC%E4%B8%BAnull%EF%BC%8C%E5%AD%97%E6%AE%B5%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>https://pigpigletsgo.github.io/bug/mybatis-plus%E6%9F%A5%E8%AF%A2%EF%BC%8C%E5%80%BC%E4%B8%BAnull%EF%BC%8C%E5%AD%97%E6%AE%B5%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</id>
    <published>2024-07-07T02:46:38.158Z</published>
    <updated>2024-07-07T02:47:42.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-plus查询值为null字段不显示问题"><a class="anchor" href="#mybatis-plus查询值为null字段不显示问题">#</a> mybatis-plus 查询，值为 null，字段不显示问题</h1><p>场景：</p><blockquote><p>编写了一个 sql 返回 List&lt;Map&lt;String, Object&gt;&gt; 类型数据，而数据库中某些字段有 id 的值而没有 name 的值，此时 name 为 null 的应该查询出来是：{id:10，name:null} 但是结果却是：{id:10} 后面的 name 就没有了，这篇文章就是解决这个问题的</p></blockquote><p>解决方案：</p><blockquote><p>需要修改 mybatis-plus 的配置即可。将 mybatis-plus 的 call-setters-on-nulls 设置为 true 即可</p></blockquote><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token comment"># 默认，每次执行 sql 都会开关 statement</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token key atrule">executor-type</span><span class="token punctuation">:</span> simple</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment"># 解决字段为 null 查询不显示问题</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token key atrule">call-setters-on-nulls</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr></table></figure><h2 id="代码案例"><a class="anchor" href="#代码案例">#</a> 代码案例</h2><p>数据库表数据：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240707104120197.png" alt="image-20240707104120197" /></p><p>dao</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Mapper</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassEntity</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token string">"SELECT"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token string">"*"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token string">"FROM tab_class"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"classService"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassDao</span><span class="token punctuation">,</span> <span class="token class-name">ClassEntity</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">ClassService</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token annotation punctuation">@Resource</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">ClassDao</span> classDao<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> classDao<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/mpj/class"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassController</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token annotation punctuation">@Autowired</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">ClassService</span> classService<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getInfo"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> classService<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="在不使用配置call-setters-on-nulls-true的情况下的数据如下"><a class="anchor" href="#在不使用配置call-setters-on-nulls-true的情况下的数据如下">#</a> 在不使用配置 call-setters-on-nulls: true 的情况下的数据如下：</h3><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240707104326694.png" alt="image-20240707104326694" /></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240707104240316.png" alt="image-20240707104240316" /></p><p>这并不是我们想要的</p><h3 id="使用配置call-setters-on-nulls-true的情况下的数据如下"><a class="anchor" href="#使用配置call-setters-on-nulls-true的情况下的数据如下">#</a> 使用配置 call-setters-on-nulls: true 的情况下的数据如下：</h3><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240707104340953.png" alt="image-20240707104340953" /></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240707104425041.png" alt="image-20240707104425041" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mybatis-plus查询值为null字段不显示问题&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mybatis-plus查询值为null字段不显示问题&quot;&gt;#&lt;/a&gt; mybatis-plus 查询，值为 null，字段不显示问题&lt;/h1&gt;
&lt;p&gt;场景：</summary>
      
    
    
    
    <category term="问题总汇" scheme="https://pigpigletsgo.github.io/categories/bug/"/>
    
    
    <category term="问题总汇" scheme="https://pigpigletsgo.github.io/tags/%E9%97%AE%E9%A2%98%E6%80%BB%E6%B1%87/"/>
    
    <category term="MyBatisPlus" scheme="https://pigpigletsgo.github.io/tags/MyBatisPlus/"/>
    
  </entry>
  
  <entry>
    <title>记录不存在则插入，存在则更新-replace into与insert update</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%88%99%E6%8F%92%E5%85%A5%EF%BC%8C%E5%AD%98%E5%9C%A8%E5%88%99%E6%9B%B4%E6%96%B0-replace%20into%E4%B8%8Einsert%20update/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%AE%B0%E5%BD%95%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%88%99%E6%8F%92%E5%85%A5%EF%BC%8C%E5%AD%98%E5%9C%A8%E5%88%99%E6%9B%B4%E6%96%B0-replace%20into%E4%B8%8Einsert%20update/</id>
    <published>2024-07-06T14:04:11.541Z</published>
    <updated>2024-07-06T14:04:32.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="记录不存在则插入存在则更新-replace-into与insert-update"><a class="anchor" href="#记录不存在则插入存在则更新-replace-into与insert-update">#</a> 记录不存在则插入，存在则更新 - replace into 与 insert update</h1><h2 id="需求背景"><a class="anchor" href="#需求背景">#</a> 需求背景</h2><p>MySQL 版本：5.7.20</p><h2 id="开发规范"><a class="anchor" href="#开发规范">#</a> 开发规范</h2><p>公司后端开发规范有这么一点：</p><p>更新数据库表中数据的时候，不允许先删，然后批量插入</p><p>需要将入参与表中数据比判断，找出哪些是新插入，哪些需要更新，哪些是删除的，然后再做对应的数据操作</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706212158696.png" alt="image-20240706212158696" /></p><h2 id="需求"><a class="anchor" href="#需求">#</a> 需求</h2><p>我们有表如下：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706212226411.png" alt="image-20240706212226411" /></p><p>当商品配送完之后，需要记录它的最新配送价，若商品最新配送价已经存在则进行更新，不存在则执行插入</p><p>针对这个需求，我们有哪些实现方式？</p><h2 id="代码处理"><a class="anchor" href="#代码处理">#</a> 代码处理</h2><p>按开发规范中说的处理</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706212332642.png" alt="image-20240706212332642" /></p><p>通过代码在内存中进行数据处理，找出插入列表与更新列表，然后执行数据库操作</p><p>因为是很常规的插入与更新操作，所以这种处理方式适用于所有的关系型数据库</p><h2 id="replace-into"><a class="anchor" href="#replace-into">#</a> REPLACE INTO</h2><p>当数据库是 MySQL，碰到 <code>不存在则插入，存在则更新</code> 的需求时，第一时间往往想到的是 <code>REPLACE INTO</code></p><h3 id="工作原理"><a class="anchor" href="#工作原理">#</a> 工作原理</h3><p><code>REPLACE INTO</code>  跟 <code>INSERT</code>  功能类似</p><p>不同点在于： <code>REPACE INTO</code>  首先尝试插入数据到列表中，如果发现表中已经有此行数据 (根据主键或唯一索引判断) 则 <mark>先删除此行数据，然后插入新的数据</mark>，否则直接插入新数据</p><p><code>REPLACE</code>  语句会返回一个数，表示受影响的行的数目，该数是 <mark>被删除和被插入的行数的和</mark></p><p>我们来看个示例：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/747662-20210920165140031-1272755383.gif" alt="img" /></p><p>对于示例结果，相信大家都能理解</p><p>需要强调的是：根据唯一索引 <code>uk_comany_ware</code>  判定， <code>(1001,10001,19.8,1,1)</code>  已经存在，那么先删除此记录，然后插入 <code>(1001,10001,20.5,1,1)</code></p><p>而 <code>(1001,10002,5.45,1,1)</code>  判定为不存在，那么直接插入</p><p>这就导致我们看到的输出结果是： <code>受影响的行：3</code> ，同时自增主键由 1 编程了 2，3。而不是 1，2</p><h3 id="有坑"><a class="anchor" href="#有坑">#</a> 有坑</h3><p>正是因为 <code>REPLACE INTO</code>  的工作原理，不可避免就产生了一些需要注意的地方</p><h4 id="1-破坏外键约束"><a class="anchor" href="#1-破坏外键约束">#</a> 1、破坏外键约束</h4><p>如果主键被指定成了其它表的外键，那么 <code>REPALCE INTO</code>  更新 (非插入) 时影响到了其它表的外键约束，那么会执行失败，提示类似信息：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706213212163.png" alt="image-20240706213212163" /></p><p>可能会想到：我们发开过程中，会遵循阿里开发手册中的规约，其中有一条规约如下：</p><blockquote><p>[强制] 不得使用外键与级联，一切外键概念必须在引用层解决。</p><p>说明：(概念解释) 学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于单机低并发，不适合分布式，高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度</p></blockquote><p>我们不用外键了，也就不会出现前面的 <code>[Err] 1451</code>  错误了</p><p>其实阿里开发手册中这条规约，不是说不让我们使用外键，而是说不用数据库层面的外键约束，在应用代码层面解决外键逻辑</p><p>用数据库层面的外键，问题提示的很明显，也不会产生脏数据</p><p>而应用层解决外键，反而时外键约束的数据一致性问题更隐晦，产生脏数据，如下：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706213738628.png" alt="image-20240706213738628" /></p><p>从此我们踏上了修改数据的不归路</p><h4 id="2-主键加速自增"><a class="anchor" href="#2-主键加速自增">#</a> 2、主键加速自增</h4><p>很多情况下，我们的主键是 <code>int</code>  或 <code>bigint</code>  类型，并且设置成了自增</p><p>不管是 <code>int</code>  还是 <code>bigint</code> ，都有一个最大值，如果一直自增下去，总有一天会达到最大值 (可能到地老天荒也达不到这个值)</p><p><code>REPLACE INTO</code>  的更新是先删除再插入，会导致主键自增 1 (照理来说，更新是不应该导致主键自增 1)</p><p>如果更新频率远远大于插入频率，本不用考虑的自增主键用完的问题，可能就需要考虑了</p><p>另外也会导致主键不连续，主键值跳跃式的出现在表中</p><h4 id="3-主从切换问题"><a class="anchor" href="#3-主从切换问题">#</a> 3、主从切换问题</h4><p>master： <code>master-local</code> ，slave： <code>slave-192.168.0.112</code> ，同步库： <code>my_project</code></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/747662-20210920213612604-726198536.gif" alt="img" /></p><p>从上图可以看出，主从复制是正常的</p><p>接下来我们看看 <code>REPLACE INTO</code>  对主从复制有什么影响</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/747662-20210920225844733-1376543610.gif" alt="img" /></p><p>此时 <code>master</code>  与 <code>slave</code>  上的 <code>t_ware_last_delivery_price</code>  的下一个非手工指定的主键都是 11 ( <code>AUTO_INCREMENT=11</code> )，两者都是一致的我们在 <code>master</code>  上使用 <code>REPLACE INTO</code>  更新一条记录</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/747662-20210921115509806-1666874136.gif" alt="img" /></p><p><code>master</code>  与 <code>slave</code>  的数据是一致的，但是 <code>master</code>  上的上一个自增主键是 <code>AUTO_INCREMENT=12</code> ，而 <code>slave</code>  上却是 <code>AUTO_INCREMENT=11</code></p><p>可能会有人觉得：数据一致就行，下一个自增主键不一致有什么关系？</p><p>我们来想一下这个问题：如果 <code>master</code>  库崩了，我们会怎么做？会将 <code>slave</code>  提升为 <code>master</code></p><p>此时问题来了： <code>slave</code>  提升成 <code>master</code>  之前，实际数据的 <code>id</code>  已经到了 <code>11</code> ，但其 <code>AUTO_INCREMENT=11</code> ，也就是说下一个自增主键是 <code>11</code>  那么下一条不指定 <code>id</code>  值的新记录是插入时就会发生 <code>duplicate key error</code> ，每次冲突之后 <code>AUTO_INCREMENT += 1</code> ，直到增长为 <code>max(id) + 1</code>  之后才能恢复正常</p><h2 id="insert-update"><a class="anchor" href="#insert-update">#</a> INSERT UPDATE</h2><p>针对 <code>不存在则插入，存在则更新</code> ， <code>MySQL</code>  还提供了另外一种方式实现： <code>INSERT ... ON DUPLICATE KEY UPDATE Statement</code></p><h3 id="工作原理-2"><a class="anchor" href="#工作原理-2">#</a> 工作原理</h3><p>如果指定 <code>ON DUPLICATE KEY UPDATE</code>  子句，并且要插入的行将导致 <mark>唯一索引或主键</mark> 中出现重复值，则会更新旧行，否则是插入</p><p>例如，如果 <code>列a</code>  被声明为唯一且包含值 1，则以下两条语句具有类似的效果</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706215109099.png" alt="image-20240706215109099" /></p><p>但是这两条 SQL 的效果并不完全相同，我们以 <code>t_ware_last_delivery_price </code> 为例，来看看它们的区别</p><p>我们先来看看 <code>UPDATE</code></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/747662-20210921000349920-2080470467.gif" alt="img" /></p><p>只是对 <code>id = 11</code>  的 <code>last_delivery_price </code> 就行了修改，受影响的行只有 1，不会影响 <code>AUTO_INCREMENT </code> 的值</p><p>我们再来看看 <code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/747662-20210921001925000-908908723.gif" alt="img" /></p><p>对 <code>id = 11</code>  的 <code>last_delivery_price </code> 进行了修改，受影响的行是 2，并且 <code>AUTO_INCREMENT=13</code></p><p>此刻，我相信我们有共同的两个疑问</p><ol><li>为什么受影响的行数是 2，而不是 1</li><li>自增主键为什么自增了 1 ( <code>AUTO_INCREMENT </code> 为什么等于 13，而不是原有的 12)</li></ol><p>为什么受影响的行数是 2，而不是 1，官方文档有这么一段说明</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706215438538.png" alt="image-20240706215438538" /></p><p>意思就是：1 表示新插入一行，2 表示更新了一行，0 表示更新前后值未变</p><p>我们换个角度来理解，假设让我们来设计，一条 SQL 既能插入，也能更新，我们如何告知用户到底是插入成功了，还是更新成功了？</p><p>所以 1，2 仅仅只是用来区分插入和更新，2 并非真正受影响的行数</p><p>主键明明没有变化，为什么 <code>AUTO_INCREMENT=13</code>  自增了 1？</p><p>这和 <code>MySQL</code>  的主键自增的参数有关 <code>innodb_autoinc_lock_mode </code> ，它有 3 个值 <code>0,1,2</code></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706215708231.png" alt="image-20240706215708231" /></p><p><code>mysql5.1</code>  之后其默认是 1</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706215733816.png" alt="image-20240706215733816" /></p><p>因为 <code>innodb_autoinc_lock_mode = 1</code></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706215752243.png" alt="image-20240706215752243" /></p><p>所以上述 SQL 被当做简单插入处理，在真正修改数据之前就对 <code>AUTO_INCREMENT </code> 自增 1 处理了</p><h3 id="批量操作"><a class="anchor" href="#批量操作">#</a> 批量操作</h3><p>不仅支持单条操作，也支持批量操作</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240706215854225.png" alt="image-20240706215854225" /></p><p>和批量插入类似</p><h3 id="有坑-2"><a class="anchor" href="#有坑-2">#</a> 有坑</h3><p>因为 <code>innodb_autoinc_lock_mode = 1</code>  是一个折中的选择，一般不会去改它，所以有些需要注意的点</p><h4 id="1-主键加速自增"><a class="anchor" href="#1-主键加速自增">#</a> 1、主键加速自增</h4><p>与 <code>replace into</code>  类似，即使是更新，也会导致 <code>AUTO_INCREMENT </code> 自增，加速了主键的衰老同时也会导致主键的跳跃</p><h4 id="2-主从切换问题"><a class="anchor" href="#2-主从切换问题">#</a> 2、主从切换问题</h4><p>与 <code>replace into </code> 类似， <code>master</code>  上的更新导致 <code>AUTO_INCREMENT </code> 自增，而 <code>AUTO_INCREMENT</code>  又未同步到 <code>slave</code>  当 <code>slave</code>  升级成 <code>master</code>  后，可能会出现 <code>duplicate key error</code>  与 <code>replace into</code>  不同的是，上述两个问题可以通过设置 <code>innodb_autoinc_lock_mode = 0</code>  来避免，因为很多场景下对性能要求并不高</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>1、如何选择哪种方式</p><p>上述三种方式各有优略，代码处理不依赖于具体的数据库，可移植性高，也不会引入特定数据库的在这方面的缺陷</p><p><code>replace into</code>  的方式不推荐（坑有点多），它完全可以由  <code>INSERT UPDATE</code>  替代</p><p><code>INSERT UPDATE</code>  可以减少我们的代码，但它是 MySQL 的拓展实现，只有 MySQL 支持，可移植性差</p><p>2、针对  <code>INSERT UPDATE</code>  的 “坑”，我们可以结合具体的业务来设置  <code>innodb_autoinc_lock_mode</code>  ，适当的避免它的 “坑”</p><p>3、道路千万条，合适第一条</p><p>针对某个需求，实现方式往往有很多，我们要做的就是从中找到最适合的那一条</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;记录不存在则插入存在则更新-replace-into与insert-update&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#记录不存在则插入存在则更新-replace-into与insert-update&quot;&gt;#&lt;/a&gt; 记录不存在则插入，存在则更新 - </summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>spring.profiles.active和spring.profiles.include的使用/区别</title>
    <link href="https://pigpigletsgo.github.io/computer-science/blog/%E9%A1%B9%E7%9B%AE/spring.profiles.active%E5%92%8Cspring.profiles.include%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%88%AB/"/>
    <id>https://pigpigletsgo.github.io/computer-science/blog/%E9%A1%B9%E7%9B%AE/spring.profiles.active%E5%92%8Cspring.profiles.include%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8C%BA%E5%88%AB/</id>
    <published>2024-07-06T07:41:41.084Z</published>
    <updated>2024-07-06T07:42:07.355Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springprofilesactive和springprofilesinclude的使用区别"><a class="anchor" href="#springprofilesactive和springprofilesinclude的使用区别">#</a> spring.profiles.active 和 spring.profiles.include 的使用 / 区别</h1><h2 id="业务场景"><a class="anchor" href="#业务场景">#</a> 业务场景</h2><blockquote><p>一套程序可能会被部署到不同的环境，开发，测试，生产环境有不同的配置信息，包括 jdbc 地址，ip，端口等。如果在同一个配置文件中，每次部署去改配置，会非常麻烦且容易出错</p></blockquote><h2 id="优化方式"><a class="anchor" href="#优化方式">#</a> 优化方式</h2><p>spring.profiles.active 属性</p><p>一个好方法就是<mark>创建不同的配置文件</mark>，且命名规则遵循 application-${profile}.properties，例如：</p><ol><li>开发环境配置文件：application-dev.properties</li><li>测试环境配置文件：application-test.properties</li><li>生产环境配置文件：application-prod.properties</li></ol><p profile="">当然，我们不能删除项目最顶层的 application.properties 配置，在该文件中，<mark>根据部署场景不同，切换不同的配置</mark>文件：配置 spring.profiles.active，属性值为 $</p><ol><li>spring.profiles.active=dev：启用 application-dev.properties</li><li>spring.profiles.active=test：启用 application-test.properties</li><li>spring.profiles.active=prod：启用 application-prod.properties</li></ol><p>在此推荐一个结合 pom.xml 的配置方式：</p><p>application.properties 中配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>spring.profiles.active=@sys.pro.type.active@</pre></td></tr></table></figure><p>pom.xml 配置：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>         <span class="token comment">&lt;!--id 唯一性比如：test 或 dev--></span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token comment">&lt;!-- 标签命名可以随意但是有意义比如环境就是 dev--></span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sys.pro.env</span><span class="token punctuation">></span></span>$&#123;profileActive&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sys.pro.env</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sys.pro.type</span><span class="token punctuation">></span></span>datasience<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sys.pro.type</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sys.pro.type.active</span><span class="token punctuation">></span></span>$&#123;profileActive&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sys.pro.type.active</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="启动时指定"><a class="anchor" href="#启动时指定">#</a> 启动时指定</h2><p>在执行有参启动时，可以再命名中进行指定要选用的配置文件，例如：</p><figure class="highlight bash"><figcaption data-lang="bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">java</span> <span class="token parameter variable">-jar</span> xx.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>test</pre></td></tr></table></figure><p>这个命名优先级是最高的，即使 application.properties 中已经配置 spring.profiles.active=dev，最终程序还是会用 application-test.properteis 配置文件。</p><h2 id="springprofilesinclude属性"><a class="anchor" href="#springprofilesinclude属性">#</a> spring.profiles.include 属性</h2><p>再进一步，对于开发环境，想 <mark>用不同的配置文件存储开发环境不同的配置</mark> ，例如：</p><p>application-dev1.properties 中存储 jdbc 信息</p><p>application-dev2.properties 中存储 ip，端口信息</p><p>即在启用 application-dev.properties 开发环境 (主) 配置文件时，<mark>同时启用</mark> application-dev1.properties 和 application-dev2.properties。那么，可以使用 spring.profiles.include 属性：<mark>同时启用其它的 profile</mark></p><h2 id="配置方法"><a class="anchor" href="#配置方法">#</a> 配置方法</h2><ol><li><p>若是 properties 文件：spring.profiles.include=dev1,dev2</p></li><li><p>若是 yaml 文件中</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">spring.profiles.include</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">-</span>dev1</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">-</span>dev2</pre></td></tr><tr><td data-num="4"></td><td><pre>或者：spring.profiles.include<span class="token punctuation">:</span>dev1<span class="token punctuation">,</span>dev2</pre></td></tr></table></figure></li></ol><h3 id="配置的位置和区别"><a class="anchor" href="#配置的位置和区别">#</a> 配置的位置和区别：</h3><ol><li>配置方式一：application.properies 中，配置 spring.profiles.active=dev 的同时指定 spring.profiles.include=dev1,dev2</li><li>配置方式二：application.properties 中，配置 spring.profiles.active=dev，application-dev.properties 中，配置 spring.profiles.indclude=dev1，dev2。使用 application-dev.properties 时自定就激活了 dev1，dev2 两个文件，不用再次指定。(个人认为第二种方法更好)</li></ol><h2 id="区别"><a class="anchor" href="#区别">#</a> 区别：</h2><ol><li><p>第一种方式启动时，控制台打印 The following profiles are active:dev1,dev2,dev</p></li><li><p>第二种方式启动时，控制台打印 The following profiles are active:dev, dev1,dev2</p><p>按照顺序， 后面的覆盖前面的</p></li></ol><h2 id="用示例来使用和区分"><a class="anchor" href="#用示例来使用和区分">#</a> 用示例来使用和区分</h2><p>在某个工程里，我依据开发，生产环境，以及它们要同时激活的配置，创建了多个配置，分别如下：</p><p>application-dev.properties 配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>my.name=dev</pre></td></tr><tr><td data-num="2"></td><td><pre>my.height=170</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#同时触发 dev1 和 dev2 的激活</span></pre></td></tr><tr><td data-num="5"></td><td><pre>spring.profiles.include=dev1<span class="token punctuation">,</span>dev2</pre></td></tr></table></figure><p>application-dev1.properties 配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>my.name=dev1</pre></td></tr><tr><td data-num="2"></td><td><pre>my.height=171</pre></td></tr></table></figure><p>application-dev2.properteis 配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>my.name=dev2</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#my.height=172</span></pre></td></tr></table></figure><p>application-prod.properties 配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>my.name=prod</pre></td></tr><tr><td data-num="2"></td><td><pre>my.height=180</pre></td></tr></table></figure><p>application-prod1.properties 配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>my.name=prod1</pre></td></tr><tr><td data-num="2"></td><td><pre>my.height=181</pre></td></tr></table></figure><p>application-prod2.properties 配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>my.name=prod2</pre></td></tr><tr><td data-num="2"></td><td><pre>my.height=182</pre></td></tr></table></figure><h2 id="测试一"><a class="anchor" href="#测试一">#</a> 测试一：</h2><p>在 application.properties 配置文件中，指定</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#激活的是开发环境配置文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre>spring.profiles.active=dev</pre></td></tr></table></figure><p>启动时不指定参数</p><p>结果：打印的内容为：姓名：dev2，身高：171</p><p>原因：</p><ol><li><p>先加载 application.properties</p></li><li><p>再加载 application-dev.properties</p><p>my.name=dev</p><p>my.height=170</p></li><li><p>加载 application-dev1.properties</p><p>my.name=dev1</p><p>my.height=171</p></li><li><p>加载 application-dev2.properties</p><p>my.name=dev2</p><p>my.height=171</p></li></ol><h2 id="测试二"><a class="anchor" href="#测试二">#</a> 测试二：</h2><p>在 application.properties 配置文件中，指定</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#激活的是生产环境配置文件</span></pre></td></tr><tr><td data-num="2"></td><td><pre>spring.profiles.active=prod</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">#同时触发 prod1 和 prod2 的激活</span></pre></td></tr><tr><td data-num="4"></td><td><pre>spring.profiles.include=prod1</pre></td></tr></table></figure><p>启动时不指定参数</p><p>结果：</p><p>The following profiles are active: prod1,prod2,prod</p><p>打印内容为：姓名：prod，身高：180</p><h2 id="测试四"><a class="anchor" href="#测试四">#</a> 测试四：</h2><p>在 application.properties 配置文件中，指定 my.height=185，且把 dev、dev1、dev2 里 my.height 配置都删掉，最终结果是：身高：185。（application.properties 会作那个最保底的配置文件）。<br />如果把 application.properties 里的 my.height 配置也删掉，那请求就得报错啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springprofilesactive和springprofilesinclude的使用区别&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#springprofilesactive和springprofilesinclude的使用区别&quot;&gt;#&lt;/a&gt; spr</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/"/>
    
    <category term="项目" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Java-Http请求工具类 http-request</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/httprequest/Java%20Http%20%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E7%B1%BB%20http-request/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/httprequest/Java%20Http%20%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7%E7%B1%BB%20http-request/</id>
    <published>2024-07-05T03:46:36.272Z</published>
    <updated>2024-07-05T03:47:27.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-http-请求工具类-http-request"><a class="anchor" href="#java-http-请求工具类-http-request">#</a> Java Http 请求工具类 http-request</h1><p>前言：</p><blockquote><p>在我们日常工作中，我们需要经常和第三方接口进行交互通信，很多时候我们都是使用 http 协议进行交互，java 原生自带对 http 的支持 (<span class="exturl" data-url="aHR0cDovL2phdmEubmV0">java.net</span>.*)，但是使用起来不太方便，除此之外，用的最多的就是 apache httpclient 工具包。但是个人使用这么久而言，感觉不管是原生的亦或是 httpclient，使用起来都不太顺手，也略显复杂</p></blockquote><p>在此推荐一个简单易用的类库：<strong><span class="exturl" data-url="aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vZ2l0aHViLmNvbS9rZXZpbnNhd2lja2kvaHR0cC1yZXF1ZXN0">http-request</span></strong></p><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHBzOi8vZ2l0aHViLmNvbS9rZXZpbnNhd2lja2kvaHR0cC1yZXF1ZXN0">https://github.com/kevinsawicki/http-request</span></p><h2 id="maven引入"><a class="anchor" href="#maven引入">#</a> maven 引入</h2><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.kevinsawicki<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>http-request<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="例子"><a class="anchor" href="#例子">#</a> 例子</h2><h3 id="发送一个get请求获取响应报文"><a class="anchor" href="#发送一个get请求获取响应报文">#</a> 发送一个 Get 请求获取响应报文</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Response was: "</span><span class="token operator">+</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="发送一个带查询参数的get请求获取响应报文"><a class="anchor" href="#发送一个带查询参数的get请求获取响应报文">#</a> 发送一个带查询参数的 Get 请求获取响应报文</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>写法<span class="token number">1</span>：</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token char">'q'</span><span class="token punctuation">,</span><span class="token string">"baseball gloves"</span><span class="token punctuation">,</span><span class="token string">"size"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// GET http://www.baidu.com?q=baseball%20gloves&amp;size=100</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>写法<span class="token number">2</span>：</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Map</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"baseball gloves"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>data<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token class-name">String</span> resp <span class="token operator">=</span><span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token function">form</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------response parameter:"</span> <span class="token operator">+</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>同理，发送<span class="token class-name">Post</span>请求只需把get方法换成<span class="token class-name">Post</span>即可。</pre></td></tr></table></figure><h3 id="发送请求上传附件"><a class="anchor" href="#发送请求上传附件">#</a> 发送请求上传附件</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">HttpRequest</span> request<span class="token operator">=</span><span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://google.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">part</span><span class="token punctuation">(</span><span class="token string">"status[body]"</span><span class="token punctuation">,</span><span class="token string">"Making a multipart request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">part</span><span class="token punctuation">(</span><span class="token string">"status[image]"</span><span class="token punctuation">,</span><span class="token function">newFile</span><span class="token punctuation">(</span><span class="token string">"/home/kevin/Pictures/ide.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Status was updated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="常用http请求配置"><a class="anchor" href="#常用http请求配置">#</a> 常用 http 请求配置</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://google.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 信任所有证书</span></pre></td></tr><tr><td data-num="3"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">trustAllCerts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 信任所有地址</span></pre></td></tr><tr><td data-num="5"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">trustAllHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 设置请求超时时间</span></pre></td></tr><tr><td data-num="7"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 设置读取超时时间</span></pre></td></tr><tr><td data-num="9"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>以上设置支持<span class="token class-name">Builder</span>模式</pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token class-name">String</span> resp <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trustAllCerts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trustAllHosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">.</span><span class="token function">form</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="配置http代理"><a class="anchor" href="#配置http代理">#</a> 配置 http 代理</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://google.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//Configure proxy</span></pre></td></tr><tr><td data-num="3"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">useProxy</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//Optional proxy basic authentication</span></pre></td></tr><tr><td data-num="5"></td><td><pre>request<span class="token punctuation">.</span><span class="token function">proxyBasic</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"p4ssw0rd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>此工具类方便易用，没有任何依赖库，源代码也只有一个类 HttpRequest，简洁明了，而且支持 Builder 模式链式调用。有兴趣的可以尝试使用，用过都说好，更多用法自行看官网例子。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-http-请求工具类-http-request&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#java-http-请求工具类-http-request&quot;&gt;#&lt;/a&gt; Java Http 请求工具类 http-request&lt;/h1&gt;
&lt;p&gt;前言：&lt;</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="httprequest" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/httprequest/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="httprequest" scheme="https://pigpigletsgo.github.io/tags/httprequest/"/>
    
  </entry>
  
  <entry>
    <title>pgsql从5张不同表查询字段数据并综合返回</title>
    <link href="https://pigpigletsgo.github.io/computer-science/blog/sql/sql-blog-2024-7-4-pgsql%E4%BB%8E5%E5%BC%A0%E4%B8%8D%E5%90%8C%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%B9%B6%E7%BB%BC%E5%90%88%E8%BF%94%E5%9B%9E/"/>
    <id>https://pigpigletsgo.github.io/computer-science/blog/sql/sql-blog-2024-7-4-pgsql%E4%BB%8E5%E5%BC%A0%E4%B8%8D%E5%90%8C%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%AD%97%E6%AE%B5%E6%95%B0%E6%8D%AE%E5%B9%B6%E7%BB%BC%E5%90%88%E8%BF%94%E5%9B%9E/</id>
    <published>2024-07-04T09:12:25.597Z</published>
    <updated>2024-07-04T09:29:19.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pgsql从5张不同表查询字段数据并综合返回"><a class="anchor" href="#pgsql从5张不同表查询字段数据并综合返回">#</a> pgsql 从 5 张不同表查询字段数据并综合返回</h1><p>编写的查询数据库表的 sql</p><p><mark>思路</mark>：从 5 张不同的表中，它们的结构大致相同。我们从 5 张表中拿到不同的字段的数据并返回</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>    cr<span class="token punctuation">.</span><span class="token keyword">YEAR</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>cr<span class="token punctuation">.</span>operating_income<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_operating_income<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>nr<span class="token punctuation">.</span>total_profit<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_total_profit<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>nr<span class="token punctuation">.</span>net_profit<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_net_profit<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>asset_liability_ratio<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_asset_liability_ratio<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>return_on_equity<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_return_on_equity<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>operate_cash_ratio<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_operate_cash_ratio<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>assets<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_assets<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>cf<span class="token punctuation">.</span>operating_activities_cash_flow<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_operating_activities_cash_flow<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">SUM</span><span class="token punctuation">(</span>dr<span class="token punctuation">.</span>liabilities<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> total_liabilities</pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">YEAR</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>operating_income<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> operating_income</pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        pro_va_mea_province_cash_flow_financing_income_costs_result</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">)</span> <span class="token keyword">AS</span> cr</pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">YEAR</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>total_profit<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> total_profit<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>net_profit<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> net_profit</pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        pro_va_mea_province_cost_profit_net_result</pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">)</span> <span class="token keyword">AS</span> nr <span class="token keyword">ON</span> cr<span class="token punctuation">.</span><span class="token keyword">YEAR</span> <span class="token operator">=</span> nr<span class="token punctuation">.</span><span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> </pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">YEAR</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>asset_liability_ratio<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> asset_liability_ratio<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>return_on_equity<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> return_on_equity<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>operate_cash_ratio<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> operate_cash_ratio<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>assets<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> assets<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>operating_activities_cash_flow<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> operating_activities_cash_flow</pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        pro_va_mea_province_equity_ratio_cash_flow</pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">)</span> <span class="token keyword">AS</span> cf <span class="token keyword">ON</span> cr<span class="token punctuation">.</span><span class="token keyword">YEAR</span> <span class="token operator">=</span> cf<span class="token punctuation">.</span><span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> </pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">YEAR</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token function">SUM</span><span class="token punctuation">(</span>liabilities<span class="token punctuation">)</span> :: <span class="token keyword">NUMERIC</span> <span class="token keyword">AS</span> liabilities</pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        pro_va_mea_province_liabilities_depreciation_result</pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">)</span> <span class="token keyword">AS</span> dr <span class="token keyword">ON</span> cr<span class="token punctuation">.</span><span class="token keyword">YEAR</span> <span class="token operator">=</span> dr<span class="token punctuation">.</span><span class="token keyword">YEAR</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    cr<span class="token punctuation">.</span><span class="token keyword">YEAR</span> </pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">ORDER</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    cr<span class="token punctuation">.</span><span class="token keyword">YEAR</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>返回 List&lt;Map&lt;String, Object&gt;&gt;<br /> 返回结果：</p><pre><code>[&#123;  year=2021,  total_net_profit=0.00,  total_asset_liability_ratio=0.00,  total_return_on_equity=0.00,  total_assets=0.00,  total_operating_activities_cash_flow=0.00,  total_liabilities=0.00,  total_operating_income=0.00,  total_total_profit=0.00,  total_operate_cash_ratio=0.00&#125;&#123;  year=2022,  total_net_profit=0.00,  total_asset_liability_ratio=0.00,  total_return_on_equity=0.00,  total_assets=0.00,  total_operating_activities_cash_flow=0.00,  total_liabilities=0.00,  total_operating_income=0.00,  total_total_profit=0.00,  total_operate_cash_ratio=0.00&#125;&#123;  year=2023,  total_net_profit=0.00,  total_asset_liability_ratio=0.00,  total_return_on_equity=0.00,  total_assets=0.00,  total_operating_activities_cash_flow=0.00,  total_liabilities=0.00,  total_operating_income=0.00,  total_total_profit=0.00,  total_operate_cash_ratio=0.00&#125;]</code></pre><p>对数据进行格式转换：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">formatAnnualEvaluation</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> annualEvaluation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> formattedData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">// 需要显示的字段列表</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token class-name">AnnualEvaluationF</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">AnnualEvaluationF</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">String</span> fielder <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> fielder<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token comment">// 遍历每个字段</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token comment">// 初始化一个 Map 用于存储当前字段的数据</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> fieldData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            fieldData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"field"</span><span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token comment">// 遍历每个年份，将当前字段的值按年份填充到 fieldData 中</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> annualEvaluation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token class-name">Integer</span> year <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token class-name">Object</span> value <span class="token operator">=</span> <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> entry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                fieldData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>year<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token comment">// 将当前字段的数据添加到 formattedData 中</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            formattedData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fieldData<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> formattedData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>[  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_asset_liability_ratio&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_net_profit&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_return_on_equity&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_assets&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_operating_activities_cash_flow&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_liabilities&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_operating_income&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_total_profit&quot;  &#125;,  &#123;    2023=0.00,    2022=0.00,    2021=0.00,    field=&quot;total_operate_cash_ratio&quot;  &#125;]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pgsql从5张不同表查询字段数据并综合返回&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pgsql从5张不同表查询字段数据并综合返回&quot;&gt;#&lt;/a&gt; pgsql 从 5 张不同表查询字段数据并综合返回&lt;/h1&gt;
&lt;p&gt;编写的查询数据库表的 sql&lt;/p&gt;
</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/"/>
    
    <category term="sql" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/sql/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="blog - sql" scheme="https://pigpigletsgo.github.io/tags/blog-sql/"/>
    
  </entry>
  
  <entry>
    <title>Predicate类基本使用详解</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Predicate%E7%B1%BB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Predicate%E7%B1%BB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-07-04T07:25:35.680Z</published>
    <updated>2024-07-04T07:26:33.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="predicate类基本使用详解"><a class="anchor" href="#predicate类基本使用详解">#</a> Predicate 类基本使用详解</h1><h2 id="一-基本方法"><a class="anchor" href="#一-基本方法">#</a> 一、基本方法</h2><p>test 方法主要用于参数符不符合规则。返回值 boolean</p><p>写法如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fourLetterLong1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">4</span> <span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>配合 Lambda filter 使用如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token string">"Lisp"</span><span class="token punctuation">,</span><span class="token string">"Hell"</span><span class="token punctuation">,</span><span class="token string">"opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fourLetterLong1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">4</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fourLetterLong1<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is:"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>this is: Scalathis is: Haskell</code></pre><h2 id="二-andpredicate-super-t-other"><a class="anchor" href="#二-andpredicate-super-t-other">#</a> 二、and (Predicate&lt;? super T&gt; other)</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>and 方法等同于我们的逻辑与 &amp;&amp; ，存在短路特性，需要所有条件都满足。第一个不满足则不走第二个</p><p>配置 Lambda filter 使用如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token string">"Lisp"</span><span class="token punctuation">,</span> <span class="token string">"Hell"</span><span class="token punctuation">,</span> <span class="token string">"opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> startsWith <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Haskell"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>startsWith<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is: "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>this is: Haskell</code></pre><h2 id="三-orpredicate-super-t-other"><a class="anchor" href="#三-orpredicate-super-t-other">#</a> 三、or (Predicate&lt;? super T&gt; other)</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">default</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">return</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">||</span> other<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>or 等同于我们的逻辑或 ||，多个条件只要满足一个即可。第一个满足则不走第二个</p><p>配合 Lambda filter 使用如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token string">"Lisp"</span><span class="token punctuation">,</span> <span class="token string">"Hell"</span><span class="token punctuation">,</span> <span class="token string">"opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fourLetterLong1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> startsWith <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>         <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"zzz"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>   names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fourLetterLong1<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>startsWith<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is:"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>this is: Scalathis is: Haskell</code></pre><h2 id="四-negate方法"><a class="anchor" href="#四-negate方法">#</a> 四、negate () 方法</h2><p>negate 等同于我们的逻辑非！。对条件进行取反判断</p><p>配合 Lambda filter 使用如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token string">"Lisp"</span><span class="token punctuation">,</span> <span class="token string">"Hell"</span><span class="token punctuation">,</span> <span class="token string">"opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> fourLetterLong1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>   names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fourLetterLong1<span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is:"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>this is:Javathis is:C++this is:Lispthis is:Hellthis is:opt</code></pre><h2 id="五-isequalobject-targetref方法"><a class="anchor" href="#五-isequalobject-targetref方法">#</a> 五、isEqual (Object targetRef) 方法</h2><p>isEqual 类似于 equals () 区别在于：先判断对象是否为 NULL，不为 NULL 再使用 equals () 方法进行比较</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token class-name">Object</span> targetRef<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> targetRef<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token operator">?</span> <span class="token class-name">Objects</span><span class="token operator">::</span><span class="token function">isNull</span></pre></td></tr><tr><td data-num="4"></td><td><pre>         <span class="token operator">:</span> object <span class="token operator">-></span> targetRef<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>配合 Lambda filter 使用如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token string">"Lisp"</span><span class="token punctuation">,</span> <span class="token string">"Hell"</span><span class="token punctuation">,</span> <span class="token string">"opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> isEqual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token keyword">return</span> <span class="token class-name">Predicate</span><span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEqual<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is:"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>this is:Java</code></pre><h2 id="六-扩展"><a class="anchor" href="#六-扩展">#</a> 六、扩展</h2><p>使用 Lambda 新特性和 String 类中的方法，多条件查询</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Scala"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Haskell"</span><span class="token punctuation">,</span> <span class="token string">"Lisp"</span><span class="token punctuation">,</span> <span class="token string">"Hell"</span><span class="token punctuation">,</span> <span class="token string">"opt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token comment">// 长度为 7</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> length <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> n<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token comment">//endsWith 方法字符串是否以指定的前缀开头。</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> startsWith <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> n<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token comment">//endsWith 字符串是否以指定的后缀结尾。</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> endsWith <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> n<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> isEqual <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span><span class="token class-name">Predicate</span><span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token string">"Haskell"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   names<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>length<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>startsWith<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>endsWith<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>isEqual<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is:"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>this is:Javathis is:Haskell</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;predicate类基本使用详解&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#predicate类基本使用详解&quot;&gt;#&lt;/a&gt; Predicate 类基本使用详解&lt;/h1&gt;
&lt;h2 id=&quot;一-基本方法&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#一</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>HMAC算法以及工作原理</title>
    <link href="https://pigpigletsgo.github.io/computer-science/blog/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%B7%A5%E5%85%B7/HMAC%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>https://pigpigletsgo.github.io/computer-science/blog/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%B7%A5%E5%85%B7/HMAC%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</id>
    <published>2024-06-15T12:07:00.228Z</published>
    <updated>2024-06-15T12:07:47.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hmac算法以及工作原理"><a class="anchor" href="#hmac算法以及工作原理">#</a> HMAC 算法以及工作原理</h1><h2 id="一-消息认证码mac简介"><a class="anchor" href="#一-消息认证码mac简介">#</a> 一、消息认证码 (MAC) 简介</h2><p>消息认证码 (Message Authentication Code，简称 MAC)，是密码学中的一个关键概念，主要用于确保信息在传输或存储过程中的完整性，同时提供对信息来源的身份验证。这是一种防止信息在未经授权的情况下被篡改的重要手段。</p><p>MAC 算法的核心在于它采用了一种特定的加密方式，这种方式也依赖于一个只有通信双方知道的秘钥。这意味着，即使攻击者能够截获到传输的信息，只要他们没有这个秘钥，就无法生成有效的 MAC 值，也无法对信息进行篡改而不被发现。</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240615183118453.png" alt="image-20240615183118453" /></p><h3 id="mac的主要特性包括"><a class="anchor" href="#mac的主要特性包括">#</a> MAC 的主要特性包括</h3><ol><li>完成性：MAC 能确保信息的完整性，即信息在传输或存储过程中没有被篡改。这是通过对此接收到的 MAC 值和重新计算的 MAC 值来实现的。如果两者相同，那么信息就被认为是完整的。</li><li>认证：MAC 能提供对信息来源的身份验证。因为只有知道秘钥的实体才能生成有效的 MAC 值，所以接收者可以通过验证 MAC 值来确认信息来源。</li><li>秘钥依赖性：MAC 值的计算依赖于秘钥，不同的秘钥会产生不同的 MAC 值。这增加了攻击者伪造有效 MAC 值的难度。</li></ol><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240615183425944.png" alt="image-20240615183425944" /></p><p>MAC 被广泛应用于网络通信、数据存储、电子商务等领域，以保护数据的安全性和可靠性。例如，在网络通信中，MAC 可以防止数据被篡改或冒充，确保数据的完整性和真实性；在数据存储中，MAC 可以防止数据被篡改或删除，保护数据的完整性和可靠性；在电商中，MAC 可以确保交易数据的完整性和真实性，防止数据被篡改或冒充，保护用户的隐私和安全。</p><h2 id="二-hmacsha1算法"><a class="anchor" href="#二-hmacsha1算法">#</a> 二、HmacSHA1 算法</h2><p>HmacSHA1 是一种结合了密钥与 SHA-1 哈希函数的消息认证码（MAC）算法。与 HmacMD5 类似，HmacSHA1 旨在通过引入密钥来增强 SHA-1 算法的安全性，以提供数据的完整性和身份验证。由于 SHA-1 相较于 MD5 具有更高的安全性，HmacSHA1 也被广泛认为是一种更安全的消息认证码算法。</p><p>SHA-1（Secure Hash Algorithm 1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦资料处理标准（FIPS）。SHA-1 可以生成一个被称为消息摘要的 160 位（20 字节）散列值，散列值通常的呈现形式为 40 个十六进制数。</p><h3 id="hmacsha1算法的工作原理"><a class="anchor" href="#hmacsha1算法的工作原理">#</a> HmacSHA1 算法的工作原理</h3><h4 id="1-秘钥处理"><a class="anchor" href="#1-秘钥处理">#</a> 1、秘钥处理：</h4><p>HmacSHA1 算法首先会对密钥进行处理，以确保其长度符合算法的要求。通常，密钥会被填充至 64 字节（512 位）的长度。<br />如果密钥长度小于 64 字节，算法会在密钥的末尾填充 0，直到达到所需的长度。<br />如果密钥长度大于 64 字节，算法会使用 SHA-1 哈希函数对密钥进行哈希处理，得到一个固定长度（20 字节，160 位）的哈希值，然后将其作为实际的密钥使用。</p><h4 id="2-秘钥划分与填充"><a class="anchor" href="#2-秘钥划分与填充">#</a> 2、秘钥划分与填充：</h4><p>与 HmacMD5 类似，处理后的密钥会被划分为两个等长的子密钥，但由于 SHA-1 的块大小是 512 位（64 字节），这两个子密钥实际上是通过对原始密钥与特定的填充常量（如 ipad 和 opad）进行异或运算得到的。<br />ipad（内部填充常量）和 opad（外部填充常量）是特定的字节序列，用于与密钥进行异或运算，以生成两个新的密钥：K1（内部密钥）和 K2（外部密钥）。</p><h4 id="3-消息处理与哈希计算"><a class="anchor" href="#3-消息处理与哈希计算">#</a> 3、消息处理与哈希计算：</h4><p>消息在进行哈希之前，会被划分为多个块，每个块的大小与 SHA-1 算法的输入块大小相同（512 位）。最后一个块可能需要按照特定的方式进行填充。<br />对于每个消息块，算法会将其与子密钥 K1 一起作为输入，进行 SHA-1 哈希计算，得到一个中间哈希值。<br />然后，算法会取所有中间哈希值的串联（对于多个消息块的情况），与子密钥 K2 一起作为输入，进行另一次 SHA-1 哈希计算。最终得到的哈希值就是消息的 HmacSHA1 值。</p><h4 id="4-安全性考虑"><a class="anchor" href="#4-安全性考虑">#</a> 4、安全性考虑：</h4><p>HmacSHA1 算法结合了 SHA-1 哈希函数的不可逆性和密钥作为干扰项的特点，使得攻击者无法轻易伪造出有效的 HmacSHA1 值。即使攻击者截获了消息和对应的 HmacSHA1 值，没有密钥的情况下也无法对消息进行篡改而不被发现。</p><p>然而，需要注意的是，近年来对 SHA-1 的安全性也提出了一些质疑，特别是关于其潜在的碰撞性攻击风险。虽然在实际应用中尚未出现成功的攻击案例，但为了安全起见，许多组织已经开始逐步淘汰 SHA-1 和 HmacSHA1，转向使用更安全的哈希函数和相应的 Hmac 算法（如 SHA-256 和 HmacSHA256）。</p><h2 id="三-hmacmd5算法"><a class="anchor" href="#三-hmacmd5算法">#</a> 三、HmacMD5 算法</h2><p>HmacMD5 是一种结合了密钥与 MD5 哈希函数的消息认证码（MAC）算法。它旨在通过引入密钥来增强 MD5 算法的安全性，从而提供数据的完整性和身份验证。HmacMD5 广泛应用于网络通信和数据存储等领域，以确保数据的机密性和完整性。</p><h3 id="hmacmd5算法的工作原理"><a class="anchor" href="#hmacmd5算法的工作原理">#</a> HmacMD5 算法的工作原理</h3><h4 id="1-秘钥处理-2"><a class="anchor" href="#1-秘钥处理-2">#</a> 1、秘钥处理：</h4><p>HmacMD5 算法首先会对密钥进行处理，以确保其长度符合算法的要求。通常，密钥会被填充至 64 字节（512 位）的长度。<br />如果密钥长度小于 64 字节，算法会在密钥的末尾填充 0，直到达到所需的长度。<br />如果密钥长度大于 64 字节，算法会使用 MD5 哈希函数对密钥进行哈希处理，得到一个固定长度（16 字节，128 位）的哈希值，然后将其作为实际的密钥使用。</p><h4 id="2-秘钥划分"><a class="anchor" href="#2-秘钥划分">#</a> 2、秘钥划分：</h4><p>经过处理的密钥会被划分为两个等长的子密钥，分别称为 K1 和 K2。<br />如果密钥是原始密钥的哈希值（16 字节），则 K1 是原始密钥与 ipad（一个特定的常量）的逐位异或结果，K2 是原始密钥与 opad（另一个特定的常量）的逐位异或结果。</p><h4 id="3-消息处理"><a class="anchor" href="#3-消息处理">#</a> 3、消息处理：</h4><p>消息在进行哈希之前，通常会被划分为多个块，每个块的大小与 MD5 算法的输入块大小相同（64 字节）。对于最后一个可能不足 64 字节的块，需要按照特定的方式进行填充，以确保其长度达到 64 字节。填充的内容包括一个 “1”、多个 “0” 以及原始消息的长度（以 64 位二进制数表示）。</p><h4 id="4-哈希计算"><a class="anchor" href="#4-哈希计算">#</a> 4、哈希计算：</h4><p>对于每个消息块，算法会将其与子密钥 K1 一起作为输入，计算出一个中间哈希值。这是通过将 K1 附加到消息块的前面或后面，并对整个输入应用 MD5 哈希函数来实现的。</p><p>然后，算法会取所有中间哈希值的串联（对于多个消息块的情况），与子密钥 K2 一起作为输入，进行另一次 MD5 哈希计算。最终得到的哈希值就是消息的 HmacMD5 值。</p><p>尽管 HmacMD5 算法通过引入密钥增强了 MD5 算法的安全性，但 MD5 算法本身存在已知的弱点，如潜在的碰撞性攻击风险。因此，在需要更高安全性的场景下，建议使用更安全的哈希函数和相应的 Hmac 算法，如 HmacSHA256。</p><h3 id="md5"><a class="anchor" href="#md5">#</a> MD5</h3><ul><li>MD5 信息摘要算法 (英语：MD5 Message-Digest Algorithm)，一种被广泛使用的密码散列函数，可以生产出一个 128 位 (16 字节) 的散列值 (hash value)，用于确保信息传输完整一致。</li><li>MD5 将任意长度的 &quot;字符串&quot; 变换成 128 位 (4 个 32 位) 的大整数，它是一个不可逆的数据转换过程。</li></ul><h4 id="md5算法步骤"><a class="anchor" href="#md5算法步骤">#</a> MD5 算法步骤</h4><h5 id="步骤1补位"><a class="anchor" href="#步骤1补位">#</a> 步骤 1：补位</h5><p>将原始数据转换为二进制看，先在尾补一个 1，再补 0，再补一个 64 位的原始数据长度 (单位 bit)，补完后数据位数长度为 512 的倍数；</p><p>注意：即便是这个数据的位数长度对 512 求模的结果正好是 448 也必须进行补位。总之，至少补 1 位，而最多可能补 512 位</p><h5 id="步骤2分组"><a class="anchor" href="#步骤2分组">#</a> 步骤 2：分组</h5><p>以 512 位分组，每组又分为 16 个 32 位的子分组 M [0] ~ M [15]</p><h5 id="步骤3每组计算"><a class="anchor" href="#步骤3每组计算">#</a> 步骤 3：每组计算</h5><ul><li><p>输入量</p><p>每个 512 bit 分组都要经历一次 4 轮的逻辑处理；</p><p>每 4 轮逻辑处理的输入量为：链接变量<mark> A，B，C，D</mark> 和每组的<mark> M [0] ~ M [15]</mark></p><p>四个链接变量 A，B，C，D 初始值为：</p><p>A = 0x12345678</p><p>B = 0x89ABCDEF</p><p>C = 0xFEDCBA98</p><p>D = 0x76543210</p><p>注意：初始的 A，B，C，D，4 个链接变量与每组的 M [0] ~ M [15] 在进入计算前要先经过 <mark>大小端处理</mark></p></li><li><p>定义 4 个非线性函数 F，G，H，I</p><p>每轮用一个非线性函数计算，即：</p><p>在第一轮中，M [0] ~ M [15] 分别代入到函数 F 中运算；</p><p>在第二轮中，M [0] ~ M [15] 分别代入到函数 G 中运算；</p><p>在第三轮中，M [0] ~ M [15] 分别代入到函数 H 中运算；</p><p>在第四轮中，M [0] ~ M [15] 分别代入到函数 I 中运算；</p><p>那么 4 轮一共会进行 16 * 4 = 64 此运算。</p></li><li><p>输出量</p><p>每一个 512bit 分组经过 4 轮的逻辑处理后，会得到四个 32 位的值 a，b，c，d；将它们分别加上输入时的链接变量的值，就会得到新的链接变量的值，此值再继续输入参与下一 512bit 分组的 4 轮逻辑处理；</p><p>A = a + A</p><p>B = b + B</p><p>C = c + C</p><p>D = d + D</p></li></ul><h5 id="步骤4最终结果输出"><a class="anchor" href="#步骤4最终结果输出">#</a> 步骤 4：最终结果输出</h5><p>经过了一系列的计算处理后，输出结果由 4 个 32 位数据组成，将这 4 个 32 位数据级联后将生成一个 128 位散列值，即为 MD5 值。</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240615185746826.png" alt="image-20240615185746826" /></p><p><strong>参考</strong>：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMzY1OTAwNDk=">https://zhuanlan.zhihu.com/p/136590049</span> HMAC 算法及其应用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hmac算法以及工作原理&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#hmac算法以及工作原理&quot;&gt;#&lt;/a&gt; HMAC 算法以及工作原理&lt;/h1&gt;
&lt;h2 id=&quot;一-消息认证码mac简介&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#一-消息认证码</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/"/>
    
    <category term="加密算法工具" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>数据库执行语句打印性能分析框架p6Spy的使用</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/mybatis/%E7%9F%A5%E8%AF%86%E7%82%B9/p6Spy/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/mybatis/%E7%9F%A5%E8%AF%86%E7%82%B9/p6Spy/</id>
    <published>2024-06-13T09:16:25.379Z</published>
    <updated>2024-06-13T10:35:34.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库执行语句打印-性能分析框架p6spy的使用"><a class="anchor" href="#数据库执行语句打印-性能分析框架p6spy的使用">#</a> 数据库执行语句打印、性能分析框架（p6Spy 的使用）</h1><h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2><blockquote><p>我们在调式程序难免要输出执行<span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1zcWwlRTglQUYlQUQlRTUlOEYlQTUmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw"> sql 语句</span>，可是使用 Mybatis 或者 JPA 等框架时，打印的的 sql 总是带着 <code>?</code>  占位符，不能直接在数据库执行并且不够直观。所以迫切需要一款专注打印可执行的 SQL 及执行时间的 sql 打印、性能分析框架 <code>p6Sql</code> 。</p></blockquote><h2 id="一-p6spy"><a class="anchor" href="#一-p6spy">#</a> 一、p6spy</h2><h3 id="1-介绍"><a class="anchor" href="#1-介绍">#</a> 1、介绍</h3><p>p6spy 是一个开源项目，通常使用它来跟踪数据库操作，查看程序运行过程中执行的 sql 语句。</p><p>官网地址：<span class="exturl" data-url="aHR0cHM6Ly9wNnNweS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvaW5zdGFsbC5odG1s">p6spy 官网</span></p><h3 id="2-原理"><a class="anchor" href="#2-原理">#</a> 2、原理</h3><p>p6spy 将应用的数据源给劫持了，应用操作数据库其实在调用 p6spy 的数据源，p6spy 劫持到需要执行的 sql 或者 hql 之类的语句之后，它自己去调用一个 realDatasource，再去操作数据库。</p><h3 id="3-应用场景"><a class="anchor" href="#3-应用场景">#</a> 3、应用场景</h3><p>p6spy 可以输出日志到文件中，控制台， 或者传递给 Log4j，而且还能配搭 SQL Profiler 或 IronTrackSQL 图形化监控 SQL 语句，监测到哪些语句的执行是耗时的，逐个优化。</p><h2 id="二-使用"><a class="anchor" href="#二-使用">#</a> 二、使用</h2><h3 id="1-引入依赖"><a class="anchor" href="#1-引入依赖">#</a> 1、引入依赖</h3><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="2-配置文件修改"><a class="anchor" href="#2-配置文件修改">#</a> 2、配置文件修改</h3><blockquote><ol><li>替换你的 JDBC Driver 为 com.p6spy.engine.spy.P6SpyDriver</li><li>在原来 url jdbc: 后面添加 p6spy：。如：jdbc:p6spy:mysql://127.0.0.1:3306 <code>或</code>  jdbc:p6spy:oracle:thin:@localhost:1521:ORCL</li><li>添加 p6spy 的配置文件 spy.properties</li></ol></blockquote><h3 id="3-简单的spyproperties"><a class="anchor" href="#3-简单的spyproperties">#</a> 3、简单的 spy.properties</h3><figure class="highlight properties"><figcaption data-lang=".properties"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key attr-name">module.log</span><span class="token punctuation">=</span><span class="token value attr-value">com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 自定义日志打印</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token key attr-name">logMessageFormat</span><span class="token punctuation">=</span><span class="token value attr-value">com.p6spy.engine.spy.appender.SingleLineFormat</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">#logMessageFormat=com.p6spy.engine.spy.appender.CustomLineFormat</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#customLogMessageFormat=%(currentTime) | SQL 耗时： %(executionTime) ms | 连接信息： %(category)-%(connectionId) | 执行语句： %(sql)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment"># 使用控制台记录 sql</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token key attr-name">appender</span><span class="token punctuation">=</span><span class="token value attr-value">com.p6spy.engine.spy.appender.StdoutLogger</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">## 配置记录 Log 例外</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token key attr-name">excludecategories</span><span class="token punctuation">=</span><span class="token value attr-value">info,debug,result,batc,resultset</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 设置使用 p6spy driver 来做代理</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token key attr-name">deregisterdrivers</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># 日期格式</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token key attr-name">dateformat</span><span class="token punctuation">=</span><span class="token value attr-value">yyyy-MM-dd HH:mm:ss</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment"># 实际驱动</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token key attr-name">driverlist</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 是否开启慢 SQL 记录</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token key attr-name">outagedetection</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment"># 慢 SQL 记录标准 秒</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token key attr-name">outagedetectioninterval</span><span class="token punctuation">=</span><span class="token value attr-value">2</span></pre></td></tr></table></figure><p>上面的的 <code>logMessageFormat</code>  是打印的格式 <code>SingleLineFormat</code>  最基础的配置是不会打印 sql 的。如果修改有两种方式：</p><h3 id="1-使用内置自定义格式化器customlineformat手动配置打印格式"><a class="anchor" href="#1-使用内置自定义格式化器customlineformat手动配置打印格式">#</a> 1、使用内置自定义格式化器 ( <code>CustomLineFormat</code> ) 手动配置打印格式</h3><p><strong>使用示例</strong>：</p><blockquote><ol><li>修改配置文件的格式化为自定义格式化 logMessageFormat=com.p6spy.engine.spy.appender.CustomLineFormat</li><li>配置文件中添加手动配置打印的格式，推荐示例：customLogMessageFormat=%(currentTime) | SQL 耗时： %(exceutionTime) ms | 连接信息： %(category)-%(connectionld) | 执行语句： %(sql)</li></ol></blockquote><h3 id="2-自己创建类实现messageformattingstrategy接口重写formatmessage方法即可"><a class="anchor" href="#2-自己创建类实现messageformattingstrategy接口重写formatmessage方法即可">#</a> 2、自己创建类实现 MessageFormattingStrategy 接口重写 formatMessage 方法即可</h3><p><strong>使用示例</strong>：</p><blockquote><ol><li>创建类 P6SpyLogger</li></ol></blockquote><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P6SpyLogger</span> <span class="token keyword">implements</span> <span class="token class-name">MessageFormattingStrategy</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="3"></td><td><pre>     * @Desc: 重写日志格式方法</pre></td></tr><tr><td data-num="4"></td><td><pre>     * now: 当前时间</pre></td></tr><tr><td data-num="5"></td><td><pre>     * elapsed: 执行耗时</pre></td></tr><tr><td data-num="6"></td><td><pre>     * category：执行分组</pre></td></tr><tr><td data-num="7"></td><td><pre>     * prepared：预编译 sql 语句</pre></td></tr><tr><td data-num="8"></td><td><pre>     * sql: 执行的真实 SQL 语句，已替换占位</pre></td></tr><tr><td data-num="9"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> connectionId<span class="token punctuation">,</span> <span class="token class-name">String</span> now<span class="token punctuation">,</span> <span class="token keyword">long</span> elapsed<span class="token punctuation">,</span> <span class="token class-name">String</span> category<span class="token punctuation">,</span> <span class="token class-name">String</span> prepared<span class="token punctuation">,</span> <span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sql<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"[ "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ] --- | took "</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token operator">+</span> elapsed <span class="token operator">+</span> <span class="token string">"ms | "</span> <span class="token operator">+</span> category <span class="token operator">+</span> <span class="token string">" | connection "</span> <span class="token operator">+</span> connectionId <span class="token operator">+</span> <span class="token string">"\n "</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">";"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><ol start="2"><li>将配置文件中的格式化器属性改为自己的类<br /> logMessageFormat=com.xxx.xxx.P6SpyLogger</li></ol></blockquote><h2 id="p6spy有3种日志输出方式"><a class="anchor" href="#p6spy有3种日志输出方式">#</a> p6spy 有 3 种日志输出方式</h2><pre><code>#（推荐）使用Slf4j输出 配合SpringBoot使用日志门面#appender=com.p6spy.engine.spy.appender.Slf4JLogger# 仅控制台输出#appender=com.p6spy.engine.spy.appender.StdoutLogger# 文件输出，使用内置日志输出到文件#appender=com.p6spy.engine.spy.appender.FileLogger</code></pre><h2 id="附录spyproperties详细说明"><a class="anchor" href="#附录spyproperties详细说明">#</a> 附录：spy.properties 详细说明</h2><figure class="highlight properties"><figcaption data-lang=".properties"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 指定应用的日志拦截模块，默认为 com.p6spy.engine.spy.P6SpyFactory</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#modulelist=com.p6spy.engine.spy.P6SpyFactory,com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 真实 JDBC driver , 多个以 逗号 分割 默认为空</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">#driverlist=</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 是否自动刷新 默认 flase</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">#autoflush=false</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># 配置 SimpleDateFormat 日期格式 默认为空</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">#dateformat=</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment"># 打印堆栈跟踪信息 默认 flase</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">#stacktrace=false</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment"># 如果 stacktrace=true，则可以指定具体的类名来进行过滤。</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">#stacktraceclass=</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment"># 监测属性配置文件是否进行重新加载</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">#reloadproperties=false</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment"># 属性配置文件重新加载的时间间隔，单位：秒 默认 60s</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">#reloadpropertiesinterval=60</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token comment"># 指定 Log 的 appender，取值：</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">#appender=com.p6spy.engine.spy.appender.StdoutLogger</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">#appender=com.p6spy.engine.spy.appender.FileLogger</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment"># 指定 Log 的文件名 默认 spy.log</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">#logfile=spy.log</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment"># 指定是否每次是增加 Log，设置为 false 则每次都会先进行清空 默认 true</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">#append=true</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment"># 指定日志输出样式  默认为 com.p6spy.engine.spy.appender.SingleLineFormat , 单行输出 不格式化语句</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">#logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment"># 也可以采用  com.p6spy.engine.spy.appender.CustomLineFormat 来自定义输出样式，默认值是 %(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token comment"># 可用的变量为:</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">#   %(connectionId)            connection id</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">#   %(currentTime)             当前时间</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">#   %(executionTime)           执行耗时</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token comment">#   %(category)                执行分组</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">#   %(effectiveSql)            提交的 SQL 换行</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token comment">#   %(effectiveSqlSingleLine)  提交的 SQL 不换行显示</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">#   %(sql)                     执行的真实 SQL 语句，已替换占位</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token comment">#   %(sqlSingleLine)           执行的真实 SQL 语句，已替换占位 不换行显示</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">#customLogMessageFormat=%(currentTime)|%(executionTime)|%(category)|connection%(connectionId)|%(sqlSingleLine)</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment"># date 类型字段记录日志时使用的日期格式 默认 dd-MMM-yy</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">#databaseDialectDateFormat=dd-MMM-yy</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment"># boolean 类型字段记录日志时使用的日期格式 默认 boolean 可选值 numeric</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">#databaseDialectBooleanFormat=boolean</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment"># 是否通过 jmx 暴露属性 默认 true</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">#jmx=true</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment"># 如果 jmx 设置为 true 指定通过 jmx 暴露属性时的前缀 默认为空</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment"># com.p6spy(.&lt;jmxPrefix>)?:name=&lt;optionsClassName></span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token comment">#jmxPrefix=</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment"># 是否显示纳秒 默认 false</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token comment">#useNanoTime=false</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment"># 实际数据源 JNDI</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">#realdatasource=/RealMySqlDS</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token comment"># 实际数据源 datasource class</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token comment">#realdatasourceclass=com.mysql.jdbc.jdbc2.optional.MysqlDataSource</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment"># 实际数据源所携带的配置参数 以 k=v 方式指定 以 分号 分割</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token comment">#realdatasourceproperties=port;3306,serverName;myhost,databaseName;jbossdb,foo;bar</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre><span class="token comment"># jndi 数据源配置</span></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment"># 设置 JNDI 数据源的 NamingContextFactory。</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token comment">#jndicontextfactory=org.jnp.interfaces.NamingContextFactory</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token comment"># 设置 JNDI 数据源的提供者的 URL。</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token comment">#jndicontextproviderurl=localhost:1099</span></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token comment"># 设置 JNDI 数据源的一些定制信息，以分号分隔。</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token comment">#jndicontextcustom=java.naming.factory.url.pkgs;org.jboss.naming:org.jnp.interfaces</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token comment"># 是否开启日志过滤 默认 false， 这项配置是否生效前提是配置了 include/exclude/sqlexpression</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token comment">#filter=false</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token comment"># 过滤 Log 时所包含的表名列表，以逗号分隔 默认为空</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token comment">#include=</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token comment"># 过滤 Log 时所排除的表名列表，以逗号分隔 默认为空</span></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token comment">#exclude=</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token comment"># 过滤 Log 时的 SQL 正则表达式名称  默认为空</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token comment">#sqlexpression=</span></pre></td></tr><tr><td data-num="92"></td><td><pre></pre></td></tr><tr><td data-num="93"></td><td><pre><span class="token comment">#显示指定过滤 Log 时排队的分类列表，取值: error, info, batch, debug, statement,</span></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">#commit, rollback, result and resultset are valid values</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token comment"># (默认 info,debug,result,resultset,batch)</span></pre></td></tr><tr><td data-num="96"></td><td><pre><span class="token comment">#excludecategories=info,debug,result,resultset,batch</span></pre></td></tr><tr><td data-num="97"></td><td><pre></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token comment"># 是否过滤二进制字段</span></pre></td></tr><tr><td data-num="99"></td><td><pre><span class="token comment"># (default is false)</span></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token comment">#excludebinary=false</span></pre></td></tr><tr><td data-num="101"></td><td><pre></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token comment"># P6Log 模块执行时间设置，整数值 (以毫秒为单位)，只有当超过这个时间才进行记录 Log。 默认为 0</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token comment">#executionThreshold=</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token comment"># P6Outage 模块是否记录较长时间运行的语句 默认 false</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token comment"># outagedetection=true|false</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token comment"># P6Outage 模块执行时间设置，整数值 （以秒为单位)），只有当超过这个时间才进行记录 Log。 默认 30s</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token comment"># outagedetectioninterval=integer time (seconds)</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库执行语句打印-性能分析框架p6spy的使用&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#数据库执行语句打印-性能分析框架p6spy的使用&quot;&gt;#&lt;/a&gt; 数据库执行语句打印、性能分析框架（p6Spy 的使用）&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/tags/mybatis/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis工具类MetaObject与MetaClass</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/mybatis/%E7%9F%A5%E8%AF%86%E7%82%B9/MyBatis%E5%B7%A5%E5%85%B7%E7%B1%BBMetaObject%E4%B8%8EMetaClass/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/mybatis/%E7%9F%A5%E8%AF%86%E7%82%B9/MyBatis%E5%B7%A5%E5%85%B7%E7%B1%BBMetaObject%E4%B8%8EMetaClass/</id>
    <published>2024-06-11T11:48:16.765Z</published>
    <updated>2024-06-11T11:49:02.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis工具类metaobject与metaclass"><a class="anchor" href="#mybatis工具类metaobject与metaclass">#</a> MyBatis 工具类 MetaObject 与 MetaClass</h1><h2 id="metaobject"><a class="anchor" href="#metaobject">#</a> MetaObject</h2><p>MetaObject 是 MyBatis 反射工具类，通过 MetaObject 获取和设置对象的属性值</p><h2 id="metaobject主要方法"><a class="anchor" href="#metaobject主要方法">#</a> MetaObject 主要方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>hashGetter(name)</td><td>判断是否有属性 name 或 name 的 getter 方法。&lt;br /&gt; 若定义 userId，没定义 getUserId () 方法，hasGetter (&quot;userId&quot;) 则返回 true；&lt;br /&gt; 若定义方法 getUserId1 ()，没定义属性 userId1，hasGetter (&quot;userId1&quot;) 则返回 true。</td></tr><tr><td>getGetterNames()</td><td>获取含有 getter 相关的属性名称。&lt;br /&gt; 若定义 userId，没定义 getUserId () 方法，则 userId 会被返回；&lt;br /&gt; 若定义方法 getUserId1 ()，没定义属性 userId1, 则 userId1 会被返回。</td></tr><tr><td>getGetterType(name)</td><td>获取 getter 方法的返回类型。</td></tr><tr><td>getValue(name)</td><td>获取属性值。</td></tr><tr><td>hasSetter(name)</td><td>判断是否有属性 name 或 name 的 setter 方法。&lt;br /&gt; 若定义 userId，没定义 setUserId (userId) 方法，hasSetter (&quot;userId&quot;) 则返回 true；&lt;br /&gt; 若定义方法 setUserId1 (userId1)，没定义属性 userId1，hasSetter (&quot;userId1&quot;) 则返回 true。</td></tr><tr><td>getSetterNames()</td><td>获取含有 setter 相关的属性名称。&lt;br /&gt; 若定义 userId，没定义 setUserId (userId) 方法，则 userId 会被返回；&lt;br /&gt; 若定义方法 setUserId1 (userId1)，没定义属性 userId1, 则 userId1 会被返回。</td></tr><tr><td>getSetterType(name)</td><td>获取 setter 方法的参数类型。</td></tr><tr><td>setValue(name, value)</td><td>设置属性值。</td></tr></tbody></table><h3 id="备注"><a class="anchor" href="#备注">#</a> 备注</h3><p>跟 getter 相关的 name，为属性名称 或 isXXX () /getXXX () 中的 XXX 部分 (首字母小写)</p><p>跟 setter 相关的 name，为属性名称 或 setXXX () 中的 XXX 部分 (首字母小写)</p><h2 id="相关例子"><a class="anchor" href="#相关例子">#</a> 相关例子</h2><p>接下来我们通过例子讲解如何通过 MetaObject 获取和设置对象属性。</p><h3 id="创建一个metaobject对象"><a class="anchor" href="#创建一个metaobject对象">#</a> 创建一个 MetaObject 对象</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="判断是否有getter方法"><a class="anchor" href="#判断是否有getter方法">#</a> 判断是否有 getter 方法</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取含有getter方法的属性名"><a class="anchor" href="#获取含有getter方法的属性名">#</a> 获取含有 getter 方法的属性名</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">getGetterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取getter方法的返回类型"><a class="anchor" href="#获取getter方法的返回类型">#</a> 获取 getter 方法的返回类型</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">getGetterType</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取值"><a class="anchor" href="#获取值">#</a> 获取值</h3><p>eg：获取 Person 列表中第一个 Person 的 personName</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"persons[0].personName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="判断是否有setter方法"><a class="anchor" href="#判断是否有setter方法">#</a> 判断是否有 setter 方法</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">hasSetter</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取含有setter方法的属性名"><a class="anchor" href="#获取含有setter方法的属性名">#</a> 获取含有 setter 方法的属性名</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">getSetterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取setter方法的参数类型"><a class="anchor" href="#获取setter方法的参数类型">#</a> 获取 setter 方法的参数类型</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">getSetterType</span><span class="token punctuation">(</span><span class="token string">"companyName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="设置值"><a class="anchor" href="#设置值">#</a> 设置值</h3><p>eg：将 Person 列表中第一个 Person 的 personName 设置为 &quot;小马&quot;</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"persons[0].personName"</span><span class="token punctuation">,</span> <span class="token string">"小马"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="meataclass"><a class="anchor" href="#meataclass">#</a> MeataClass</h2><p>与 MetaObject 不同的是，MetaObject 用于获取和设置对象的属性值，而 MetaClass 则用于获取类相关的信息。</p><h2 id="metaclass主要方法"><a class="anchor" href="#metaclass主要方法">#</a> MetaClass 主要方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>静态方法 forClass (type, reflectorFactory)</td><td>创建 MetaClass 对象</td></tr><tr><td>hasDefaultConstructor()</td><td>判断是否有默认构造方法</td></tr><tr><td>hasGetter(name)</td><td>判断是否有属性 name 或 name 的 getter 方法。与 MetaObject 判断类似。</td></tr><tr><td>getGetterNames()</td><td>获取含有 getter 相关的属性名称。与 MetaObject 判断类似。</td></tr><tr><td>getGetInvoker(name)</td><td>name 的 getter 方法的 Invoker。</td></tr><tr><td>hasSetter(name)</td><td>判断是否有属性 name 或 name 的 setter 方法。与 MetaObject 判断类似。</td></tr><tr><td>getSetterNames()</td><td>获取含有 setter 相关的属性名称。与 MetaObject 判断类似。</td></tr><tr><td>getSetterType(name)</td><td>获取 setter 方法的参数类型。与 MetaObject 判断类似。</td></tr><tr><td>getSetInvoker(name)</td><td>name 的 setter 方法的 Invoker。</td></tr></tbody></table><h3 id="备注-2"><a class="anchor" href="#备注-2">#</a> 备注</h3><ul><li>跟 getter 相关的 name，为属性名称 或 isXXX ()/getXXX () 中的 xXX 部分（首字母小写）</li><li>跟 setter 相关的 name，为属性名称 或 setXXX () 中的 xXX 部分（首字母小写）</li></ul><h2 id="相关例子-2"><a class="anchor" href="#相关例子-2">#</a> 相关例子</h2><h3 id="创建一个metaclass对象"><a class="anchor" href="#创建一个metaclass对象">#</a> 创建一个 MetaClass 对象</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">MetaClass</span> metaClass <span class="token operator">=</span> <span class="token class-name">MetaClass</span><span class="token punctuation">.</span><span class="token function">forClass</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultReflectorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="判断是否有默认构造方法"><a class="anchor" href="#判断是否有默认构造方法">#</a> 判断是否有默认构造方法</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">hasDefaultConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="判断是否有getter方法-2"><a class="anchor" href="#判断是否有getter方法-2">#</a> 判断是否有 getter 方法</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">"personName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取含有getter方法的属性名-2"><a class="anchor" href="#获取含有getter方法的属性名-2">#</a> 获取含有 getter 方法的属性名</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">getGetterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取getter方法的返回类型-2"><a class="anchor" href="#获取getter方法的返回类型-2">#</a> 获取 getter 方法的返回类型</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">getGetterType</span><span class="token punctuation">(</span><span class="token string">"personName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取值-2"><a class="anchor" href="#获取值-2">#</a> 获取值</h3><p>eg：person 的 personName</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Invoker</span> invoker <span class="token operator">=</span> metaClass<span class="token punctuation">.</span><span class="token function">getGetInvoker</span><span class="token punctuation">(</span><span class="token string">"personName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Object</span> personName <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="判断是否有setter方法-2"><a class="anchor" href="#判断是否有setter方法-2">#</a> 判断是否有 setter 方法</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">hasSetter</span><span class="token punctuation">(</span><span class="token string">"personName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取含有setter方法的属性名-2"><a class="anchor" href="#获取含有setter方法的属性名-2">#</a> 获取含有 setter 方法的属性名</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">getSetterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="获取setter方法的参数类型-2"><a class="anchor" href="#获取setter方法的参数类型-2">#</a> 获取 setter 方法的参数类型</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>metaClass<span class="token punctuation">.</span><span class="token function">getSetterType</span><span class="token punctuation">(</span><span class="token string">"personName"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="设置值-2"><a class="anchor" href="#设置值-2">#</a> 设置值</h3><p>eg：person 的 personName 设置为 &quot;小马&quot;</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Invoker</span> invoker <span class="token operator">=</span> metaClass<span class="token punctuation">.</span><span class="token function">getSetInvoker</span><span class="token punctuation">(</span><span class="token string">"personName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"小马"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mybatis工具类metaobject与metaclass&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mybatis工具类metaobject与metaclass&quot;&gt;#&lt;/a&gt; MyBatis 工具类 MetaObject 与 MetaClass&lt;/h</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/tags/mybatis/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>B端与C端的区别</title>
    <link href="https://pigpigletsgo.github.io/essay/B%E7%AB%AF%E4%B8%8EC%E7%AB%AF%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>https://pigpigletsgo.github.io/essay/B%E7%AB%AF%E4%B8%8EC%E7%AB%AF%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</id>
    <published>2024-06-11T02:58:28.891Z</published>
    <updated>2024-06-11T02:59:18.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="b端与c端的区别"><a class="anchor" href="#b端与c端的区别">#</a> B 端与 C 端的区别</h1><p>B 端：Business，通常为企业内部或商家使用的系统或平台。如：企业内部 ERP 管理系统，财务管理平台等。</p><p>C 端：Consumber (也可理解为 Constomber)，通常为消费者，个人终端用户使用的客户端。</p><p>B 端与 C 端的区别有很多，本文我们将从双方的定义，产品特性，产品设计和产品运营方面来阐述 B 端与 C 端的区别</p><h3 id="一-b端和c端的定义"><a class="anchor" href="#一-b端和c端的定义">#</a> 一、B 端和 C 端的定义</h3><p>B 端：B 端，代表企业用户商家，英文是 Business，是互联网产品中的商家界面 (即：管理平台)。用户通过它进行日常的商业活动，例如企业存库管理，销售统计，员工出勤考核等等。可以说，用来解决企业需求的产品，都是 B 端产品</p><p>C 端：Consumber (也可理解为 Constomer)，通常为消费者，个人终端用户使用的客户端。如：微信，淘宝，网易云音乐等。</p><h3 id="二-产品特性的差异和不同"><a class="anchor" href="#二-产品特性的差异和不同">#</a> 二、产品特性的差异和不同</h3><h4 id="1-所处行业与场景需求"><a class="anchor" href="#1-所处行业与场景需求">#</a> 1、所处行业与场景需求</h4><p>C 端产品并没有明显的行业特征，比如微信社交，淘宝购物，美团点餐，高德导航，更多的是满足了使用者在 &quot;生活场景&quot; 下的各种个人日常需求。</p><p>B 端产品通常行业特征相对明显，更多的是满足了企业相关用户在 &quot;工作场景&quot; 下完成协同工作的一些特定组织需求</p><h4 id="2-用户量级与类型"><a class="anchor" href="#2-用户量级与类型">#</a> 2、用户量级与类型</h4><p>C 端产品的用户量级大而广，用户可具体到每一个 &quot;终端个体&quot; ，一般称之为 &quot;用户&quot;</p><p>而 B 端产品的用户量级更小，相对也更垂直，用户类型通常是 &quot;组织群体&quot; ，包括决策者，管理者，普通员工，区别于一般 &quot;用户&quot;， 更多情况下是被称为 &quot;客户&quot;</p><h4 id="3-展示方式"><a class="anchor" href="#3-展示方式">#</a> 3、展示方式</h4><p>C 端产品通常以手机端为主，PC 端为次</p><p>B 端产品多数都集中在 PC 端使用，使用 &quot;左导航右内容&quot; 的布局</p><h4 id="4-盈利模式"><a class="anchor" href="#4-盈利模式">#</a> 4、盈利模式</h4><p>C 端产品打都免费开放给用户，在提供免费功能的基础上，再通过 &quot;拉新，留存，促活&quot; 等手段，转化其中一小部分用户。像漏斗模型一样，最终为服务付费的这部分用户为产品贡献了收益。这一切得益于 C 端产品大量级的用户规模，所以靠的是 &quot;规模经济&quot;</p><p>B 端产品没有用户量级上的优势，偏向于服务企业内部的工作协同，就需要为不同的生产关系和工作协作场景做个性化定制，靠企业对 &quot;定制付费&quot; 来获得收益</p><h3 id="三-产品设计的差异和不同"><a class="anchor" href="#三-产品设计的差异和不同">#</a> 三、产品设计的差异和不同</h3><h4 id="1-功能设计"><a class="anchor" href="#1-功能设计">#</a> 1、功能设计</h4><p>对于 C 端产品而言，需要至少有一个核心的主要功能点能满足用户的某一项诉求。围绕这个具体的核心功能，再去考虑附加更好的用户体验和增值服务。</p><p>B 端产品来说，要解决的主要是不同生产关系的协作沟通需求。在中心化的组织架构下，B 端产品需要满足不同层级和组织内外的协作沟通，功能呈现模块化。</p><h4 id="2-角色设计"><a class="anchor" href="#2-角色设计">#</a> 2、角色设计</h4><p>C 端产品的用户虽然大致需求一致，但每个人的身份，年龄，兴趣，偏好都不尽相同，这就要求产品经理从大众多端用户中抽象出样本特征，形成不同的用户画像，有针对性的满足各类人群的个性需求。</p><p>而 B 端产品的用户量级小，但用户角色众多 (决策者，管理者，普通员工) ，需要好好分析各角色的需求关注点，并做好角色分配和权限管理上的设计。</p><p>比如在 B 端产品中的用户中，有 &quot;决策者， 管理者，普通员工股&quot; 的区分。它们同样是 B 端产品的用户，但对产品的期望和关注点是不同的：</p><ul><li>决策者 (老板)：关注企业的总体效率和成本</li><li>管理者 (部门领导)：关注管理职责和工作成绩</li><li>普通员工 (使用用户)：关注软件是否简单易上手，能否减轻工作负担</li></ul><h4 id="3-视觉体验设计"><a class="anchor" href="#3-视觉体验设计">#</a> 3、视觉体验设计</h4><p>C 端产品需要兼顾 &quot;用户体验&quot; 和 &quot;商业化变现&quot; 的平衡，所以会额外重试在视觉体验上的设计。不仅要让用户有快速流畅的使用体验，更要用趣味性的设计引导用户自发地做社交分享</p><p>B 端产品需要满足用户集中精力完成具体的工作事项，不被打扰地进行严谨的流程操作。所以在视觉上多是保持干净简单的简介风</p><h3 id="四-产品运营的差异和不同"><a class="anchor" href="#四-产品运营的差异和不同">#</a> 四、产品运营的差异和不同</h3><h4 id="1-运营目标"><a class="anchor" href="#1-运营目标">#</a> 1、运营目标</h4><p>在相同转化率的前提下，想到得到分子的增长，分母必须要等比例的更多增长。C 端产品的盈利模式决定了想要创造更大的价值，就需要依靠持续的用户量级的增长</p><p>B 端产品相比 C 端，更看重看中稳定的专业能力，不求大起大落，只求不要出错，避免给企业带来损失</p><h4 id="2-运营策略"><a class="anchor" href="#2-运营策略">#</a> 2、运营策略</h4><p>C 端产品依靠大量级用户盈利模式，决定了 C 端产品需要利用 &quot;红包 ，优惠卷&quot;，精神奖励 等营销方式，以利益激励用户主动在线上进行 &quot;对外分享传播&quot; ，实现以不断新增的日活来加持自身体量</p><p>B 端产品有着天然的 &quot;封闭&quot; 特性，营销上也更传统，通常将线下 &quot;大型会议，峰会，行业展会&quot; 作为主要场地，近距离接近客户，通过树立行业级别内的 &quot;专业形象&quot; 来吸引企业客户的兴趣</p><h4 id="3-运营程度"><a class="anchor" href="#3-运营程度">#</a> 3、运营程度</h4><p>C 端产品早已将运营转化，并细化到各维度的运营了，比如运营的工种可以细分为 &quot;活动运营岗，用户运营岗，增长裂变岗，内容运营岗&quot; 等等。</p><p>B 端产品的运营往往不被重视，也没有 C 端那么专业化。在运营预算有限的情况下，通常是 &quot;运维多于运营&quot;，只集中精力关注用户对产品的认可度和系统问题的定位。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;b端与c端的区别&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#b端与c端的区别&quot;&gt;#&lt;/a&gt; B 端与 C 端的区别&lt;/h1&gt;
&lt;p&gt;B 端：Business，通常为企业内部或商家使用的系统或平台。如：企业内部 ERP 管理系统，财务管理平台等。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="essay" scheme="https://pigpigletsgo.github.io/categories/essay/"/>
    
    
    <category term="文章" scheme="https://pigpigletsgo.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>PropertySource和ConfigurationProperties区别</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/spring/blog/@PropertySource%E5%92%8C@ConfigurationProperties%E5%8C%BA%E5%88%AB/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/spring/blog/@PropertySource%E5%92%8C@ConfigurationProperties%E5%8C%BA%E5%88%AB/</id>
    <published>2024-06-08T07:52:40.968Z</published>
    <updated>2024-06-11T03:00:41.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="propertysource和configurationproperties区别"><a class="anchor" href="#propertysource和configurationproperties区别">#</a> @PropertySource 和 @ConfigurationProperties 区别</h1><p>@ConfigurationProperties<br />@ConfigurationProperties 是 springboot 中注解，用于将主配置文件 (application.properties 或者 “application.yml” ) 中的属性，映射到实体类中对应的属性。<br />意思就是把主配置文件中配置属性设置到对应的 Bean 属性上。</p><p>常见使用方式：</p><ol><li>@ConfigurationProperties + @Component 注解到 bean 定义类上</li><li>@ConfigurationProperties + @Bean 注解在配置类的 bean 定义方法上</li><li>@ConfigurationProperties 注解到普通类然后通过 @EnableConfigurationProperties 定义为 bean</li></ol><p>@Bean,@Component 这种我们可以理解，两个注解都能标识一个 Bean.</p><p>@EnableConfigurationProperties 是如何让其成为一个 bean 的呢？</p><p><strong>@EnableConfigurationProperties 源码分析</strong>：<br />@EnableConfigurationProperties 注解会导入一个 EnableConfigurationPropertiesImportSelector 类，其 selectImports 方法返回的类，将注册为 beandefinition。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>获取<span class="token annotation punctuation">@EnableConfigurationProperties</span>的参数信息</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributes <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getAllAnnotationAttributes</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">EnableConfigurationProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> type <span class="token operator">=</span> attributes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>参数没有值<span class="token punctuation">,</span>注册<span class="token number">1</span>个</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> type<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">ConfigurationPropertiesBindingPostProcessorRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>参数有值，注册两个</pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">ConfigurationPropertiesBeanRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token class-name">ConfigurationPropertiesBindingPostProcessorRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>总的来说会注册两个类：</p><ul><li>ConfigurationPropertiesBindingPostProcessorRegistrar</li><li>ConfigurationPropertiesBeanRegistrar</li></ul><ol><li>ConfigurationPropertiesBindingPostProcessorRegistrar： 看名字我们也可以看出 ConfigurationPropertiesBindingPostProcessor 注册器，没错就是用来注册 ConfigurationPropertiesBindingPostProcessor 这个 BeanPostProcessor 的。BeanPostProcessor 会在创建 bean 的时候，被执行处理 Bean 相关信息。ConfigurationPropertiesBindingPostProcessor 这个 BeanPostProcessor 是就是用来解析 Bean 上的 @ConfigurationProperties 注解的。</li></ol><p>ConfigurationPropertiesBindingPostProcessor 会检查 Bean 是否有 @ConfigurationProperties，如果有就绑定相关配置属性到本 bean 的相关属性上。</p><ol start="2"><li>ConfigurationPropertiesBeanRegistrar： 看名字，ConfigurationPropertiesBean 注册器，ConfigurationPropertiesBeanRegistrar 是在 @ConfigurationProperties 的 value 属性有值的情况下注册的。<br />例如：</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">EurekaDashboardProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">InstanceRegistryProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>ConfigurationPropertiesBeanRegistrar 实现了 ImportBeanDefinitionRegistrar 接口，所以他的 registerBeanDefinitions 方法，也会注册 Bean. 注册就是 @EnableConfigurationProperties 的 value 值，例如例子中 EurekaDashboardProperties.class,InstanceRegistryProperties.class</p><p>由此我们可以看出：<br />@Component， @Bean , ConfigurationPropertiesBeanRegistrar 都是为了告诉 spring，对应的类是一个 Bean，spring 要去加载，解析，创建 Bean.<br /> 而 ConfigurationPropertiesBindingPostProcessor 的工作就是完成配置信息到 Bean 属性的绑定工作。</p><p>@EnableConfigurationProperties 的目的</p><ul><li>保证容器中有解析 ConfigurationProperties 注解的 BeanPostProcessor</li><li>向容器内注入 value 对应的 BeanDefinition</li></ul><blockquote><p>idea 中，在主配置文件 ctrl + 鼠标 能看到这对应的属性被哪个 @ConfigurationProperties 修饰的属性类使用</p></blockquote><p>@ConfigurationProperties 是针对主配置文件的。但是我们不想所有的配置都放到主配置文件中怎么办？？？？</p><p><strong>@PropertySource</strong><br />@PropertySource 是 spring 的注解<br />加载指定的属性文件的配置到 Spring 的 Environment 中。可以配合 @Value 和 @ConfigurationProperties 使用。</p><p>用法：</p><ol><li>@Configuration+ @PropertySource+Environment</li><li>@Configuration+ @PropertySource+@Value</li><li>@Configuration+ @PropertySource+@ConfigurationProperties</li></ol><p>@Configuration 本质也是告诉 spring 这是一个 bean.</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>my<span class="token punctuation">.</span>name<span class="token operator">=</span>helloworld</pre></td></tr><tr><td data-num="2"></td><td><pre>my<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">8</span></pre></td></tr></table></figure><p>@Configuration+ @PropertySource+Environment</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Configuration</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:hellword.properties"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token annotation punctuation">@Autowired</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Environment</span> env<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>@Configuration+ @PropertySource+@Value</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Configuration</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:hellword.properties"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>my<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>@Configuration+ @PropertySource+@ConfigurationProperties<br />@PropertySource 指定加载哪个文件，@ConfigurationProperties 指定加载文件中的哪一类属性。<br />@PropertySource+@ConfigurationProperties 在一起解决了 @ConfigurationProperties 只能加载主文件内属性问题。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Configuration</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:hellword.properties"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"my"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldConfig</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h4 id="总结"><a class="anchor" href="#总结">#</a> 总结：</h4><p>灵活利用这两个注解，能够把配置信息安排有层次感</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;propertysource和configurationproperties区别&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#propertysource和configurationproperties区别&quot;&gt;#&lt;/a&gt; @PropertySource 和</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="spring" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/blog/"/>
    
    
    <category term="springboot" scheme="https://pigpigletsgo.github.io/tags/springboot/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>idea生成注释</title>
    <link href="https://pigpigletsgo.github.io/tools/idea/idea%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A/"/>
    <id>https://pigpigletsgo.github.io/tools/idea/idea%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A/</id>
    <published>2024-06-07T12:08:48.343Z</published>
    <updated>2024-06-07T12:09:20.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="idea生成注释"><a class="anchor" href="#idea生成注释">#</a> idea 生成注释</h1><p>类的注释</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240607200549174.png" alt="image-20240607200549174" /></p><pre><code>/*** $&#123;description&#125;** @author: Gao Tianle** @date: $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;**/</code></pre><p>方法的注释</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240607200710657.png" alt="image-20240607200710657" /></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240607200725121.png" alt="image-20240607200725121" /></p><pre><code>/** *  * @param  * @return * @author Gao Tianle * @date $date$ $time$ */</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;idea生成注释&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#idea生成注释&quot;&gt;#&lt;/a&gt; idea 生成注释&lt;/h1&gt;
&lt;p&gt;类的注释&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://raw.githubusercontent.com/Pi</summary>
      
    
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/categories/tools/"/>
    
    <category term="idea" scheme="https://pigpigletsgo.github.io/categories/tools/idea/"/>
    
    
    <category term="idea" scheme="https://pigpigletsgo.github.io/tags/idea/"/>
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>配置接口文档Swagger和Knife4j教程</title>
    <link href="https://pigpigletsgo.github.io/tools/Interfacetesting/swaggerOrKnife4j/%E9%85%8D%E7%BD%AE%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3Swagger%E5%92%8CKnife4j%E6%95%99%E7%A8%8B/"/>
    <id>https://pigpigletsgo.github.io/tools/Interfacetesting/swaggerOrKnife4j/%E9%85%8D%E7%BD%AE%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3Swagger%E5%92%8CKnife4j%E6%95%99%E7%A8%8B/</id>
    <published>2024-06-06T06:55:46.581Z</published>
    <updated>2024-06-27T03:22:29.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="配置接口文档swagger和knife4j教程"><a class="anchor" href="#配置接口文档swagger和knife4j教程">#</a> 配置接口文档 Swagger 和 Knife4j 教程</h1><p>这里介绍了如何配置 <code>Swagger</code>  和 <code>Knife4j 3.0</code>  版本，强烈建议大家使用 <code>Knife4j</code> ，因为它的前身是 <code>swagger-bootstrap-ui</code> ，是在 <code>Swagger</code>  的基础上进行了界面的优化，使用起来比 <code>Swagger</code>  舒服了太多</p><h2 id="配置swagger"><a class="anchor" href="#配置swagger">#</a> 配置 Swagger</h2><p>首先在 pom.xml 中加入依赖</p><p>springboot 2.2.x 以下版本和 2.2.x 以上版本使用依赖不同</p><pre><code>&lt;!--如果使用的springboot是 2.2.x 以下版本，需要同时配置springfox-swagger2 和 springfox-swagger-ui--&gt; &lt;dependencies&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;&lt;/dependency&gt;    &lt;dependency&gt;     &lt;groupId&gt;io.springfox&lt;/groupId&gt;     &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;!-- 这是一个与Spring Boot 2.1.x兼容的版本 --&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;io.springfox&lt;/groupId&gt;     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;     &lt;version&gt;2.9.2&lt;/version&gt; &lt;!-- 保持与springfox-swagger2的版本一致 --&gt; &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><pre><code> &lt;!-- 如果使用的springboot是 2.2.x 以上版本，可以直接引入springfox-boot-starter--&gt;dependencies&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;version&gt;2.2.13.RELEASE&lt;/version&gt;&lt;/dependency&gt;    &lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>加入配置文件</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableOpenApi</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">ApiInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token annotation punctuation">@EnableOpenApi</span>   <span class="token comment">// 开启 Swagger 自定义接口文档</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token annotation punctuation">@Configuration</span>   <span class="token comment">// 相当于 Spring 配置中的 & lt;beans></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token comment">// 读取 yaml 中的配置</span></pre></td></tr><tr><td data-num="19"></td><td><pre>   <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;swagger.enable&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enable<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">// 相当于 Spring 配置中的 & lt;bean></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">createRestApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">OAS_30</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token comment">// 配置 swagger 是否生效</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>enable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ApiOperation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>     <span class="token comment">//           .apis (RequestHandlerSelectors.basePackage ("com.yourcompany.yourproject.controller")) // 替换为你的 controller 包路径  </span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// API 基础信息定义（就是更新 Swagger 默认页面上的信息）</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">ApiInfo</span> <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Swagger3接口文档测试"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"这里是文档描述"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"小盛"</span><span class="token punctuation">,</span> <span class="token string">"网址"</span><span class="token punctuation">,</span> <span class="token string">"邮箱"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"v1.0"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>创建一个 Controller</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/v2/user"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"分页查询"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"嘿嘿"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/haha"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"分页查询2"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打开网址 http://localhost:8080/swagger-ui/index.html 即可看到如下接口文档界面<br />其中 ip 和端口设置为你自己的即可</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606145007430.png" alt="image-20240606145007430" /></p><p>yaml 配置，如果上生产了需要禁用 swagger，则改为 false 即可：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#是否激活 swagger true or false</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">swagger</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr></table></figure><h2 id="配置knife4j强烈推荐"><a class="anchor" href="#配置knife4j强烈推荐">#</a> 配置<span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1LbmlmZTRqJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA=="> Knife4j</span>（强烈推荐）</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2MueGlhb21pbmZvLmNvbS9rbmlmZTRqL2RvY3VtZW50YXRpb24v">Knife4j 使用文档</span></p><pre><code>友情提示1、目前已经发行的Knife4j版本，Knife4j本身已经引入了springfox，开发者在使用时不用再单独引入Springfox的具体版本，否额会导致版本冲突。另外在网关层聚合(例如gateway)时，必须禁用Knife4j的增强模式2、使用Knife4j2.0.6及以上的版本，Spring Boot的版本必须大于等于2.2.x3、微服务聚合组件Knife4jAggregation强势发布，聚合OpenAPI文档太简单了,详见文档4、Knife4j独立运行版本Knife4jAggregationDesktop强势发布,使用Knife4j渲染OpenAPI文档很简单,详见文档</code></pre><p>pom.xml 加入依赖</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">&lt;!-- 跟 swagger 类似，支持 springboot 2.2.x 以上版本 --></span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">ApiInfoBuilder</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">PathSelectors</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">RequestHandlerSelectors</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Contact</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">DocumentationType</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">Docket</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">EnableSwagger2WebMvc</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token annotation punctuation">@Configuration</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token annotation punctuation">@EnableSwagger2WebMvc</span> <span class="token comment">// 貌似被弃用，可以替换为 @EnableSwagger2</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Knife4jConfiguration</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;swagger.enable&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> enable<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"defaultApi2"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">defaultApi2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token class-name">Docket</span> docket<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>enable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">//.title("swagger-bootstrap-ui-demo RESTful APIs")</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"# swagger-bootstrap-ui-demo RESTful APIs"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"http://www.xx.com/"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"小盛"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"504040410@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token comment">// 分组名称</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"2.X版本"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                <span class="token comment">// 这里指定你自己的 Controller 扫描包路径</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.demo.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">return</span> docket<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>编写 Controller</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/v2/user"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"分页查询"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"嘿嘿"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/haha"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"分页查询2"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>访问 http://localhost:8080/doc.html#/home，ip 和端口改为你自己的，接口文档界面如下</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606145144826.png" alt="image-20240606145144826" /></p><p>yaml 配置，如果上生产了需要禁用 swagger，则改为 false 即可：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">#是否激活 swagger true or false</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token key atrule">swagger</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr></table></figure><h2 id="注解使用"><a class="anchor" href="#注解使用">#</a> 注解使用</h2><ul><li>@Api：用在 controller 类上，描述 API 接口，例：</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"用户管理"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>@ApiOperation：用在 controller 的方法上，例：</li><li>PS：如果接口使用了 @RequestMapping 的话它会生成 get，post，put，delete 不同的请求方式的接口，所以最好指定 RestFull</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"分页查询"</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>@ApiModel：用在实体类上</li><li>@ApiModelProperty：描述对象属性</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">// 这个是 lombok 注解</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户实体类"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"名称"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以下三个注解实际上很少用</p><ul><li>@ApiImplicitParams：描述接口参数</li><li>@ApiResponses：描述接口响应</li><li>@ApiIgnore：忽略不显示接口参数</li></ul><h2 id="用swagger3替换swagger2注释"><a class="anchor" href="#用swagger3替换swagger2注释">#</a> 用 Swagger3 替换 Swagger2 注释</h2><p>(它已经包含在 springdoc-openapi-ui 依赖项中)。swagger3 注释的包是 io.swagger.v3.oas.annotations</p><h3 id="依赖项"><a class="anchor" href="#依赖项">#</a> 依赖项：</h3><p>swagger3 只需要一个依赖即可</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter --></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="swagger2到swagger3的变化规则"><a class="anchor" href="#swagger2到swagger3的变化规则">#</a> Swagger2 到 Swagger3 的变化规则：</h3><pre><code>@Api → @Tag @ApiIgnore → @Parameter(hidden = true)或@Operation(hidden = true)或@Hidden @ApiImplicitParam → @Parameter @ApiImplicitParams → @Parameters @ApiModel → @Schema @ApiModelProperty(hidden = true) → @Schema(accessMode = READ_ONLY) @ApiModelProperty → @Schema(description = &quot;描述&quot;) @ApiOperation(value = &quot;foo&quot;, notes = &quot;bar&quot;) → @Operation(summary = &quot;foo&quot;, description = &quot;bar&quot;) @ApiParam → @Parameter @ApiResponse(code = 404, message = &quot;foo&quot;) → @ApiResponse(responseCode = &quot;404&quot;, description = &quot;foo&quot;)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;配置接口文档swagger和knife4j教程&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#配置接口文档swagger和knife4j教程&quot;&gt;#&lt;/a&gt; 配置接口文档 Swagger 和 Knife4j 教程&lt;/h1&gt;
&lt;p&gt;这里介绍了如何配置 &lt;code</summary>
      
    
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/categories/tools/"/>
    
    <category term="Interfacetesting" scheme="https://pigpigletsgo.github.io/categories/tools/Interfacetesting/"/>
    
    <category term="swaggerOrKnife4j" scheme="https://pigpigletsgo.github.io/categories/tools/Interfacetesting/swaggerOrKnife4j/"/>
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/tags/tools/"/>
    
    <category term="Interfacetesting" scheme="https://pigpigletsgo.github.io/tags/Interfacetesting/"/>
    
  </entry>
  
  <entry>
    <title>postman配置全局token认证</title>
    <link href="https://pigpigletsgo.github.io/tools/Interfacetesting/postman/postman%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80token%E8%AE%A4%E8%AF%81/"/>
    <id>https://pigpigletsgo.github.io/tools/Interfacetesting/postman/postman%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80token%E8%AE%A4%E8%AF%81/</id>
    <published>2024-06-06T06:40:56.101Z</published>
    <updated>2024-06-06T06:42:35.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postman配置全局token认证"><a class="anchor" href="#postman配置全局token认证">#</a> postman 配置全局 token 认证</h1><h2 id="定义全局authorization"><a class="anchor" href="#定义全局authorization">#</a> 定义全局 Authorization</h2><p>整个项目全局定义一个 bearer token</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606143616604.png" alt="image-20240606143616604" /></p><p>使用刚刚定义的 token 变量，这里也可以将变量改为其它的比如使用 Authorization 作为变量名都可以</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606143703645.png" alt="image-20240606143703645" /></p><p>单个认证中选择继承父级即可</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606143728024.png" alt="image-20240606143728024" /></p><p>登录接口下定义一个请求成功会执行的脚本</p><p>选择一个执行完 post 请求成功之后会执行的回调脚本</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606143823181.png" alt="image-20240606143823181" /></p><p>书写脚本 (js)</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606143845092.png" alt="image-20240606143845092" /></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre>pm<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"Successful POST request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> pm<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将返回的响应转成 json 格式返回</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    pm<span class="token punctuation">.</span>collectionVariables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>result<span class="token punctuation">.</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置一个全局的变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>每次响应成功之后都会更新全局变量 token</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240606143925352.png" alt="image-20240606143925352" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;postman配置全局token认证&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#postman配置全局token认证&quot;&gt;#&lt;/a&gt; postman 配置全局 token 认证&lt;/h1&gt;
&lt;h2 id=&quot;定义全局authorization&quot;&gt;&lt;a clas</summary>
      
    
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/categories/tools/"/>
    
    <category term="Interfacetesting" scheme="https://pigpigletsgo.github.io/categories/tools/Interfacetesting/"/>
    
    <category term="postman" scheme="https://pigpigletsgo.github.io/categories/tools/Interfacetesting/postman/"/>
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/tags/tools/"/>
    
    <category term="Interfacetesting" scheme="https://pigpigletsgo.github.io/tags/Interfacetesting/"/>
    
  </entry>
  
  <entry>
    <title>备份数据</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/postgreSQL12/pgAdmin4/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/postgreSQL12/pgAdmin4/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE/</id>
    <published>2024-06-05T08:09:42.875Z</published>
    <updated>2024-06-05T08:08:17.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备份数据"><a class="anchor" href="#备份数据">#</a> 备份数据</h1><p>右击数据库，点击备份</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240605160401460.png" alt="image-20240605160401460" /></p><p>选择到导出的位置并命名一下导出的名称和格式为.buckup 格式</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240605160513738.png" alt="image-20240605160513738" /></p><p>其它的选项如下然后直接点击备份就可以了</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240605160551086.png" alt="image-20240605160551086" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;备份数据&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#备份数据&quot;&gt;#&lt;/a&gt; 备份数据&lt;/h1&gt;
&lt;p&gt;右击数据库，点击备份&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://raw.githubusercontent.com/PigPigLet</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="postgreSQL12" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/postgreSQL12/"/>
    
    <category term="pgAdmin4" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/postgreSQL12/pgAdmin4/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="postgreSQL12" scheme="https://pigpigletsgo.github.io/tags/postgreSQL12/"/>
    
  </entry>
  
  <entry>
    <title>微服务,使用心得</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97/</id>
    <published>2024-06-04T06:33:06.392Z</published>
    <updated>2024-06-07T10:12:17.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用心得"><a class="anchor" href="#使用心得">#</a> 使用心得</h1><h2 id="nacos"><a class="anchor" href="#nacos">#</a> nacos</h2><p>nacos 的配置管理和服务管理</p><p>我们可以将 该模块的服务发现配置，配置到 nacos 中命名为 other.yml。随后我们在项目模块中创建的 bootstrap.yml 中进行配置 配置管理就可以了如下：</p><p>bootstrap.yml</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">spring</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token key atrule">config</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.56.10<span class="token punctuation">:</span><span class="token number">8848</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 213cbf4d<span class="token punctuation">-</span>8431<span class="token punctuation">-</span>4612<span class="token punctuation">-</span>8037<span class="token punctuation">-</span>4ccfd264fd94</pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token key atrule">ext-config</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>          <span class="token punctuation">-</span> <span class="token key atrule">data-id</span><span class="token punctuation">:</span> oss.yml</pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP</pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr><tr><td data-num="11"></td><td><pre>          <span class="token punctuation">-</span> <span class="token key atrule">data-id</span><span class="token punctuation">:</span> other.yml</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP</pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token key atrule">refresh</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token key atrule">application</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party</pre></td></tr></table></figure><p>nacos 中的配置</p><p>先创建一个命名空间为该项目的比如：third-party</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240604142033810.png" alt="image-20240604142033810" /></p><p>在这个 third-party 命名空间中来创建相关配置</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240604142118980.png" alt="image-20240604142118980" /></p><p>oss 的主要就是配置了 oss 对象存储的一些配置，我们来看 other 的配置</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">server</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8877</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token key atrule">spring</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.56.10<span class="token punctuation">:</span><span class="token number">8848</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token key atrule">application</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party</pre></td></tr></table></figure><p>其中配置了该模块的基本信息和服务发现的配置</p><p>PS：服务发现如果需要配合其它的模块那么它们最好在同一个命名空间中，如下：注意我说的是服务发现而不是配置，配置可以隔离</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240604142335059.png" alt="image-20240604142335059" /></p><p>这里由于我其他的模块都需要通过网关负载均衡到 renren-fast 模块中，所以不能进行 命名空间的隔离否则就会 503</p><h2 id="gateway"><a class="anchor" href="#gateway">#</a> gateway</h2><h3 id="重写url规则"><a class="anchor" href="#重写url规则">#</a> 重写 URL 规则：</h3><p>我需要将路径如：<span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDg4L2FwaS90aGlyZHBhcnR5L2dldFVwbG9hZA==">http://localhost:8088/api/thirdparty/getUpload</span> 中的 api/thirdparty/ 进行过滤掉 替换为 http://localhost:8088/getUpload</p><p>/api/thirdparty/ 是前端访问接口时必须的前缀</p><p>可以进行如下配置：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">server</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8088</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token key atrule">spring</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.56.10<span class="token punctuation">:</span><span class="token number">8848</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>          <span class="token comment"># 这里需要注意一下顺序，它会按照顺序来执行条件</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token key atrule">routes</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> product_route</pre></td></tr><tr><td data-num="12"></td><td><pre>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimail<span class="token punctuation">-</span>product</pre></td></tr><tr><td data-num="13"></td><td><pre>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">-</span> Path=/api/product/<span class="token important">**</span></pre></td></tr><tr><td data-num="15"></td><td><pre>          <span class="token key atrule">filters</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.<span class="token important">*)</span><span class="token punctuation">,</span>/$\<span class="token punctuation">&#123;</span>segment<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> third_party_route</pre></td></tr><tr><td data-num="18"></td><td><pre>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//gulimall<span class="token punctuation">-</span>third<span class="token punctuation">-</span>party</pre></td></tr><tr><td data-num="19"></td><td><pre>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">-</span> Path=/api/thirdparty/<span class="token important">**</span></pre></td></tr><tr><td data-num="21"></td><td><pre>          <span class="token key atrule">filters</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token punctuation">-</span> RewritePath=/api/thirdparty/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.<span class="token important">*)</span><span class="token punctuation">,</span>/$\<span class="token punctuation">&#123;</span>segment<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> admin_route</pre></td></tr><tr><td data-num="24"></td><td><pre>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//renren<span class="token punctuation">-</span>fast</pre></td></tr><tr><td data-num="25"></td><td><pre>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token punctuation">-</span> Path=/api/<span class="token important">**</span></pre></td></tr><tr><td data-num="27"></td><td><pre>          <span class="token key atrule">filters</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">-</span> RewritePath=/api/(<span class="token punctuation">?</span>&lt;segment<span class="token punctuation">></span>.<span class="token important">*)</span><span class="token punctuation">,</span>/renren<span class="token punctuation">-</span>fast/$\<span class="token punctuation">&#123;</span>segment<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        </pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token key atrule">application</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token key atrule">name</span><span class="token punctuation">:</span> gulimail<span class="token punctuation">-</span>gateway</pre></td></tr></table></figure><p>RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/${segment} 的解释如下：</p><p><code>RewritePath=/api/thirdparty/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</code>  这一规则通常用于 URL 重写。在这种情况下，这条规则可能被应用在一个反向代理服务器或 API 网关中，目的是将请求的 URL 进行修改或重定向。</p><p>让我们分解这条规则并详细解释其含义：</p><ol><li><p><strong> <code>RewritePath</code> </strong>：这是一个重写路径的指令，表明接下来的内容将用于 URL 重写。</p></li><li><p><code>/api/thirdparty/(?&lt;segment&gt;.*)</code></p><p>：这是一个正则表达式，用于匹配请求的原始 URL。</p><ul><li><code>/api/thirdparty/</code> ：这是 URL 的固定部分，需要匹配这个前缀。</li><li><code>(?&lt;segment&gt;.*)</code> ：这是一个命名捕获组，名为 <code>segment</code> 。 <code>.*</code>  表示匹配任意字符（包括没有字符），捕获的内容会被放入 <code>segment</code>  变量中。</li></ul></li><li><p><strong> <code>,</code> </strong>：逗号用来分隔原始 URL 模式和重写后的目标 URL。</p></li><li><p><code>/$&#123;segment&#125;</code></p><p>：这是重写后的目标 URL。</p><ul><li><code>$&#123;segment&#125;</code> ：表示引用之前捕获的 <code>segment</code>  变量的内容。</li></ul></li></ol><h3 id="举例说明"><a class="anchor" href="#举例说明">#</a> 举例说明</h3><p>假设有一个原始请求 URL：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>/api/thirdparty/service/data</pre></td></tr></table></figure><p>根据重写规则：</p><ul><li>匹配部分： <code>/api/thirdparty/</code>  和  <code>service/data</code> ，其中  <code>service/data</code>  会被捕获到  <code>segment</code>  变量中。</li><li>重写部分： <code>$&#123;segment&#125;</code>  变成  <code>service/data</code> 。</li></ul><p>所以，重写后的 URL 将变成：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>/service/data</pre></td></tr></table></figure><h3 id="总结"><a class="anchor" href="#总结">#</a> 总结</h3><p>这条规则的作用是将所有以 <code>/api/thirdparty/</code>  开头的请求路径重写为去掉 <code>/api/thirdparty/</code>  前缀的路径。即， <code>/api/thirdparty/xxx</code>  被重写为  <code>/xxx</code> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用心得&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#使用心得&quot;&gt;#&lt;/a&gt; 使用心得&lt;/h1&gt;
&lt;h2 id=&quot;nacos&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nacos&quot;&gt;#&lt;/a&gt; nacos&lt;/h2&gt;
&lt;p&gt;nacos 的配置管理和</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="spring" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/"/>
    
    <category term="springcloud" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/springcloud/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="springcloud" scheme="https://pigpigletsgo.github.io/tags/springcloud/"/>
    
  </entry>
  
  <entry>
    <title>oss对象存储基本使用</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/Nacos/%E4%BD%BF%E7%94%A8/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/Nacos/%E4%BD%BF%E7%94%A8/</id>
    <published>2024-06-04T00:16:28.050Z</published>
    <updated>2024-06-04T00:17:16.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oss对象存储基本使用"><a class="anchor" href="#oss对象存储基本使用">#</a> oss 对象存储基本使用</h1><p>进入到阿里云的官网网站：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYWxpeXVuLmNvbS8=">https://www.aliyun.com/</span></p><p>鼠标停留到 产品 处 ，再停留到 存储 处，点击对象存储</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603191801376.png" alt="image-20240603191801376" /></p><p>此时就会跳转到开通的页面，点击开通</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603191828849.png" alt="image-20240603191828849" /></p><p>点击 立即开通</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603191845955.png" alt="image-20240603191845955" /></p><p>开通成功后点击 管理控制台 进入控制台页面</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603192101534.png" alt="image-20240603192101534" /></p><p>进入如下页面说明开通成功</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603192326080.png" alt="image-20240603192326080" /></p><p>首先要使用我们需要先了解一些专业术语</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603192909428.png" alt="image-20240603192909428" /></p><p>下面创建一个 bucket，其中选择低频访问，因为只是测试项目，选择公共读因为私有的我们每次上传都需要携带账号和密码。最后点击  完成创建</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603194233168.png" alt="image-20240603194233168" /></p><p>创建完成后我们点击进入这个 bucket 进行上传文件，点击扫描文件选择好要上传的文件后点击上传文件</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603194704666.png" alt="image-20240603194704666" /></p><h2 id="java使用oss如下"><a class="anchor" href="#java使用oss如下">#</a> java 使用 oss 如下：</h2><h3 id="导入依赖"><a class="anchor" href="#导入依赖">#</a> 导入依赖：</h3><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.aliyun.oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aliyun-sdk-oss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.15.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="文件上传"><a class="anchor" href="#文件上传">#</a> 文件上传</h3><p>引用上传文件的代码案例：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">ClientException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSS</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>common<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PutObjectRequest</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PutObjectResult</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// Endpoint 以华东 1（杭州）为例，其它 Region 请按实际情况填写。</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"https://oss-cn-hangzhou.aliyuncs.com"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量 OSS_ACCESS_KEY_ID 和 OSS_ACCESS_KEY_SECRET。</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">EnvironmentVariableCredentialsProvider</span> credentialsProvider <span class="token operator">=</span> <span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">.</span><span class="token function">newEnvironmentVariableCredentialsProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">// 填写 Bucket 名称，例如 examplebucket。</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"examplebucket"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 填写 Object 完整路径，完整路径中不能包含 Bucket 名称，例如 exampledir/exampleobject.txt。</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token string">"exampledir/exampleobject.txt"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// 填写本地文件的完整路径，例如 D:\\localpath\\examplefile.txt。</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token class-name">String</span> filePath<span class="token operator">=</span> <span class="token string">"D:\\localpath\\examplefile.txt"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token comment">// 创建 OSSClient 实例。</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> credentialsProvider<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token comment">// 创建 PutObjectRequest 对象。</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token class-name">PutObjectRequest</span> putObjectRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PutObjectRequest</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token comment">// 如果需要上传时设置存储类型和访问权限，请参考以下示例代码。</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token comment">// ObjectMetadata metadata = new ObjectMetadata();</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token comment">// metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token comment">// metadata.setObjectAcl(CannedAccessControlList.Private);</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// putObjectRequest.setMetadata(metadata);</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            </pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">// 上传文件。</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token class-name">PutObjectResult</span> result <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>putObjectRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>           </pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                    <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                    <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>首先我们需要知道自己的 endpoint，在对象存储页面的访问端口中可以看到</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603200950331.png" alt="image-20240603200950331" /></p><p>将如下代码修改：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// Endpoint 以华东 1（杭州）为例，其它 Region 请按实际情况填写。</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"oss-cn-beijing.aliyuncs.com"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>下面我们需要去查看自己的 AccessKey 的 Id 和 secret</p><p>如果我们直接将 Id 和 secret 配置到代码中会很危险，所以阿里云建议我们在操作对象存储的时候专门对它有一个子账户，我们填写这个子账户的账号密码。子账户我们需要进行开通。如下是开通步骤：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603201331475.png" alt="image-20240603201331475" /></p><p>点击 使用子用户的 AccessKey，第一次可能需要开通 RAM 直接开通就行了</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603201407769.png" alt="image-20240603201407769" /></p><p>点击创建用户</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603201543903.png" alt="image-20240603201543903" /></p><p>我们没目前只需要在代码里面进行使用我们只需要勾选上 OpenAPI 调用访问即可，点击确定并接受验证码进行确定</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603201710606.png" alt="image-20240603201710606" /></p><p>子用户创建完成后就可以进行复制 AccessKey Id 和 AccessKey Secret 了</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603201850240.png" alt="image-20240603201850240" /></p><p>我们在使用之前需要先对该子用户添加权限</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603214801883.png" alt="image-20240603214801883" /></p><p>新版本我们需要将 AccessKeyID 和 Secret 配置到环境变量中</p><h3 id="配置accesskeyid和secret到环境中"><a class="anchor" href="#配置accesskeyid和secret到环境中">#</a> 配置 AccessKeyID 和 Secret 到环境中</h3><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603225024245.png" alt="image-20240603225024245" /></p><p>如果配置了还是报错：</p><pre><code>com.aliyun.oss.common.auth.InvalidCredentialsException: Access key id should not be null or empty.</code></pre><h4 id="解决方式"><a class="anchor" href="#解决方式">#</a> 解决方式：</h4><ol><li>查看 idea 中使用的 jdk 与环境变量的 jdk 是否一致，不一致修改 jdk 环境变量一致然后重启电脑</li><li>重启电脑</li></ol><h4 id="测试accesskeyid和secret的配置情况"><a class="anchor" href="#测试accesskeyid和secret的配置情况">#</a> 测试 AccessKeyID 和 Secret 的配置情况：</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Test</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>ClientException</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">EnvironmentVariableCredentialsProvider</span> credentialsProvider <span class="token operator">=</span> <span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">.</span><span class="token function">newEnvironmentVariableCredentialsProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">Credentials</span> credentials <span class="token operator">=</span> credentialsProvider<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AccessKeyID: "</span> <span class="token operator">+</span> credentials<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AccessKeySecret: "</span> <span class="token operator">+</span> credentials<span class="token punctuation">.</span><span class="token function">getSecretAccessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>AccessKeyID: LTAI5tGzZmmC8jxxxxDbEMDAccessKeySecret: 7jF2aIfwORf1xxxxxqxx47j5sVb</code></pre><p>测试成功，接下来测试上传文件的代码：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Test</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>aliyuncs<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span></span>ClientException</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// Endpoint 以华东 1（杭州）为例，其它 Region 请按实际情况填写。</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">String</span> endpoint <span class="token operator">=</span> <span class="token string">"oss-cn-beijing.aliyuncs.com"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 从环境变量中获取访问凭证。运行本代码示例之前，请确保已设置环境变量 OSS_ACCESS_KEY_ID 和 OSS_ACCESS_KEY_SECRET。</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token class-name">EnvironmentVariableCredentialsProvider</span> credentialsProvider <span class="token operator">=</span> <span class="token class-name">CredentialsProviderFactory</span><span class="token punctuation">.</span><span class="token function">newEnvironmentVariableCredentialsProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 填写 Bucket 名称，例如 examplebucket。</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">"gulimall-dkx"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token comment">// 填写 Object 完整路径，完整路径中不能包含 Bucket 名称，例如 exampledir/exampleobject.txt。</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token string">"gulimall-dkx/test.jpg"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token comment">// 填写本地文件的完整路径，例如 D:\\localpath\\examplefile.txt。</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token comment">// 如果未指定本地路径，则默认从示例程序所属项目对应本地路径中上传文件。</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Pictures\\Camera Roll\\乡村之夜 房子 田野和稻田 黄昏 乡村小路 河流 风景 4k壁纸_彼岸图网.jpg"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token comment">// 创建 OSSClient 实例。</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> credentialsProvider<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token keyword">try</span></pre></td></tr><tr><td data-num="18"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token comment">// 创建 PutObjectRequest 对象。</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token class-name">PutObjectRequest</span> putObjectRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PutObjectRequest</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token comment">// 如果需要上传时设置存储类型和访问权限，请参考以下示例代码。</span></pre></td></tr><tr><td data-num="22"></td><td><pre>      <span class="token comment">// ObjectMetadata metadata = new ObjectMetadata();</span></pre></td></tr><tr><td data-num="23"></td><td><pre>      <span class="token comment">// metadata.setHeader(OSSHeaders.OSS_STORAGE_CLASS, StorageClass.Standard.toString());</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token comment">// metadata.setObjectAcl(CannedAccessControlList.Private);</span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token comment">// putObjectRequest.setMetadata(metadata);</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token comment">// 上传文件。</span></pre></td></tr><tr><td data-num="27"></td><td><pre>      <span class="token class-name">PutObjectResult</span> result <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>putObjectRequest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result RequestId: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result ETag: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getETag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result VersionId: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getVersionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result Response: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result ClientCRC: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getClientCRC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result ServerCRC: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getServerCRC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> oe<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an OSSException, which means your request made it to OSS, "</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                         <span class="token operator">+</span> <span class="token string">"but was rejected with an error response for some reason."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Code:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getErrorCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Host ID:"</span> <span class="token operator">+</span> oe<span class="token punctuation">.</span><span class="token function">getHostId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClientException</span> ce<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Caught an ClientException, which means the client encountered "</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                         <span class="token operator">+</span> <span class="token string">"a serious internal problem while trying to communicate with OSS, "</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                         <span class="token operator">+</span> <span class="token string">"such as not being able to access the network."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error Message:"</span> <span class="token operator">+</span> ce<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>   <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span></pre></td></tr><tr><td data-num="49"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>         ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p><pre><code>result RequestId: 665DD89377F3A93337E3FA45result ETag: 508EA42B110937E48E9A6856948422E4result VersionId: nullresult Response: nullresult ClientCRC: 6237137517066352504result ServerCRC: 6237137517066352504</code></pre><p>查看 oss 的存储内容</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603225234399.png" alt="image-20240603225234399" /></p><p>上传成功</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240603225255837.png" alt="image-20240603225255837" /></p><h2 id="更简单的方式springcloudalibaba"><a class="anchor" href="#更简单的方式springcloudalibaba">#</a> 更简单的方式 SpringCloudAlibaba</h2><h3 id="springcloudalibaba简介"><a class="anchor" href="#springcloudalibaba简介">#</a> SpringCloudAlibaba 简介</h3><p>SpringCloudAlibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必须组件，方便开发者通过 SpringCloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 SpringCloudAlibaba，您只需要添加一些注解和少量配置，就可以将 SpringCloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvc3ByaW5nLWNsb3VkLWFsaWJhYmE=">https://github.com/alibaba/spring-cloud-alibaba</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;oss对象存储基本使用&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oss对象存储基本使用&quot;&gt;#&lt;/a&gt; oss 对象存储基本使用&lt;/h1&gt;
&lt;p&gt;进入到阿里云的官网网站：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="spring" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/"/>
    
    <category term="springcloud" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/springcloud/"/>
    
    <category term="Nacos" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/springcloud/Nacos/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="springcloud" scheme="https://pigpigletsgo.github.io/tags/springcloud/"/>
    
    <category term="Nacos" scheme="https://pigpigletsgo.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>若依分页功能</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/ruoyi/%E8%8B%A5%E4%BE%9D%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/ruoyi/%E8%8B%A5%E4%BE%9D%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</id>
    <published>2024-05-30T03:45:39.374Z</published>
    <updated>2024-05-30T02:31:43.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="若依分页功能"><a class="anchor" href="#若依分页功能">#</a> 若依分页功能</h1><p>分页的效果：分页处理一方面可以提高我们浏览数据的效率，符合我们浏览者的心里，减少大量数据存在的杂乱问题；另一方面用 sql 进行数据查询时就实现分页，如 mysql 的 limit，sql 查询结果是第几页的数据，十分的效率；同时分页技术也可以，降低带宽使用，提高访问速度。分页的原理：前端采用 pageNum 和 pageSize ；后端采用函数 startPage 和 getDataTable；</p><h2 id="前端部分"><a class="anchor" href="#前端部分">#</a> 前端部分：</h2><p>先找到前端部分代码中的 ruoyi-ui/src/views/monitor/operlog/index.vue 中的这一串代码</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240530100313569.png" alt="image-20240530100313569" /></p><p>初始化了 total 为 0 所返回的 total 的值取决于后台传来的数据条数；@pageination 所绑定的 getList 方法，负责处理所返回的数据 实现分页功能</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240530100433297.png" alt="image-20240530100433297" /></p><p>getList 方法中调用了 List 函数</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240530100449423.png" alt="image-20240530100449423" /></p><p>其中 method: 'get' 为请求的访问方式即对应后端的 GetMapping</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240530100518970.png" alt="image-20240530100518970" /></p><p>页面端使用 F12 开发者工具查看了网络中的 XHR 和提取 可以看到 后端返回了</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240530100550091.png" alt="image-20240530100550091" /></p><p>其中 pageNum 和 pageSize 分别为页面数和每页所存放数据条数</p><h2 id="后端部分"><a class="anchor" href="#后端部分">#</a> 后端部分：</h2><p>实现分页的代码：</p><p>controller</p><p>要想使用 startPage 和 getDataTable 我们必须先继承 ruoyi 中的 BaseController 类，下面会讲到源码实现</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>  * 查询 shp 文件信息添加数据并分页</pre></td></tr><tr><td data-num="3"></td><td><pre>  * @author 窦凯欣</pre></td></tr><tr><td data-num="4"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询shp文件信息添加数据并分页"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"xkzh"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"许可证号"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">"String"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token annotation punctuation">@ApiResponses</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token annotation punctuation">@ApiResponse</span><span class="token punctuation">(</span>code <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"success"</span><span class="token punctuation">,</span> response <span class="token operator">=</span> <span class="token class-name">KsTcVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token annotation punctuation">@Anonymous</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/mineLayersController/mountDataAll"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TableDataInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KsTcVo</span><span class="token punctuation">></span></span> <span class="token function">mountDataAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> xkzh<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">TableDataInfo</span> dataTable <span class="token operator">=</span> <span class="token function">getDataTable</span><span class="token punctuation">(</span>ksTcService<span class="token punctuation">.</span><span class="token function">mountDataAll</span><span class="token punctuation">(</span>xkzh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KsTcVo</span><span class="token punctuation">></span></span> ksTcVos <span class="token operator">=</span> <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyToList</span><span class="token punctuation">(</span>dataTable<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KsTcVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        dataTable<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>ksTcVos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> dataTable<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>  * 查询 shp 文件信息添加数据并分页</pre></td></tr><tr><td data-num="3"></td><td><pre>  * @author 窦凯欣</pre></td></tr><tr><td data-num="4"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KsTc</span><span class="token punctuation">></span></span> <span class="token function">mountDataAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> xkzh<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KsTc</span><span class="token punctuation">></span></span> ksTcs <span class="token operator">=</span> ksTcxMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">KsTc</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>xkzh<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">KsTc</span><span class="token operator">::</span><span class="token function">getXkzh</span><span class="token punctuation">,</span> xkzh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> ksTcs<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>startPage () 和 getDataTable (List) 分贝起到了分页功能的实现和返回数据库数据的功能，任何分页功能的实现都需要先执行 startPage 这个方法</p><p>在 ruoyi 中 BaseController 的 startPage 和 getDataTable 代码如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>   * 设置请求分页数据</pre></td></tr><tr><td data-num="3"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">PageUtils</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>   * 响应请求分页数据</pre></td></tr><tr><td data-num="3"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span> <span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">protected</span> <span class="token class-name">TableDataInfo</span> <span class="token function">getDataTable</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">TableDataInfo</span> rspData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableDataInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        rspData<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        rspData<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"查询成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        rspData<span class="token punctuation">.</span><span class="token function">setRows</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        rspData<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> rspData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>先来解读下 startPage 里面的源代码：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>   * 设置请求分页数据</pre></td></tr><tr><td data-num="3"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 返回封装好的分页对象</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">PageDomain</span> pageDomain <span class="token operator">=</span> <span class="token class-name">TableSupport</span><span class="token punctuation">.</span><span class="token function">buildPageRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Integer</span> pageNum <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">Integer</span> pageSize <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">String</span> orderBy <span class="token operator">=</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">escapeOrderBySql</span><span class="token punctuation">(</span>pageDomain<span class="token punctuation">.</span><span class="token function">getOrderBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">Boolean</span> reasonable <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getReasonable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> orderBy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReasonable</span><span class="token punctuation">(</span>reasonable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>  * 封装分页对象</pre></td></tr><tr><td data-num="3"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PageDomain</span> <span class="token function">getPageDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">PageDomain</span> pageDomain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        pageDomain<span class="token punctuation">.</span><span class="token function">setPageNum</span><span class="token punctuation">(</span><span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">PAGE_NUM</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        pageDomain<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token class-name">Convert</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">PAGE_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        pageDomain<span class="token punctuation">.</span><span class="token function">setOrderByColumn</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">ORDER_BY_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        pageDomain<span class="token punctuation">.</span><span class="token function">setIsAsc</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token constant">IS_ASC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        pageDomain<span class="token punctuation">.</span><span class="token function">setReasonable</span><span class="token punctuation">(</span><span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getParameterToBool</span><span class="token punctuation">(</span><span class="token constant">REASONABLE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> pageDomain<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PageDomain</span> <span class="token function">buildPageRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">getPageDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>进入 ServletUtils.getParameter (PAGE_NUM)</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>  * 获取 HttpServlcetRequest 对象调用 getParamter 传入 String 参数获取请求头中对应的参数并返回</pre></td></tr><tr><td data-num="3"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> <span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre>   * 获取 request</pre></td></tr><tr><td data-num="12"></td><td><pre>   */</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="20"></td><td><pre>  * 获取 RequestContextHolder.getRequestAttributes () 对象并返回</pre></td></tr><tr><td data-num="21"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ServletRequestAttributes</span> <span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token class-name">RequestAttributes</span> attributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> attributes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由此我们得知他从 HttpServletRequest 对象中获取对应的请求头的参数也就是 pageNum 和 pageSize 的参数，那么在 getPageDomain 方法中的 PageDomain 对象的参数都是这样进行构建的</p><p>最终返回到 startPage</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>  * 设置请求分页数据</pre></td></tr><tr><td data-num="3"></td><td><pre>  */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">PageDomain</span> pageDomain <span class="token operator">=</span> <span class="token class-name">TableSupport</span><span class="token punctuation">.</span><span class="token function">buildPageRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">Integer</span> pageNum <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Integer</span> pageSize <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">String</span> orderBy <span class="token operator">=</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">escapeOrderBySql</span><span class="token punctuation">(</span>pageDomain<span class="token punctuation">.</span><span class="token function">getOrderBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">Boolean</span> reasonable <span class="token operator">=</span> pageDomain<span class="token punctuation">.</span><span class="token function">getReasonable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> orderBy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setReasonable</span><span class="token punctuation">(</span>reasonable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>最后使用 PageHelper 插件进行分页</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;若依分页功能&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#若依分页功能&quot;&gt;#&lt;/a&gt; 若依分页功能&lt;/h1&gt;
&lt;p&gt;分页的效果：分页处理一方面可以提高我们浏览数据的效率，符合我们浏览者的心里，减少大量数据存在的杂乱问题；另一方面用 sql 进行数据查询时就</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="开源项目框架" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="开源项目框架" scheme="https://pigpigletsgo.github.io/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Apache Commons-Lang3</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/CommonsLang3/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/CommonsLang3/</id>
    <published>2024-05-29T00:59:05.826Z</published>
    <updated>2024-05-29T00:59:41.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="apache-commons-lang3"><a class="anchor" href="#apache-commons-lang3">#</a> Apache Commons-Lang3</h1><h2 id="关于apache-commons-lang3的使用"><a class="anchor" href="#关于apache-commons-lang3的使用">#</a> 关于 Apache Commons-Lang3 的使用</h2><p>在日常工作中，我们经常要使用到一些开源工具包，比如 String，Date 等等。有时候我们并不清楚有这些工具类的存在，造成在开发过程中重新实现导致时间浪费，并且开发的代码质量不佳。而 apache 其实已经提供了系列的工具包给我们使用，只是大多数人，平时没有注意到。我们从使用最多的 org.apache.commons.lang3 这个 jar 包开始讲起，lang3 这个开源 jar 包在真实工作中，算是使用最多，运用最广的一个开源包。如何我们彻底的掌握这个包的使用，那么必然给开发工作带来很多好处：节省时间，提高工作效率等等。</p><ul><li>lang3 整体的结构的一个概况及各个类的作用</li></ul><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240528205718289.png" alt="image-20240528205718289" /></p><ul><li>StringUtils</li></ul><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240528205739637.png" alt="image-20240528205739637" /></p><ul><li>ArrayUtils</li></ul><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240528205756624.png" alt="image-20240528205756624" /></p><ul><li>BooleanUtils</li></ul><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240528205815730.png" alt="image-20240528205815730" /></p><ul><li>ClassUtils</li></ul><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240528205832463.png" alt="image-20240528205832463" /></p><h2 id="springboot-实战开发-commons-lang3"><a class="anchor" href="#springboot-实战开发-commons-lang3">#</a> SpringBoot - 实战开发 - commons-lang3</h2><h3 id="一-commons-lang3简介"><a class="anchor" href="#一-commons-lang3简介">#</a> 一、commons-lang3 简介</h3><p>commons-lang3 是 Apache 的 Jakarta commons 工程下具有一系列公共基础类。</p><p>Apache 的 Jakarta commons 工程项目列表路径：<span class="exturl" data-url="aHR0cDovL2NvbW1vbnMuYXBhY2hlLm9yZw==">http://commons.apache.org</span></p><p>Commons 基础类包基本上是基于 JDK API 开发而来，依赖微小，可重用性是 Jakarta 的灵魂所在</p><p>Lang 组件主要是一些工具类，涉及到 数组工具类，字符串工具类，字符工具类，数学方面，时间日期工具类，异常，事件等工具类。</p><h3 id="二-maven依赖"><a class="anchor" href="#二-maven依赖">#</a> 二、Maven 依赖</h3><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="三-字符串的处理类stringutils"><a class="anchor" href="#三-字符串的处理类stringutils">#</a> 三、字符串的处理类 (StringUtils)</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 缩短到某长度，用... 结尾。其实就是 (substring (str, 0, max-3) + "...")</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//public static String abbreviate(String str,int maxWidth)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">abbreviate</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ---"abc..."</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 字符串结尾的后缀是否与你要结尾的后缀匹配，若不匹配则添加后缀</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">appendIfMissing</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abcxyz"</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">appendIfMissingIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"abcXYZ"</span><span class="token punctuation">,</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abcXYZ"</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 首字母大小写转换</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"Cat"</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">uncapitalize</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"cat"</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 字符串扩充至指定大小且居中（若扩充大小少于原字符大小则返回原字符，若扩充大小为 负数则为 0 计算 ）</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--- "abcd"</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--- "ab"</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---" ab "</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"yz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"yayz"</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">center</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"  abc  "</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">// 去除字符串中的 "\n", "\r", or "\r\n"</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">chomp</span><span class="token punctuation">(</span><span class="token string">"abc\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abc"</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 判断一字符串是否包含另一字符串</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">containsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 统计一字符串在另一字符串中出现次数</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">countMatches</span><span class="token punctuation">(</span><span class="token string">"abba"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---2</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">// 删除字符串中的梭有空格</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">deleteWhitespace</span><span class="token punctuation">(</span><span class="token string">"   ab  c  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abc"</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 比较两字符串，返回不同之处。确切的说是返回第二个参数中与第一个参数所不同的字符串</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">difference</span><span class="token punctuation">(</span><span class="token string">"abcde"</span><span class="token punctuation">,</span> <span class="token string">"abxyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"xyz"</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">// 检查字符串结尾后缀是否匹配</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ABCDEF"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">endsWithAny</span><span class="token punctuation">(</span><span class="token string">"abcxyz"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"xyz"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">// 检查起始字符串是否匹配</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"ABCDEF"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">startsWithAny</span><span class="token punctuation">(</span><span class="token string">"abcxyz"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"xyz"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">// 判断两字符串是否相同</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="49"></td><td><pre></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">// 比较字符串数组内的所有元素的字符序列，起始一致则返回一致的字符串，若无则返回 ""</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">getCommonPrefix</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"abcde"</span><span class="token punctuation">,</span> <span class="token string">"abxyz"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"ab"</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment">// 正向查找字符在字符串中第一次出现的位置</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---2</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---5 (从角标 3 后查找)</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">ordinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---1 (查找第 n 次出现的位置)</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">// 反向查找字符串第一次出现的位置</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> ‘b‘<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---5</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> ‘b‘<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---2</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">lastOrdinalIndexOf</span><span class="token punctuation">(</span><span class="token string">"aabaabaa"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---1</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token comment">// 判断字符串大写、小写</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAllUpperCase</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAllLowerCase</span><span class="token punctuation">(</span><span class="token string">"abC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token comment">// 判断是否为空 (注：isBlank 与 isEmpty 区别)</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="69"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNoneBlank</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false</span></pre></td></tr><tr><td data-num="70"></td><td><pre></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNoneEmpty</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment">// 判断字符串数字</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">"12 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false (不识别运算符号、小数点、空格……)</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNumericSpace</span><span class="token punctuation">(</span><span class="token string">"12 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---true</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token comment">// 数组中加入分隔符号</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token comment">//StringUtils.join([1, 2, 3], ‘;‘);//---"1;2;3"</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token comment">// 大小写转换</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">upperCase</span><span class="token punctuation">(</span><span class="token string">"aBc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"ABC"</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">lowerCase</span><span class="token punctuation">(</span><span class="token string">"aBc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abc"</span></pre></td></tr><tr><td data-num="86"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">swapCase</span><span class="token punctuation">(</span><span class="token string">"The dog has a BONE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"tHE DOG HAS A bone"</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre><span class="token comment">// 替换字符串内容……（replacePattern、replceOnce）</span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"zbz"</span></pre></td></tr><tr><td data-num="90"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">,</span> <span class="token string">"zz"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abzzef"(指定区域)</span></pre></td></tr><tr><td data-num="91"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replaceEach</span><span class="token punctuation">(</span><span class="token string">"abcde"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="92"></td><td><pre>                        <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"wcte"(多组指定替换 ab->w，d->t)</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre><span class="token comment">// 重复字符</span></pre></td></tr><tr><td data-num="95"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>‘e‘<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"eee"</span></pre></td></tr><tr><td data-num="96"></td><td><pre></pre></td></tr><tr><td data-num="97"></td><td><pre><span class="token comment">// 反转字符串</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">"bat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"tab"</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token comment">// 删除某字符</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"queued"</span><span class="token punctuation">,</span> ‘u‘<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"qeed"</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token comment">// 分割字符串</span></pre></td></tr><tr><td data-num="104"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"a..b.c"</span><span class="token punctuation">,</span> ‘<span class="token punctuation">.</span>‘<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---["a", "b", "c"]</span></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"ab:cd:ef"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---["ab", "cd:ef"]</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">splitByWholeSeparator</span><span class="token punctuation">(</span><span class="token string">"ab-!-cd-!-ef"</span><span class="token punctuation">,</span> <span class="token string">"-!-"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---["ab", "cd-!-ef"]</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">splitByWholeSeparatorPreserveAllTokens</span><span class="token punctuation">(</span><span class="token string">"ab::cd:ef"</span><span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-["ab"," ","cd","ef"]</span></pre></td></tr><tr><td data-num="108"></td><td><pre></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token comment">// 去除首尾空格，类似 trim……（stripStart、stripEnd、stripAll、stripAccents）</span></pre></td></tr><tr><td data-num="110"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token string">" ab c "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"ab c"</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">stripToNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---null</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">stripToEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---""</span></pre></td></tr><tr><td data-num="113"></td><td><pre></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token comment">// 截取字符串</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"cd"</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"cd"</span></pre></td></tr><tr><td data-num="117"></td><td><pre></pre></td></tr><tr><td data-num="118"></td><td><pre><span class="token comment">//left、right 从左 (右) 开始截取 n 位字符</span></pre></td></tr><tr><td data-num="119"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"ab"</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"bc"</span></pre></td></tr><tr><td data-num="121"></td><td><pre><span class="token comment">// 从第 n 位开始截取 m 位字符       n  m</span></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"cdef"</span></pre></td></tr><tr><td data-num="123"></td><td><pre></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringBefore</span><span class="token punctuation">(</span><span class="token string">"abcba"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"a"</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringBeforeLast</span><span class="token punctuation">(</span><span class="token string">"abcba"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abc"</span></pre></td></tr><tr><td data-num="126"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringAfter</span><span class="token punctuation">(</span><span class="token string">"abcba"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"cba"</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringAfterLast</span><span class="token punctuation">(</span><span class="token string">"abcba"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"a"</span></pre></td></tr><tr><td data-num="128"></td><td><pre></pre></td></tr><tr><td data-num="129"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringBetween</span><span class="token punctuation">(</span><span class="token string">"tagabctag"</span><span class="token punctuation">,</span> <span class="token string">"tag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abc"</span></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">substringBetween</span><span class="token punctuation">(</span><span class="token string">"yabczyabcz"</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token string">"z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---"abc"</span></pre></td></tr></table></figure><h3 id="四-随机数生成类randomstringutils"><a class="anchor" href="#四-随机数生成类randomstringutils">#</a> 四、随机数生成类 (RandomStringUtils)</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 随机生成 n 位数数字</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">randomNumeric</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 在指定字符串中生成长度为 n 的随机字符串</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">"abcdefghijk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 指定从字符或数字中生成随机字符串</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">RandomStringUtils</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="五-数字类numberutils"><a class="anchor" href="#五-数字类numberutils">#</a> 五、数字类 NumberUtils</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 从数组中选出最大值</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---4</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 判断字符串是否全是整数</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">isDigits</span><span class="token punctuation">(</span><span class="token string">"153.4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--false</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 判断字符串是否是有效数字</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">NumberUtils</span><span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token string">"0321.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//---false</span></pre></td></tr></table></figure><h3 id="六-数组类arrayutils"><a class="anchor" href="#六-数组类arrayutils">#</a> 六、数组类 ArrayUtils</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 创建数组</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 判断两个数据是否相等，如果内容相同， 顺序相同 则返回 true</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">isEquals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 判断数组中是否包含某一对象</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token string">"33"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 二维数组转换成 MAP</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token class-name">ArrayUtils</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#123;</span> <span class="token string">"RED"</span><span class="token punctuation">,</span> <span class="token string">"#FF0000"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"GREEN"</span><span class="token punctuation">,</span> <span class="token string">"#00FF00"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token string">"BLUE"</span><span class="token punctuation">,</span> <span class="token string">"#0000FF"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="七-日期类dateutils"><a class="anchor" href="#七-日期类dateutils">#</a> 七、日期类 DateUtils</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 日期加 n 天</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 判断是否同一天</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">isSameDay</span><span class="token punctuation">(</span>date1<span class="token punctuation">,</span> date2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 字符串时间转换为 Date</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">DateUtils</span><span class="token punctuation">.</span><span class="token function">parseDate</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> parsePatterns<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="八-加密解密类"><a class="anchor" href="#八-加密解密类">#</a> 八、加密解密类</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// MD5 加密</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> encodeStr<span class="token operator">=</span><span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>text <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 密钥进行验证</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">String</span> md5Text <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>md5Text<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MD5验证通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="九-运行环境的系统信息"><a class="anchor" href="#九-运行环境的系统信息">#</a> 九、运行环境的系统信息</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">getArch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取电脑处理器体系结构 32 bit、64 bit、unknown</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回处理器类型 x86、ia64、ppc、unknown</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">is32Bit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查处理器是否为 32 位</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">is64Bit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查处理器是否为 64 位</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">isIA64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查是否是英特尔安腾处理器类型</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">isPPC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查处理器是否是电源 PC 类型</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token function">isX86</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查处理器是否是 x86 类型</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;apache-commons-lang3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#apache-commons-lang3&quot;&gt;#&lt;/a&gt; Apache Commons-Lang3&lt;/h1&gt;
&lt;h2 id=&quot;关于apache-commons-lang3的</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="commonslang3" scheme="https://pigpigletsgo.github.io/tags/commonslang3/"/>
    
  </entry>
  
  <entry>
    <title>获取系统信息(oshi-core)</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/oshicore/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/oshicore/</id>
    <published>2024-05-29T00:52:02.647Z</published>
    <updated>2024-05-29T00:52:35.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="获取系统信息oshi-core"><a class="anchor" href="#获取系统信息oshi-core">#</a> 获取系统信息 (oshi-core)</h1><h2 id="1-maven"><a class="anchor" href="#1-maven">#</a> 1、maven</h2><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.oshi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>oshi-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="2-api"><a class="anchor" href="#2-api">#</a> 2、API</h2><table><thead><tr><th>对象</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>SystemInfo</td><td>getOperatingSystem()</td><td>获取操作系统信息，OperatingSystem</td></tr><tr><td></td><td>getHardware()</td><td>获取硬件信息，HardwareAbstractionLayer</td></tr><tr><td>OperatingSystem</td><td>getFamily()</td><td>获取操作系统名称，例如 Windows</td></tr><tr><td></td><td>getManufacturer()</td><td>获取供货商，例如 Microsoft</td></tr><tr><td></td><td>getVersion()</td><td>获取操作系统版本信息</td></tr><tr><td></td><td>getFileSystem()</td><td>获取系统硬盘信息，FileSystem</td></tr><tr><td></td><td>getProcesses(int pId, OperatingSystem.ProcessSort var2)</td><td>通过 进程 id 获取进程信息，并设置排序方式，OSProcess []</td></tr><tr><td></td><td>getProcess(int pId)</td><td>通过 进程 id 获取一个进程信息，OSProcess</td></tr><tr><td></td><td>getProcesses(Collection&lt;Integer&gt; pId)</td><td>获取多个进程信息，List&lt;OSProcess&gt;</td></tr><tr><td></td><td>getChildProcesses(int var1, int var2, OperatingSystem.ProcessSort var3)</td><td>获取子进程，OSProcess []</td></tr><tr><td></td><td>getProcessId()</td><td>获取进程 id</td></tr><tr><td></td><td>getProcessCount()</td><td>获取进程数量</td></tr><tr><td></td><td>getThreadCount()</td><td>获取线程数</td></tr><tr><td></td><td>getNetworkParams()</td><td>获取网络相关参数，NetworkParams</td></tr><tr><td>HardwareAbstractionLayer</td><td>getComputerSystem()</td><td>获取计算机系统信息，ComputerSystem</td></tr><tr><td></td><td>getProcessor()</td><td>获取处理器信息，CentralProcessor</td></tr><tr><td></td><td>getMemory()</td><td>获取内存信息，GlobalMemory</td></tr><tr><td></td><td>getPowerSources()</td><td>获取电源信息，PowerSource</td></tr><tr><td></td><td>getDiskStores()</td><td>获取硬件磁盘信息，HWDiskStore</td></tr><tr><td></td><td>getNetworkIFs()</td><td>获取网络信息，NetworkIF</td></tr><tr><td></td><td>getDisplays()</td><td>获取显示信息，Display</td></tr><tr><td></td><td>getSensors()</td><td>获取传感器信息，Sensors</td></tr><tr><td></td><td>getUsbDevices(boolean var1)</td><td>获取 USB 设备信息，UsbDevice</td></tr><tr><td>OperatingSystemVersion</td><td>getBuildNumber()</td><td>获取内部编号</td></tr><tr><td></td><td>getCodeName()</td><td>代码名称</td></tr><tr><td></td><td>getVersion()</td><td>获取版本</td></tr><tr><td>FileSystem</td><td>getMaxFileDescriptors()</td><td>获取最大文件描述符</td></tr><tr><td></td><td>getOpenFileDescriptors()</td><td>获取打开文件描述符</td></tr><tr><td></td><td>getFileStores()</td><td>获取盘符相关信息</td></tr><tr><td>OSProcess</td><td>getName()</td><td>进程程序名称</td></tr><tr><td></td><td>getPath()</td><td>进程程序所在位置</td></tr><tr><td></td><td>getCommandLine()</td><td>获取命令行</td></tr><tr><td></td><td>getCurrentWorkingDirectory()</td><td>获取当前工作目录</td></tr><tr><td></td><td>getUser()</td><td>获取用户信息</td></tr><tr><td></td><td>getUserID()</td><td>获取用户 id</td></tr><tr><td></td><td>getGroup()</td><td>获取组信息</td></tr><tr><td></td><td>getGroupID()</td><td>获取组 id</td></tr><tr><td></td><td>getState()</td><td>状态</td></tr><tr><td></td><td>getProcessID()</td><td>获取进程 id</td></tr><tr><td></td><td>getParentProcessID()</td><td>获取父进程 id</td></tr><tr><td></td><td>getThreadCount()</td><td>获取线程数</td></tr><tr><td></td><td>getPriority()</td><td>优先级</td></tr><tr><td></td><td>getVirtualSize()</td><td>虚拟大小</td></tr><tr><td></td><td>getResidentSetSize()</td><td>实际使用物理内存</td></tr><tr><td></td><td>getKernelTime()</td><td>内核时间</td></tr><tr><td></td><td>getUserTime()</td><td>用户时间</td></tr><tr><td></td><td>getUpTime()</td><td>正常运行时间</td></tr><tr><td></td><td>getStartTime()</td><td>开始时间</td></tr><tr><td></td><td>getBytesRead()</td><td>读取字节</td></tr><tr><td></td><td>getBytesWritten()</td><td>写入字节</td></tr><tr><td></td><td>getOpenFiles()</td><td>打开文件数量</td></tr><tr><td>NetworkParams</td><td>getDnsServers()</td><td>获取域名地址</td></tr><tr><td></td><td>getHostName()</td><td>获取主机名</td></tr><tr><td></td><td>getDomainName()</td><td>获取域名</td></tr><tr><td></td><td>getIpv4DefaultGateway()</td><td>获取默认 Ipv4</td></tr><tr><td></td><td>getIpv6DefaultGateway()</td><td>获取默认 Ipv6</td></tr><tr><td>OSFileStore</td><td>getName()</td><td>磁盘名称</td></tr><tr><td></td><td>getVolume()</td><td>文件集</td></tr><tr><td></td><td>getLogicalVolume()</td><td>合理的文件集</td></tr><tr><td></td><td>getMount()</td><td>盘符</td></tr><tr><td></td><td>getDescription()</td><td>描述</td></tr><tr><td></td><td>getType()</td><td>类型</td></tr><tr><td></td><td>getUUID()</td><td>磁盘 UUID</td></tr><tr><td></td><td>getUsableSpace()</td><td>可用空间</td></tr><tr><td></td><td>getTotalSpace()</td><td>总空间</td></tr><tr><td>ComputerSystem</td><td>getManufacturer()</td><td>获取制造商</td></tr><tr><td></td><td>getModel()</td><td>获取型号</td></tr><tr><td></td><td>getSerialNumber()</td><td>获取序列号</td></tr><tr><td></td><td>getFirmware()</td><td>获取固件信息，Firmware</td></tr><tr><td></td><td>getBaseboard()</td><td>获取外壳信息，Baseboard</td></tr><tr><td>Firmware</td><td>getManufacturer()</td><td>获取制造商信息</td></tr><tr><td></td><td>getName()</td><td>获取名称</td></tr><tr><td></td><td>getDescription()</td><td>获取描述信息</td></tr><tr><td></td><td>getVersion()</td><td>获取版本</td></tr><tr><td></td><td>getReleaseDate()</td><td>获取发布时间</td></tr><tr><td>Baseboard</td><td>getModel()</td><td>获取型号</td></tr><tr><td></td><td>getVersion()</td><td>获取版本信息</td></tr><tr><td></td><td>getSerialNumber()</td><td>获取序列号</td></tr><tr><td>CentralProcessor</td><td>getVendor()</td><td>获取供应商</td></tr><tr><td></td><td>getName()</td><td>获取 cpu 名称</td></tr><tr><td></td><td>getVendorFreq()</td><td>获取供应商频率</td></tr><tr><td></td><td>getProcessorID()</td><td>获取处理器 id</td></tr><tr><td></td><td>getIdentifier()</td><td>获取标识符</td></tr><tr><td></td><td>isCpu64bit()</td><td>判断 cpu 是否为 64 位的</td></tr><tr><td></td><td>getStepping()</td><td>获取 cpu 步进</td></tr><tr><td></td><td>getModel()</td><td>获取型号</td></tr><tr><td></td><td>getFamily()</td><td>获取家族</td></tr><tr><td></td><td>getSystemCpuLoadBetweenTicks()</td><td>获取 cpu 负载间隔刻度</td></tr><tr><td></td><td>getSystemCpuLoadTicks()</td><td>获取 cpu 负载刻度</td></tr><tr><td></td><td>getSystemCpuLoad()</td><td>获取 cpu 负载</td></tr><tr><td></td><td>getSystemLoadAverage()</td><td>获取 cpu 平均负载</td></tr><tr><td></td><td>getSystemLoadAverage(int var1)</td><td>获取 cpu 平均负载</td></tr><tr><td></td><td>getProcessorCpuLoadBetweenTicks()</td><td>获取处理器 cpu 负载间隔刻度</td></tr><tr><td></td><td>getProcessorCpuLoadTicks()</td><td>获取处理器 cpu 负载刻度</td></tr><tr><td></td><td>getSystemUptime()</td><td>获取正常运行时间</td></tr><tr><td></td><td>getLogicalProcessorCount()</td><td>获取逻辑处理器数量</td></tr><tr><td></td><td>getPhysicalProcessorCount()</td><td>获取物理处理器数量</td></tr><tr><td></td><td>getPhysicalPackageCount()</td><td>获取物理包装数量</td></tr><tr><td></td><td>getContextSwitches()</td><td>获取上下文切换数量</td></tr><tr><td></td><td>getInterrupts()</td><td>获取中断</td></tr><tr><td>GlobalMemory</td><td>getTotal()</td><td>获取总内存</td></tr><tr><td></td><td>getAvailable()</td><td>获取可用系统运行内存</td></tr><tr><td></td><td>getSwapTotal()</td><td>获取可用虚拟总内存</td></tr><tr><td></td><td>getSwapUsed()</td><td>获取已用虚拟总内存</td></tr><tr><td>PowerSource</td><td>getName()</td><td>获取名称</td></tr><tr><td></td><td>getRemainingCapacity()</td><td>获取剩余容量</td></tr><tr><td></td><td>getTimeRemaining()</td><td>获取剩余时间</td></tr><tr><td>HWDiskStore</td><td>getName()</td><td>获取名称</td></tr><tr><td></td><td>getModel()</td><td>获取型号</td></tr><tr><td></td><td>getSerial()</td><td>获取序列号</td></tr><tr><td></td><td>getSize()</td><td>获取大小</td></tr><tr><td></td><td>getReads()</td><td>（读长）是高通量测序中一个反应获得的测序序列</td></tr><tr><td></td><td>getReadBytes()</td><td>读取字节</td></tr><tr><td></td><td>getWrites()</td><td>写长</td></tr><tr><td></td><td>getWriteBytes()</td><td>写入字节</td></tr><tr><td></td><td>getTransferTime()</td><td>获取转移时间</td></tr><tr><td></td><td>getPartitions()</td><td>获取分区，HWPartition</td></tr><tr><td></td><td>getTimeStamp()</td><td>获取时间戳</td></tr><tr><td>NetworkIF</td><td>getName()</td><td>获取名称</td></tr><tr><td></td><td>getDisplayName()</td><td>获取显示名称</td></tr><tr><td></td><td>getMTU()</td><td>获取最大传输单元</td></tr><tr><td></td><td>getMacaddr()</td><td>获取 MAC 地址</td></tr><tr><td></td><td>getIPv4addr()</td><td>获取 IPv4</td></tr><tr><td></td><td>getIPv6addr()</td><td>获取 IPv6</td></tr><tr><td></td><td>getBytesRecv()</td><td>获取接收字节数</td></tr><tr><td></td><td>getBytesSent()</td><td>获取发送字节数</td></tr><tr><td></td><td>getPacketsRecv()</td><td>获取接收数据包</td></tr><tr><td></td><td>getPacketsSent()</td><td>获取发送数据包</td></tr><tr><td></td><td>getInErrors()</td><td>是否可达，正常 0</td></tr><tr><td></td><td>getOutErrors()</td><td>响应错误，无错误 0</td></tr><tr><td></td><td>getSpeed()</td><td>获取速率</td></tr><tr><td></td><td>getTimeStamp()</td><td>获取时间错</td></tr><tr><td>Display</td><td>getEdid()</td><td>中文名称扩展显示器识别数据</td></tr><tr><td>Sensors</td><td>getCpuTemperature()</td><td>获取 CPU 温度</td></tr><tr><td></td><td>getFanSpeeds()</td><td>获取风扇速度</td></tr><tr><td></td><td>getCpuVoltage()</td><td>获取 CPU 电压</td></tr><tr><td>UsbDevice</td><td>getName()</td><td>获取名称</td></tr><tr><td></td><td>getVendor()</td><td>获取供应商</td></tr><tr><td></td><td>getVendorId()</td><td>获取供应商 id</td></tr><tr><td></td><td>getProductId()</td><td>获取商品 id</td></tr><tr><td></td><td>getSerialNumber()</td><td>获取序列号</td></tr><tr><td></td><td>getConnectedDevices()</td><td>获取连接设备</td></tr></tbody></table><p>示例代码</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zp<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONArray</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span></span><span class="token class-name">SystemInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span><span class="token class-name">CentralProcessor</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span><span class="token class-name">GlobalMemory</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span><span class="token class-name">HardwareAbstractionLayer</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>software<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">FileSystem</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>software<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">OSFileStore</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>software<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">OperatingSystem</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">oshi<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Util</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">UnknownHostException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DecimalFormat</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre> </pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="20"></td><td><pre>* 系统消息工具类</pre></td></tr><tr><td data-num="21"></td><td><pre>*</pre></td></tr><tr><td data-num="22"></td><td><pre>**/</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemInfoUtils</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">OSHI_WAIT_SECOND</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SystemInfo</span> systemInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">HardwareAbstractionLayer</span> hardware <span class="token operator">=</span> systemInfo<span class="token punctuation">.</span><span class="token function">getHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">OperatingSystem</span> operatingSystem <span class="token operator">=</span> systemInfo<span class="token punctuation">.</span><span class="token function">getOperatingSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre> </pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getCpuInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token class-name">JSONObject</span> cpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token class-name">CentralProcessor</span> processor <span class="token operator">=</span> hardware<span class="token punctuation">.</span><span class="token function">getProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">// CPU 信息</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prevTicks <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">getSystemCpuLoadTicks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token constant">OSHI_WAIT_SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ticks <span class="token operator">=</span> processor<span class="token punctuation">.</span><span class="token function">getSystemCpuLoadTicks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">long</span> nice <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">NICE</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">NICE</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">long</span> irq <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">IRQ</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">IRQ</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">long</span> softirq <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">SOFTIRQ</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">SOFTIRQ</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">long</span> steal <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">STEAL</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">STEAL</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">long</span> cSys <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">SYSTEM</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">SYSTEM</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">long</span> user <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">USER</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">long</span> iowait <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">IOWAIT</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">IOWAIT</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">long</span> idle <span class="token operator">=</span> ticks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">IDLE</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> prevTicks<span class="token punctuation">[</span><span class="token class-name">CentralProcessor<span class="token punctuation">.</span>TickType</span><span class="token punctuation">.</span><span class="token constant">IDLE</span><span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">long</span> totalCpu <span class="token operator">=</span> user <span class="token operator">+</span> nice <span class="token operator">+</span> cSys <span class="token operator">+</span> idle <span class="token operator">+</span> iowait <span class="token operator">+</span> irq <span class="token operator">+</span> softirq <span class="token operator">+</span> steal<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">//cpu 核数</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cpuNum"</span><span class="token punctuation">,</span> processor<span class="token punctuation">.</span><span class="token function">getLogicalProcessorCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token comment">//cpu 系统使用率</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cSys"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>cSys <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalCpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token comment">//cpu 用户使用率</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>user <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalCpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token comment">//cpu 当前等待率</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"iowait"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>iowait <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalCpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token comment">//cpu 当前使用率</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"idle"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> <span class="token punctuation">(</span>idle <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalCpu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">return</span> cpuInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre> </pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="59"></td><td><pre>     * 系统 jvm 信息</pre></td></tr><tr><td data-num="60"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getJvmInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token class-name">JSONObject</span> cpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">long</span> jvmTotalMemoryByte <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token keyword">long</span> freeMemoryByte <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token comment">//jvm 总内存</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token comment">// 空闲空间</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token comment">//jvm 最大可申请</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"max"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>runtime<span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token comment">//vm 已使用内存</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>jvmTotalMemoryByte <span class="token operator">-</span> freeMemoryByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token comment">//jvm 内存使用率</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"usageRate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>jvmTotalMemoryByte <span class="token operator">-</span> freeMemoryByte<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> jvmTotalMemoryByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token comment">//jdk 版本</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jdkVersion"</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.version"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token comment">//jdk 路径</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jdkHome"</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"java.home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token keyword">return</span> cpuInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre> </pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="85"></td><td><pre>     * 系统内存信息</pre></td></tr><tr><td data-num="86"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getMemInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token class-name">JSONObject</span> cpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token class-name">GlobalMemory</span> memory <span class="token operator">=</span> systemInfo<span class="token punctuation">.</span><span class="token function">getHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>        <span class="token comment">// 总内存</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token keyword">long</span> totalByte <span class="token operator">=</span> memory<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token comment">// 剩余</span></pre></td></tr><tr><td data-num="93"></td><td><pre>        <span class="token keyword">long</span> acaliableByte <span class="token operator">=</span> memory<span class="token punctuation">.</span><span class="token function">getAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token comment">// 总内存</span></pre></td></tr><tr><td data-num="95"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>totalByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token comment">// 使用</span></pre></td></tr><tr><td data-num="97"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"used"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>totalByte <span class="token operator">-</span> acaliableByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token comment">// 剩余内存</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>acaliableByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>        <span class="token comment">// 使用率</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"usageRate"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>totalByte <span class="token operator">-</span> acaliableByte<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> totalByte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>        <span class="token keyword">return</span> cpuInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre> </pre></td></tr><tr><td data-num="105"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="106"></td><td><pre>     * 系统盘符信息</pre></td></tr><tr><td data-num="107"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="108"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONArray</span> <span class="token function">getSysFileInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token class-name">JSONObject</span> cpuInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>        <span class="token class-name">JSONArray</span> sysFiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token class-name">FileSystem</span> fileSystem <span class="token operator">=</span> operatingSystem<span class="token punctuation">.</span><span class="token function">getFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token class-name">OSFileStore</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fsArray <span class="token operator">=</span> fileSystem<span class="token punctuation">.</span><span class="token function">getFileStores</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OSFileStore</span> fs <span class="token operator">:</span> fsArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="114"></td><td><pre>            cpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="115"></td><td><pre>            <span class="token comment">// 盘符路径</span></pre></td></tr><tr><td data-num="116"></td><td><pre>            cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dirName"</span><span class="token punctuation">,</span> fs<span class="token punctuation">.</span><span class="token function">getMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>            <span class="token comment">// 盘符类型</span></pre></td></tr><tr><td data-num="118"></td><td><pre>            cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sysTypeName"</span><span class="token punctuation">,</span> fs<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>            <span class="token comment">// 文件类型</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"typeName"</span><span class="token punctuation">,</span> fs<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>            <span class="token comment">// 总大小</span></pre></td></tr><tr><td data-num="122"></td><td><pre>            cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="123"></td><td><pre>            <span class="token comment">// 剩余大小</span></pre></td></tr><tr><td data-num="124"></td><td><pre>            cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"free"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre>            <span class="token comment">// 已经使用量</span></pre></td></tr><tr><td data-num="126"></td><td><pre>            cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"used"</span><span class="token punctuation">,</span> <span class="token function">formatByte</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fs<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>                <span class="token comment">// 资源的使用率</span></pre></td></tr><tr><td data-num="129"></td><td><pre>                cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"usage"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"usage"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> fs<span class="token punctuation">.</span><span class="token function">getUsableSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> fs<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>            sysFiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cpuInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>        <span class="token keyword">return</span> sysFiles<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="136"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="137"></td><td><pre> </pre></td></tr><tr><td data-num="138"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="139"></td><td><pre>     * 系统信息</pre></td></tr><tr><td data-num="140"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="141"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getSysInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="142"></td><td><pre>        <span class="token class-name">JSONObject</span> cpuInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="143"></td><td><pre>        <span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        <span class="token comment">// 操作系统名</span></pre></td></tr><tr><td data-num="145"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"osName"</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>        <span class="token comment">// 系统架构</span></pre></td></tr><tr><td data-num="147"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"osArch"</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.arch"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        <span class="token comment">// 服务器名称</span></pre></td></tr><tr><td data-num="149"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"computerName"</span><span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        <span class="token comment">// 服务器 Ip</span></pre></td></tr><tr><td data-num="151"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"computerIp"</span><span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>        <span class="token comment">// 项目路径</span></pre></td></tr><tr><td data-num="153"></td><td><pre>        cpuInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userDir"</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>        <span class="token keyword">return</span> cpuInfo<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="156"></td><td><pre> </pre></td></tr><tr><td data-num="157"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="158"></td><td><pre>     * 所有系统信息</pre></td></tr><tr><td data-num="159"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="160"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownHostException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>        <span class="token class-name">JSONObject</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cpuInfo"</span><span class="token punctuation">,</span> <span class="token function">getCpuInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"jvmInfo"</span><span class="token punctuation">,</span> <span class="token function">getJvmInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="164"></td><td><pre>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"memInfo"</span><span class="token punctuation">,</span> <span class="token function">getMemInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sysInfo"</span><span class="token punctuation">,</span> <span class="token function">getSysInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sysFileInfo"</span><span class="token punctuation">,</span> <span class="token function">getSysFileInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>        <span class="token keyword">return</span> info<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="169"></td><td><pre> </pre></td></tr><tr><td data-num="170"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="171"></td><td><pre>     * 单位转换</pre></td></tr><tr><td data-num="172"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="173"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatByte</span><span class="token punctuation">(</span><span class="token keyword">long</span> byteNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="174"></td><td><pre>        <span class="token comment">// 换算单位</span></pre></td></tr><tr><td data-num="175"></td><td><pre>        <span class="token keyword">double</span> <span class="token constant">FORMAT</span> <span class="token operator">=</span> <span class="token number">1024.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>        <span class="token keyword">double</span> kbNumber <span class="token operator">=</span> byteNumber <span class="token operator">/</span> <span class="token constant">FORMAT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kbNumber <span class="token operator">&lt;</span> <span class="token constant">FORMAT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="178"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##KB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>kbNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>        <span class="token keyword">double</span> mbNumber <span class="token operator">=</span> kbNumber <span class="token operator">/</span> <span class="token constant">FORMAT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbNumber <span class="token operator">&lt;</span> <span class="token constant">FORMAT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="182"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##MB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>mbNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="184"></td><td><pre>        <span class="token keyword">double</span> gbNumber <span class="token operator">=</span> mbNumber <span class="token operator">/</span> <span class="token constant">FORMAT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="185"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gbNumber <span class="token operator">&lt;</span> <span class="token constant">FORMAT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##GB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>gbNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="187"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="188"></td><td><pre>        <span class="token keyword">double</span> tbNumber <span class="token operator">=</span> gbNumber <span class="token operator">/</span> <span class="token constant">FORMAT</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="189"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"#.##TB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>tbNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="190"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="191"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;获取系统信息oshi-core&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#获取系统信息oshi-core&quot;&gt;#&lt;/a&gt; 获取系统信息 (oshi-core)&lt;/h1&gt;
&lt;h2 id=&quot;1-maven&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    <category term="oshicore" scheme="https://pigpigletsgo.github.io/tags/oshicore/"/>
    
  </entry>
  
</feed>
