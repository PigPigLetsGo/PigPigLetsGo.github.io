<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>D の Java</title>
  
  <subtitle>别怕路长梦远</subtitle>
  <link href="https://pigpigletsgo.github.io/atom.xml" rel="self"/>
  
  <link href="https://pigpigletsgo.github.io/"/>
  <updated>2024-05-26T04:02:09.019Z</updated>
  <id>https://pigpigletsgo.github.io/</id>
  
  <author>
    <name>D</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义注解</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E5%9F%BA%E7%A1%80-%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E5%9F%BA%E7%A1%80-%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</id>
    <published>2024-05-26T04:01:41.061Z</published>
    <updated>2024-05-26T04:02:09.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义注解"><a class="anchor" href="#自定义注解">#</a> 自定义注解</h1><p>前提，了解注解是什么</p><h2 id="1-注解"><a class="anchor" href="#1-注解">#</a> 1、注解</h2><p>@Override 告诉服务器这个方法是覆盖父类的方法。</p><p>@WebServlet (&quot;/test&quot;) 表示某个类是一个 Servlet，Web 容器就会识别这个注解，在运行的时候调用它。</p><p>@Controller (&quot;/test&quot;) 表示某个类是一个控制器，告诉 Spring 框架该类是一个容器。</p><p>注释是给开发人员看的，不会影响程序的编译和运行。注解并不是给开发人员看的，是用于给程序看的，会影响程序的编译和运行。</p><h3 id="12-target指定注解针对的地方"><a class="anchor" href="#12-target指定注解针对的地方">#</a> 1.2 @Target 指定注解针对的地方</h3><h4 id="elementtype"><a class="anchor" href="#elementtype">#</a> ElementType:</h4><p>1、ElementType.TYPE: 针对类，接口</p><p>2、ElementType.FIELD: 针对字段 (成员变量)</p><p>3、ElementType.MONTHD: 针对方法</p><p>4、ElementType.PARAMETER: 针对方法参数</p><p>5、ElementType.CONSTRUCTOR: 针对构造器</p><p>6、ElementType.PACKAGE: 针对包</p><p>7、ElementType.ANNOTATION_TYPE: 针对注解</p><h3 id="13-retention-指定注解的保留域"><a class="anchor" href="#13-retention-指定注解的保留域">#</a> 1.3 @Retention 指定注解的保留域</h3><h4 id="retentionpolicy"><a class="anchor" href="#retentionpolicy">#</a> RetentionPolicy:</h4><p>1、RetentionPolicy.SOURCE: 源代码级别，由编译器处理，处理之后就不再保留</p><p>2、RetentionPolicy.CLASS: 字节码文件级别，注解信息保留到类对应的 class 文件中</p><p>3、RetentionPolicy.RUNTIME:  JVM 级别，由 JVM 读取，运行时使用</p><p><mark>PS</mark>：自定义注解要和反射一起使用</p><h2 id="代码案例"><a class="anchor" href="#代码案例">#</a> 代码案例:</h2><p>创建注解类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">InitMethod</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>创建使用注解的类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitDemo</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@InitMethod</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>创建测试类编写注解的响应处理代码</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">try</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token comment">// 通过反射获取 Class 对象</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.InitDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token comment">// 获取当前 Class 对象的所有方法 (不包括父类)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>methods <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token comment">// 判断方法是否有指定注解</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token keyword">boolean</span> annotationPresent <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">InitMethod</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>annotationPresent<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                        <span class="token comment">// 如果有就调用方法</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p><pre><code>public void com.InitDemo.init()init...public void com.InitDemo.test()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自定义注解&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#自定义注解&quot;&gt;#&lt;/a&gt; 自定义注解&lt;/h1&gt;
&lt;p&gt;前提，了解注解是什么&lt;/p&gt;
&lt;h2 id=&quot;1-注解&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-注解&quot;&gt;#&lt;/a&gt; 1、注解&lt;/h</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="基础-核心类库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E5%9F%BA%E7%A1%80-%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/java/"/>
    
    <category term="基础" scheme="https://pigpigletsgo.github.io/categories/%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot上传图片url回显</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/spring/%E6%8B%A6%E6%88%AA%E5%99%A8/SpringBoot%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87url%E5%9B%9E%E6%98%BE/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/spring/%E6%8B%A6%E6%88%AA%E5%99%A8/SpringBoot%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87url%E5%9B%9E%E6%98%BE/</id>
    <published>2024-05-24T08:47:56.662Z</published>
    <updated>2024-05-24T08:48:33.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot上传图片url回显"><a class="anchor" href="#springboot上传图片url回显">#</a> SpringBoot 上传图片 url 回显</h1><p>在 application.yml 中进行配置存储路径</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240524163702247.png" alt="image-20240524163702247" /></p><p>创建图片上传的 controller 类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dkx<span class="token punctuation">.</span>mpj<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre> </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre> </pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> imgController <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="19"></td><td><pre>     * 时间格式化</pre></td></tr><tr><td data-num="20"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre> </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="24"></td><td><pre>     * 图片保存路径，自动从 yml 文件中获取数据</pre></td></tr><tr><td data-num="25"></td><td><pre>     *   示例： E:/images/</pre></td></tr><tr><td data-num="26"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="27"></td><td><pre> </pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;file-save-path&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> fileSavePath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token comment">// 后半段目录：  2020/03/15</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token class-name">String</span> directory <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token comment">/**</pre></td></tr><tr><td data-num="36"></td><td><pre>         * 文件保存目录  E:/images/2020/03/15/</pre></td></tr><tr><td data-num="37"></td><td><pre>         * 如果目录不存在，则创建</pre></td></tr><tr><td data-num="38"></td><td><pre>         */</span></pre></td></tr><tr><td data-num="39"></td><td><pre> </pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileSavePath <span class="token operator">+</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            dir<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图片上传，保存位置："</span> <span class="token operator">+</span> fileSavePath <span class="token operator">+</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 给文件重新设置一个名字</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token comment">// 后缀</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token class-name">String</span> suffix <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token class-name">String</span> newFileName<span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">+</span>suffix<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre> </pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token comment">// 创建这个新文件</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileSavePath <span class="token operator">+</span> directory <span class="token operator">+</span> newFileName<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token comment">// 复制操作</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token comment">// 协议 ://ip 地址 ：端口号 / 文件目录 (/images/2020/03/15/xxx.jpg)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token class-name">String</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/images/"</span> <span class="token operator">+</span> directory <span class="token operator">+</span> newFileName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图片上传，访问URL："</span> <span class="token operator">+</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token keyword">return</span> url<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>配置映射路径 (重点)</strong></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240524163519757.png" alt="image-20240524163519757" /></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dkx<span class="token punctuation">.</span>mpj<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResourceHandlerRegistry</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre> </pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token annotation punctuation">@Configuration</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre> </pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="12"></td><td><pre>     * 图片保存路径，自动从 yml 文件中获取数据</pre></td></tr><tr><td data-num="13"></td><td><pre>     *   示例： E:/images/</pre></td></tr><tr><td data-num="14"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;file-save-path&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> fileSavePath<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre> </pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">/**</pre></td></tr><tr><td data-num="21"></td><td><pre>         * 配置资源映射</pre></td></tr><tr><td data-num="22"></td><td><pre>         * 意思是：如果访问的资源路径是以 “/images/” 开头的，</pre></td></tr><tr><td data-num="23"></td><td><pre>         * 就给我映射到本机的 “E:/images/” 这个文件夹内，去找你要的资源</pre></td></tr><tr><td data-num="24"></td><td><pre>         * 注意：E:/images/ 后面的 “/” 一定要带上</pre></td></tr><tr><td data-num="25"></td><td><pre>         */</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/images/**"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"file:"</span><span class="token operator">+</span>fileSavePath<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这里需要说明一下，如果使用了 security 那么就会拦截接口，此时我们需要在 security 的配置类中去放行 /images/** 路径即可</p><p>测试结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240524163804296.png" alt="image-20240524163804296" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot上传图片url回显&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#springboot上传图片url回显&quot;&gt;#&lt;/a&gt; SpringBoot 上传图片 url 回显&lt;/h1&gt;
&lt;p&gt;在 application.yml 中进行配置存储路径&lt;</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="spring" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/"/>
    
    <category term="拦截器" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/spring/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="spring" scheme="https://pigpigletsgo.github.io/tags/spring/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/tags/%E6%A1%88%E4%BE%8BDemo/"/>
    
    <category term="拦截器" scheme="https://pigpigletsgo.github.io/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Element-ui Tree节点可拖拽更新节点数据</title>
    <link href="https://pigpigletsgo.github.io/computer-science/web/vue/%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/Element-ui%20Tree%E8%8A%82%E7%82%B9%E5%8F%AF%E6%8B%96%E6%8B%BD%E6%9B%B4%E6%96%B0%E8%8A%82%E7%82%B9%E6%95%B0%E6%8D%AE/"/>
    <id>https://pigpigletsgo.github.io/computer-science/web/vue/%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/Element-ui%20Tree%E8%8A%82%E7%82%B9%E5%8F%AF%E6%8B%96%E6%8B%BD%E6%9B%B4%E6%96%B0%E8%8A%82%E7%82%B9%E6%95%B0%E6%8D%AE/</id>
    <published>2024-05-21T10:01:27.624Z</published>
    <updated>2024-05-22T02:06:10.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="element-ui-tree节点可拖拽更新节点数据"><a class="anchor" href="#element-ui-tree节点可拖拽更新节点数据">#</a> Element-ui Tree 节点可拖拽更新节点数据</h1><h2 id="业务介绍"><a class="anchor" href="#业务介绍">#</a> 业务介绍：</h2><p>如下图，树形菜单是可以进行拖拽的，我需要让其拖拽到指定位置的时候更新当前节点的 parent_cid (父节点) 和 cat_level (层级) 还有 sort (排序)</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/PixPin_2024-05-21_10-57-13.gif" alt="PixPin_2024-05-21_10-57-13" /></p><p>要做这个功能我们首先需要监听拖拽成功这个事件，当我们拖拽成功以后我们就可以将所有收集到的数据拿来发给数据库，这样的事件我们可以参考 Element-ui 的文档 <span class="exturl" data-url="aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04vY29tcG9uZW50L3RyZWU=">https://element.eleme.cn/#/zh-CN/component/tree</span></p><p>在文档中的 Events 中有一个 node-drop 属性如下介绍：</p><table><thead><tr><th>说明</th><th>回调参数</th></tr></thead><tbody><tr><td>拖拽成功完成时触发的事件</td><td>共四个参数，依次为：被拖拽节点对应的 Node、结束拖拽时最后进入的节点、被拖拽节点的放置位置（before、after、inner）、event</td></tr></tbody></table><p>添加到代码中：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240521110839368.png" alt="image-20240521110839368" /></p><p>在 method 函数中添加回调函数，具体文档中有如下：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240521111052747.png" alt="image-20240521111052747" /></p><p>函数中有三个参数其中 draggingNode 是当前 拖拽的节点，dropNode 是被拖拽到的节点，dropType 进入到该节点的什么位置比如前后左右 (英文表示的)</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/PixPin_2024-05-21_11-13-25.gif" alt="PixPin_2024-05-21_11-13-25" /></p><p>此时第一个 Node 就是我们当前正在拖拽的节点 也就是 手机通讯</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240521111507576.png" alt="image-20240521111507576" /></p><p>此时第二个 Node 就是进入到哪个节点 最后面是位置 (英文的) after 意思也就是 港台图书 之后</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240521111630428.png" alt="image-20240521111630428" /></p><h2 id="代码实现"><a class="anchor" href="#代码实现">#</a> 代码实现</h2><p>通过如上的信息我们需要获取如下数据：</p><ol><li>当前节点最新的父节点 id</li><li>当前拖拽节点的最新顺序</li><li>当前拖拽节点的最新层级</li></ol><p>第一步：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>      <span class="token comment">// 1、当前节点最新的父节点 id 的变量</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token keyword">let</span> pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token comment">// 记录拖拽到的节点的节点集合 (为第二步做准备)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">let</span> siblings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token comment">// 1.2、判断如果是上下关系就记录当前拖拽到的节点的父节点的 catId 和 childNodes 集合</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dropType <span class="token operator">==</span> <span class="token string">"before"</span> <span class="token operator">||</span> dropType <span class="token operator">==</span> <span class="token string">"after"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token comment">// 使用逻辑中断防止拖拽到的节点的父节点 catId 为 unidefed</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 如果是左右关系就记录当前拖拽到的节点的 catId 和 childNodes</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//=========================== 第一步 ===========================</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">// 1、当前节点最新的父节点 id 的变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">let</span> pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token comment">// 记录拖拽到的节点的节点集合 (为第二步做准备)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">let</span> siblings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token comment">// 1.2、判断如果是上下关系就记录当前拖拽到的节点的父节点的 catId 和 childNodes 集合</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dropType <span class="token operator">==</span> <span class="token string">"before"</span> <span class="token operator">||</span> dropType <span class="token operator">==</span> <span class="token string">"after"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token comment">// 使用逻辑中断防止拖拽到的节点的父节点 catId 为 unidefed</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token comment">// 如果是左右关系就记录当前拖拽到的节点的 catId 和 childNodes</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//=============================== 第二步 ===============================</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token comment">// 2、当前拖拽节点的最新顺序</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> siblings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 2.1、判断遍历的是否为当前拖拽的节点</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">==</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>          <span class="token comment">// 2.2、当前拖拽的节点需要改顺序和它的父节点的 id</span></pre></td></tr><tr><td data-num="23"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>             <span class="token comment">// 表示正在处理哪条数据 catId 是唯一性的</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token literal-property property">sort</span><span class="token operator">:</span> i<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token literal-property property">parentCid</span><span class="token operator">:</span> pCid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token literal-property property">catLevel</span><span class="token operator">:</span> catLevel<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>          <span class="token comment">// 而其它节点需要更新顺序</span></pre></td></tr><tr><td data-num="32"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span> <span class="token literal-property property">sort</span><span class="token operator">:</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中 updateNodes 是保存所有需要修改的节点</p><p>在 data () 中添加</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240521151613419.png" alt="image-20240521151613419" /></p><p>第三步：</p><p>创建修改当前节点的子节点以及子子节点层级方法</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 修改当前节点的子节点层级方法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token comment">// 遍历当前节点的子节点</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token comment">// 遍历子节点的数据</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token keyword">let</span> cNode <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token comment">// 更新子节点的层级</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token literal-property property">catId</span><span class="token operator">:</span> cNode<span class="token punctuation">.</span>catId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token literal-property property">catLevel</span><span class="token operator">:</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>         <span class="token comment">// 深入调用更新子子节点的层级</span></pre></td></tr><tr><td data-num="14"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><p>继续回到第二步的循环中的判断遍历节点是否是当前拖拽节点的 if 里面进行 判断如果层级与当前节点的层级不同就调用函数进行修改</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">//=========================== 第一步 ===========================</span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token comment">// 1、当前节点最新的父节点 id 的变量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">let</span> pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token comment">// 记录拖拽到的节点的节点集合 (为第二步做准备)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">let</span> siblings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token comment">// 1.2、判断如果是上下关系就记录当前拖拽到的节点的父节点的 catId 和 childNodes 集合</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dropType <span class="token operator">==</span> <span class="token string">"before"</span> <span class="token operator">||</span> dropType <span class="token operator">==</span> <span class="token string">"after"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token comment">// 使用逻辑中断防止拖拽到的节点的父节点 catId 为 unidefed</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token comment">// 如果是左右关系就记录当前拖拽到的节点的 catId 和 childNodes</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">//=============================== 第二步 ===============================</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token comment">// 2、当前拖拽节点的最新顺序</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> siblings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 2.1、判断遍历的是否为当前拖拽的节点</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">==</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">//=============================== 第三步 ===============================</span></pre></td></tr><tr><td data-num="23"></td><td><pre>           <span class="token comment">// 定义当前节点的默认层级变量</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token keyword">let</span> catLevel <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token comment">// 2.3、如果遍历的是当前节点而且层级发生了变化</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token comment">// 2.4、 判断如果当前层级和默认层级不一样，说明当前层级发生了变化</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">!=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>     <span class="token comment">// 更新最新层级</span></pre></td></tr><tr><td data-num="29"></td><td><pre>     catLevel <span class="token operator">=</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>     <span class="token comment">// 如果当前节点的层级发生变化了，那么子节点的层级肯定会发生变化</span></pre></td></tr><tr><td data-num="31"></td><td><pre>     <span class="token comment">// 修改子节点的层级以及子节点的子节点层级 (递归)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">//=================================================================</span></pre></td></tr><tr><td data-num="35"></td><td><pre>          <span class="token comment">// 2.5、当前拖拽的节点需要改顺序和它的父节点的 id</span></pre></td></tr><tr><td data-num="36"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>             <span class="token comment">// 表示正在处理哪条数据 catId 是唯一性的</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token literal-property property">sort</span><span class="token operator">:</span> i<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token literal-property property">parentCid</span><span class="token operator">:</span> pCid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token literal-property property">catLevel</span><span class="token operator">:</span> catLevel<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="42"></td><td><pre>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>          <span class="token comment">// 而其它节点只需要更新顺序</span></pre></td></tr><tr><td data-num="45"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span> <span class="token literal-property property">sort</span><span class="token operator">:</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>最后我们需要对接接口来更新数据库中的数据来持久化</p><p>后端需要提供一个批量修改的接口</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 批量修改排序</pre></td></tr><tr><td data-num="3"></td><td><pre> * @param category</pre></td></tr><tr><td data-num="4"></td><td><pre> * @return</pre></td></tr><tr><td data-num="5"></td><td><pre> */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update/sort"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// @RequiresPermissions("product:category:update")</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">updateSort</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryEntity</span><span class="token punctuation">[</span><span class="token punctuation">]</span> category<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   categoryService<span class="token punctuation">.</span><span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>前端调用接口</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token comment">// 1、当前节点最新的父节点 id 的变量</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">let</span> pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 记录拖拽到的节点的节点集合 (为第二步做准备)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token keyword">let</span> siblings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 1.2、判断如果是上下关系就记录当前拖拽到的节点的父节点的 catId 和 childNodes 集合</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token keyword">if</span> <span class="token punctuation">(</span>dropType <span class="token operator">==</span> <span class="token string">"before"</span> <span class="token operator">||</span> dropType <span class="token operator">==</span> <span class="token string">"after"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token comment">// 使用逻辑中断防止拖拽到的节点的父节点 catId 为 unidefed</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 如果是左右关系就记录当前拖拽到的节点的 catId 和 childNodes</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token comment">// 2、当前拖拽节点的最新顺序</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> siblings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token comment">// 2.1、判断遍历的是否为当前拖拽的节点</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">==</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         <span class="token comment">// 定义当前节点的默认层级变量</span></pre></td></tr><tr><td data-num="21"></td><td><pre>         <span class="token keyword">let</span> catLevel <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>         <span class="token comment">// 2.3、如果遍历的是当前节点而且层级发生了变化</span></pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token comment">// 2.4、 判断如果当前层级和默认层级不一样，说明当前层级发生了变化</span></pre></td></tr><tr><td data-num="24"></td><td><pre>         <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">!=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token comment">// 更新最新层级</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            catLevel <span class="token operator">=</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token comment">// 如果当前节点的层级发生变化了，那么子节点的层级肯定会发生变化</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token comment">// 修改子节点的层级以及子节点的子节点层级 (递归)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>         <span class="token comment">// 2.5、当前拖拽的节点需要改顺序和它的父节点的 id</span></pre></td></tr><tr><td data-num="32"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token comment">// 表示正在处理哪条数据 catId 是唯一性的</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token literal-property property">sort</span><span class="token operator">:</span> i<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token literal-property property">parentCid</span><span class="token operator">:</span> pCid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token literal-property property">catLevel</span><span class="token operator">:</span> catLevel<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>         <span class="token comment">// 而其它节点只需要更新顺序</span></pre></td></tr><tr><td data-num="41"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span> <span class="token literal-property property">sort</span><span class="token operator">:</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">//=========================== 调用批量修改接口 ===========================</span></pre></td></tr><tr><td data-num="45"></td><td><pre>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">"/product/category/update/sort"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="47"></td><td><pre>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="48"></td><td><pre>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="49"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>         <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"菜单顺序修改成功"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="52"></td><td><pre>         <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="53"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>      <span class="token comment">// 刷新菜单数据</span></pre></td></tr><tr><td data-num="55"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>      <span class="token comment">// 设置默认展开的菜单</span></pre></td></tr><tr><td data-num="57"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token punctuation">[</span>pCid<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><p>为防止误操作拖拽节点，我们可以加上一个开关进行控制</p><p>在 element-ui 文档中找到 switch 开关的模块复制源码</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240522090847878.png" alt="image-20240522090847878" /></p><pre><code class="language-vue">&lt;el-switch v-model=&quot;value1&quot; active-text=&quot;按月付费&quot; inactive-text=&quot;按年付费&quot;&gt;&lt;/el-switch&gt;</code></pre><p>定义一个与开关关联的属性在 Tree 拖拽节点的代码中</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240522091112687.png" alt="image-20240522091112687" /></p><p>这个 draggable 是 true 则能拖拽，是 false 则不能拖拽，在 data () 中定义 draggable 的默认值</p><p>下面是效果展示：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/PixPin_2024-05-22_09-13-29.gif" alt="PixPin_2024-05-22_09-13-29" /></p><h2 id="批量保存拖拽的数据"><a class="anchor" href="#批量保存拖拽的数据">#</a> 批量保存拖拽的数据</h2><p>在做这个功能时我们需要改动一些代码：</p><p>首先前端添加一个批量保存的按钮</p><p>使用 v-if 来判断如果开启了拖拽功能才显示批量保存的按钮否则不显示</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240522093124769.png" alt="image-20240522093124769" /></p><p>更改代码如下：</p><p>将批量更新数据库数据的操作放到点击按钮后触发的函数 batchSave 里</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">batchSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">"/product/category/update/sort"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"菜单顺序修改成功"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 刷新菜单数据</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token comment">// 设置默认展开的菜单</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>expandedKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pCid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><p>我们发现批量保存函数中需要 pCid 而又没有提供，所以我们需要将 pCid 在 data () 中写一个并给默认值为 [] 数组 然后再 拖拽函数中 给 this.pCid 赋值</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240522093814787.png" alt="image-20240522093814787" /></p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">handleDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> dropType<span class="token punctuation">,</span> ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token comment">// 1、当前节点最新的父节点 id 的变量</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">let</span> pCid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 记录拖拽到的节点的节点集合 (为第二步做准备)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token keyword">let</span> siblings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 1.2、判断如果是上下关系就记录当前拖拽到的节点的父节点的 catId 和 childNodes 集合</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token keyword">if</span> <span class="token punctuation">(</span>dropType <span class="token operator">==</span> <span class="token string">"before"</span> <span class="token operator">||</span> dropType <span class="token operator">==</span> <span class="token string">"after"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token comment">// 使用逻辑中断防止拖拽到的节点的父节点 catId 为 unidefed</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token comment">// 如果是左右关系就记录当前拖拽到的节点的 catId 和 childNodes</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      pCid <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      siblings <span class="token operator">=</span> dropNode<span class="token punctuation">.</span>childNodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token keyword">this</span><span class="token punctuation">.</span>pCid<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pCid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token comment">// 2、当前拖拽节点的最新顺序</span></pre></td></tr><tr><td data-num="18"></td><td><pre>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> siblings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token comment">// 2.1、判断遍历的是否为当前拖拽的节点</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId <span class="token operator">==</span> draggingNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>         <span class="token comment">// 定义当前节点的默认层级变量</span></pre></td></tr><tr><td data-num="22"></td><td><pre>         <span class="token keyword">let</span> catLevel <span class="token operator">=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token comment">// 2.3、如果遍历的是当前节点而且层级发生了变化</span></pre></td></tr><tr><td data-num="24"></td><td><pre>         <span class="token comment">// 2.4、 判断如果当前层级和默认层级不一样，说明当前层级发生了变化</span></pre></td></tr><tr><td data-num="25"></td><td><pre>         <span class="token keyword">if</span> <span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">!=</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token comment">// 更新最新层级</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            catLevel <span class="token operator">=</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token comment">// 如果当前节点的层级发生变化了，那么子节点的层级肯定会发生变化</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token comment">// 修改子节点的层级以及子节点的子节点层级 (递归)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateChildNodeLevel</span><span class="token punctuation">(</span>siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>         <span class="token comment">// 2.5、当前拖拽的节点需要改顺序和它的父节点的 id</span></pre></td></tr><tr><td data-num="33"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token comment">// 表示正在处理哪条数据 catId 是唯一性的</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token literal-property property">sort</span><span class="token operator">:</span> i<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token literal-property property">parentCid</span><span class="token operator">:</span> pCid<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token literal-property property">catLevel</span><span class="token operator">:</span> catLevel<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>         <span class="token comment">// 而其它节点只需要更新顺序</span></pre></td></tr><tr><td data-num="42"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span>updateNodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">catId</span><span class="token operator">:</span> siblings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>catId<span class="token punctuation">,</span> <span class="token literal-property property">sort</span><span class="token operator">:</span> i <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><p>我们再进行批量保存的时候就会报错需要修改如下代码：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">allowDrop</span><span class="token punctuation">(</span><span class="token parameter">draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token comment">// 被拖动的当前节点，以及所在的父节点总层数不能大于 3</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token comment">// 被拖动的当前节点总层数</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"allowDrop: "</span><span class="token punctuation">,</span> draggingNode<span class="token punctuation">,</span> dropNode<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token comment">// 计算当前节点的总层数</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>draggingNode<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token comment">// 当前正在拖动的节点 + 父节点所在的深度不大于 3 即可</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 最大深度 - 当前深度 + 1 = 当前节点的深度</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">let</span> deep <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel <span class="token operator">-</span> draggingNode<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"深度："</span><span class="token punctuation">,</span> deep<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"inner"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token keyword">return</span> deep <span class="token operator">+</span> dropNode<span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token keyword">return</span> deep <span class="token operator">+</span> dropNode<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token function">countNodeLevel</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token comment">// 找到所有子节点，求出最大深度</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>               <span class="token keyword">this</span><span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>level<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">countNodeLevel</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>         <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/PixPin_2024-05-22_09-40-50.gif" alt="PixPin_2024-05-22_09-40-50" /></p><h2 id="批量删除数据"><a class="anchor" href="#批量删除数据">#</a> 批量删除数据</h2><p>提供批量删除的接口</p><p>逻辑删除什么字段不重要主要看自己</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 删除</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// @RequiresPermissions("product:category:delete")</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> catIds<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   categoryService<span class="token punctuation">.</span><span class="token function">removeMenuByIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>catIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>前端代码：</p><p>添加批量删除按钮</p><pre><code class="language-vue">&lt;el-button type=&quot;danger&quot; @click=&quot;batchDel&quot;&gt;批量删除&lt;/el-button&gt;</code></pre><p>逻辑代码：</p><figure class="highlight js"><figcaption data-lang="JavaScript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">batchDel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token keyword">let</span> catIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token keyword">let</span> checkedNodes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>menuTree<span class="token punctuation">.</span><span class="token function">getCheckedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被选中的元素: "</span><span class="token punctuation">,</span> checkedNodes<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> checkedNodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      catIds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>checkedNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>catId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      name<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>checkedNodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">此操作将永久批量删除[ </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> ]菜单, 是否继续?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token string">"提示"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>         <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">"确定"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>         <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">"取消"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>         <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>   <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>         <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">"/product/category/delete"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>         <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>         <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornData</span><span class="token punctuation">(</span>catIds<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"菜单删除成功"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMenus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> data <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;element-ui-tree节点可拖拽更新节点数据&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#element-ui-tree节点可拖拽更新节点数据&quot;&gt;#&lt;/a&gt; Element-ui Tree 节点可拖拽更新节点数据&lt;/h1&gt;
&lt;h2 id=&quot;业务介绍</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="web" scheme="https://pigpigletsgo.github.io/categories/computer-science/web/"/>
    
    <category term="vue" scheme="https://pigpigletsgo.github.io/categories/computer-science/web/vue/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="介绍" scheme="https://pigpigletsgo.github.io/tags/%E4%BB%8B%E7%BB%8D/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/tags/%E6%A1%88%E4%BE%8BDemo/"/>
    
    <category term="vue3" scheme="https://pigpigletsgo.github.io/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>weixin-java-miniapp小程序登录</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/weixin-java-miniapp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/weixin-java-miniapp%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%99%BB%E5%BD%95/</id>
    <published>2024-05-16T07:32:10.851Z</published>
    <updated>2024-05-16T07:33:01.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="weixin-java-miniapp小程序登录"><a class="anchor" href="#weixin-java-miniapp小程序登录">#</a> weixin-java-miniapp 小程序登录</h1><h2 id="引入依赖"><a class="anchor" href="#引入依赖">#</a> 引入依赖：</h2><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.binarywang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>weixin-java-miniapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="在applicationyml配置小程序登录信息"><a class="anchor" href="#在applicationyml配置小程序登录信息">#</a> 在 application.yml 配置小程序登录信息</h2><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">wxmini</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">appid</span><span class="token punctuation">:</span> wx640242aed1878581</pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token key atrule">secret</span><span class="token punctuation">:</span> 9a8b5c2e0d07d79f13cae8a2b5c61e15</pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token key atrule">msgDataFormat</span><span class="token punctuation">:</span> JSON</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token key atrule">tokensecret</span><span class="token punctuation">:</span> oiasj123j23</pre></td></tr></table></figure><h2 id="创建config"><a class="anchor" href="#创建config">#</a> 创建 Config</h2><p>目标：</p><ul><li>配置 appid</li><li>配置 secret</li><li>配置 msgDataFormat</li><li>配置其它信息</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">WxMaService</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>api<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">WxMaServiceImpl</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>config<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">WxMaDefaultConfigImpl</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnClass</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token annotation punctuation">@Configuration</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">WxMaService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxConfig</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;wxmini.appid&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> appid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;wxmini.secret&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token comment">// @Value(value = "")</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">// @Value(value = "")</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> aesKey<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;wxmini.msgDataFormat&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> msgDataFormat<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token annotation punctuation">@Bean</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">WxMaService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">WxMaService</span> <span class="token function">getWxMaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">WxMaDefaultConfigImpl</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxMaDefaultConfigImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        config<span class="token punctuation">.</span><span class="token function">setAppid</span><span class="token punctuation">(</span>appid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        config<span class="token punctuation">.</span><span class="token function">setSecret</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        config<span class="token punctuation">.</span><span class="token function">setMsgDataFormat</span><span class="token punctuation">(</span>msgDataFormat<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token class-name">WxMaServiceImpl</span> wxMaService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WxMaServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        wxMaService<span class="token punctuation">.</span><span class="token function">setWxMaConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">return</span> wxMaService<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="创建实体类和参数类"><a class="anchor" href="#创建实体类和参数类">#</a> 创建实体类和参数类</h2><p>UserEntity</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tab_user"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@Builder</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="8"></td><td><pre> * 用户 id</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token annotation punctuation">@TableId</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="13"></td><td><pre> * 用户名</pre></td></tr><tr><td data-num="14"></td><td><pre> */</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="17"></td><td><pre> * 用户性别</pre></td></tr><tr><td data-num="18"></td><td><pre> */</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="21"></td><td><pre> * 用户头像</pre></td></tr><tr><td data-num="22"></td><td><pre> */</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="25"></td><td><pre> * 用户生日</pre></td></tr><tr><td data-num="26"></td><td><pre> */</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> birthday<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="29"></td><td><pre> * 微信登录标识 id</pre></td></tr><tr><td data-num="30"></td><td><pre> */</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> openId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="33"></td><td><pre> * 微信号码</pre></td></tr><tr><td data-num="34"></td><td><pre> */</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> wxUnionId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="37"></td><td><pre> * 手机号码</pre></td></tr><tr><td data-num="38"></td><td><pre> */</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="41"></td><td><pre> * 用户状态 (0: 启用，1: 未启用)</pre></td></tr><tr><td data-num="42"></td><td><pre> */</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="45"></td><td><pre> * 用户地区</pre></td></tr><tr><td data-num="46"></td><td><pre> */</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="49"></td><td><pre> * 用户创建时间</pre></td></tr><tr><td data-num="50"></td><td><pre> */</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="53"></td><td><pre> * 用户删除时间</pre></td></tr><tr><td data-num="54"></td><td><pre> */</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">Date</span> deleteTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="57"></td><td><pre> * 逻辑删除</pre></td></tr><tr><td data-num="58"></td><td><pre> */</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token annotation punctuation">@TableLogic</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">Integer</span> isDel<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>UserInfo</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token annotation punctuation">@NoArgsConstructor</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">BigInteger</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="12"></td><td><pre>     * 用户名</pre></td></tr><tr><td data-num="13"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="16"></td><td><pre>     * 用户性别</pre></td></tr><tr><td data-num="17"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="20"></td><td><pre>     * 用户头像</pre></td></tr><tr><td data-num="21"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatarUrl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="24"></td><td><pre>     * 用户生日</pre></td></tr><tr><td data-num="25"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> birthday<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="28"></td><td><pre>     * 微信登录标识 id</pre></td></tr><tr><td data-num="29"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> openId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="32"></td><td><pre>     * 微信号码</pre></td></tr><tr><td data-num="33"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> wxUnionId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="36"></td><td><pre>     * 手机号码</pre></td></tr><tr><td data-num="37"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="40"></td><td><pre>     * 市</pre></td></tr><tr><td data-num="41"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="44"></td><td><pre>     * 国家</pre></td></tr><tr><td data-num="45"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> country<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="48"></td><td><pre>     * 语言</pre></td></tr><tr><td data-num="49"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> language<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="52"></td><td><pre>     * 省</pre></td></tr><tr><td data-num="53"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Params</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@NoArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Params</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> encryptedData<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> iv<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sessionId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> appId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="创建mapper层"><a class="anchor" href="#创建mapper层">#</a> 创建 Mapper 层</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Mapper</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XcxUserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="创建service和实现类层"><a class="anchor" href="#创建service和实现类层">#</a> 创建 Service 和实现类层</h2><p>service</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">WxMaUserInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UserEntity</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WxLoginService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name">R</span> <span class="token function">authLogin</span><span class="token punctuation">(</span><span class="token class-name">WxMaUserInfo</span> wxMaUserInfo<span class="token punctuation">,</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>serviceimpl</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">WxMaUserInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">BeanUtil</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">JWTUtil</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span></span><span class="token class-name">Wrappers</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UserEntity</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">UserInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">XcxUserMapper</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">WxLoginService</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"wxLoginService"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token annotation punctuation">@RequiredArgsConstructor</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxLoginServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">XcxUserMapper</span><span class="token punctuation">,</span> <span class="token class-name">UserEntity</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">WxLoginService</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"$&#123;tokensecret&#125;"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> tokenSecret<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token annotation punctuation">@NonNull</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">authLogin</span><span class="token punctuation">(</span><span class="token class-name">WxMaUserInfo</span> wxMaUserInfo<span class="token punctuation">,</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> sessionKey<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token class-name">UserInfo</span> userInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>wxMaUserInfo<span class="token punctuation">,</span> userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        userInfo<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phoneNumber<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token class-name">String</span> s <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"xcxLogin"</span> <span class="token operator">+</span> sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token class-name">String</span> openId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> jsonObject<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">></span></span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getOpenId</span><span class="token punctuation">,</span> openId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userEntity <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">getRegister</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">else</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">getLogin</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">R</span> <span class="token function">getLogin</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"nickname"</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">JWTUtil</span><span class="token punctuation">.</span><span class="token function">createToken</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> tokenSecret<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token class-name">UUID</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token_"</span> <span class="token operator">+</span> uuid<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"token: "</span> <span class="token operator">+</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">R</span> <span class="token function">getRegister</span><span class="token punctuation">(</span><span class="token class-name">UserInfo</span> userInfo<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token class-name">UserEntity</span> userEntity <span class="token operator">=</span> <span class="token class-name">UserEntity</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">nickname</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getNickname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">openId</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getOpenId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="73"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getAvatarUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="74"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token comment">/*userInfo.getCountry() + "/" + userInfo.getProvince() + "/" +*/</span> userInfo<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        userInfo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>userEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLogin</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="创建controller层"><a class="anchor" href="#创建controller层">#</a> 创建 controller 层</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">WxMaJscode2SessionResult</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">WxMaPhoneNumberInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>binarywang<span class="token punctuation">.</span>wx<span class="token punctuation">.</span>miniapp<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">WxMaUserInfo</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>internal<span class="token punctuation">.</span></span><span class="token class-name">StringUtil</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">me<span class="token punctuation">.</span>chanjar<span class="token punctuation">.</span>weixin<span class="token punctuation">.</span>common<span class="token punctuation">.</span>error<span class="token punctuation">.</span></span><span class="token class-name">WxErrorException</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>common<span class="token punctuation">.</span>core<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">WxConfig</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">Params</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>dromara<span class="token punctuation">.</span>dkxmodules<span class="token punctuation">.</span>xcx<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">WxLoginService</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">shade<span class="token punctuation">.</span>powerjob<span class="token punctuation">.</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/wxLoginController"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WxLoginController</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">WxLoginService</span> wxLoginService<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">WxConfig</span> wxConfig<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/wxLogin"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">wxLogin</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token class-name">String</span> sessionKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token class-name">String</span> openid <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">try</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// 通过 code 获取 openid 和 sessionkey</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token class-name">WxMaJscode2SessionResult</span> sessionInfo <span class="token operator">=</span> wxConfig<span class="token punctuation">.</span><span class="token function">getWxMaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionInfo</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            openid <span class="token operator">=</span> sessionInfo<span class="token punctuation">.</span><span class="token function">getOpenid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            sessionKey <span class="token operator">=</span> sessionInfo<span class="token punctuation">.</span><span class="token function">getSessionKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">WxErrorException</span> e<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>sessionKey<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"openId"</span><span class="token punctuation">,</span> openid<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sessionKey"</span><span class="token punctuation">,</span> sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token class-name">String</span> toOpenId <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"xcxLogin"</span> <span class="token operator">+</span> sessionKey<span class="token punctuation">,</span> toOpenId<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>        <span class="token keyword">return</span> map<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/authLogin"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">authLogin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Params</span> params<span class="token punctuation">,</span> <span class="token class-name">String</span> sessionKey<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wxConfig<span class="token punctuation">.</span><span class="token function">getWxMaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">switchover</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"未找到对应appid=[%s]的配置，请核实！"</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getAppId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token comment">// 通过 解密 加密字符串获取用户信息</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        <span class="token class-name">WxMaUserInfo</span> userInfo <span class="token operator">=</span> wxConfig<span class="token punctuation">.</span><span class="token function">getWxMaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getEncryptedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getIv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token comment">// 通过 解密 加密字符串获取用户手机号</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token class-name">WxMaPhoneNumberInfo</span> phoneNoInfo <span class="token operator">=</span> wxConfig<span class="token punctuation">.</span><span class="token function">getWxMaService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">getPhoneNoInfo</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getEncryptedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getIv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token class-name">String</span> phoneNumber <span class="token operator">=</span> phoneNoInfo<span class="token punctuation">.</span><span class="token function">getPhoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token keyword">return</span> wxLoginService<span class="token punctuation">.</span><span class="token function">authLogin</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> phoneNumber<span class="token punctuation">,</span> sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;weixin-java-miniapp小程序登录&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#weixin-java-miniapp小程序登录&quot;&gt;#&lt;/a&gt; weixin-java-miniapp 小程序登录&lt;/h1&gt;
&lt;h2 id=&quot;引入依赖&quot;&gt;&lt;a c</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
    <category term="java" scheme="https://pigpigletsgo.github.io/tags/java/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Stream流</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/steam%E6%B5%81/stream%E6%B5%81/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/steam%E6%B5%81/stream%E6%B5%81/</id>
    <published>2024-05-07T15:03:37.133Z</published>
    <updated>2024-05-07T15:04:13.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a class="anchor" href="#一-概述">#</a> 一、概述</h1><h2 id="11-函数式编程思想"><a class="anchor" href="#11-函数式编程思想">#</a> 1.1 函数式编程思想</h2><p>面相对象需要关注用什么对象完成什么事情，二函数式编程思想就类似于我们数学中的函数，它主要关注的是对数据进行了什么操作</p><h2 id="12-优点"><a class="anchor" href="#12-优点">#</a> 1.2 优点</h2><ul><li>代码简介，开发快速</li><li>接近自然语言，易于理解</li><li>易于 &quot;并发编程&quot;</li></ul><h1 id="二-lambda表达式"><a class="anchor" href="#二-lambda表达式">#</a> 二、Lambda 表达式</h1><h2 id="21-概述"><a class="anchor" href="#21-概述">#</a> 2.1 概述</h2><p>Lambda 是 JDK8 中一个语法糖，可以看成是一种语法糖，它可以对某些匿名内部类的代码进行简化，它是函数式编程思想的一个重要体现，让我们不用关注是什么对象，而是更关注我们对数据进行了什么操作</p><h2 id="22-核心原则"><a class="anchor" href="#22-核心原则">#</a> 2.2 核心原则</h2><p>可推导可省略</p><h2 id="23-基本格式"><a class="anchor" href="#23-基本格式">#</a> 2.3 基本格式</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>代码<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="例一"><a class="anchor" href="#例一">#</a> 例一</h3><p>我们在创建线程并启动时可以使用匿名内部类的写法：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以使用 Lambda 的格式对其进行修改，修改后如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>PS：什么情况下才可以使用 Lambda 进行简化呢？原则：如果这个匿名内部类是一个接口并且其中只有一个抽象方法的时候我们就可以对它进行简化</p><h3 id="例二"><a class="anchor" href="#例二">#</a> 例二</h3><p>现有方法定义如下，其中 IntBinaryOperator 是一个接口，先使用匿名内部类的写法调用该方法</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token class-name">IntBinaryOperator</span> operator<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token keyword">return</span> operator<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>lambda 写法：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntBinaryOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                           <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                           <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                           <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                              <span class="token keyword">return</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                           <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token class-name">IntBinaryOperator</span> operator<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token keyword">return</span> operator<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>lambda 简化写法：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">-></span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateNum</span><span class="token punctuation">(</span><span class="token class-name">IntBinaryOperator</span> operator<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> operator<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>结果都是：20</p><h3 id="例三"><a class="anchor" href="#例三">#</a> 例三</h3><p>现有方法定义如下，其中 IntPredicate 是一个接口，先使用匿名内部类的写法调用该方法</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token function">printNum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IntPredicate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token keyword">return</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printNum</span><span class="token punctuation">(</span><span class="token class-name">IntPredicate</span> predicate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>lambda 简化写法：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token function">printNum</span><span class="token punctuation">(</span>value <span class="token operator">-></span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printNum</span><span class="token punctuation">(</span><span class="token class-name">IntPredicate</span> predicate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token keyword">if</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>结果都是：2,4,6,8,10</p><h3 id="例四"><a class="anchor" href="#例四">#</a> 例四</h3><p>现有方法定义如下，其中 Function 是一个接口，现使用匿名内部类的写法调用该方法</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token function">typeConver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">R</span> <span class="token function">typeConver</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> function<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token class-name">R</span> result <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>lambda 简化写法：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token function">typeConver</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">R</span> <span class="token function">typeConver</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> function<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">R</span> result <span class="token operator">=</span> function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="24-省略规则"><a class="anchor" href="#24-省略规则">#</a> 2.4 省略规则</h2><ul><li>参数类型可以省略</li><li>方法体只有一句代码时大括号 return 和唯一一句代码的分号可以省略</li><li>方法只有一个参数时小括号可以省略</li></ul><h1 id="三-stream流"><a class="anchor" href="#三-stream流">#</a> 三、stream 流</h1><h2 id="31-概述"><a class="anchor" href="#31-概述">#</a> 3.1 概述</h2><p>java8 的 stream 使用的是函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作，可以方便的让我们对集合或数组操作</p><h2 id="32-案例数据准备"><a class="anchor" href="#32-案例数据准备">#</a> 3.2 案例数据准备</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@NoArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@EqualsAndHashCode</span> <span class="token comment">// 用于后期的去重使用</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// id</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 姓名</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token comment">// 年龄</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token comment">// 简介</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token comment">// 作品</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@NoArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@EqualsAndHashCode</span> <span class="token comment">// 用于后期的去重使用</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// id</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 书名</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token comment">// 分类</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token comment">// 评分</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token comment">// 简介</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token keyword">private</span> <span class="token class-name">String</span> intro<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 数据初始化</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"demo01"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token class-name">Author</span> author2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"demo1"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"demo02"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">Author</span> author3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"demo2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"demo03"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token class-name">Author</span> author4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"demo3"</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token string">"demo04"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token comment">// 书籍列表</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   books1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token string">"aaa1"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">"aaa3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   books1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token string">"bbb1"</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token string">"bbb3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>   books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"ccc"</span><span class="token punctuation">,</span> <span class="token string">"ccc1"</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token string">"ccc3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>   books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"ddd"</span><span class="token punctuation">,</span> <span class="token string">"ddd1"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token string">"ddd3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>   books2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">4L</span><span class="token punctuation">,</span> <span class="token string">"eee"</span><span class="token punctuation">,</span> <span class="token string">"eee1"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"eee3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>   books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">5L</span><span class="token punctuation">,</span> <span class="token string">"fff"</span><span class="token punctuation">,</span> <span class="token string">"fff1"</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token string">"fff3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>   books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">,</span> <span class="token string">"ggg"</span><span class="token punctuation">,</span> <span class="token string">"ggg1"</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token string">"ggg3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>   books3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">,</span> <span class="token string">"hhh"</span><span class="token punctuation">,</span> <span class="token string">"hhh1"</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token string">"hhh3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>   author<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>   author2<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>   author3<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>   author4<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>books3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> author2<span class="token punctuation">,</span> author3<span class="token punctuation">,</span> author4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>   <span class="token keyword">return</span> authorList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>[Author(id=1, name=demo, age=33, intro=demo01, books=[Book(id=5, name=fff, category=fff1, score=82, intro=fff3), Book(id=6, name=ggg, category=ggg1, score=84, intro=ggg3), Book(id=6, name=hhh, category=hhh1, score=85, intro=hhh3)]), Author(id=2, name=demo1, age=23, intro=demo02, books=null), Author(id=3, name=demo2, age=13, intro=demo03, books=null), Author(id=3, name=demo3, age=43, intro=demo04, books=null)]</code></pre><h2 id="33-快速入门"><a class="anchor" href="#33-快速入门">#</a> 3.3 快速入门</h2><h3 id="331-需求"><a class="anchor" href="#331-需求">#</a> 3.3.1 需求</h3><p>我们可以调用 getAuthors 方法获取到作家的集合，现在需要打印所有年龄小于 18 的作家的名字，并且注意去重。</p><h3 id="332-实现"><a class="anchor" href="#332-实现">#</a> 3.3.2 实现</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Author(id=3, name=demo2, age=13, intro=demo03, books=null)</code></pre><h3 id="如何debug查看流程结果呢"><a class="anchor" href="#如何debug查看流程结果呢">#</a> 如何 debug 查看流程结果呢？</h3><p>点击 Trace Current Stream Chain</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240424095317804.png" alt="image-20240424095317804" /></p><p>我们可以清除的看到它帮我们计算出来的流程结果了</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240424095413783.png" alt="image-20240424095413783" /></p><h2 id="34-常用操作"><a class="anchor" href="#34-常用操作">#</a> 3.4 常用操作</h2><h3 id="341-创建流"><a class="anchor" href="#341-创建流">#</a> 3.4.1 创建流</h3><p>单列集合： <code>集合对象.stream()</code></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>数组： <code>Arrays.stream(数组)或者使用Stream.of来创建</code></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Integer</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>双列集合：转换成单列集合后再创建</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="342-中间操作"><a class="anchor" href="#342-中间操作">#</a> 3.4.2 中间操作</h3><h4 id="filter"><a class="anchor" href="#filter">#</a> filter</h4><p>可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中</p><p>例如：</p><p>打印所有姓名长度大于 1 的作家的姓名</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="map"><a class="anchor" href="#map">#</a> map</h4><p>可以把对流中的元素进行计算或转换</p><p>例如：</p><p>打印所有作家的姓名</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token string">"作家姓名："</span> <span class="token operator">+</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">//------------------------------------------------------</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-></span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>age <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="distinct"><a class="anchor" href="#distinct">#</a> distinct</h4><p>可以去除流中重复的元素</p><p>例如：</p><p>打印所有作家的姓名，并且要求其中不能有重复元素</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>注意：distinc 方法是依赖 Object 的 equals 方法来判断是否相同对象的，所以需要注意重写 equals 方法</p><h4 id="sorted"><a class="anchor" href="#sorted">#</a> sorted</h4><p>可以对流中的元素进行排序</p><p>sorted ()：需要在排序的对象中 实现 Comparable&lt;Object&gt; 接口并重写 CompareTo (Object o) 方法来定义排序规则</p><p>sorted (Comparator&lt;? super Author&gt; comparator )：Comparator 接口中提供了 compare 方法来定义排序规则</p><p>例如：只演示 有参方法</p><p>对流中的元素按照年龄进行降序排序，并且要求不能有重复元素</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>注意：如果调用空参的 sorted 方法时，需要流中的元素 (需要排序的类) 实现了 Comparable 接口并重写 CompareTo 来定义排序规则</p><h4 id="limit"><a class="anchor" href="#limit">#</a> limit</h4><p>可以设置流的最大长度，超出的部分将被抛弃</p><p>例如：</p><p>对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素，然后打印其中年龄最大的两个作家的姓名</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 限制流的最大长度为 10 个数据</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="skip"><a class="anchor" href="#skip">#</a> skip</h4><p>跳过流中的前 n 个元素，返回剩下的元素</p><p>例如：</p><p>打印除了年龄最大的作家外的其它作家，要求不能有重复元素，并且按照年龄降序排序</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">sikp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 跳过前一个元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="flatmap"><a class="anchor" href="#flatmap">#</a> flatMap</h4><p>map 只能把一个对象转换成另一个对象来作为流中的元素，而 flatMap 可以把一个对象转换成多个对象作为流中的元素</p><p>例一：</p><p>打印所有书籍的名字，要求对重复的元素进行去重</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>流程分析：将 author 对象中的所有 Books 集合转换为流作为一个 Book 对象</p><p>debug</p><p>如下将不同的流对象里面的 List&lt;Books&gt; 集合转换为对应的对象，<mark>将一个流转换为多个流到 Stream 中</mark></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/recording.gif" alt="recording" /></p><h3 id="343-终结操作"><a class="anchor" href="#343-终结操作">#</a> 3.4.3 终结操作</h3><h4 id="foreach"><a class="anchor" href="#foreach">#</a> forEach</h4><p>对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作</p><p>例子：</p><p>输出所有作家的名字</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="count"><a class="anchor" href="#count">#</a> count</h4><p>可以用来获取当前流中元素的个数</p><p>例子：</p><p>打印这些作家的所出书籍的数目，注意去除重复元素</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="maxmin"><a class="anchor" href="#maxmin">#</a> max&amp;min</h4><p>可以用来获取流中的最 (大 / 小) 值</p><p>例子：</p><p>分别获取这些作家的所出书籍的最高分和最低分并打印</p><p>最大值</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> <span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>最小值</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> max <span class="token operator">=</span> <span class="token function">authors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-></span> book<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1 <span class="token operator">-</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="collect"><a class="anchor" href="#collect">#</a> collect</h4><p>把当前流转换成一个集合</p><p>例子：</p><p>获取一个存放所有作者名字的 List 集合</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>获取一个所有书名的 Set 集合</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>book <span class="token operator">-></span> book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>获取一个 map 集合，map 的 key 为作者名，value 为 List&lt;Book&gt;</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e1 <span class="token operator">-></span> e1<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>&#123;demo3=[Book(id=5, name=fff, category=fff1, score=82, intro=fff3), Book(id=6, name=ggg, category=ggg1, score=84, intro=ggg3), Book(id=6, name=hhh, category=hhh1, score=85, intro=hhh3)], demo=[Book(id=1, name=aaa, category=aaa1, score=88, intro=aaa3), Book(id=2, name=bbb, category=bbb1, score=48, intro=bbb3)], demo1=[Book(id=3, name=ccc, category=ccc1, score=68, intro=ccc3), Book(id=3, name=ddd, category=ddd1, score=38, intro=ddd3), Book(id=4, name=eee, category=eee1, score=18, intro=eee3)], demo2=[Book(id=5, name=fff, category=fff1, score=82, intro=fff3), Book(id=6, name=ggg, category=ggg1, score=84, intro=ggg3), Book(id=6, name=hhh, category=hhh1, score=85, intro=hhh3)]&#125;</code></pre><p>获取一个 map 集合，map 的 key 为作者名，value 为 List&lt;String&gt; 书名的集合</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e1 <span class="token operator">-></span> e1<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-></span> o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>&#123;demo3=[fff, ggg, hhh], demo=[aaa, bbb], demo1=[ccc, ddd, eee], demo2=[fff, ggg, hhh]&#125;</code></pre><p>PS：如果我们在使用 key 为作者名的时候 key 是不能重复的比如我更改两个重复的作者名</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 数据初始化</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"demo01"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Author</span> author2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"demo1"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"demo02"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">Author</span> author3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"demo2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"demo03"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Author</span> author4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">3L</span><span class="token punctuation">,</span> <span class="token string">"demo2"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"demo03"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>然后我们在运行代码：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e1 <span class="token operator">-></span> e1<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>运行结果：</p><pre><code>Exception in thread &quot;main&quot; java.lang.IllegalStateException: Duplicate key [Book(id=5, name=fff, category=fff1, score=82, intro=fff3), Book(id=6, name=ggg, category=ggg1, score=84, intro=ggg3), Book(id=6, name=hhh, category=hhh1, score=85, intro=hhh3)]at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133)at java.util.HashMap.merge(HashMap.java:1255)at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1384)at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482)at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472)at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)at com.dkx.StreamDemo.main(StreamDemo.java:14)</code></pre><p>报错了，说 key 不能重复，因此我们可以使用去重来解决这个问题</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collect <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e1 <span class="token operator">-></span> e1<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span>demo<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>aaa<span class="token punctuation">,</span> category<span class="token operator">=</span>aaa1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>aaa3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span>bbb<span class="token punctuation">,</span> category<span class="token operator">=</span>bbb1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>bbb3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> demo1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span>ccc<span class="token punctuation">,</span> category<span class="token operator">=</span>ccc1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">68</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>ccc3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span>ddd<span class="token punctuation">,</span> category<span class="token operator">=</span>ddd1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">38</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>ddd3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span>eee<span class="token punctuation">,</span> category<span class="token operator">=</span>eee1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>eee3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> demo2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span>fff<span class="token punctuation">,</span> category<span class="token operator">=</span>fff1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">82</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>fff3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span>ggg<span class="token punctuation">,</span> category<span class="token operator">=</span>ggg1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">84</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>ggg3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span>hhh<span class="token punctuation">,</span> category<span class="token operator">=</span>hhh1<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">85</span><span class="token punctuation">,</span> intro<span class="token operator">=</span>hhh3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这时问题就解决了。</p><h4 id="查找与匹配"><a class="anchor" href="#查找与匹配">#</a> 查找与匹配</h4><h5 id="anymatch"><a class="anchor" href="#anymatch">#</a> anyMatch</h5><p>可以用来判断是否有任意符合匹配条件的元素，结果为 boolean 类型</p><p>例子：</p><p>判断是否有年龄在 29 以上的作家</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span></pre></td></tr></table></figure><h5 id="allmatch"><a class="anchor" href="#allmatch">#</a> allMatch</h5><p>可以用来判断是否都符合匹配条件，结果为 boolean 类型。如果都符合结果为 true，否则结果为 false</p><p>例子：</p><p>判断是否所有的作家都是成年人</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span></pre></td></tr></table></figure><h5 id="nonematch"><a class="anchor" href="#nonematch">#</a> noneMatch</h5><p>可以判断流中的元素是否都符合匹配条件，如果都不符合结果为 true，否则结果为 false</p><p>例子：</p><p>判断作家是否都没有超过 100 岁的</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span></pre></td></tr></table></figure><h5 id="findany"><a class="anchor" href="#findany">#</a> findAny</h5><p>获取流中的任意一个元素，该方法没有办法保证获取的一定是流中的第一个元素</p><p>PS：使用场景并不多，因为它是随机性的并不是一定获取的就是第一个元素 (推荐使用 findFirst)</p><p>例子：</p><p>获取任意一个年龄大于 18 的作家，如果存在就输出它的名字</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> any <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//ifPresent 可以避免空指针异常的出现，如果有值就正常输出，如果没有值就不输出也不抛出异常</span></pre></td></tr><tr><td data-num="5"></td><td><pre>any<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h5 id="findfirst"><a class="anchor" href="#findfirst">#</a> findFirst</h5><p>获取流中的第一个元素</p><p>例子：</p><p>获取一个年龄最小的作家， 并输出它的姓名。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>first<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h4 id="reduce归并"><a class="anchor" href="#reduce归并">#</a> reduce 归并</h4><p>对流中的数据按照你制定的计算方式计算出一个结果。(缩减操作)</p><p>reduce 的作用是把 stream 中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和在初始化值的基础上进行计算，计算结果再和后面的元素计算</p><p>它内部的计算方式如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">T</span> result <span class="token operator">=</span> identity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> element <span class="token operator">:</span> <span class="token keyword">this</span> stream<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   result <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr></table></figure><p>其中 identity 就是我们可以通过方法参数传入的初始值，accumulator 的 apply 具体进行什么计算也是我们通过方法参数来确定的</p><p>例子：</p><p>使用 reduce 求所有作者年龄的和</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Integer</span> reduce <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 0: 从几开始相加，result 结果 + element 当前值</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-></span> result <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用 reduce 求所有作者中年龄的最大值</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Integer</span> reduce <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-></span> result <span class="token operator">&lt;</span> element <span class="token operator">?</span> element <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用 reduce 求所有作者中年龄的最小值</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Integer</span> reduce <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-></span> result <span class="token operator">></span> element <span class="token operator">?</span> element <span class="token operator">:</span> result<span class="token punctuation">)</span></pre></td></tr></table></figure><p>reduce 一个参数的重载形式内部的计算</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> foundAny <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> element <span class="token operator">:</span> <span class="token keyword">this</span> stream<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>foundAny<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      foundAny <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      result <span class="token operator">=</span> element<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">else</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      result <span class="token operator">=</span> accumulator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">return</span> foundAny <span class="token operator">?</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>就是把流当中 第一个元素作为 初始化值 进行后面的计算</p><p>如果使用一个参数的重载方法求最小值的代码如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> reduce <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-></span> result <span class="token operator">></span> element <span class="token operator">?</span> element <span class="token operator">:</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>reduce<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>r <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">pintln</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="35-注意事项"><a class="anchor" href="#35-注意事项">#</a> 3.5 注意事项</h2><ul><li>惰性求值 (如果没有终结操作，没有中间操作是不会得到执行的)</li><li>流是一次性的 (一旦一个流对象经过一个终结操作后，这个流就不能再被使用)</li><li>不会影响原数据 (我们在流中可以多数据做很多处理。但是正常情况下不会影响原来集合中的元素的。这往往也是我们期望的)</li></ul><p>针对第二步的说法错误代码演示如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错点</span></pre></td></tr></table></figure><p>错误信息如下：</p><pre><code>Exception in thread &quot;main&quot; java.lang.IllegalStateException: stream has already been operated upon or closedat java.util.stream.AbstractPipeline.&lt;init&gt;(AbstractPipeline.java:203)at java.util.stream.ReferencePipeline.&lt;init&gt;(ReferencePipeline.java:94)at java.util.stream.ReferencePipeline$StatelessOp.&lt;init&gt;(ReferencePipeline.java:618)at java.util.stream.ReferencePipeline$3.&lt;init&gt;(ReferencePipeline.java:187)at java.util.stream.ReferencePipeline.map(ReferencePipeline.java:186)at com.dkx.StreamDemo.main(StreamDemo.java:14)</code></pre><p>我们如果下次还想使用 stream 进行操作，我们需要重新去获取 stream 流而这样就不会报错</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream1 <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>stream1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>针对第三步的详细说明如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>stream</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 在流中针对 每个 年龄 都加上 10 并输出结果</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>age <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stream数据："</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 输出原集合中的数据看看有没有发生变化</span></pre></td></tr><tr><td data-num="8"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原数据："</span> <span class="token operator">+</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>stream数据：43stream数据：33stream数据：23stream数据：23原数据：33原数据：23原数据：13原数据：13</code></pre><p>上面的情况是不会影响到原数据的 这是正常的操作，如果是不正常的操作呢？如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>stream</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>           <span class="token comment">// 在流中针对 每个 对象的年龄字段 都加上 10 并输出结果</span></pre></td></tr><tr><td data-num="7"></td><td><pre>           author<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>           <span class="token keyword">return</span> author<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stream数据："</span> <span class="token operator">+</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 输出原集合中的数据看看有没有发生变化</span></pre></td></tr><tr><td data-num="11"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原数据："</span> <span class="token operator">+</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>stream数据：43stream数据：33stream数据：23stream数据：23原数据：43原数据：33原数据：23原数据：23</code></pre><h1 id="四-optional"><a class="anchor" href="#四-optional">#</a> 四、Optional</h1><p>非常优雅的避免 空指针异常。</p><h2 id="41-概述"><a class="anchor" href="#41-概述">#</a> 4.1 概述</h2><p>我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p><p>例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token keyword">if</span><span class="token punctuation">(</span>author <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Author</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"朵朵"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"未知生物"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token keyword">return</span> author <span class="token punctuation">;</span><span class="token comment">// --> null;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>尤其是对象中的属性还是一个对象的情况下。这种判断会更多。</p><p>而过多的判断语句会让我们的代码显得臃肿不堪</p><p>所以在 JDK8 中引入了 Optional，养成使用 Optional 的习惯后你可以写出更优雅的代码来避免空指针异常</p><p>并且在很多函数式编程相关 API 中也都用到了 Optional，如果不会使用 Optional 也会对函数式编程的学习造成影响。</p><h2 id="42-使用"><a class="anchor" href="#42-使用">#</a> 4.2 使用</h2><h3 id="421-创建对象"><a class="anchor" href="#421-创建对象">#</a> 4.2.1 创建对象</h3><p>Optional 就好像是包装类，可以把我们的具体数据封装 Optional 对象内部。然后我们去使用 Optional 中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。</p><p>我们一般使用<strong> Optional</strong> 的<strong>静态方法 ofNullable</strong> 来把数据封装成一个 Optional 对象。无论传入的参数是否为 null 都不会出现问题。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下 getAuthor 方法，让其返回值就是封装好的 Optional 的话，我们在使用时就会方便很多。</p><p>而且在实际开发中我们的数据很多是从数据库获取的。Mybatis 从 3.5 版本可以也已经支持 Optional 了。我们可以直接把 dao 方法的返回值类型定义成 Optional 类型，Mybatis 会自己把数据封装成 Optinoal 对象返回。封装的过程也不需要我们自己操作。</p><p>如果你确定一个对象不是空的则可以使用 Optional 的静态方法 of 来把数据封装成 Optional 对象</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>但是一定要注意，如果使用 of 的时候传入的参数必须不为 null。(尝试下传入 null 会出现什么结果)</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>r <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Author</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"朵朵"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"未知生物"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// author ;// --> null;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Exception in thread &quot;main&quot; java.lang.NullPointerExceptionat java.util.Objects.requireNonNull(Objects.java:203)at java.util.Optional.&lt;init&gt;(Optional.java:96)at java.util.Optional.of(Optional.java:108)at com.dkx.StreamDemo01.main(StreamDemo01.java:10)</code></pre><p>抛出了空指针异常</p><p>如果一个方法的返回值类型是 Optional 类型。而如果我们经判断发现某次计算得到的返回值为 null，这个时候就需要把 null 封装成 Optional 对象返回。这时则可以使用<strong> Optional</strong> 的<strong>静态方法 empty</strong> 来进行封装。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>代码演示：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token function">getAuthorOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>r <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> <span class="token function">getAuthorOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"朵朵"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"未知生物"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token comment">// 判断如果为 null 则返回一个空的 Optional 对象，如果不为空则使用 of（必须传入不为 null 的对象）返回 Optional 对象</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> author <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>朵朵</code></pre><p>所以最后你觉得哪种方式会更方便呢？</p><blockquote><p>这里如果我们使用 ofNullable 一个方法就可以搞定了，不用手动去判断具体看场景但是推荐使用 ofNullable</p></blockquote><h3 id="422-安全消费值"><a class="anchor" href="#422-安全消费值">#</a> 4.2.2 安全消费值</h3><p>我们获取到一个 Optional 对象后肯定需要对其中的数据进行使用。这时候我们可以使用其 ifPresent 方法对来消费其中的值。</p><p>这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。</p><p>例如，以下写法就优雅的避免了空指针异常。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authorOptional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="423-获取值"><a class="anchor" href="#423-获取值">#</a> 4.2.3 获取值</h3><p>如果我们想获取值自己进行处理可以使用 get 方法获取，但是不推荐，因为当 Optional 内部的数据为空的时候会出现异常。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   authorOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Author</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"朵朵"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"未知生物"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// author ;// --> null;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Exception in thread &quot;main&quot; java.util.NoSuchElementException: No value presentat java.util.Optional.get(Optional.java:135)at com.dkx.StreamDemo01.main(StreamDemo01.java:11)</code></pre><p>我们可以进行下面的 4.2.4 中介绍的来安全获取值</p><h3 id="424-安全获取值"><a class="anchor" href="#424-安全获取值">#</a> 4.2.4 安全获取值</h3><p>如果我们期望安全的获取值。我们不推荐使用 get 方法，而是使用 Optional 提供的以下方法。</p><ul><li><p>orElaseGet</p><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认返回。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Author</span> author1 <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>代码演示：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">Author</span> author1 <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">,</span> <span class="token string">"朵朵1"</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token string">"未知生物1"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Author</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"朵朵"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"未知生物"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// author ;// --> null;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>朵朵1 </code></pre></li><li><p>orElseThrow</p><p>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">try</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Throwalbe</span><span class="token punctuation">></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> </pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"author为空"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>代码演示：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">Author</span> author1 <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"author为空"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Author</span> <span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token class-name">Author</span> author <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Author</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token string">"朵朵"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token string">"未知生物"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// author ;// --> null;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>Exception in thread &quot;main&quot; java.lang.RuntimeException: author为空at com.dkx.StreamDemo01.lambda$main$0(StreamDemo01.java:11)at java.util.Optional.orElseThrow(Optional.java:290)at com.dkx.StreamDemo01.main(StreamDemo01.java:11)</code></pre></li></ul><h3 id="425-过滤"><a class="anchor" href="#425-过滤">#</a> 4.2.5 过滤</h3><p>我们可以使用 filter 方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的 Optional 对象。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 判断年龄不为空并且大于 100 的</span></pre></td></tr><tr><td data-num="3"></td><td><pre>authorOptional<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="426-判断"><a class="anchor" href="#426-判断">#</a> 4.2.6 判断</h3><p>我们可以使用 isPresent 方法进行是否存在数据的判断。如果为空返回值为 false，如果不为空，返回值为 true。但是这种方式并不能体现 Optional 的好处，<strong>更推荐使用 ifPresent 方法</strong>。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span><span class="token punctuation">(</span>authorOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>authorOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="427-数据转换"><a class="anchor" href="#427-数据转换">#</a> 4.2.7 数据转换</h3><p>Optional 还提供了 map 可以让我们对数据进行转换，并且转换得到的数据也还是被 Optional 包装好的，保证了我们的使用安全。</p><p>例如我们想获取作家的书籍集合</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">getAuthor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Optoinal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span> books <span class="token operator">=</span> authorOptional<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>books<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> books<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      books<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>book <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h1 id="五-函数式接口"><a class="anchor" href="#五-函数式接口">#</a> 五、函数式接口</h1><h2 id="51-概述"><a class="anchor" href="#51-概述">#</a> 5.1 概述</h2><p>只有一个抽象方法的接口我们称之为函数式接口。</p><p>JDK 的函数式接口都加上了 @FunctionalInterface 注解进行标识。但是无论是否加上该注解只要接口中只有一个抽象方法，都是函数式接口。</p><h2 id="52-常见函数式接口"><a class="anchor" href="#52-常见函数式接口">#</a> 5.2 常见函数式接口</h2><ul><li><p>Consumer 消费接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中传入的参数进行消费</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240503180324703.png" alt="image-20240503180324703" /></p></li><li><p>Funcion 计算转换接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240503180417372.png" alt="image-20240503180417372" /></p></li><li><p>Predicate 判断接口</p><p>根据其中的抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240503180534953.png" alt="image-20240503180534953" /></p></li><li><p>Supplier 生产接口</p><p>根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240503180851242.png" alt="image-20240503180851242" /></p></li></ul><h2 id="53-常用的默认方法"><a class="anchor" href="#53-常用的默认方法">#</a> 5.3 常用的默认方法</h2><ul><li><p>and</p><p>我们在使用 Prediccate 接口时候可能需要进行判断条件的拼接。而 and 方法相当于是使用 &amp;&amp; 来拼接两个条件</p><p>例如：</p><p>打印作家中年龄大于 17 并且姓名的长度大于 1 的作家。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>转换为 lambda 表达式：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>前面不加 (Predicate&lt;Author&gt;) 就会报错</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240503182848199.png" alt="image-20240503182848199" /></p><p>这样写我们必须在前面写上 (Predicate&lt;Author&gt;)，如果不想加我们可以使用 &amp;&amp; 来进行判断</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span> <span class="token operator">&amp;&amp;</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>or</p><p>我们在使用 Predicate 接口时候可能需要进行判断条件的拼接。而 or 方法相当于是使用 || 来拼接两个判断条件。</p><p>例如：</p><p>打印作家中年龄大于 17 或者姓名的长度小于 2 的作家。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>转换为 lambda 表达式：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用 || 来判断</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span> <span class="token operator">||</span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>negate</p><p>Predicate 接口中的方法。negate 方法相当于是在判断添加前面加了个！表示取反</p><p>例如：</p><p>打印作家中年龄不大于 17 的作家</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Author</span> author<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">return</span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>转换为 lambda 格式：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>使用！来判断</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>author <span class="token operator">-></span> <span class="token operator">!</span><span class="token punctuation">(</span>author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ul><h1 id="六-方法引用"><a class="anchor" href="#六-方法引用">#</a> 六、方法引用</h1><p>我们在使用 lambda 时，如果方法体中只有一个方法的调用的话 (包括构造方法)，我们可以用方法引用进一步简化代码。</p><h2 id="61-推荐用法"><a class="anchor" href="#61-推荐用法">#</a> 6.1 推荐用法</h2><p>我们在使用 lambda 时不需要考虑什么时候用方法引用，哪种方法引用，方法引用是什么。我们只需要在写完 lambda 方法发现方法体只有一行代码，并且是方法的调用时使用快捷键尝试是否是能够转换成方法引用即可。</p><p>当我们方法引用使用的多了慢慢的也可以直接写出方法引用。</p><h2 id="62-基本格式"><a class="anchor" href="#62-基本格式">#</a> 6.2 基本格式</h2><p>类名或者对象名：：方法名</p><h2 id="63-语法详解了解"><a class="anchor" href="#63-语法详解了解">#</a> 6.3 语法详解 (了解)</h2><h3 id="631-引用静态方法"><a class="anchor" href="#631-引用静态方法">#</a> 6.3.1 引用静态方法</h3><p>其实就是引用类的静态方法</p><h4 id="格式"><a class="anchor" href="#格式">#</a> 格式</h4><pre><code>类名::方法名</code></pre><h3 id="使用前提"><a class="anchor" href="#使用前提">#</a> 使用前提</h3><p>如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个方法的静态方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个静态方法中</strong>，这个时候我们就可以引用类的静态方法。</p><p>例如：</p><p>如下代码就可以用方法引用进行简化</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>authorStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-></span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>注意</strong>，如果我们所重写的方法都是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。</p><p>优化后代码如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="632-引用对象的实例方法"><a class="anchor" href="#632-引用对象的实例方法">#</a> 6.3.2 引用对象的实例方法</h3><h4 id="格式-2"><a class="anchor" href="#格式-2">#</a> 格式</h4><pre><code>对象名::方法名</code></pre><h3 id="使用前提-2"><a class="anchor" href="#使用前提-2">#</a> 使用前提</h3><p>如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是 <strong>调用了某个对象的成员方法</strong>，并且我们把要重写的<strong>抽象方法中所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用对象的实例方法。</p><p>例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authorStream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>authorStream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-></span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>stream<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>sb<span class="token operator">::</span><span class="token function">append</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="634-引用类的实例方法"><a class="anchor" href="#634-引用类的实例方法">#</a> 6.3.4 引用类的实例方法</h3><h4 id="格式-3"><a class="anchor" href="#格式-3">#</a> 格式</h4><pre><code>类名::方法名</code></pre><h3 id="使用前提-3"><a class="anchor" href="#使用前提-3">#</a> 使用前提</h3><p>如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了第一个参数的成员方法</strong>，并且我们把要重写的<strong>抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中</strong>，这个时候我们就可以引用类的实例方法。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>dkx</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>dkx<span class="token punctuation">.</span></span><span class="token class-name">StreamDemo</span><span class="token punctuation">.</span><span class="token static">getAuthors</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamDemo02</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">interface</span> <span class="token class-name">UserString</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">String</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">subAuthorName</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">UserString</span> useString<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> useString<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token function">subAuthorName</span><span class="token punctuation">(</span><span class="token string">"三更草堂"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>优化后代码如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token function">subAuthorName</span><span class="token punctuation">(</span><span class="token string">"三更草堂"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">substring</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="635-构造器引用"><a class="anchor" href="#635-构造器引用">#</a> 6.3.5 构造器引用</h3><p>如果方法体中的一行代码是构造器的话就可以使用构造器引用。</p><h4 id="格式-4"><a class="anchor" href="#格式-4">#</a> 格式</h4><pre><code>类名：:new</code></pre><h3 id="使用前提-4"><a class="anchor" href="#使用前提-4">#</a> 使用前提</h3><p>如果我们在重写方法的时候，方法体中<strong>只有一行代码</strong>，并且这行代码是<strong>调用了某个类的构造方法</strong>，并且我们把要重写的<strong>抽象方法中的所有的参数都按照顺序传入了这个构造方法中</strong>，这个时候我们就可以引引用构造器。</p><p>例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span>）<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span>）<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>     <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name<span class="token operator">-></span><span class="token keyword">new</span> <span class="token class-name">StringBui1der</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>     <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>sb<span class="token operator">-></span>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-三更"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>     <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str<span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>代码优化后如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>sb <span class="token operator">-></span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"三更"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>str <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h1 id="七-高级用法"><a class="anchor" href="#七-高级用法">#</a> 七、高级用法</h1><h2 id="基本数据类型优化"><a class="anchor" href="#基本数据类型优化">#</a> 基本数据类型优化</h2><p>我们之前用到的很多 Stream 的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。</p><p>即使我们操作的是整数小数，但是实际用的都是它们的包装类。JDK5 中引入的自动装箱拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很小。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了。</p><p>所以为了让我们能够对这部分的时间消耗进行优化。stream 还提供了很多专门针对基本数据类型的方法。</p><p>例如：mapToInt，mapToLong，mapToDouble，floatMapToInt，floatMapToDouble 等。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test27</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-></span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>age <span class="token operator">-></span> age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-></span> age <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在 age + 10 的代码流程中 这个 age 是 Integer 类型的会进行 自动拆箱 为 int 类型进行 + 10 计算 然后再进行 装箱，这里会消耗很多时间</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>          <span class="token keyword">return</span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>使用 mapToInt 如下</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test27</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Author</span><span class="token punctuation">></span></span> authors <span class="token operator">=</span> <span class="token function">getAuthors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   authors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>author <span class="token operator">-></span> author<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ToIntFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">applyAsInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                      <span class="token keyword">return</span> age <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>age <span class="token operator">-></span> age <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>age <span class="token operator">-></span> age <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="并行流"><a class="anchor" href="#并行流">#</a> 并行流</h2><p>当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完成。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认知。而如果我们使用 Stream 的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p><p>下面是使用 parallel 转换为 并行流的执行结果</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 假设数据量很大 串行流 处理很慢</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Integer</span> sum <span class="token operator">=</span> stream</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 转换为 并行流 多个线程 进行操作</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//stream api 中专门用于 调式的方法 相对于 forEach 它是中间操作不会终结后面的调用 打印流中的元素</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">-></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token operator">-></span> result <span class="token operator">+</span> ele<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终结果： "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>结果：</p><pre><code>1 - ForkJoinPool.commonPool-worker-36 - ForkJoinPool.commonPool-worker-43 - ForkJoinPool.commonPool-worker-54 - ForkJoinPool.commonPool-worker-67 - ForkJoinPool.commonPool-worker-22 - ForkJoinPool.commonPool-worker-15 - main最终结果： 13</code></pre><p>不使用 parallel 转换的结果</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 假设数据量很大 串行流 处理很慢</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Integer</span> sum <span class="token operator">=</span> stream</pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>p <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//stream api 中专门用于 调式的方法 相对于 forEach 它是中间操作不会终结后面的调用 打印流中的元素</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>num <span class="token operator">-></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> ele<span class="token punctuation">)</span> <span class="token operator">-></span> result <span class="token operator">+</span> ele<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">1</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">3</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">4</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token number">5</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token number">6</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token number">7</span> <span class="token operator">-</span> main</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token number">13</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-概述&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#一-概述&quot;&gt;#&lt;/a&gt; 一、概述&lt;/h1&gt;
&lt;h2 id=&quot;11-函数式编程思想&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#11-函数式编程思想&quot;&gt;#&lt;/a&gt; 1.1 函数式编程思想&lt;/h2&gt;</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    <category term="stream流" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/"/>
    
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    <category term="stream流" scheme="https://pigpigletsgo.github.io/tags/stream%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>返回枚举数据给前端</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%BF%94%E5%9B%9E%E6%9E%9A%E4%B8%BE%E6%95%B0%E6%8D%AE%E7%BB%99%E5%89%8D%E7%AB%AF/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E8%BF%94%E5%9B%9E%E6%9E%9A%E4%B8%BE%E6%95%B0%E6%8D%AE%E7%BB%99%E5%89%8D%E7%AB%AF/</id>
    <published>2024-04-17T01:07:21.168Z</published>
    <updated>2024-04-17T01:07:52.295Z</updated>
    
    <content type="html"><![CDATA[<p>定义一个枚举类：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Getter</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TheTypeOfCouponOffereds</span> <span class="token keyword">implements</span> <span class="token class-name">TypeOfCoupon</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">SignUpForaGift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"注册赠送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">GiftOfPurchase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"购物赠送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">PresentedToTheAudience</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"全场赠送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre>     * 获取全部枚举</pre></td></tr><tr><td data-num="12"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TheTypeOfCouponOffereds</span><span class="token punctuation">></span></span> <span class="token function">getAllEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TheTypeOfCouponOffereds</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>     * 获取优惠类型</pre></td></tr><tr><td data-num="3"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="4"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TheTypeOfCouponOffereds</span><span class="token punctuation">></span></span> allEnum <span class="token operator">=</span> <span class="token class-name">TheTypeOfCouponOffereds</span><span class="token punctuation">.</span><span class="token function">getAllEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> allEnum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>     * 获取优惠类型</pre></td></tr><tr><td data-num="3"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="4"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/getType"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">return</span> discountService<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token string">"SignUpForaGift"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token string">"GiftOfPurchase"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token string">"PresentedToTheAudience"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这个前端肯定是看不懂的</p><p>这里要注意了，注意 @JsonFormat 的用法，这个注解就是把我们要返回的枚举以对象的形式进行序列化，也就是转成（key，value）的格式，你可以理解成就是转换成 Json 格式，你细心点你可以发现 比如我下面的这个枚举，每个枚举值都有 code 和 message 属性，你就可以把它 (每个枚举值) 看做是一个对象.</p><p>定义一个接口：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">JsonFormat<span class="token punctuation">.</span>Shape</span><span class="token punctuation">.</span><span class="token constant">OBJECT</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TypeOfCoupon</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>让枚举类实现这个接口：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Getter</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">TheTypeOfCouponOffereds</span> <span class="token keyword">implements</span> <span class="token class-name">TypeOfCoupon</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">SignUpForaGift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"注册赠送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">GiftOfPurchase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"购物赠送"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">PresentedToTheAudience</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"全场赠送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre>     * 获取全部枚举</pre></td></tr><tr><td data-num="12"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TheTypeOfCouponOffereds</span><span class="token punctuation">></span></span> <span class="token function">getAllEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TheTypeOfCouponOffereds</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>我们再查询：</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"注册赠送"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"购物赠送"</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"全场赠送"</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其它操作可参考代码：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>* 获取全部枚举</pre></td></tr><tr><td data-num="3"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PeriodLoanBillEnum</span><span class="token punctuation">></span></span> <span class="token function">getAllEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PeriodLoanBillEnum</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">return</span> list<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre>* 获取全部枚举值</pre></td></tr><tr><td data-num="12"></td><td><pre>*</pre></td></tr><tr><td data-num="13"></td><td><pre>* @return List&lt;String></pre></td></tr><tr><td data-num="14"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getAllEnumCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PeriodLoanBillEnum</span> each <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>each<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">return</span> list<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="24"></td><td><pre>* 通过 Code 获取枚举</pre></td></tr><tr><td data-num="25"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PeriodLoanBillEnum</span> <span class="token function">getEnumByCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token class-name">PeriodLoanBillEnum</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PeriodLoanBillEnum</span> statusEnum <span class="token operator">:</span> <span class="token function">getAllEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>statusEnum<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>result <span class="token operator">=</span> statusEnum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="38"></td><td><pre>* 得到枚举值码。</pre></td></tr><tr><td data-num="39"></td><td><pre>*</pre></td></tr><tr><td data-num="40"></td><td><pre>* @return 枚举值码。</pre></td></tr><tr><td data-num="41"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">return</span> code<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="47"></td><td><pre>* 得到枚举描述。</pre></td></tr><tr><td data-num="48"></td><td><pre>*</pre></td></tr><tr><td data-num="49"></td><td><pre>* @return 枚举描述。</pre></td></tr><tr><td data-num="50"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">return</span> message<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;定义一个枚举类：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption data-lang=&quot;java&quot;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&quot;1&quot;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>sql-blog-day2024-4-14</title>
    <link href="https://pigpigletsgo.github.io/computer-science/blog/sql-blog/"/>
    <id>https://pigpigletsgo.github.io/computer-science/blog/sql-blog/</id>
    <published>2024-04-14T07:43:52.414Z</published>
    <updated>2024-05-14T05:57:42.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql-blog"><a class="anchor" href="#sql-blog">#</a> sql-blog</h1><p>场景：</p><p>今天写了一个 针对每个用户查询对应的多个标签，和它的订单数量还有总价</p><p>表如下：</p><p>user 用户表：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240414151839124.png" alt="image-20240414151839124" /></p><p>user_tags 用户与标签关联表：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240414151905335.png" alt="image-20240414151905335" /></p><p>tag_managment 标签表：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240414152025256.png" alt="image-20240414152025256" /></p><p>order 订单表：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240414152122075.png" alt="image-20240414152122075" /></p><p>首先我们得考虑如何完成这个业务的查询先想 sql 怎么写：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    t<span class="token punctuation">.</span>id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    t<span class="token punctuation">.</span>head<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    t<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    t<span class="token punctuation">.</span>open_id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    t<span class="token punctuation">.</span>wx_union_id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    t<span class="token punctuation">.</span>sex<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    t<span class="token punctuation">.</span>phone<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    t<span class="token punctuation">.</span>state<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    t<span class="token punctuation">.</span>address<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    t<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    t<span class="token punctuation">.</span>delete_time<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    t<span class="token punctuation">.</span>is_del<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token keyword">AS</span> <span class="token keyword">UNSIGNED</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> order_count<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre> <span class="token function">SUM</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>total_price <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> order_price</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    tab_user t</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_user_tags t1 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>user_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_tag_managent t2 <span class="token keyword">ON</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>tags_id <span class="token operator">AND</span> t2<span class="token punctuation">.</span>is_del <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_order o <span class="token keyword">ON</span> o<span class="token punctuation">.</span>create_ther <span class="token operator">=</span> t<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    t<span class="token punctuation">.</span>is_del <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    t<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>首先通过左连接对应三张表的关系，然后使用 sql 函数计算出每个用户的所有订单数量和总和，但是我们还需要几个模糊查询完整 sql 如下：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    t<span class="token punctuation">.</span>id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    t<span class="token punctuation">.</span>head<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    t<span class="token punctuation">.</span>nickname<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    t<span class="token punctuation">.</span>open_id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    t<span class="token punctuation">.</span>wx_union_id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    t<span class="token punctuation">.</span>sex<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    t<span class="token punctuation">.</span>phone<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    t<span class="token punctuation">.</span>state<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    t<span class="token punctuation">.</span>address<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    t<span class="token punctuation">.</span>create_time<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    t<span class="token punctuation">.</span>delete_time<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    t<span class="token punctuation">.</span>is_del<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    CAST<span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token keyword">AS</span> <span class="token keyword">UNSIGNED</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> order_count<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre> <span class="token function">SUM</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>total_price <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> order_price</pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    tab_user t</pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_user_tags t1 <span class="token keyword">ON</span> t1<span class="token punctuation">.</span>user_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_tag_managent t2 <span class="token keyword">ON</span> t2<span class="token punctuation">.</span>id <span class="token operator">=</span> t1<span class="token punctuation">.</span>tags_id <span class="token operator">AND</span> t2<span class="token punctuation">.</span>is_del <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_order o <span class="token keyword">ON</span> o<span class="token punctuation">.</span>create_ther <span class="token operator">=</span> t<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    t<span class="token punctuation">.</span>is_del <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token operator">AND</span> t<span class="token punctuation">.</span>nickname <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token operator">AND</span> t<span class="token punctuation">.</span>wx_union_id <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token operator">AND</span> t<span class="token punctuation">.</span>phone <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token operator">AND</span> t<span class="token punctuation">.</span>sex <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token operator">AND</span> t2<span class="token punctuation">.</span>tag_name <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token operator">AND</span> t<span class="token punctuation">.</span>create_time <span class="token operator">BETWEEN</span> <span class="token string">'2024-04-13 10:11:02'</span> </pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token operator">AND</span> <span class="token string">'2024-04-15 10:11:08'</span> </pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token operator">AND</span> t<span class="token punctuation">.</span>id <span class="token operator">LIKE</span> CONCAT<span class="token punctuation">(</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'%'</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">GROUP</span> <span class="token keyword">BY</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    t<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">LIMIT</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>下面编号 java 代码：</p><p>这里 除了用户的 Mapper 就省略了：</p><p>Mapper</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Mapper</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">MPJBaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>xml</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">&lt;!--namespace 绑定一个对应的 Dao (Mapper) 接口 --></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newUserDto<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>open_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wx_union_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wxUnionId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>is_del<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isDel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderCount<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_price<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">foreignColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">&lt;!--SQL 语句头标签 --></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">&lt;!--select: 查询语句，id: 对应接口的方法名，parameterType: 参数类型，resultType: 返回值类型 --></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.entity.User<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newUserDto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>        SELECT</pre></td></tr><tr><td data-num="27"></td><td><pre>        t.id,</pre></td></tr><tr><td data-num="28"></td><td><pre>        t.head,</pre></td></tr><tr><td data-num="29"></td><td><pre>        t.nickname,</pre></td></tr><tr><td data-num="30"></td><td><pre>        t.open_id,</pre></td></tr><tr><td data-num="31"></td><td><pre>        t.wx_union_id,</pre></td></tr><tr><td data-num="32"></td><td><pre>        t.sex,</pre></td></tr><tr><td data-num="33"></td><td><pre>        t.phone,</pre></td></tr><tr><td data-num="34"></td><td><pre>        t.state,</pre></td></tr><tr><td data-num="35"></td><td><pre>        t.address,</pre></td></tr><tr><td data-num="36"></td><td><pre>        t.create_time,</pre></td></tr><tr><td data-num="37"></td><td><pre>        t.delete_time,</pre></td></tr><tr><td data-num="38"></td><td><pre>        t.is_del,</pre></td></tr><tr><td data-num="39"></td><td><pre>        CAST(COUNT(o.id) / 2 AS UNSIGNED) AS order_count,</pre></td></tr><tr><td data-num="40"></td><td><pre>        SUM(o.total_price / 2) AS order_price</pre></td></tr><tr><td data-num="41"></td><td><pre>        FROM</pre></td></tr><tr><td data-num="42"></td><td><pre>        tab_user t</pre></td></tr><tr><td data-num="43"></td><td><pre>        LEFT JOIN tab_user_tags t1 ON t1.user_id = t.id</pre></td></tr><tr><td data-num="44"></td><td><pre>        LEFT JOIN tab_tag_managent t2 ON t2.id = t1.tags_id AND t2.is_del = 0</pre></td></tr><tr><td data-num="45"></td><td><pre>        LEFT JOIN tab_order o ON o.create_ther = t.id</pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="47"></td><td><pre>            t.is_del = 0</pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.nickname != null and user.nickname != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="49"></td><td><pre>                AND t.nickname LIKE CONCAT('%', #&#123;user.nickname&#125;, '%')</pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.wxUnionId != null and user.wxUnionId != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="52"></td><td><pre>                AND t.wx_union_id LIKE CONCAT('%', #&#123;user.wxUnionId&#125;, '%')</pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.phone != null and user.phone != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="55"></td><td><pre>                AND t.phone LIKE CONCAT('%', #&#123;user.phone&#125;, '%')</pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.sex != null and user.sex != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="58"></td><td><pre>                AND t.sex LIKE CONCAT('%', #&#123;user.sex&#125;, '%')</pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.tagsName != null and user.tagsName != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="61"></td><td><pre>                AND t2.tag_name LIKE CONCAT('%', #&#123;user.tagsName&#125;, '%')</pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.startDate != null and user.startDate != '' and user.endDate != null and user.endDate != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="64"></td><td><pre>                AND t.create_time BETWEEN #&#123;user.startDate&#125; AND #&#123;user.endDate&#125;</pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.id != null and user.id != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="67"></td><td><pre>                AND t.id LIKE CONCAT('%', #&#123;user.id&#125;, '%')</pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="70"></td><td><pre>        GROUP BY</pre></td></tr><tr><td data-num="71"></td><td><pre>        t.id;</pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTags<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="75"></td><td><pre>        SELECT</pre></td></tr><tr><td data-num="76"></td><td><pre>            tag_name</pre></td></tr><tr><td data-num="77"></td><td><pre>        FROM</pre></td></tr><tr><td data-num="78"></td><td><pre>            tab_tag_managent ttm</pre></td></tr><tr><td data-num="79"></td><td><pre>                LEFT JOIN tab_user_tags tut ON tut.tags_id = ttm.id</pre></td></tr><tr><td data-num="80"></td><td><pre>                LEFT JOIN tab_user tu ON tu.id = tut.user_id</pre></td></tr><tr><td data-num="81"></td><td><pre>        WHERE</pre></td></tr><tr><td data-num="82"></td><td><pre>            tu.id = #&#123;id&#125;</pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>由于我们还需要用户的所有标签信息所以下面写了一个 getTags 的 select 这个会返回到实体类的集合字段中，其中 resultMap 中的 collection 里面要 column=&quot;id&quot; foreignColumn=&quot;id&quot;，这里会把查询的用户 id 传入 并找到 select 对应的查询然后进行查询返回结果到 tags 字段中返回类型是 String 类型的集合</p><p>实体类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 用户表</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token annotation punctuation">@NoArgsConstructor</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"tab_user"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre>     * 用户 id</pre></td></tr><tr><td data-num="12"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">BigInteger</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="17"></td><td><pre>     * 用户头像</pre></td></tr><tr><td data-num="18"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="22"></td><td><pre>     * 用户昵称</pre></td></tr><tr><td data-num="23"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户昵称"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="27"></td><td><pre>     * 微信登录标识 id</pre></td></tr><tr><td data-num="28"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"微信登录标识"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> openId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="32"></td><td><pre>     * 微信号码</pre></td></tr><tr><td data-num="33"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"微信号码"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> wxUnionId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="37"></td><td><pre>     * 用户性别</pre></td></tr><tr><td data-num="38"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户性别"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token annotation punctuation">@ExcelDictFormat</span><span class="token punctuation">(</span>readConverterExp <span class="token operator">=</span> <span class="token string">"0=男,1=女"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="43"></td><td><pre>     * 用户手机号</pre></td></tr><tr><td data-num="44"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户手机号"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="48"></td><td><pre>     * 用户状态 (0: 启用，1: 未启用)</pre></td></tr><tr><td data-num="49"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户状态"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="53"></td><td><pre>     * 用户地址</pre></td></tr><tr><td data-num="54"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户地址"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="58"></td><td><pre>     * 创建时间</pre></td></tr><tr><td data-num="59"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"创建时间"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> createTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="63"></td><td><pre>     * 删除时间</pre></td></tr><tr><td data-num="64"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"删除时间"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> deleteTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="68"></td><td><pre>     * 逻辑删除</pre></td></tr><tr><td data-num="69"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="71"></td><td><pre>    <span class="token annotation punctuation">@TableLogic</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> isDel<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token comment">// 这里排除的字段是用来查询或者接收数据的</span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> tagsName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tags<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderCount<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> orderPrice<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> startDate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>    <span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> endDate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>     * 查询全部数据并分页，模糊查询</pre></td></tr><tr><td data-num="3"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="4"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> params<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token keyword">long</span> total <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> total<span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>controller</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>     * 查询全部数据并分页，模糊查询</pre></td></tr><tr><td data-num="3"></td><td><pre>     * @param pageParams</pre></td></tr><tr><td data-num="4"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="5"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getAll"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240414154035783.png" alt="image-20240414154035783" /></p><p>如果要想返回标签里面是一个对象的话，如下：</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">&lt;!--namespace 绑定一个对应的 Dao (Mapper) 接口 --></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newUserDto<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.entity.UserEntity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>open_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>openId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wx_union_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wxUnionId<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete_time<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>is_del<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isDel<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_count<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderCount<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order_price<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orderPrice<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.entity.vo.UserTagVo<span class="token punctuation">"</span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">foreignColumn</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">&lt;!--SQL 语句头标签 --></span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">&lt;!--select: 查询语句，id: 对应接口的方法名，parameterType: 参数类型，resultType: 返回值类型 --></span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.entity.UserEntity<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>newUserDto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>        SELECT</pre></td></tr><tr><td data-num="27"></td><td><pre>        t.id,</pre></td></tr><tr><td data-num="28"></td><td><pre>        t.head,</pre></td></tr><tr><td data-num="29"></td><td><pre>        t.nickname,</pre></td></tr><tr><td data-num="30"></td><td><pre>        t.open_id,</pre></td></tr><tr><td data-num="31"></td><td><pre>        t.wx_union_id,</pre></td></tr><tr><td data-num="32"></td><td><pre>        t.sex,</pre></td></tr><tr><td data-num="33"></td><td><pre>        t.phone,</pre></td></tr><tr><td data-num="34"></td><td><pre>        t.state,</pre></td></tr><tr><td data-num="35"></td><td><pre>        t.address,</pre></td></tr><tr><td data-num="36"></td><td><pre>        t.create_time,</pre></td></tr><tr><td data-num="37"></td><td><pre>        t.delete_time,</pre></td></tr><tr><td data-num="38"></td><td><pre>        t.is_del,</pre></td></tr><tr><td data-num="39"></td><td><pre>        CAST(COUNT(o.order_id) / 2 AS UNSIGNED) AS order_count,</pre></td></tr><tr><td data-num="40"></td><td><pre>        SUM(o.actual_payment / 2) AS order_price</pre></td></tr><tr><td data-num="41"></td><td><pre>        FROM</pre></td></tr><tr><td data-num="42"></td><td><pre>        tab_user t</pre></td></tr><tr><td data-num="43"></td><td><pre>        LEFT JOIN tab_user_tags t1 ON t1.user_id = t.id</pre></td></tr><tr><td data-num="44"></td><td><pre>        LEFT JOIN tab_tag_managent t2 ON t2.id = t1.tags_id AND t2.is_del = 0</pre></td></tr><tr><td data-num="45"></td><td><pre>        LEFT JOIN tab_order o ON o.user_id = t.id</pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="47"></td><td><pre>            t.is_del = 0</pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.nickname != null and user.nickname != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="49"></td><td><pre>                AND t.nickname LIKE CONCAT('%', #&#123;user.nickname&#125;, '%')</pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.wxUnionId != null and user.wxUnionId != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="52"></td><td><pre>                AND t.wx_union_id LIKE CONCAT('%', #&#123;user.wxUnionId&#125;, '%')</pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.phone != null and user.phone != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="55"></td><td><pre>                AND t.phone LIKE CONCAT('%', #&#123;user.phone&#125;, '%')</pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.sex != null and user.sex != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="58"></td><td><pre>                AND t.sex LIKE CONCAT('%', #&#123;user.sex&#125;, '%')</pre></td></tr><tr><td data-num="59"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.tagsName != null and user.tagsName != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="61"></td><td><pre>                AND t2.tag_name LIKE CONCAT('%', #&#123;user.tagsName&#125;, '%')</pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.tagId != null and user.tagId != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="64"></td><td><pre>                AND t2.id LIKE CONCAT('%', #&#123;user.tagId&#125;, '%')</pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.startDate != null and user.startDate != '' and user.endDate != null and user.endDate != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="67"></td><td><pre>                AND t.create_time BETWEEN #&#123;user.startDate&#125; AND #&#123;user.endDate&#125;</pre></td></tr><tr><td data-num="68"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user.id != null and user.id != ''<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="70"></td><td><pre>                AND t.id LIKE CONCAT('%', #&#123;user.id&#125;, '%')</pre></td></tr><tr><td data-num="71"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="73"></td><td><pre>        GROUP BY</pre></td></tr><tr><td data-num="74"></td><td><pre>        t.id,</pre></td></tr><tr><td data-num="75"></td><td><pre>        t.head,</pre></td></tr><tr><td data-num="76"></td><td><pre>        t.nickname,</pre></td></tr><tr><td data-num="77"></td><td><pre>        t.open_id,</pre></td></tr><tr><td data-num="78"></td><td><pre>        t.wx_union_id,</pre></td></tr><tr><td data-num="79"></td><td><pre>        t.sex,</pre></td></tr><tr><td data-num="80"></td><td><pre>        t.phone,</pre></td></tr><tr><td data-num="81"></td><td><pre>        t.state,</pre></td></tr><tr><td data-num="82"></td><td><pre>        t.address,</pre></td></tr><tr><td data-num="83"></td><td><pre>        t.create_time,</pre></td></tr><tr><td data-num="84"></td><td><pre>        t.delete_time,</pre></td></tr><tr><td data-num="85"></td><td><pre>        t.is_del</pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTags<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.dromara.dkxmodules.entity.vo.UserTagVo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="89"></td><td><pre>        SELECT</pre></td></tr><tr><td data-num="90"></td><td><pre>            tag_name AS tagName, tag_color AS tagColor</pre></td></tr><tr><td data-num="91"></td><td><pre>        FROM</pre></td></tr><tr><td data-num="92"></td><td><pre>            tab_tag_managent ttm</pre></td></tr><tr><td data-num="93"></td><td><pre>                LEFT JOIN tab_user_tags tut ON tut.tags_id = ttm.id</pre></td></tr><tr><td data-num="94"></td><td><pre>                LEFT JOIN tab_user tu ON tu.id = tut.user_id</pre></td></tr><tr><td data-num="95"></td><td><pre>        WHERE</pre></td></tr><tr><td data-num="96"></td><td><pre>            tu.id = #&#123;id&#125;</pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>把实体类的泛型更改：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@ExcelIgnore</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserTagVo</span><span class="token punctuation">></span></span> tags<span class="token punctuation">;</span></pre></td></tr></table></figure><p>数据格式：</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">"items"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"1789958514896728066"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token property">"head"</span><span class="token operator">:</span> <span class="token string">"http://192.168.2.35:9000/ruoyi/2024/05/13/c5988ff5342f4bb4bdee0cb7d3f47bde.jpeg"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"Misjudgment"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token property">"birthday"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token property">"openId"</span><span class="token operator">:</span> <span class="token string">"o_Pd964vdtzklLVH08zzEpWBsUFE"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token property">"wxUnionId"</span><span class="token operator">:</span> <span class="token string">"wex324"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token property">"phone"</span><span class="token operator">:</span> <span class="token string">"19831988276"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token property">"state"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token property">"address"</span><span class="token operator">:</span> <span class="token string">"河北省邢台市沙河市十里亭"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token property">"createTime"</span><span class="token operator">:</span> <span class="token string">"2024-05-13 17:59:00"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token property">"deleteTime"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token property">"isDel"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token property">"tagsName"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token property">"tags"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token property">"tagName"</span><span class="token operator">:</span> <span class="token string">"回头客"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                    <span class="token property">"tagColor"</span><span class="token operator">:</span> <span class="token string">"2"</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token property">"orderCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token property">"orderPrice"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token property">"startDate"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token property">"endDate"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token property">"tagId"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">2147483647</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token property">"pageNo"</span><span class="token operator">:</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token property">"counts"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token property">"page"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token property">"pageSize"</span><span class="token operator">:</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql-blog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sql-blog&quot;&gt;#&lt;/a&gt; sql-blog&lt;/h1&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;p&gt;今天写了一个 针对每个用户查询对应的多个标签，和它的订单数量还有总价&lt;/p&gt;
&lt;p&gt;表如下：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="blog" scheme="https://pigpigletsgo.github.io/categories/computer-science/blog/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="blog - sql" scheme="https://pigpigletsgo.github.io/tags/blog-sql/"/>
    
  </entry>
  
  <entry>
    <title>PowerDesigner生成SQL带注释避免comment报错</title>
    <link href="https://pigpigletsgo.github.io/tools/powerdesigner/PowerDesigner%E7%94%9F%E6%88%90SQL%E5%B8%A6%E6%B3%A8%E9%87%8A%E9%81%BF%E5%85%8Dcomment%E6%8A%A5%E9%94%99/"/>
    <id>https://pigpigletsgo.github.io/tools/powerdesigner/PowerDesigner%E7%94%9F%E6%88%90SQL%E5%B8%A6%E6%B3%A8%E9%87%8A%E9%81%BF%E5%85%8Dcomment%E6%8A%A5%E9%94%99/</id>
    <published>2024-04-07T09:39:42.973Z</published>
    <updated>2024-04-07T09:40:12.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="powerdesigner生成sql带注释避免comment报错"><a class="anchor" href="#powerdesigner生成sql带注释避免comment报错">#</a> PowerDesigner 生成 SQL 带注释避免 comment 报错</h1><h2 id="powerdesigner-165-生成的sql语句在mysql数据库无法成功执行"><a class="anchor" href="#powerdesigner-165-生成的sql语句在mysql数据库无法成功执行">#</a> powerdesigner 16.5 生成的 sql 语句在 mysql 数据库无法成功执行</h2><p>用 pd 导出的 sql, 默认无法正常执行会报错</p><pre><code>[Err] 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'comment on table TB_PAYOUT_APPLY_UNIQUE is '结汇申请防重表'' at line 1</code></pre><p>默认导出 sql 为：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 为了减少篇幅，减少了部分字段注释</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> TB_PAYOUT_APPLY_UNIQUE </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   SRC_MERCHANT_ID      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   MER_ORDER_NO         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   UNION_TIME           <span class="token keyword">datetime</span>                       <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   PAYOUT_SEQNO         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   GMT_CREATE           <span class="token keyword">datetime</span>                       <span class="token boolean">null</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">table</span> TB_PAYOUT_APPLY_UNIQUE <span class="token operator">is</span> </pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token string">'结汇申请防重表'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">comment</span> <span class="token keyword">on</span> <span class="token keyword">column</span> TB_PAYOUT_APPLY_UNIQUE<span class="token punctuation">.</span>SRC_MERCHANT_ID <span class="token operator">is</span> </pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token string">'交易来源商户号'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">index</span> TB_PAYOUT_UNIQUE_IDX <span class="token keyword">on</span> TB_PAYOUT_APPLY_UNIQUE <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="17"></td><td><pre>PAYOUT_SEQNO <span class="token keyword">ASC</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>comment on column TB_PAYOUT_APPLY_UNIQUE.MER_ORDER_NO is '外部订单号';</code>  在 mysql 下是无法直接执行</p><p>mysql 的单字段修改，<strong> 使用 alter table 方法</strong></p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> column_name <span class="token keyword">TINYINT</span><span class="token punctuation">(</span><span class="token keyword">tinyint</span>表示<span class="token keyword">column</span>类型<span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'-1：默认值，1：人员id，2：公司id'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这种写法必须要指定 字段类型: <code>TINYINT(tinyint表示column类型)</code>  否则会报错.</p><p><strong>那么需要修改 sql 的注释修改.</strong></p><h2 id="1-列注释修改"><a class="anchor" href="#1-列注释修改">#</a> 1 列注释修改</h2><ol><li><p>在 Database -&gt; edit Current DBMS... 设置 dbms 的属性，找到 script -&gt; objects -&gt; column -&gt; add</p></li><li><p>在原来的内容后面添加 <code>[ comment %.q:COMMENT%]]注意去掉一个]</code></p><p>添加后的内容为 (可拷贝)： <code>%20:COLUMN% %30:DATATYPE%[.Z:[%Compressed%? compressed][ %NULLNOTNULL%][%IDENTITY%?[.O:[ default autoincrement][ identity]]:[%COMPUTE%? compute (%COMPUTE%):[ default %DEFAULT%]]] [%CONSTDEFN%][ comment %.q:COMMENT%]]</code></p></li><li><p>把 script -&gt; column -&gt; ColumnComment 的 Value 清空</p></li></ol><h2 id="2-表注释修改"><a class="anchor" href="#2-表注释修改">#</a> 2 表注释修改</h2><ol><li><p>在 Database -&gt; edit Current DBMS... 设置 dbms 的属性</p></li><li><p>找到 script -&gt; objects -&gt; Table -&gt; TableComment: Value 中</p><p>修改后内容为 (可拷贝)： <code>alter table [%QUALIFIER%]%TABLE% comment %.60qA:COMMENT%</code></p></li></ol><h2 id="3-去掉主键注释"><a class="anchor" href="#3-去掉主键注释">#</a> 3 去掉主键注释</h2><ol><li>在 Databse -&gt; edit Current DBMS... 设置 dbms 的属性，找到 script -&gt; objects -&gt; Pkey -&gt; PKeyComment 清空 Value 值，如需要注释则修改其格式</li></ol><h2 id="其它修改"><a class="anchor" href="#其它修改">#</a> 其它修改</h2><ol><li><p>调整导出 sql 的编码格式</p><p>database -&gt; Generate Databse -&gt; Format Encoding: UTF-8 点击确定</p></li></ol><h2 id="调整后的sql"><a class="anchor" href="#调整后的sql">#</a> 调整后的 sql</h2><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">create</span> <span class="token keyword">table</span> TB_OCEAN_PAYOUT_BILL_RELATION </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   SRC_MERCHANT_ID      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">comment</span> <span class="token string">'交易来源商户号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   MER_ORDER_NO         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">comment</span> <span class="token string">'外部订单号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   PAYOUT_SEQNO         <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>                    <span class="token operator">not</span> <span class="token boolean">null</span>  <span class="token keyword">comment</span> <span class="token string">'结汇交易流水号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   OCEAN_PAY_BILL_NO    <span class="token keyword">numeric</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token boolean">null</span>  <span class="token keyword">comment</span> <span class="token string">'跨境支付单号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   DT_CREATE            <span class="token keyword">datetime</span>                       <span class="token boolean">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token keyword">constraint</span> PK_TB_OCEAN_PAYOUT_BILL_RELATI <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">clustered</span> <span class="token punctuation">(</span>SRC_MERCHANT_ID<span class="token punctuation">,</span> MER_ORDER_NO<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">alter</span> <span class="token keyword">table</span> TB_OCEAN_PAYOUT_BILL_RELATION <span class="token keyword">comment</span> <span class="token string">'结汇申请支付单关联表'</span><span class="token punctuation">;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;powerdesigner生成sql带注释避免comment报错&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#powerdesigner生成sql带注释避免comment报错&quot;&gt;#&lt;/a&gt; PowerDesigner 生成 SQL 带注释避免 commen</summary>
      
    
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/categories/tools/"/>
    
    <category term="nodeJs" scheme="https://pigpigletsgo.github.io/categories/tools/nodeJs/"/>
    
    <category term="PowerDesigner" scheme="https://pigpigletsgo.github.io/categories/tools/nodeJs/PowerDesigner/"/>
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/tags/tools/"/>
    
    <category term="PowerDesigner" scheme="https://pigpigletsgo.github.io/tags/PowerDesigner/"/>
    
  </entry>
  
  <entry>
    <title>状态模式(State Pattern)</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</id>
    <published>2024-04-04T01:19:48.637Z</published>
    <updated>2024-04-04T01:20:10.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="状态模式state-pattern"><a class="anchor" href="#状态模式state-pattern">#</a> 状态模式 (State Pattern)</h1><h2 id="概述"><a class="anchor" href="#概述">#</a> 概述</h2><p>状态模式在日常开发中是一个非常实用的模式，可以将你的代码逼格迅速提升一个档次，所以让我们开始今天的卓越之旅吧</p><h2 id="类型"><a class="anchor" href="#类型">#</a> 类型</h2><p>行为型 (behavioral)</p><h2 id="定义"><a class="anchor" href="#定义">#</a> 定义</h2><blockquote><p>当一个对象内的状态改变时允许改变其行为，这个对象看起来像是改变了其类</p></blockquote><p>定义对于初学者没啥用，因为字都认识却无法理解其中的含义。必须等学完了，回过头来看才更加深刻的理解其含义</p><h2 id="使用场景"><a class="anchor" href="#使用场景">#</a> 使用场景</h2><p>你发现你的代码里面存在一个很长的 if   else 列表，而这些分支都是因为不同状态下执行的操作不一样时考虑使用此模式</p><h2 id="uml类图"><a class="anchor" href="#uml类图">#</a> UML 类图</h2><p>照例先上一张俺手撕的 UML 类图</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/v2-45f0b3b1c6e71fd355d941f981c1b105_720w.webp" alt="img" /></p><p>从上图可见，此模式共有 3 个角色</p><ul><li>State</li></ul><p>是一个接口，封装了状态及其行为</p><ul><li>ConcreteState X</li></ul><p>State 的实现类，表示具体的状态</p><ul><li>Context</li></ul><p>保持并切换各个状态，其持有一个 State 的引用。它将依赖状态的各种操作委托给不同的状态对象执行。其负责与客户端交互</p><h2 id="实例"><a class="anchor" href="#实例">#</a> 实例</h2><p>最近王二狗又要过生日了，近两年他内心中是非常抗拒过生日的，因为每过一个生日就意味着自己又老一岁，离被辞退的 35 岁魔咒又近了一步。可惜时间是不以人的意志为转移的，任何人都阻止不了时间的流逝，所以该过还的过。令二狗比较欣慰的时，这次过生日老婆送了他一个自己一直想要的机械键盘作为生日礼物... 翠花于是在二狗生日前 3 天在京东上下了一个单...</p><p>自从下单以来，二狗天天看物流状态信息，心心念念着自己的机械键盘快点到...</p><p>这个物流系统就很适合使用状态模式来开发，因为此过程存在很多不同的状态，例如接单，出库，运输，送货，收货，评价等等。而订单在每个不同的状态下的操作可能都不一样，例如在接单状态下，商家就需要通知仓库拣货，通知用户等等操作，其他状态类似</p><h2 id="下面是实例的uml类图"><a class="anchor" href="#下面是实例的uml类图">#</a> 下面是实例的 UML 类图</h2><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240404090640257.png" alt="image-20240404090640257" /></p><h2 id="1-定义一个状态接口"><a class="anchor" href="#1-定义一个状态接口">#</a> 1 定义一个状态接口</h2><p>此接口定义各个状态的统一操作接口</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 状态接口</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LogisticsState</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">JdLogistics</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="2-定义一个物流context类"><a class="anchor" href="#2-定义一个物流context类">#</a> 2  定义一个物流 Context 类</h2><p>此类持有一个 LogisticsState 的引用，负责在流程中保持并切换状态</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 物流 Context 类</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdLogistics</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">LogisticsState</span> logisticsState<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLogisticsState</span><span class="token punctuation">(</span><span class="token class-name">LogisticsState</span> logisticsState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>logisticsState <span class="token operator">=</span> logisticsState<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">LogisticsState</span> <span class="token function">getLogisticsState</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> logisticsState<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>logisticsState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        logisticsState<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="3-实现各种状态类"><a class="anchor" href="#3-实现各种状态类">#</a> 3 实现各种状态类</h2><p>接单状态类，其需要实现 LogisticsState 接口</p><h3 id="接单状态类"><a class="anchor" href="#接单状态类">#</a> 接单状态类</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 状态类</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderState</span> <span class="token keyword">implements</span> <span class="token class-name">LogisticsState</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">JdLogistics</span> context<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商家已经接单，正在处理中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="出库状态类"><a class="anchor" href="#出库状态类">#</a> 出库状态类</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 状态类</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductOutState</span> <span class="token keyword">implements</span> <span class="token class-name">LogisticsState</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">JdLogistics</span> context<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商品已经出库..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="运输状态类"><a class="anchor" href="#运输状态类">#</a> 运输状态类</h3><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * 状态类</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransportState</span> <span class="token keyword">implements</span> <span class="token class-name">LogisticsState</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token class-name">JdLogistics</span> context<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商品正在运往天津分发中心..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以此类推，可以建立任意多个状态类</p><h2 id="客户端使用"><a class="anchor" href="#客户端使用">#</a> 客户端使用</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateClient</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">StateClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buyKeyBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buyKeyBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token comment">// 状态的保持与切换者</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">JdLogistics</span> jdLogistics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdLogistics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// 接单状态</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">OrderState</span> orderState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        jdLogistics<span class="token punctuation">.</span><span class="token function">setLogisticsState</span><span class="token punctuation">(</span>orderState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        jdLogistics<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">// 出库状态</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">ProductOutState</span> productOutState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProductOutState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        jdLogistics<span class="token punctuation">.</span><span class="token function">setLogisticsState</span><span class="token punctuation">(</span>productOutState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        jdLogistics<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 运输状态</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token class-name">TransportState</span> transportState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransportState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        jdLogistics<span class="token punctuation">.</span><span class="token function">setLogisticsState</span><span class="token punctuation">(</span>transportState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        jdLogistics<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>商家已经接单，正在处理中...商品已经出库...商品正在运往天津分发中心...</code></pre><p>可见，我们将每个状态下要做的具体动作封装到了每个状态类中，我们只需要切换不同的状态即可。如果不使用状态模式，我们的代码中可能会出现很长的 if  else 列表，这样就不便于扩展和修改了</p><h2 id="技术要点总结"><a class="anchor" href="#技术要点总结">#</a> 技术要点总结</h2><ul><li>必须要有一个 Context 类，这个类持有 State 接口，负责保持并切换当前的状态</li><li>状态模式没有定义在哪里进行状态转换，本例是在 Context 类进行的，也有人在具体的 State 类中转换</li></ul><p><strong>当使用 Context 类切换状态时</strong>，状态类之间互相不认识，它们直接的依赖关系应该有客户端负责。</p><p>例如：只有在接单状态的操作完成后才应该切换到出库状态，那么出库状态就对接单状态有了依赖，这个依赖顺序应该有客户端负责，而不是在状态内判断</p><p><strong>当使用具体的 State 类切换时</strong>，状态直接就可能互相认知，一个状态执行完就自动切换到了另一个状态去了</p><h2 id="优缺点"><a class="anchor" href="#优缺点">#</a> 优缺点</h2><h3 id="优点"><a class="anchor" href="#优点">#</a> 优点</h3><ul><li>增强了程序的可扩展性，因为我们很容易添加一个 State</li><li>增强了程序的封装性，每个状态的操作都被封装到了一个状态类中</li></ul><h3 id="缺点"><a class="anchor" href="#缺点">#</a> 缺点</h3><p>类变多了</p><h2 id="状态模式与策略模式"><a class="anchor" href="#状态模式与策略模式">#</a> 状态模式与策略模式</h2><p>状态模式与策略模式的 UML 类图都是一样的，从表面上看它们非常相似，特别是将状态切换任务放在 Context 中做的时候就更像了，但是其背后的思想却非常不同</p><ul><li><strong>策略模式</strong>：定义了一组可互相代替的算法，这一组算法对象完成的是同一个任务，只是使用的方式不同，例如同样是亿万富翁，马云通过卖东西实现，而王思聪通过继承实现</li><li><strong>状态模式</strong>：不同的状态完成的任务完全不一样</li></ul><h2 id=""><a class="anchor" href="#">#</a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;状态模式state-pattern&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#状态模式state-pattern&quot;&gt;#&lt;/a&gt; 状态模式 (State Pattern)&lt;/h1&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="设计模式" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="java" scheme="https://pigpigletsgo.github.io/tags/java/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="设计模式" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/EasyExcel/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/EasyExcel/</id>
    <published>2024-04-03T03:40:47.136Z</published>
    <updated>2024-04-03T03:41:24.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="easyexcel"><a class="anchor" href="#easyexcel">#</a> EasyExcel</h1><h2 id="读数据"><a class="anchor" href="#读数据">#</a> 读数据</h2><ul><li>读取 Excel 表格数据</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>excel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">ExcelReader</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">ExcelReaderBuilder</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ExcelTypeEnum</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"all"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Easy_Exceltest</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 读取 Excel 表的内容</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token comment">// 创建 ExcelReaderBuilder 实例</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">ExcelReaderBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">// 获取文件对象</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\新建文件夹\\练习时长两年半.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token comment">// 指定 Sheet, 默认全部检测</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Sheet1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token comment">// 自动关闭输入流</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">autoCloseStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// 设置 Excel 文件格式</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span><span class="token constant">XLSX</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 注册监听器</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        builder<span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完毕!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// 构建读取器</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token class-name">ExcelReader</span> reader <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token comment">// 读取数据</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        reader<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// 读取完毕</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        reader<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221028150909293.png" alt="image-20221028150909293" /></p><p><strong>可以通过泛型指定数据类型，但是还是 Map 集合</strong></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>builder<span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> integerStringMap<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entryset <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> entryset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ar <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>         <span class="token class-name">String</span> name <span class="token operator">=</span> ar<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token class-name">Integer</span> id <span class="token operator">=</span> ar<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>id<span class="token operator">+</span><span class="token string">" : "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完毕!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><strong>对上述代码进行简化</strong></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>excel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Easy_EasyExcelone</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\新建文件夹\\练习时长两年半.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Sheet1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> integerStringMap<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> i <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token class-name">Set</span> set <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token class-name">Integer</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">" : "</span><span class="token operator">+</span>i<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>映射成指定对象，需要创建实体类，使用 @ExcelProperty 注解完成实体类成员变量和 Excel 字段的映射</p><p>导入 pom.xml</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>   #-----------------导入如下内容到作用域中------------------</pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>   #-----------------------------------------------------</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyExcel_test</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>解析 Excel 文件的时候直接指定实体类即可</p><p>实体类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>excel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyExcel_test</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> uid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>解析 Excel 类</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>excel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Easy_EasyExcelone</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\新建文件夹\\练习时长两年半.xlsx"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Sheet1"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">EasyExcel_test</span> easyExcel_test<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>easyExcel_test<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">EasyExcel_test</span> i <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221028162950292.png" alt="image-20221028162950292" /></p><h2 id="写数据"><a class="anchor" href="#写数据">#</a> 写数据</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>excel</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ExcelTypeEnum</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteExcel</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>       <span class="token comment">// 创建 List 集合</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>       <span class="token comment">// 指定 Excel 写出的位置</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\新建文件夹\\练习时长两年半(2).xlsx"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token comment">// 映射指定的类</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token comment">//Excel 表的类型</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span><span class="token constant">XLSX</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token comment">// 指定 Sheet 名称</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Sheet1"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// 写出读取到的内容</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">// 静态有返回值类型方法</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">></span></span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token comment">// 创建集合</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token comment">// 读取指定的 Excel 表的信息</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Administrator\\Desktop\\新建文件夹\\练习时长两年半.xlsx"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token comment">// 映射指定的类</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token comment">// 指定 Sheet, 读取默认全部检测</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Sheet1"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token comment">// 注册监听器</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EasyExcel_test</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                    <span class="token comment">// 读取</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">EasyExcel_test</span> easyExcel_test<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>easyExcel_test<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>                    <span class="token comment">// 通知</span></pre></td></tr><tr><td data-num="44"></td><td><pre>                    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token comment">// 返回值</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;easyexcel&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#easyexcel&quot;&gt;#&lt;/a&gt; EasyExcel&lt;/h1&gt;
&lt;h2 id=&quot;读数据&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#读数据&quot;&gt;#&lt;/a&gt; 读数据&lt;/h2&gt;
&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
    <category term="java" scheme="https://pigpigletsgo.github.io/tags/java/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Function函数式接口</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/lambda/%E5%A6%99%E7%94%A8Function%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%B6%88%E7%81%ADif-else/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/lambda/%E5%A6%99%E7%94%A8Function%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3%E6%B6%88%E7%81%ADif-else/</id>
    <published>2024-04-02T01:52:46.687Z</published>
    <updated>2024-04-02T01:53:20.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="function函数式接口"><a class="anchor" href="#function函数式接口">#</a> Function 函数式接口</h2><p>使用注解：<mark>@FunctionalInterface</mark> 标识，并且只包含一个 <mark>抽象方法</mark> 的接口是 <mark>函数式接口</mark>。<mark>函数式接口</mark> 主要分为<mark> supplier</mark> 供给类型函数，<mark>Consumer</mark> 消费型函数，<mark>Runnable</mark> 无参无返回型函数和 <mark>Function</mark> 有参又返回型函数。</p><blockquote><p>Function 可以看做转换型函数。</p></blockquote><p><mark>supplier</mark> 供给型函数</p><p><mark>supplier</mark> 的表现形式为不接受参数，只返回数据</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/952ffda3e6f874663fdd9610dd729814.png" alt="img" /></p><h2 id="supplier函数"><a class="anchor" href="#supplier函数">#</a> Supplier 函数</h2><p>Consumber 消费型函数</p><p>Consumber 消费型函数和 Supplier 刚好相反，Consumber 接收一个参数，没有返回值。</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/f63e05bfc0cccc6dbf81746853f5b18e.png" alt="img" /></p><p>Consumber 消费型函数</p><h2 id="runnable-无参无返回型函数"><a class="anchor" href="#runnable-无参无返回型函数">#</a> Runnable 无参无返回型函数</h2><p>Runnable 的表现形式为既没有参数也没有返回值</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/a19d3d82293cb90485074e0cad4e0700.png" alt="img" /></p><p>Runnable 无参无返回型函数</p><p>Function 函数的表现形式为接收一个参数，并返回一个值。Supplier，Consumer 和 Runnable 可以看做 Function 的一种特殊表现形式</p><p><img data-src="https://ask.qcloudimg.com/http-save/yehe-1453135/abc99db8954da6fba7ae801c9d9db54c.png" alt="img" /></p><p>@FunctionalInterface</p><h2 id="使用小技巧"><a class="anchor" href="#使用小技巧">#</a> 使用小技巧</h2><h3 id="处理抛出异常的if"><a class="anchor" href="#处理抛出异常的if">#</a> 处理抛出异常的 if</h3><ol><li><p>定义函数</p><p>定义一个抛出异常的形式的 函数式接口 ，这个接口只有参数没有返回值是个 消费型接口。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@FunctionalInterface</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ThrowExceptionFunction</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">throwMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>编写判断方法</p><p>创建工具类，并创建一个 isTrue 方法，方法的返回值为刚才定义的 函数式接口，ThrowExceptionFunction 的接口实现逻辑为当参数 b 为 false 时抛出异常</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionUtils</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThrowExceptionFunction</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> errorMessage <span class="token operator">-></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>使用方式</p><p>调用工具类参数后，调用 函数式接口 的 throwMessage 方法传入异常信息，当出入的参数为 false 是正常执行</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">FunctionUtils</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">throwMessage</span><span class="token punctuation">(</span><span class="token string">"报错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240402092802512.png" alt="image-20240402092802512" /></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">FunctionUtils</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">throwMessage</span><span class="token punctuation">(</span><span class="token string">"报错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240402092838100.png" alt="image-20240402092838100" /></p></li></ol><h3 id="处理if分支操作"><a class="anchor" href="#处理if分支操作">#</a> 处理 if 分支操作</h3><ol><li><p>定义函数式接口</p><p>创建一个名为 BranchHandle 的函数式接口，接口的参数为两个 Runnable 接口。这两个 Runnable 的接口分别代表了为 true 或 false 时要进行的操作</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@FunctionalInterface</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BranchHandle</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="5"></td><td><pre>     *  分支操作</pre></td></tr><tr><td data-num="6"></td><td><pre>     * @param trueHandle 为 true 时要进行的操作</pre></td></tr><tr><td data-num="7"></td><td><pre>     * @param falseHandle 为 false 时要进行的操作</pre></td></tr><tr><td data-num="8"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">trueOrFalseHandle</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> trueHandle<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> falseHandle<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>编写判断方法</p><p>在工具类创建一个名为 isTrueOrFalse 的方法，方法返回值为刚才定义的 函数式接口 - BranchHandle。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BranchHandle</span> <span class="token function">isTrueOrFalse</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">return</span> <span class="token punctuation">(</span>trueHandle<span class="token punctuation">,</span> falseHandle<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         trueHandle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         falseHandle<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>使用方式</p><p>参数为 true 时，执行 trueHandle，参数为 false 时，执行 falseHandle</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">FunctionUtils</span><span class="token punctuation">.</span><span class="token function">isTrueOrFalse</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trueOrFalseHandle</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"既然没报错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"又报错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240402093740772.png" alt="image-20240402093740772" /></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">FunctionUtils</span><span class="token punctuation">.</span><span class="token function">isTrueOrFalse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trueOrFalseHandle</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"既然没报错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"又报错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240402093815667.png" alt="image-20240402093815667" /></p></li></ol><h3 id="判断是否有值"><a class="anchor" href="#判断是否有值">#</a> 判断是否有值</h3><ol><li><p>定义函数</p><p>创建一个名为 PresentOrElseHandler 的函数式接口，接口的参数一个为 Consumer 接口。一个为 Runnable 分别代表值不为空时执行消费操作和值为空时执行的其它操作</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@FunctionalInterface</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PresentOrElseHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="5"></td><td><pre>     * 值不为空时执行消费操作</pre></td></tr><tr><td data-num="6"></td><td><pre>     * 值为空时执行其它操作</pre></td></tr><tr><td data-num="7"></td><td><pre>     * @param action  值不为空时执行消费操作</pre></td></tr><tr><td data-num="8"></td><td><pre>     * @param emptyAction 值为空时执行其它操作</pre></td></tr><tr><td data-num="9"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">presentOrElseHandle</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> action<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> emptyAction<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>编写判断方法</p><p>在工具类创建一个名为 isBlankOrNoBlank 的方法，方法的返回值为刚才定义的 函数式接口 - PresentOrElseHandler</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PresentOrElseHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">isBlankOrNoBlank</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token keyword">return</span> <span class="token punctuation">(</span>consumer<span class="token punctuation">,</span> runnable<span class="token punctuation">)</span> <span class="token operator">-></span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>         runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token keyword">else</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>         consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>使用方式</p><p>调用工具类参数后，调用 函数式接口 的 PresentOrElseHandle 方法传入一个 Consumer 和 Runnable 参数不为空时，打印参数</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token class-name">FunctionUtils</span><span class="token punctuation">.</span><span class="token function">isBlankOrNoBlank</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">presentOrElseHandle</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240402094834029.png" alt="image-20240402094834029" /></p><p>传入一个空值</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">FunctionUtils</span><span class="token punctuation">.</span><span class="token function">isBlankOrNoBlank</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">presentOrElseHandle</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报错了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>打印结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240402094923939.png" alt="image-20240402094923939" /></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;function函数式接口&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#function函数式接口&quot;&gt;#&lt;/a&gt; Function 函数式接口&lt;/h2&gt;
&lt;p&gt;使用注解：&lt;mark&gt;@FunctionalInterface&lt;/mark&gt; 标识，并且只包含一</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    <category term="lambda" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/lambda/"/>
    
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    <category term="lambda" scheme="https://pigpigletsgo.github.io/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>批量删除数据库所有表</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%80%E6%9C%89%E8%A1%A8/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%80%E6%9C%89%E8%A1%A8/</id>
    <published>2024-04-01T01:34:35.867Z</published>
    <updated>2024-04-01T01:34:51.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="批量删除数据库所有表"><a class="anchor" href="#批量删除数据库所有表">#</a> 批量删除数据库所有表</h1><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span><span class="token string">'DROP TABLE IF EXISTS '</span><span class="token punctuation">,</span> table_name<span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">WHERE</span> table_schema <span class="token operator">=</span> <span class="token string">'guan_duoduo'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>执行后就会生成删除的结果集：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240401093220361.png" alt="image-20240401093220361" /></p><p>复制上面的所有结果集 然后再执行以下就会全部删除表了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;批量删除数据库所有表&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#批量删除数据库所有表&quot;&gt;#&lt;/a&gt; 批量删除数据库所有表&lt;/h1&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;figcaption data-lang=&quot;SQL&quot;&gt;&lt;/f</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>通过手机号获取归属地和运营商</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E9%80%9A%E8%BF%87%E6%89%8B%E6%9C%BA%E5%8F%B7%E8%8E%B7%E5%8F%96%E5%BD%92%E5%B1%9E%E5%9C%B0%E5%92%8C%E8%BF%90%E8%90%A5%E5%95%86/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/%E9%80%9A%E8%BF%87%E6%89%8B%E6%9C%BA%E5%8F%B7%E8%8E%B7%E5%8F%96%E5%BD%92%E5%B1%9E%E5%9C%B0%E5%92%8C%E8%BF%90%E8%90%A5%E5%95%86/</id>
    <published>2024-04-01T01:06:59.408Z</published>
    <updated>2024-04-01T01:07:17.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-通过手机号获取归属地和运营商"><a class="anchor" href="#一-通过手机号获取归属地和运营商">#</a> 一、通过手机号获取归属地和运营商</h1><h2 id="11-创建springboot工程"><a class="anchor" href="#11-创建springboot工程">#</a> 1.1 创建 SpringBoot 工程</h2><h2 id="12-引入依赖"><a class="anchor" href="#12-引入依赖">#</a> 1.2 引入依赖</h2><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>libphonenumber.version</span><span class="token punctuation">></span></span>8.13.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>libphonenumber.version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>libphonenumber.carrier</span><span class="token punctuation">></span></span>1.214<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>libphonenumber.carrier</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>libphonenumber.geocoder</span><span class="token punctuation">></span></span>2.221<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>libphonenumber.geocoder</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;fastjson.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="15"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="23"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="24"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="25"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="26"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="27"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="28"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="29"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.googlecode.libphonenumber<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="30"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>libphonenumber<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="31"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;libphonenumber.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="32"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="33"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="34"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.googlecode.libphonenumber<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>geocoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="36"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;libphonenumber.geocoder&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="37"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="38"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.googlecode.libphonenumber<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>carrier<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;libphonenumber.carrier&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="42"></td><td><pre>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h1 id="二-代码编写"><a class="anchor" href="#二-代码编写">#</a> 二、代码编写</h1><h2 id="21-视图层"><a class="anchor" href="#21-视图层">#</a> 2.1 视图层</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/phone"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneController</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getPhone"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">PhoneToRegionUtils</span><span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="22-工具类"><a class="anchor" href="#22-工具类">#</a> 2.2 工具类</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneToRegionUtils</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 手机号基本工具类</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PhoneNumberUtil</span> <span class="token constant">PHONE_NUMBER_UTIL</span> <span class="token operator">=</span> <span class="token class-name">PhoneNumberUtil</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 运营商</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PhoneNumberToCarrierMapper</span> <span class="token constant">CARRIER_MAPPER</span> <span class="token operator">=</span> <span class="token class-name">PhoneNumberToCarrierMapper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PhoneNumberOfflineGeocoder</span> <span class="token constant">GEO_CODER</span> <span class="token operator">=</span> <span class="token class-name">PhoneNumberOfflineGeocoder</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="10"></td><td><pre>     * 获取手机号的归属信息：运营商，归属地</pre></td></tr><tr><td data-num="11"></td><td><pre>     * @param phone 手机号</pre></td></tr><tr><td data-num="12"></td><td><pre>     * @return 归属信息</pre></td></tr><tr><td data-num="13"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token class-name">JSONObject</span> affiliation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        affiliation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        affiliation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"carrier"</span><span class="token punctuation">,</span> <span class="token function">getPhoneCarrier</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        affiliation<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"region"</span><span class="token punctuation">,</span> <span class="token function">getRegionInfoByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> affiliation<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="24"></td><td><pre>     * 获取手机号归属地</pre></td></tr><tr><td data-num="25"></td><td><pre>     * @param phone 手机号</pre></td></tr><tr><td data-num="26"></td><td><pre>     * @return 归属地</pre></td></tr><tr><td data-num="27"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRegionInfoByPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">isValidNumber</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">GEO_CODER</span><span class="token punctuation">.</span><span class="token function">getDescriptionForNumber</span><span class="token punctuation">(</span><span class="token function">getPhoneNumber</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINESE</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPhoneCarrier</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">isValidNumber</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">CARRIER_MAPPER</span><span class="token punctuation">.</span><span class="token function">getNameForNumber</span><span class="token punctuation">(</span><span class="token function">getPhoneNumber</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="39"></td><td><pre>     * 验证当前手机号是否有效</pre></td></tr><tr><td data-num="40"></td><td><pre>     * @param phone 手机号</pre></td></tr><tr><td data-num="41"></td><td><pre>     * @return 校验结果</pre></td></tr><tr><td data-num="42"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValidNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">return</span> <span class="token constant">PHONE_NUMBER_UTIL</span><span class="token punctuation">.</span><span class="token function">isValidNumber</span><span class="token punctuation">(</span><span class="token function">getPhoneNumber</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="49"></td><td><pre>     * 生成 PhoneNumber</pre></td></tr><tr><td data-num="50"></td><td><pre>     * @param phone 手机号</pre></td></tr><tr><td data-num="51"></td><td><pre>     * @return PhoneNumber</pre></td></tr><tr><td data-num="52"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Phonenumber<span class="token punctuation">.</span>PhoneNumber</span> <span class="token function">getPhoneNumber</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token class-name">Phonenumber<span class="token punctuation">.</span>PhoneNumber</span> phoneNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phonenumber<span class="token punctuation">.</span>PhoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        phoneNumber<span class="token punctuation">.</span><span class="token function">setCountryCode</span><span class="token punctuation">(</span><span class="token number">86</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        phoneNumber<span class="token punctuation">.</span><span class="token function">setNationalNumber</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>        <span class="token keyword">return</span> phoneNumber<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240401090538974.png" alt="image-20240401090538974" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-通过手机号获取归属地和运营商&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#一-通过手机号获取归属地和运营商&quot;&gt;#&lt;/a&gt; 一、通过手机号获取归属地和运营商&lt;/h1&gt;
&lt;h2 id=&quot;11-创建springboot工程&quot;&gt;&lt;a class=&quot;anchor</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
    
    <category term="java" scheme="https://pigpigletsgo.github.io/tags/java/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="第三方库" scheme="https://pigpigletsgo.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>电商项目中的SKU与SPU的数据库表设计</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84SKU%E4%B8%8ESPU%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84SKU%E4%B8%8ESPU%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-03-31T06:32:26.858Z</published>
    <updated>2024-03-31T07:11:33.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电商项目中的sku与spu的数据库表设计"><a class="anchor" href="#电商项目中的sku与spu的数据库表设计">#</a> 电商项目中的 SKU 与 SPU 的数据库表设计</h1><h2 id="简介"><a class="anchor" href="#简介">#</a> 简介：</h2><p>一般情况下我们使用 5 张表就可以解决基本的需求了:</p><ol><li>商品分类：category</li><li>商品表 (即 SPU 表)：product</li><li>商品规格表 (即 SKU 表)：product_specs</li><li>属性 Key 表：attribute_key</li><li>属性 Value 表：attribute_value</li></ol><h2 id="具体设计"><a class="anchor" href="#具体设计">#</a> 具体设计</h2><p>spu 表和 sku 表实现不同商品的存储：spu 表使用 attribute_list 字段保存属性集合，查询时使用 product_id 和 product_spacs 去 sku 表中获取的具体的单品信息。spu 表中可以增加一些商品的公共信息字段，例如名称，发布的商家，发布日期，上架状态；sku 表中增加一些每个单品不同的字段，比如不同的单品有不同图片和名称或者详情说明等等，反正根据业务进行扩展。</p><p>核心思路就是把弹性字段使用 json 存储，这样设计的有点是数据表结构稳定，不用在商品增加属性后增加字段，缺点是商品数据的解析复杂，弹性字段需要在业务代码中进行处理，增加了业务代码的复杂度。</p><p>表结构示意图：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/ebc5536255314e829293b6bbbdfccb18.png" alt="在这里插入图片描述" /></p><h2 id="商品分类表tb_product_category"><a class="anchor" href="#商品分类表tb_product_category">#</a> 商品分类表：tb_product_category</h2><p>该表主要是描述商品的分类。此表采用无限层级树状数据结构，程序使用递归算法来遍历分类下的所有子类，pid 是父级分类，pid=null 时说明是根节点，属于一级类别；</p><p>属性：id，pid，name 等</p><h2 id="商品表即spu表tb_product"><a class="anchor" href="#商品表即spu表tb_product">#</a> 商品表 (即 SPU 表)：tb_product</h2><p>存储商品信息。表中关键字段是 category_id 和 attribute_list 两个字段</p><ul><li>category_id：记录商品属于哪个分类，用于通过分类进行商品搜索</li><li>attribute_list：记录的是所有属性的集合，这个字段采用 json 格式存储，便于前端解析；前端解析后可以在页面显示出商品的所有属性，用户点击选择出属性组合后，前端可以拼接形成如：{&quot;内存&quot;:&quot;2G&quot;,&quot;颜色&quot;:&quot;红色&quot;,&quot;尺寸&quot;:&quot;20cm&quot;} 的 json 格式数据，加上商品 id (商品规格表 tb_product_specs) 就可以查询到具体的商品，随机获取到具体单品的库存和价格等信息；</li></ul><p>属性：id，category_id，name，attribute_list 等</p><h2 id="商品规格表即sku表tb_product_specs"><a class="anchor" href="#商品规格表即sku表tb_product_specs">#</a> 商品规格表 (即 SKU 表)：tb_product_specs</h2><p>存储商品的具体规格单品，即 sku，sku 表保存的是具体的单品信息，比如具体规格的库存和价格等，核心字段是 product_id 和 product_specs</p><ul><li>product_id：记录的是 spu 表中的商品 id</li><li>product_specs：记录的是该单品具体的属性值 (规格值)</li></ul><p>属性：id，product_id，product_specs 等</p><h2 id="属性key表tb_attribute_key"><a class="anchor" href="#属性key表tb_attribute_key">#</a> 属性 Key 表：tb_attribute_key</h2><p>用于存储 sku 的属性，比如：机身颜色，存储容量</p><p>属性 key 表和属性 value 表仅用于管理后台页面生成属性选项，管理员在发布新商品时勾选属性，方便规则的录入和保证正确性</p><h2 id="属性value表tb_attribute_value"><a class="anchor" href="#属性value表tb_attribute_value">#</a> 属性 Value 表：tb_attribute_value</h2><p>用于存储 sku 的属性值，比如：6+128G，8+128G，8+256G</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>上述数据表设计方案用于商品类别差异不是很大情形，通过表的字段可以发现不同的商品之间变化的信息只有 attribute_list 字段，而这个字段通过 json 来存储各种不同的属性集合，同样 sku 表中变化的字段只有 product_specs 也是通过 json 来存储各种不同属性组合</p><h2 id="改进方案"><a class="anchor" href="#改进方案">#</a> 改进方案</h2><p>将 tb_product，tb_brand，tb_product_specs 表中的 info 字段分别抽取到单独的表中</p><h2 id="sql"><a class="anchor" href="#sql">#</a> sql</h2><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : localhost</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80025</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80025</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 07/12/2021 11:19:44</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tb_attribute_key</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_key<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_key<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>attribute_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'属性名'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>priority<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'优先级'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'类别编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_key_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'属性key表'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token comment">-- Records of tb_attribute_key</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">-- Table structure for tb_attribute_value</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_value<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_value<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="45"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>attribute_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'属性编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="47"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>priority<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'优先级'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="48"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>attribute_value<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'属性值'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="49"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="50"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="51"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="52"></td><td><pre>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>attribute_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="53"></td><td><pre>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_value_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>attribute_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>tb_attribute_key<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'属性value表'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token comment">-- Records of tb_attribute_value</span></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token comment">-- Table structure for tb_brand</span></pre></td></tr><tr><td data-num="62"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_brand<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_brand<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="65"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="67"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>logo<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌LOGO'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="68"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">220</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌描述'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="69"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态 1上架  2下架'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="70"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="71"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="72"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="73"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'品牌表'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token comment">-- Records of tb_brand</span></pre></td></tr><tr><td data-num="77"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="78"></td><td><pre></pre></td></tr><tr><td data-num="79"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token comment">-- Table structure for tb_product</span></pre></td></tr><tr><td data-num="81"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="84"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="85"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="86"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>attribute_list<span class="token punctuation">`</span></span> json <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品属性列表'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="87"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'类别编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="89"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态 1上架  2下架'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="90"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="91"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">' 创建时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="92"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">' 更新时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="93"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="94"></td><td><pre>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="95"></td><td><pre>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="96"></td><td><pre>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="97"></td><td><pre>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_ibfk_2<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>tb_brand<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span></pre></td></tr><tr><td data-num="98"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'商品表（SPU）'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre></pre></td></tr><tr><td data-num="100"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="101"></td><td><pre><span class="token comment">-- Records of tb_product</span></pre></td></tr><tr><td data-num="102"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="103"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'IPHONE8'</span><span class="token punctuation">,</span> <span class="token string">'&#123;\"商品简介\": &#123;\"品牌\": \"Apple\", \"系统\": \"iOS\", \"充电器\": \"其他\", \"分辨率\": \"其他\", \"支持IPv6\": \"支持IPv6\", \"商品产地\": \"中国大陆\", \"商品名称\": \"AppleiPhone 13\", \"商品毛重\": \"320.00g\", \"商品编号\": \"100014352501\", \"机身存储\": \"256GB\", \"运行内存\": \"其他\"&#125;, \"规格与包装\": &#123;\"主体\": &#123;\"品牌\": \"Apple\", \"上市年份\": \"2021年\", \"上市月份\": \"9月\", \"产品名称\": \"Apple iPhone 13 (A2634) 256GB 午夜色 支持移动联通电信5G 双卡双待手机\", \"入网型号\": \"A2634\", \"首销日期\": \"24日\"&#125;, \"基本信息\": &#123;\"机身材质\": \"以官网信息为准\", \"机身重量（g）\": \"173g\", \"机身厚度（mm）\": \"7.65mm\", \"机身宽度（mm）\": \"71.5mm\", \"机身长度（mm）\": \"146.7mm\"&#125;&#125;&#125;'</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:52:15'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:52:15'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="106"></td><td><pre><span class="token comment">-- Table structure for tb_product_category</span></pre></td></tr><tr><td data-num="107"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="108"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="110"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'类别编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="111"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'类别名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="112"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态：1上架 2下架'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="113"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>priority<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'优先级'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="114"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'父类别编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="115"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="116"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="117"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="118"></td><td><pre>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="119"></td><td><pre>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>pid<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span></pre></td></tr><tr><td data-num="120"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'商品类别表'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="121"></td><td><pre></pre></td></tr><tr><td data-num="122"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="123"></td><td><pre><span class="token comment">-- Records of tb_product_category</span></pre></td></tr><tr><td data-num="124"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="125"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:29'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:29'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:36'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:36'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:42'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:42'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_category<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'dd'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:51'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:34:51'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="129"></td><td><pre></pre></td></tr><tr><td data-num="130"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="131"></td><td><pre><span class="token comment">-- Table structure for tb_product_specs</span></pre></td></tr><tr><td data-num="132"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="133"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_specs<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="134"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_specs<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="135"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'规格编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="136"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>product_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品编号'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="137"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'规格名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="138"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>sell_point<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'卖点'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="139"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>product_specs<span class="token punctuation">`</span></span> json <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'规格列表'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="140"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'售价'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="141"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>barcode<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'条形码'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="142"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>img<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'首图'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="143"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>pics<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'图片列表'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="144"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>amount<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'库存'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="145"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">UNSIGNED</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态 1上架  2下架'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="146"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>info<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'备注信息'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="147"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>create_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="148"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>update_time<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="149"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="150"></td><td><pre>  <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>product_id<span class="token punctuation">`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>product_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="151"></td><td><pre>  <span class="token keyword">CONSTRAINT</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_specs_ibfk_1<span class="token punctuation">`</span></span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>product_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">RESTRICT</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">RESTRICT</span></pre></td></tr><tr><td data-num="152"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8_general_ci <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'商品规格表（sku表）'</span> ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="153"></td><td><pre></pre></td></tr><tr><td data-num="154"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="155"></td><td><pre><span class="token comment">-- Records of tb_product_specs</span></pre></td></tr><tr><td data-num="156"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="157"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_specs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'IPHONE8 PLUS'</span><span class="token punctuation">,</span> <span class="token string">'贵,信号不好'</span><span class="token punctuation">,</span> <span class="token string">'&#123;\"版本\": \"128GB\", \"颜色\": \"红色\", \"购买方式\": \"公开版\"&#125;'</span><span class="token punctuation">,</span> <span class="token number">5999.00</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:59:18'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:59:18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="158"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tb_product_specs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'IPHONE8 MINI'</span><span class="token punctuation">,</span> <span class="token string">'轻，信号好'</span><span class="token punctuation">,</span> <span class="token string">'&#123;\"版本\": \"256GB\", \"颜色\": \"玫瑰金色\", \"增值保障\": \"2年259\", \"购买方式\": \"官方标配\"&#125;'</span><span class="token punctuation">,</span> <span class="token number">4200.00</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 10:59:30'</span><span class="token punctuation">,</span> <span class="token string">'2021-12-07 11:01:37'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="159"></td><td><pre></pre></td></tr><tr><td data-num="160"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="sql案例"><a class="anchor" href="#sql案例">#</a> sql 案例：</h2><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">-- 用户点击分类比如：手机，请求数据展示手机这个商品的所有的基本信息</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="3"></td><td><pre>tp<span class="token punctuation">.</span>id 商品id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>tp<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> 商品名称<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>tp<span class="token punctuation">.</span>attribute_list 商品简介</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="7"></td><td><pre>tb_product_category tpc</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_product tp <span class="token keyword">ON</span> tp<span class="token punctuation">.</span>category_id <span class="token operator">=</span> tpc<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="10"></td><td><pre>tpc<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">-- 用户点击了类别查询所当前类别的所有商品的基本信息</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="14"></td><td><pre>tps<span class="token punctuation">.</span>id 商品id<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>tps<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> 商品名称<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>tp<span class="token punctuation">.</span>attribute_list 商品简介<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>tps<span class="token punctuation">.</span>price 商品价格</pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="19"></td><td><pre>tb_product tp</pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_product_specs tps <span class="token keyword">ON</span> tps<span class="token punctuation">.</span>product_id <span class="token operator">=</span> tp<span class="token punctuation">.</span>id </pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="22"></td><td><pre>tp<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">-- 用户点击了某个基本信息的手机，请求数据查询出详细信息，用户选择类型时前端获取 数据以 json 传递后端，后端根据当前商品 id 和选择的类型 (json 数据) 进行查询数据库</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="26"></td><td><pre>tps<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> 商品名称<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>tps<span class="token punctuation">.</span>price 商品价格<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>tps<span class="token punctuation">.</span>img 首图<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>tps<span class="token punctuation">.</span>pics 图片列表<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>tp<span class="token punctuation">.</span>attribute_list 商品详细信息 </pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="32"></td><td><pre>tb_product_specs tps</pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tb_product tp <span class="token keyword">ON</span> tp<span class="token punctuation">.</span>id <span class="token operator">=</span> tps<span class="token punctuation">.</span>product_id </pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="35"></td><td><pre>tp<span class="token punctuation">.</span>category_id <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token operator">AND</span> tps<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token operator">AND</span> tps<span class="token punctuation">.</span>product_specs <span class="token operator">LIKE</span> <span class="token string">'%&#123;"版本": "128GB", "颜色": "红色", "购买方式": "公开版"&#125;%'</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;电商项目中的sku与spu的数据库表设计&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#电商项目中的sku与spu的数据库表设计&quot;&gt;#&lt;/a&gt; 电商项目中的 SKU 与 SPU 的数据库表设计&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;ancho</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="知识点" scheme="https://pigpigletsgo.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>navicat模型-清理表之间的关系</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/navicat/navicat%E6%A8%A1%E5%9E%8B-%E6%B8%85%E7%90%86%E8%A1%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/navicat/navicat%E6%A8%A1%E5%9E%8B-%E6%B8%85%E7%90%86%E8%A1%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</id>
    <published>2024-03-31T02:56:00.245Z</published>
    <updated>2024-03-31T02:56:52.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="navicat模型-清理表之间的关系"><a class="anchor" href="#navicat模型-清理表之间的关系">#</a> navicat 模型 - 清理表之间的关系</h1><p>当我们使用 navicat 中模型的时候，将我们需要看的表导入到模型中时如下图：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331104125115.png" alt="image-20240331104125115" /></p><p>我们可以看到红线所标注的线两边有不同的图标，看了可能会一头雾水</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331104349530.png" alt="image-20240331104349530" /></p><p>废话不多说，我们着重分析 user 与 order 表，两者是典型的一对多关系，那么 order 是多方，user 是一方。所以，你看懂了吗？order 是三个叉叉叉，user 是一个叉.</p><p>如果在模型上的关系出邮件查看的话是，基数在订单上的是：零个或者多个，而在 user 上是零个或一个。</p><p>这样你应该更加明白了。</p><p>也就是说，一对多关系上，一方也就是父方是可以是 0 或者 1 个，而对应在 order 方（多方，子方）是 0 个或者多个。</p><p>这样是不是更好的体现了一对多的关系呢？</p><p>相信你已经懂。需要说明的是，如果要求很严格的话，这样设计是比较注重细节的，同样在此关系中，如果不注意弄成了唯一或者多个的话就不能十分准确的表现业务了</p><p>单拿出来一个关系表进行分析：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331105045467.png" alt="image-20240331105045467" /></p><p>如上图：tb_product_specs 就是设外键的一方，如下图：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331105136558.png" alt="image-20240331105136558" /></p><p>添加数据时，由于 tb_product_specs 是从表，所以需要看主表：tb_product 是否有对应的 id，因为从表关联了主表的 id 字段所以要看主表的 id 数据，比如有 1 那么可以在从表添加如下数据：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331105355411.png" alt="image-20240331105355411" /></p><p>还可以添加为 null 的数据，但是不能添加其它的数据</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331105429776.png" alt="image-20240331105429776" /></p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240331105444853.png" alt="image-20240331105444853" /></p><p>PS: 这里补充一点，在关系上右键的前往目标和前往源指的是前往子父表。因为一个外键关键，关联表是源，被关联的表是目标</p><blockquote><p>这个会有三个标记，你图中出现了两个： 1，三叉的，表示设有外键的一方； 2，一叉的，表示一对一的关系； 3，还有一个等于号的标记，表示一对多的关系； ----------- 补充其他相关的概念： 1，主表 &amp; 从表的概念：一个 “公共关键字”，设为主键的表为 “父表”，否则为 “从表”；故该公共关键字为从表的 “外键”； 数据表的三种关系： 1，一对一：一个 A 表，只能对应一个 B 表； 2，一对多：一个 A 表，可以对应多个 B 表； 3，多对多：一个 A 表，可以对应多个 B 表；一个 B 表，也可以对应多个 A 表</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;navicat模型-清理表之间的关系&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#navicat模型-清理表之间的关系&quot;&gt;#&lt;/a&gt; navicat 模型 - 清理表之间的关系&lt;/h1&gt;
&lt;p&gt;当我们使用 navicat 中模型的时候，将我们需要看的表导入</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="navicat" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/navicat/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="navicat" scheme="https://pigpigletsgo.github.io/tags/navicat/"/>
    
  </entry>
  
  <entry>
    <title>联表分页返回到VO类</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/mybatis/%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/%E8%81%94%E8%A1%A8%E5%88%86%E9%A1%B5%E8%BF%94%E5%9B%9E%E5%88%B0VO%E7%B1%BB/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/mybatis/%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/%E8%81%94%E8%A1%A8%E5%88%86%E9%A1%B5%E8%BF%94%E5%9B%9E%E5%88%B0VO%E7%B1%BB/</id>
    <published>2024-03-30T07:13:50.566Z</published>
    <updated>2024-04-11T07:16:49.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联表分页返回到vo类"><a class="anchor" href="#联表分页返回到vo类">#</a> 联表分页返回到 VO 类</h1><p>创建数据库：</p><p>class</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 10:56:43</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_class</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程表id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">-- Records of tab_class</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'化学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'生物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'物理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'政治'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'历史'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'地理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>student</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 10:56:55</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_studenttwo</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生年龄'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- Records of tab_studenttwo</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>cs</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 10:56:49</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_cs</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'中间表id(查询学生与课程的关系)'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程表id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生表id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- Records of tab_cs</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可参考 sql 语句：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ts<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> student_name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ts<span class="token punctuation">.</span>age student_age<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>tcs<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> class_name</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="6"></td><td><pre>tab_studenttwo ts</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_cs tc <span class="token keyword">ON</span> tc<span class="token punctuation">.</span>s_id <span class="token operator">=</span> ts<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_class tcs <span class="token keyword">ON</span> tcs<span class="token punctuation">.</span>id <span class="token operator">=</span> tc<span class="token punctuation">.</span>c_id</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ts<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'李四'</span></pre></td></tr></table></figure><p>查询结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240330150505499.png" alt="image-20240330150505499" /></p><h2 id="java代码"><a class="anchor" href="#java代码">#</a> java 代码</h2><p>vo 类：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentClassVO</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> studentAge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>dao:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Mapper</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudenttwoDao</span> <span class="token keyword">extends</span> <span class="token class-name">MPJBaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudenttwoEntity</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> page<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>daoxml:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> mapper <span class="token constant">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.dkx.mpj.dao.StudenttwoDao"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getAll"</span> resultType<span class="token operator">=</span><span class="token string">"com.dkx.mpj.entity.vo.StudentClassVO"</span><span class="token operator">></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token constant">SELECT</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            ts<span class="token punctuation">.</span>`name` student_name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            ts<span class="token punctuation">.</span>age student_age<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            tcs<span class="token punctuation">.</span>`name` class_name</pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token constant">FROM</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            tab_studenttwo ts</pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> tab_cs tc <span class="token constant">ON</span> tc<span class="token punctuation">.</span>s_id <span class="token operator">=</span> ts<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token constant">LEFT</span> <span class="token constant">JOIN</span> tab_class tcs <span class="token constant">ON</span> tcs<span class="token punctuation">.</span>id <span class="token operator">=</span> tc<span class="token punctuation">.</span>c_id</pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token constant">WHERE</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            ts<span class="token punctuation">.</span>`name` <span class="token operator">=</span> <span class="token char">'李四'</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></pre></td></tr></table></figure><p>serviceImpl:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"studenttwoService"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudenttwoServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudenttwoDao</span><span class="token punctuation">,</span> <span class="token class-name">StudenttwoEntity</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">StudenttwoService</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">StudenttwoDao</span> studenttwoDao<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> studenttwoDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">long</span> total <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> total<span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">PageResult</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token keyword">return</span> studenttwoService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>请求结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240330151203163.png" alt="image-20240330151203163" /></p><h2 id="带条件对象参数查询并分页"><a class="anchor" href="#带条件对象参数查询并分页">#</a> 带条件 (对象参数) 查询并分页</h2><p>dao:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Mapper</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudenttwoDao</span> <span class="token keyword">extends</span> <span class="token class-name">MPJBaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudenttwoEntity</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token class-name">StudentClassDto</span> studentClassDto<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>xml</p><figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.dkx.mpj.dao.StudenttwoDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.dkx.mpj.entity.vo.StudentClassVO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>        SELECT</pre></td></tr><tr><td data-num="6"></td><td><pre>            ts.`name` student_name,</pre></td></tr><tr><td data-num="7"></td><td><pre>            ts.age student_age,</pre></td></tr><tr><td data-num="8"></td><td><pre>            tcs.`name` class_name</pre></td></tr><tr><td data-num="9"></td><td><pre>        FROM</pre></td></tr><tr><td data-num="10"></td><td><pre>            tab_studenttwo ts</pre></td></tr><tr><td data-num="11"></td><td><pre>                LEFT JOIN tab_cs tc ON tc.s_id = ts.id</pre></td></tr><tr><td data-num="12"></td><td><pre>                LEFT JOIN tab_class tcs ON tcs.id = tc.c_id</pre></td></tr><tr><td data-num="13"></td><td><pre>        WHERE</pre></td></tr><tr><td data-num="14"></td><td><pre>            ts.`name` = #&#123;studentClassDto.name&#125;</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>serviceImpl</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"studenttwoService"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudenttwoServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudenttwoDao</span><span class="token punctuation">,</span> <span class="token class-name">StudenttwoEntity</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">StudenttwoService</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">StudenttwoDao</span> studenttwoDao<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">// 因为查询条件在 PageParams 中所以拷贝到 studentClassDto 对象中</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">StudentClassDto</span> studentClassDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentClassDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">BeanUtil</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">,</span> studentClassDto<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pageParams<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> all <span class="token operator">=</span> studenttwoDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> studentClassDto<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">long</span> total <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> total<span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageParams<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>controller:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"mpj/studenttwo"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudenttwoController</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">StudenttwoService</span> studenttwoService<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">PageResult</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">PageParams</span> pageParams<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> studenttwoService<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>pageParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;联表分页返回到vo类&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#联表分页返回到vo类&quot;&gt;#&lt;/a&gt; 联表分页返回到 VO 类&lt;/h1&gt;
&lt;p&gt;创建数据库：&lt;/p&gt;
&lt;p&gt;class&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;f</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/"/>
    
    <category term="代码案例" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/%E4%BB%A3%E7%A0%81%E6%A1%88%E4%BE%8B/"/>
    
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/tags/mybatis/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/tags/%E6%A1%88%E4%BE%8BDemo/"/>
    
    <category term="分页" scheme="https://pigpigletsgo.github.io/tags/%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis-Plus-join 基本查询使用</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/mybatis/mybatisplus-join/%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/mybatis/mybatisplus-join/%E5%9F%BA%E6%9C%AC%E6%9F%A5%E8%AF%A2%E4%BD%BF%E7%94%A8/</id>
    <published>2024-03-30T02:09:42.061Z</published>
    <updated>2024-04-09T02:35:46.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-plus-基本查询使用"><a class="anchor" href="#mybatis-plus-基本查询使用">#</a> MyBatis-Plus - 基本查询使用</h1><p>创建数据库：</p><p>student</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 09:50:08</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_student</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_student<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_student<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>teacher_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生年龄'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生性别'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">-- Records of tab_student</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_student<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>teacher</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 09:50:16</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_teacher</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_teacher<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_teacher<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'老师id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'老师名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'老师年龄'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'老师性别'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">-- Records of tab_teacher</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_teacher<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'小郭'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>创建对应的 VO 类</p><p>工程结构：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240330095229805.png" alt="image-20240330095229805" /></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentVO</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> teacherId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">TeacherEntity</span> teacher<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentVO1</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> studentId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> teacherId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> teacherName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> studentSex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> teacherSex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherVO</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> students<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherVO1</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentEntity</span><span class="token punctuation">></span></span> students<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="一对一-字段"><a class="anchor" href="#一对一-字段">#</a> 一对一 (字段)</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentVO1</span><span class="token punctuation">></span></span> <span class="token function">getSAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 实例化 MPJLambdaWrapper</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentEntity</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 左连接联表查询，根据 teacher 的 id 和 student 的 teacher_id 进行联表查询</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getTeacherId</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 查询指定字段并设置别名 因为，数据的字段名都一样而我需要再 VO 类里面进行区别并查询出来</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token string">"studentId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token string">"teacherId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"studentName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"teacherName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token string">"studentSex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token string">"teacherSex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>   <span class="token comment">// 查询结果返回到 VO1 类</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">StudentVO1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果</p><pre><code>StudentVO1(studentId=1, teacherId=1, studentName=张三, teacherName=小郭, studentSex=男, teacherSex=男)StudentVO1(studentId=2, teacherId=1, studentName=李四, teacherName=小郭, studentSex=男, teacherSex=男)StudentVO1(studentId=3, teacherId=1, studentName=王五, teacherName=小郭, studentSex=男, teacherSex=男)</code></pre><h2 id="一对一-对象"><a class="anchor" href="#一对一-对象">#</a> 一对一 (对象)</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 实例化 MPJLambdaWrapper</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentEntity</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 左连接联表查询 根据 teacher 的 id 和 student 的 teacher_id 来进行联查</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getTeacherId</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 查询 student 的所有字段的数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token comment">// 查询 teacher 表用 StudentVO 中的 teacher 类来进行属性字段的关联</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAssociation</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">StudentVO</span><span class="token operator">::</span><span class="token function">getTeacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token comment">// 查询结果返回到 StudentVO 类中</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token keyword">return</span> studentDao<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">StudentVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>StudentVO(id=1, teacherId=1, teacher=TeacherEntity(id=1, name=小郭, age=19, sex=男), name=张三, sex=男)StudentVO(id=2, teacherId=1, teacher=TeacherEntity(id=1, name=小郭, age=19, sex=男), name=李四, sex=男)StudentVO(id=3, teacherId=1, teacher=TeacherEntity(id=1, name=小郭, age=19, sex=男), name=王五, sex=男)</code></pre><h2 id="一对多-字段"><a class="anchor" href="#一对多-字段">#</a> 一对多 (字段)</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeacherVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 实例化 MPJLambdaWrapper</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 左连接链表查询 根据 teacher 的 id 和 student 的 id 进行联表查询</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getTeacherId</span><span class="token punctuation">,</span> <span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 查询 teacher 的所有字段数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token comment">// 查询的结果返回的是 List 集合，而且通过 map.result 进行映射下结果 只要学生名称 如数据：[张三，李四，王五]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectCollection</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TeacherVO</span><span class="token operator">::</span><span class="token function">getStudents</span><span class="token punctuation">,</span> map <span class="token operator">-></span> map<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token comment">// 返回查询结果到 VO 类</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token keyword">return</span> teacherDao<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">TeacherVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>TeacherVO(id=1, students=[王五, 李四, 张三], name=小郭, sex=男)</code></pre><h2 id="一对多-对象"><a class="anchor" href="#一对多-对象">#</a> 一对多 (对象)</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeacherVO1</span><span class="token punctuation">></span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token comment">// 实例化 MPJLambdaWrapper</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token comment">// 左连接联表查询，根据 teacher 的 id 和 student 的 teacher_id 进行联表查询</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">StudentEntity</span><span class="token operator">::</span><span class="token function">getTeacherId</span><span class="token punctuation">,</span> <span class="token class-name">TeacherEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 查询 teacher 的所有字段数据</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token class-name">TeacherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token comment">// 这里只是少了 map 去映射返回的结果，而我们这次得到的是多个对象</span></pre></td></tr><tr><td data-num="11"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectCollection</span><span class="token punctuation">(</span><span class="token class-name">StudentEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TeacherVO1</span><span class="token operator">::</span><span class="token function">getStudents</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>   <span class="token comment">// 返回查询结果到 VO1 类</span></pre></td></tr><tr><td data-num="13"></td><td><pre>   <span class="token keyword">return</span> teacherDao<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">TeacherVO1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p><pre><code>TeacherVO1(id=1, students=[StudentEntity(id=3, teacherId=1, name=王五, age=14, sex=男), StudentEntity(id=2, teacherId=1, name=李四, age=20, sex=男), StudentEntity(id=1, teacherId=1, name=张三, age=18, sex=男)], name=小郭, sex=男)</code></pre><h2 id="多对多查询"><a class="anchor" href="#多对多查询">#</a> 多对多查询</h2><p>数据库表：</p><p>class</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 10:56:43</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_class</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程表id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">-- Records of tab_class</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'数学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'英语'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'化学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'生物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'物理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'政治'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'历史'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_class<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'地理'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>student</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 10:56:55</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_studenttwo</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生名称'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生年龄'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- Records of tab_studenttwo</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_studenttwo<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'王五'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>cs</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> Navicat Premium Data Transfer</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre> Source Server         : windows</pre></td></tr><tr><td data-num="5"></td><td><pre> Source Server Type    : MySQL</pre></td></tr><tr><td data-num="6"></td><td><pre> Source Server Version : 80028</pre></td></tr><tr><td data-num="7"></td><td><pre> Source Host           : localhost:3306</pre></td></tr><tr><td data-num="8"></td><td><pre> Source Schema         : mpj_test</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre> Target Server Type    : MySQL</pre></td></tr><tr><td data-num="11"></td><td><pre> Target Server Version : 80028</pre></td></tr><tr><td data-num="12"></td><td><pre> File Encoding         : 65001</pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre> Date: 30/03/2024 10:56:49</pre></td></tr><tr><td data-num="15"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">SET</span> NAMES utf8mb4<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">-- Table structure for tab_cs</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span>  <span class="token punctuation">(</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'中间表id(查询学生与课程的关系)'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>c_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'课程表id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token identifier"><span class="token punctuation">`</span>s_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学生表id'</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COLLATE</span> <span class="token operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="token operator">=</span> Dynamic<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">-- Records of tab_cs</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">-- ----------------------------</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>tab_cs<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>联查参考 sql 语句：</p><figure class="highlight sql"><figcaption data-lang="SQL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">SELECT</span></pre></td></tr><tr><td data-num="2"></td><td><pre>ts<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> student_name<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ts<span class="token punctuation">.</span>age student_age<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>tcs<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> class_name</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">FROM</span></pre></td></tr><tr><td data-num="6"></td><td><pre>tab_studenttwo ts</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_cs tc <span class="token keyword">ON</span> tc<span class="token punctuation">.</span>s_id <span class="token operator">=</span> ts<span class="token punctuation">.</span>id</pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> tab_class tcs <span class="token keyword">ON</span> tcs<span class="token punctuation">.</span>id <span class="token operator">=</span> tc<span class="token punctuation">.</span>c_id</pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">WHERE</span></pre></td></tr><tr><td data-num="10"></td><td><pre>ts<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">'王五'</span></pre></td></tr></table></figure><p>查询结果：</p><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240330105633348.png" alt="image-20240330105633348" /></p><h3 id="java代码"><a class="anchor" href="#java代码">#</a> java 代码</h3><p>vo 类:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Data</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentClassVO</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> studentName<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> studentAge<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>serviceImpl:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StudenttwoEntity</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MPJLambdaWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">CsEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CsEntity</span><span class="token operator">::</span><span class="token function">getSId</span><span class="token punctuation">,</span> <span class="token class-name">StudenttwoEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token class-name">ClassEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ClassEntity</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">,</span> <span class="token class-name">CsEntity</span><span class="token operator">::</span><span class="token function">getCId</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">StudenttwoEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"studentName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">StudenttwoEntity</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token string">"studentAge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   wrapper<span class="token punctuation">.</span><span class="token function">selectAs</span><span class="token punctuation">(</span><span class="token class-name">ClassEntity</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>   <span class="token keyword">return</span> studenttwoDao<span class="token punctuation">.</span><span class="token function">selectJoinList</span><span class="token punctuation">(</span><span class="token class-name">StudentClassVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>查询结果：</p><pre><code>StudentClassVO(studentName=张三, studentAge=18, className=英语)StudentClassVO(studentName=张三, studentAge=18, className=语文)StudentClassVO(studentName=张三, studentAge=18, className=数学)StudentClassVO(studentName=李四, studentAge=19, className=化学)StudentClassVO(studentName=李四, studentAge=19, className=英语)StudentClassVO(studentName=李四, studentAge=19, className=语文)StudentClassVO(studentName=李四, studentAge=19, className=数学)StudentClassVO(studentName=王五, studentAge=20, className=物理)StudentClassVO(studentName=王五, studentAge=20, className=数学)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mybatis-plus-基本查询使用&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mybatis-plus-基本查询使用&quot;&gt;#&lt;/a&gt; MyBatis-Plus - 基本查询使用&lt;/h1&gt;
&lt;p&gt;创建数据库：&lt;/p&gt;
&lt;p&gt;student&lt;/p&gt;
&lt;fi</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/"/>
    
    <category term="mybatisplus-join" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mybatis/mybatisplus-join/"/>
    
    
    <category term="mybatis" scheme="https://pigpigletsgo.github.io/tags/mybatis/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="mybatisplus-join" scheme="https://pigpigletsgo.github.io/tags/mybatisplus-join/"/>
    
  </entry>
  
  <entry>
    <title>Stream+递归实现树形结构</title>
    <link href="https://pigpigletsgo.github.io/computer-science/java/%E6%A1%88%E4%BE%8BDemo/Stream+%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/"/>
    <id>https://pigpigletsgo.github.io/computer-science/java/%E6%A1%88%E4%BE%8BDemo/Stream+%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84/</id>
    <published>2024-03-29T08:08:49.975Z</published>
    <updated>2024-03-29T08:09:12.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stream递归实现树形结构"><a class="anchor" href="#stream递归实现树形结构">#</a> Stream + 递归实现树形结构</h1><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 构建树形结构</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> <span class="token function">listWithTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>   <span class="token comment">// 1. 查出所有分类</span></pre></td></tr><tr><td data-num="6"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> entities <span class="token operator">=</span> baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>   <span class="token comment">// 2. 组装成父子的树形结构</span></pre></td></tr><tr><td data-num="8"></td><td><pre>   <span class="token comment">// 2.1 找到所有的一级分类</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> levelMenus <span class="token operator">=</span> entities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token comment">// 过滤所有父级菜单</span></pre></td></tr><tr><td data-num="11"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>c <span class="token operator">-></span> c<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>m <span class="token operator">-></span></pre></td></tr><tr><td data-num="13"></td><td><pre>           <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>              <span class="token comment">// 递归查找所有菜单的子级菜单</span></pre></td></tr><tr><td data-num="15"></td><td><pre>              m<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getChildrens</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>              <span class="token keyword">return</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> <span class="token operator">-></span></pre></td></tr><tr><td data-num="18"></td><td><pre>                     <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                        <span class="token comment">// 根据 sort 字段进行排序</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> m2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                        <span class="token comment">//return ((m.getCreateTime() == null ? "a" : m.getCreateTime()).compareTo(m2.getCreateTime() == null ? "a" : m2.getCreateTime()));</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>   <span class="token comment">// 返回构建完成的树形结构</span></pre></td></tr><tr><td data-num="24"></td><td><pre>   <span class="token keyword">return</span> levelMenus<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token comment">// 递归查找所有菜单的子菜单</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> <span class="token function">getChildrens</span><span class="token punctuation">(</span><span class="token class-name">CategoryEntity</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> all<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">></span></span> children <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>c <span class="token operator">-></span></pre></td></tr><tr><td data-num="31"></td><td><pre>                                                       <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                                                          <span class="token comment">// 过滤所有子级菜单的数据</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                                                          <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> root<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                                                       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>m <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>      <span class="token comment">// 递归查找子级菜单</span></pre></td></tr><tr><td data-num="36"></td><td><pre>      m<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span><span class="token function">getChildrens</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> all<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>      <span class="token keyword">return</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> m2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>      <span class="token comment">// 对自己菜单进行排序</span></pre></td></tr><tr><td data-num="40"></td><td><pre>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> m2<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>      <span class="token comment">//return ((m.getCreateTime() == null ? "a" : m.getCreateTime()).compareTo(m2.getCreateTime() == null ? "a" : m2.getCreateTime()));</span></pre></td></tr><tr><td data-num="42"></td><td><pre>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>   <span class="token keyword">return</span> children<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;stream递归实现树形结构&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stream递归实现树形结构&quot;&gt;#&lt;/a&gt; Stream + 递归实现树形结构&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption dat</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="java" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/categories/computer-science/java/%E6%A1%88%E4%BE%8BDemo/"/>
    
    
    <category term="java" scheme="https://pigpigletsgo.github.io/tags/java/"/>
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/tags/%E6%A1%88%E4%BE%8BDemo/"/>
    
    <category term="菜单数据结构" scheme="https://pigpigletsgo.github.io/tags/%E8%8F%9C%E5%8D%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 分页</title>
    <link href="https://pigpigletsgo.github.io/computer-science/database/mongodb/%E6%A1%88%E4%BE%8BDemo/MongoDB%20%E5%88%86%E9%A1%B5/"/>
    <id>https://pigpigletsgo.github.io/computer-science/database/mongodb/%E6%A1%88%E4%BE%8BDemo/MongoDB%20%E5%88%86%E9%A1%B5/</id>
    <published>2024-03-29T08:02:34.739Z</published>
    <updated>2024-03-29T09:55:25.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongodb-分页"><a class="anchor" href="#mongodb-分页">#</a> MongoDB 分页</h1><p>数据层：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Repository</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArticleRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="4"></td><td><pre>     * 分页</pre></td></tr><tr><td data-num="5"></td><td><pre>     * @param pageable</pre></td></tr><tr><td data-num="6"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="7"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Article</span><span class="token punctuation">></span></span> <span class="token function">findAllBy</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">// 按照条件查询并分页</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// Page&lt;Article> findAllByState(String state, Pageable pageable);</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>业务层接口：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EssayService</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">R</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>业务层实现：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Service</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EssayServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EssayService</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 查询全部文章并分页</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> repository<span class="token punctuation">.</span><span class="token function">findAllBy</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 第一个参数就是条件</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token comment">// return R.ok().put("data", repository.findAllByState(MongoDels.EX.getCode(), pageable));</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>视图层：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@RestController</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/essay"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@AllArgsConstructor</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EssayController</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="7"></td><td><pre>     * 查询全部文章并分页</pre></td></tr><tr><td data-num="8"></td><td><pre>     * @return</pre></td></tr><tr><td data-num="9"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"essayAll"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> service<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>请求结果：</p><pre><code>&#123;    &quot;code&quot;: 200,    &quot;data&quot;: &#123;        &quot;content&quot;: [            &#123;                &quot;id&quot;: &quot;660666210c39a27771d075fb&quot;,                &quot;content&quot;: &quot;ullamco&quot;,                &quot;tags&quot;: [                    &quot;ea33&quot;                ],                &quot;publishtime&quot;: &quot;2024-03-29 14:56:33&quot;,                &quot;userid&quot;: &quot;1&quot;,                &quot;nickname&quot;: &quot;123&quot;,                &quot;createdatatime&quot;: &quot;2024-03-29 14:56:33&quot;,                &quot;likenum&quot;: 0,                &quot;state&quot;: &quot;0&quot;            &#125;        ],        &quot;pageable&quot;: &#123;            &quot;sort&quot;: &#123;                &quot;empty&quot;: true,                &quot;sorted&quot;: false,                &quot;unsorted&quot;: true            &#125;,            &quot;offset&quot;: 0,            &quot;pageSize&quot;: 1,            &quot;pageNumber&quot;: 0,            &quot;unpaged&quot;: false,            &quot;paged&quot;: true        &#125;,        &quot;last&quot;: true,        &quot;totalPages&quot;: 1,        &quot;totalElements&quot;: 1,        &quot;size&quot;: 1,        &quot;number&quot;: 0,        &quot;sort&quot;: &#123;            &quot;empty&quot;: true,            &quot;sorted&quot;: false,            &quot;unsorted&quot;: true        &#125;,        &quot;numberOfElements&quot;: 1,        &quot;first&quot;: true,        &quot;empty&quot;: false    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mongodb-分页&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mongodb-分页&quot;&gt;#&lt;/a&gt; MongoDB 分页&lt;/h1&gt;
&lt;p&gt;数据层：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;figcaption data-l</summary>
      
    
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/categories/computer-science/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/"/>
    
    <category term="mongodb" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mongodb/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/categories/computer-science/databse/mongodb/%E6%A1%88%E4%BE%8BDemo/"/>
    
    
    <category term="计算机学科" scheme="https://pigpigletsgo.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91/"/>
    
    <category term="database" scheme="https://pigpigletsgo.github.io/tags/database/"/>
    
    <category term="mongodb" scheme="https://pigpigletsgo.github.io/tags/mongodb/"/>
    
    <category term="案例Demo" scheme="https://pigpigletsgo.github.io/tags/%E6%A1%88%E4%BE%8BDemo/"/>
    
  </entry>
  
  <entry>
    <title>JRebel破解以及问题解决</title>
    <link href="https://pigpigletsgo.github.io/tools/idea/JRebel%E7%A0%B4%E8%A7%A3/"/>
    <id>https://pigpigletsgo.github.io/tools/idea/JRebel%E7%A0%B4%E8%A7%A3/</id>
    <published>2024-03-28T01:22:11.492Z</published>
    <updated>2024-03-28T01:22:47.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="破解"><a class="anchor" href="#破解">#</a> 破解</h2><h1 id="jrebel-license-server-兼容-202340"><a class="anchor" href="#jrebel-license-server-兼容-202340">#</a> Jrebel License Server! (兼容 2023.4.0 +)</h1><p>JRebel 激活地址: <span class="exturl" data-url="aHR0cDovLzQyLjE5My4xOC4xNjg6ODA4OC9kMGNkZWRkZS0wOWVkLTQ0ZTctYjI5MS1iNTBkODFhYjQ2YzA=">http://42.193.18.168:8088/d0cdedde-09ed-44e7-b291-b50d81ab46c0</span></p><p>JRebel 激活邮箱: <span class="exturl" data-url="bWFpbHRvOjI5NTQyOTQwNEBxcS5jb20=">295429404@qq.com</span></p><h2 id="jrebel-无限试用请将以下内容拷贝到命令提示符中执行"><a class="anchor" href="#jrebel-无限试用请将以下内容拷贝到命令提示符中执行">#</a> JRebel 无限试用，请将以下内容拷贝到命令提示符中执行:</h2><pre><code class="language-bat">curl https://register.jpy.wang/ReRegister/src/main/java/jrebel/JrebelMain.java -o tmp.java &amp;&amp; java tmp.java &amp;&amp; del tmp.java</code></pre><p>执行后会弹出一个提示框，点击中间的按钮后过一会儿它就会生成 一个加密字符串并存储到 idea 缓存中。这样就可以了</p><h2 id="问题"><a class="anchor" href="#问题">#</a> 问题</h2><h3 id="无法启动项目或模块"><a class="anchor" href="#无法启动项目或模块">#</a> 无法启动项目或模块</h3><p><img data-src="https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/516ef17db5574de0a061c87b047a536b.png" alt="img" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;破解&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#破解&quot;&gt;#&lt;/a&gt; 破解&lt;/h2&gt;
&lt;h1 id=&quot;jrebel-license-server-兼容-202340&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#jrebel-license-serv</summary>
      
    
    
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/categories/tools/"/>
    
    <category term="idea" scheme="https://pigpigletsgo.github.io/categories/tools/idea/"/>
    
    
    <category term="java" scheme="https://pigpigletsgo.github.io/tags/java/"/>
    
    <category term="tools" scheme="https://pigpigletsgo.github.io/tags/tools/"/>
    
    <category term="idea" scheme="https://pigpigletsgo.github.io/tags/idea/"/>
    
  </entry>
  
</feed>
