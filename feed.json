{
    "version": "https://jsonfeed.org/version/1",
    "title": "D の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/%E5%88%9D%E4%BD%93%E9%AA%8Cstream%E6%B5%81/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/%E5%88%9D%E4%BD%93%E9%AA%8Cstream%E6%B5%81/",
            "title": "Stream初体验",
            "date_published": "2024-02-27T07:55:14.289Z",
            "content_html": "<h1 id=\"stream初体验\"><a class=\"anchor\" href=\"#stream初体验\">#</a> Stream 初体验</h1>\n<ul>\n<li>\n<p>案例需求</p>\n<p>按照下面的要求完成集合的创建和遍历</p>\n<ul>\n<li>创建一个集合，存储多个字符串元素</li>\n<li>把集合中所有以 &quot;张&quot; 开头的元素存储到一个新的集合</li>\n<li>把 &quot;张&quot; 开头的集合中的长度为 3 的元素存储到一个新的集合</li>\n<li>遍历上一步得到的集合</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原始方式示例代码\"><a class=\"anchor\" href=\"#原始方式示例代码\">#</a> 原始方式示例代码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arrayList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张翠山\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王二麻子\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张良\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"谢广坤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 遍历所有集合中 姓张的元素 添加到 list2 集合中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> arrayList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         list2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 遍历 list2 集合所有元素将 名称长度为 3 的元素存储到 list3 集合中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         list3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// 最终循环遍历 list3 集合里面都是我们上面符合要求的名称了</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>张三丰\n张无忌\n张翠山\n</code></pre>\n<p>可以看到上面的代码，我们费了老大劲才从集合中取到我们想要的结果，如果上面的操作换成 stream 流来操作呢？</p>\n<h2 id=\"使用stream流示例代码\"><a class=\"anchor\" href=\"#使用stream流示例代码\">#</a> 使用 Stream 流示例代码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张翠山\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王二麻子\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张良\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"谢广坤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//stream () 将 list 集合转换为 流</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//filter 通过 Lambda 表达式的形式来过滤首字母不是 \"张\" 的名字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//filter 过滤掉长度不为 3 的名字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">//forEach 循环遍历打印出前面预期的名字</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>张三丰\n张无忌\n张翠山\n</code></pre>\n<p><strong>Stream 流的好处</strong>：</p>\n<ol>\n<li>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：获取流，过滤姓张，过滤长度为 3，逐一打印</li>\n<li>Stream 流把真正的函数式编程风格引入到 java 中</li>\n<li>代码简洁</li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "stream流",
                "知识点",
                "stream流"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/",
            "title": "Stream流中间操作方法",
            "date_published": "2024-02-27T07:55:14.267Z",
            "content_html": "<h1 id=\"stream流中间操作方法\"><a class=\"anchor\" href=\"#stream流中间操作方法\">#</a> Stream 流中间操作方法</h1>\n<p><strong>概念</strong>：</p>\n<p>中间操作的意思是，执行完此方法之后，Stream 流依然可以继续执行其他操作</p>\n<p><strong>常见方法</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Stream&lt;T&gt; filter(Predicate predicate)</td>\n<td>用于对流中的数据进行过滤</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; limit(Long maxSize)</td>\n<td>返回此流中的元素组成的流，截取前指定参数个数的数据</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; skip(Long n)</td>\n<td>跳过指定参数个数的数据，返回由该流的剩余元素组成的流</td>\n</tr>\n<tr>\n<td>static&lt;T&gt; Stream&lt;T&gt; concat(Stream a,Stream b)</td>\n<td>合并 a 和 b 两个流为一个流</td>\n</tr>\n<tr>\n<td>Stream&lt;T&gt; distinct()</td>\n<td>返回由该流的不同元素 (根据 Object.equals (Object)) 组成的流</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"filter操作演示\"><a class=\"anchor\" href=\"#filter操作演示\">#</a> filter 操作演示</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStream3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//        Stream&lt;T> filter (Predicate predicate)：过滤</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//        Predicate 接口中的方法\tboolean test (T t)：对给定的参数进行判断，返回一个布尔值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张翠山\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王二麻子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张良\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"谢广坤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//filter 方法获取流中的 每一个数据.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 而 test 方法中的 s, 就依次表示流中的每一个数据.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 我们只要在 test 方法中对 s 进行判断就可以了.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果判断的结果为 true, 则当前的数据留下</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 如果判断的结果为 false, 则当前数据就不要.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        list.stream().filter(</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//                new Predicate&lt;String>() &#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//                    @Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//                    public boolean test(String s) &#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//                        boolean result = s.startsWith (\"张\");</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//                        return result;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//                    &#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//                &#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        ).forEach(s-> System.out.println(s));</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 因为 Predicate 接口中只有一个抽象方法 test</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 所以我们可以使用 lambda 表达式来简化</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//        list.stream().filter(</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//                (String s)->&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//                    boolean result = s.startsWith (\"张\");</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//                        return result;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//                &#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//        ).forEach(s-> System.out.println(s));</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"limitskip代码演示\"><a class=\"anchor\" href=\"#limitskip代码演示\">#</a> limit&amp;skip 代码演示</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：取前 3 个数据在控制台输出</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 需求 2：跳过 3 个元素，把剩下的元素在控制台输出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 需求 3：跳过 2 个元素，把剩下的元素中前 2 个在控制台输出</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"concatdistinct代码演示\"><a class=\"anchor\" href=\"#concatdistinct代码演示\">#</a> concat&amp;distinct 代码演示</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamDemo03</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个集合，存储多个字符串元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张敏\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 需求 1：取前 4 个数据组成一个流</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s1 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 需求 2：跳过 2 个数据组成一个流</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> s2 <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 需求 3：合并需求 1 和需求 2 得到的流，并把结果在控制台输出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//        Stream.concat(s1,s2).forEach(s-> System.out.println(s));</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 需求 4：合并需求 1 和需求 2 得到的流，并把结果在控制台输出，要求字符串元素不能重复</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "stream流",
                "知识点",
                "stream流"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E7%9A%84%E7%BB%88%E7%BB%93%E6%96%B9%E6%B3%95/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E7%9A%84%E7%BB%88%E7%BB%93%E6%96%B9%E6%B3%95/",
            "title": "Stream流的终结方法",
            "date_published": "2024-02-27T07:55:14.250Z",
            "content_html": "<h2 id=\"stream流的终结方法\"><a class=\"anchor\" href=\"#stream流的终结方法\">#</a> Stream 流的终结方法</h2>\n<p><strong>概念</strong>：</p>\n<p>终结操作的意思是，执行完此方法之后，Stream 流将不能再执行其他操作</p>\n<p><strong>常见方法</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void forEach(Consumer action)</td>\n<td>对此流的每个元素执行操作</td>\n</tr>\n<tr>\n<td>Long count()</td>\n<td>返回此流中的元素个数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码演示\"><a class=\"anchor\" href=\"#代码演示\">#</a> 代码演示</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStream5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三丰\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张无忌\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张翠山\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王二麻子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张良\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"谢广坤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//method1(list);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//        long count ()：返回此流中的元素数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">long</span> count <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//  void forEach (Consumer action)：对此流的每个元素执行操作</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//  Consumer 接口中的方法 void accept (T t)：对给定的参数执行此操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 在 forEach 方法的底层，会循环获取到流中的每一个数据.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 并循环调用 accept 方法，并把每一个数据传递给 accept 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//s 就依次表示了流中的每一个数据.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 所以，我们只要在 accept 方法中，写上处理的业务逻辑就可以了.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">//lambda 表达式的简化格式</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 是因为 Consumer 接口中，只有一个 accept 方法</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">//lambda 表达式还是可以进一步简化的.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "stream流",
                "知识点",
                "stream流"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E7%9A%84%E6%80%9D%E6%83%B3%E5%92%8C%E8%8E%B7%E5%8F%96Stream%E6%B5%81/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E7%9A%84%E6%80%9D%E6%83%B3%E5%92%8C%E8%8E%B7%E5%8F%96Stream%E6%B5%81/",
            "title": "Stream流的思想和获取Stream流",
            "date_published": "2024-02-27T07:55:14.236Z",
            "content_html": "<h1 id=\"stream流的思想和获取stream流\"><a class=\"anchor\" href=\"#stream流的思想和获取stream流\">#</a> Stream 流的思想和获取 Stream 流</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240227152340813.png\" alt=\"image-20240227152340813\" /></p>\n<ul>\n<li>\n<p>Stream 流的三类方法</p>\n<ul>\n<li>\n<p>获取 Stream 流</p>\n<ul>\n<li>创建一条流水线，并把数据放到流水线上准备进行操作</li>\n</ul>\n</li>\n<li>\n<p>中间方法</p>\n<ul>\n<li>流水线上的操作</li>\n<li>一次操作完毕之后，还可以继续进行其他操作</li>\n</ul>\n</li>\n<li>\n<p>终结方法</p>\n<ul>\n<li>一个 Stream 流只能有一个终结方法</li>\n<li>是流水线上的最后一个操作</li>\n</ul>\n</li>\n<li>\n<p>生成 Stream 流的方式</p>\n<ul>\n<li>\n<p>Collection 体系集合</p>\n<p>使用默认方法 stream () 生成流，default Stream&lt;E&gt; stream ()</p>\n</li>\n<li>\n<p>Map 体系集合</p>\n<p>把 Map 转成 Set 集合，简洁的生成流</p>\n</li>\n<li>\n<p>数组</p>\n<p>通过 Arrays 中的静态方法 stream 生成流</p>\n</li>\n<li>\n<p>同种数据类型的多个数据</p>\n<p>通过 Stream 接口的静态方法 of (T ... Values) 生成流</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// Collection 体系的集合可以使用默认 stream () 方法生成流</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream1 <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// Map 体系的集合间接调用 stream () 方法生成流</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream2 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> stream3 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> stream4 <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 数组通过 Arrays 中的静态方法 stream () 生成流</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token class-name\">String</span> strings<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stream5 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">// 同种数据类型的多个数据可以通过 Stream 接口的静态方法 of (T ... Values) 生成流</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hello <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "stream流",
                "知识点",
                "stream流"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E7%9A%84%E6%94%B6%E9%9B%86%E6%93%8D%E4%BD%9Ccollect/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/stream%E6%B5%81/Stream%E6%B5%81%E7%9A%84%E6%94%B6%E9%9B%86%E6%93%8D%E4%BD%9Ccollect/",
            "title": "Stream流的收集操作collect",
            "date_published": "2024-02-27T07:55:14.226Z",
            "content_html": "<h1 id=\"stream流的收集操作collect\"><a class=\"anchor\" href=\"#stream流的收集操作collect\">#</a> Stream 流的收集操作 collect</h1>\n<p><strong>概念</strong>：</p>\n<p>对数据使用 Stream 流的方式操作完毕后，可以把流中的数据收集到集合中</p>\n<p><strong>常用方法</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>R collect(Collector collector)</td>\n<td>把结果收集到集合中</td>\n</tr>\n</tbody>\n</table>\n<p>工具类 Collectors 提供了具体的收集方式</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>public static&lt;T&gt; Collector toList()</td>\n<td>把元素收集到 List 集合中</td>\n</tr>\n<tr>\n<td>public static&lt;T&gt; Collector toSet()</td>\n<td>把元素收集到 Set 集合中</td>\n</tr>\n<tr>\n<td>public static Collector toMap(Function keyMapper, Function valueMapper)</td>\n<td>把元素收集到 Map 集合中</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：如果收集到的数据中有重复的<mark> List 不会去重而 Set 会去重</mark></p>\n<p><strong>代码演示</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//toList 和 toSet 方法演示 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStream7</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//filter 负责过滤数据的.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//collect 负责收集数据.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 获取流中剩余的数据，但是他不负责创建容器，也不负责把数据添加到容器中.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//Collectors.toList () : 在底层会创建一个 List 集合。并把所有的数据添加到 List 集合中.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-></span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">-></span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Stream 流的收集方法 toMap 方法演示</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>创建一个 ArrayList 集合，并添加以下字符串。字符串中前面是姓名，后面是年龄</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\"zhangsan,23\"</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\"lisi,24\"</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\"wangwu,25\"</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>保留年龄大于等于 24 岁的人，并将结果收集到 Map 集合中，姓名为键，年龄为值</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyStream8</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      \t<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangsan,23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lisi,24\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wangwu,25\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                s <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token keyword\">return</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         <span class=\"token comment\">//   collect 方法只能获取到流中剩余的每一个数据.</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         <span class=\"token comment\">// 在底层不能创建容器，也不能把数据添加到容器当中</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         <span class=\"token comment\">//Collectors.toMap 创建一个 map 集合并将数据添加到集合当中</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token comment\">//s 依次表示流中的每一个数据</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          <span class=\"token comment\">// 第一个 lambda 表达式就是如何获取到 Map 中的键</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>          <span class=\"token comment\">// 第二个 lambda 表达式就是如何获取 Map 中的值</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                s <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                s <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "stream流",
                "知识点",
                "stream流"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%9B%86%E5%90%88/EntrySet,KeySet%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4%E9%94%AE%E5%AF%B9%E5%BA%94%E5%80%BC/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%9B%86%E5%90%88/EntrySet,KeySet%E9%81%8D%E5%8E%86%E5%88%A0%E9%99%A4%E9%94%AE%E5%AF%B9%E5%BA%94%E5%80%BC/",
            "title": "Map集合遍历几种方式",
            "date_published": "2024-02-27T07:08:08.478Z",
            "content_html": "<h2 id=\"entryset\"><a class=\"anchor\" href=\"#entryset\">#</a> EntrySet</h2>\n<p>以 Set 集合形式返回 Map 集合中所有键值对</p>\n<p>EntrySet: 通过指定的键删除对应的值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo_6</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 向集合中添加一个键值对</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 集合对象名调用 EntrySet 获取对象，以 Set 集合形式，返回 Map 集合中所有键值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 通过 Set 集合的形式对象调用 迭代器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 判断是否有元素，有则 true 没有则 false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 使用 Map.Entry 静态方法获取 Map 中键值对 next 来往下遍历 并赋值给变量 x</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 获取每次遍历的 Key / 值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Integer</span> x1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 通过 Map 集合的 get 方法通过指定的键获取指定的值的方式来判断哪个元素的值为 a</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 满足判断条件后执行 删除</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                a<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 通过指定的键获取值的方式来打印 键值对</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x1<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>ar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"keyset\"><a class=\"anchor\" href=\"#keyset\">#</a> KeySet</h2>\n<p>以 Set 集合形式返回 Map 集合中所有键</p>\n<p>通过 KeySet 指定的键删除对应的值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo_7</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建 Map 集合</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> ar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 向集合中添加一个键值对</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ar<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 以 Set 集合形式，返回 Map 中所有键</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Set</span> s <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通过 Set 集合形式的对象调用 迭代器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> s1 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 遍历元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 强制类型转换 获取 Integer 类型的 键 遍历获取</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Integer</span> key <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">)</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 通过 Map 集合的 get 方法 遍历键对应的值是否为 a</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                s1<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>ar<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"values\"><a class=\"anchor\" href=\"#values\">#</a> values</h2>\n<p>以 Collection 集合形式，返回 Map 集合中所有的值</p>\n<p>遍历元素</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo_8</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 以 Collection 集合形式，返回 Map 集合中所有值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Collection</span> s <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 通过 Collection 集合形式的对象调用 迭代器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Iterator</span> s1 <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 遍历 集合中 所有值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 将每次获取的值赋值给 String 类型的变量 ar</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">String</span> ar <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "集合",
                "知识点",
                "集合"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%9B%86%E5%90%88/%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%9B%86%E5%90%88/%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88/",
            "title": "不可变集合",
            "date_published": "2024-02-27T07:07:48.643Z",
            "content_html": "<h1 id=\"创建不可变集合\"><a class=\"anchor\" href=\"#创建不可变集合\">#</a> 创建不可变集合</h1>\n<p>不可变集合就是一旦被创建后 长度不能修改 内容也不能修改的集合</p>\n<h2 id=\"不可变集合的应该场景\"><a class=\"anchor\" href=\"#不可变集合的应该场景\">#</a> 不可变集合的应该场景</h2>\n<ul>\n<li>\n<p>如果某个数据不能被修改，把它防御性的拷贝到不可变集合中是个很好的实践。</p>\n</li>\n<li>\n<p>当集合对象被不可信的库调用时，不可变形式是安全的。</p>\n<ul>\n<li><strong>简单理解</strong>：不想让别人修改集合中的内容</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"创建不可变集合的书写格式\"><a class=\"anchor\" href=\"#创建不可变集合的书写格式\">#</a> 创建不可变集合的书写格式</h2>\n<h3 id=\"不可变集合分类\"><a class=\"anchor\" href=\"#不可变集合分类\">#</a> 不可变集合分类</h3>\n<ul>\n<li>List</li>\n<li>Set</li>\n<li>Map</li>\n</ul>\n<p>在 List，Set，Map 接口中，都存在静态的 of 方法，可以获取一个不可变的集合。</p>\n<table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>static &lt;E&gt; List&lt;E&gt; of(E...elements)</td>\n<td>创建一个具有指定元素的 List 集合对象</td>\n</tr>\n<tr>\n<td>static &lt;E&gt; Set&lt;E&gt; of(E...elements)</td>\n<td>创建一个具有指定元素的 Set 集合对象</td>\n</tr>\n<tr>\n<td>static &lt;K,V&gt; Map&lt;K,V&gt; of(E...elements)</td>\n<td>创建一个具有指定元素的 Map 集合对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意</strong>：这个集合不能<mark>添加</mark>，<mark>删除</mark>，<mark>修改</mark>。</p>\n<h2 id=\"演示-list不可变集合的创建和查询\"><a class=\"anchor\" href=\"#演示-list不可变集合的创建和查询\">#</a> 演示 - List 不可变集合的创建和查询</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 创建不可变集合 内容为：\"张三\", \"李四\", \"王五\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 这个集合一旦创建后就不能添加，修改，删除了只能进行查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------get获取------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------增强for----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> list <span class=\"token operator\">:</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------iterator----------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> lists<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>-------------get获取------------\n张三\n李四\n王五\n----------增强for----------\n张三\n李四\n王五\n----------iterator----------\n张三\n李四\n王五\n</code></pre>\n<h2 id=\"我们试下删除指定索引元素\"><a class=\"anchor\" href=\"#我们试下删除指定索引元素\">#</a> 我们试下删除指定索引元素</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 创建不可变集合 内容为：\"张三\", \"李四\", \"王五\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 这个集合一旦创建后就不能添加，修改，删除了只能进行查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 想要删除指定索引 1 的 不可变集合中的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   lists<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException\n\tat java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)\n\tat java.base/java.util.ImmutableCollections$AbstractImmutableList.remove(ImmutableCollections.java:260)\n\tat jihe.Demo01.main(Demo01.java:11)\n</code></pre>\n<p>报错了。</p>\n<h2 id=\"我们试下添加元素\"><a class=\"anchor\" href=\"#我们试下添加元素\">#</a> 我们试下添加元素</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 创建不可变集合 内容为：\"张三\", \"李四\", \"王五\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 这个集合一旦创建后就不能添加，修改，删除了只能进行查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 想要向不可变集合中添加一个元素：\"新成员\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   lists<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新成员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException\n\tat java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)\n\tat java.base/java.util.ImmutableCollections$AbstractImmutableCollection.add(ImmutableCollections.java:147)\n\tat jihe.Demo01.main(Demo01.java:11)\n</code></pre>\n<h2 id=\"我们试下修改元素\"><a class=\"anchor\" href=\"#我们试下修改元素\">#</a> 我们试下修改元素</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 创建不可变集合 内容为：\"张三\", \"李四\", \"王五\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 这个集合一旦创建后就不能添加，修改，删除了只能进行查询操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lists <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   lists<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"新成员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException\n\tat java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)\n\tat java.base/java.util.ImmutableCollections$AbstractImmutableList.set(ImmutableCollections.java:262)\n\tat jihe.Demo01.main(Demo01.java:11)\n</code></pre>\n<h2 id=\"演示-set不可变集合的创建\"><a class=\"anchor\" href=\"#演示-set不可变集合的创建\">#</a> 演示 - Set 不可变集合的创建</h2>\n<p><strong>细节</strong>：创建时需要保证 of 中的元素唯一性不可重复否则报错。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sets <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: duplicate element: 李四\n\tat java.base/java.util.ImmutableCollections$SetN.&lt;init&gt;(ImmutableCollections.java:925)\n\tat java.base/java.util.Set.of(Set.java:524)\n\tat jihe.Demo02.main(Demo02.java:7)\n</code></pre>\n<p>它说 &quot;李四&quot; 这个元素重复了</p>\n<p>目前报错只能测试 添加，删除。不能测试修改因为 Set 集合不支持直接修改元素，而可以先删除旧元素在进行添加达到修改的目的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sets <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 想要向不可变集合中添加一个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   sets<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新成员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// sets.remove(1);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException\n\tat java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)\n\tat java.base/java.util.ImmutableCollections$AbstractImmutableCollection.add(ImmutableCollections.java:147)\n\tat jihe.Demo02.main(Demo02.java:9)\n</code></pre>\n<h2 id=\"演示-map不可变集合的创建\"><a class=\"anchor\" href=\"#演示-map不可变集合的创建\">#</a> 演示 - Map 不可变集合的创建</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         * 细节 1：键不能重复</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         * 细节 2：Map 里面的 of 方法，参数是有上限的，最多只能传递 20 个参数，10 个键值对</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         * 细节 3：如果我们要传递多个键值对对象，数量大于 10 个，在 Map 接口中还有一个方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> maps <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sets <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> sets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entrySet <span class=\"token operator\">=</span> maps<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> n <span class=\"token operator\">:</span> entrySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token class-name\">String</span> value <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\" = \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>-------------------\no1 = 李四\no = 张三\no2 = 王五\n-------------------\no1 = 李四\no = 张三\no2 = 王五\n</code></pre>\n<p>同样不能进行添加和修改与删除否则报错</p>\n<h2 id=\"map转键值对数组或不可变集合\"><a class=\"anchor\" href=\"#map转键值对数组或不可变集合\">#</a> Map 转键值对数组或不可变集合</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            创建 Map 的不可变集合，键值对的数量超过 10 个</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//1. 创建一个普通的 Map 集合</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"南京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赵六\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"孙七\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"深圳\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"周八\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"杭州\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吴九\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"宁波\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"郑十\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"苏州\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘一\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"无锡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"陈二\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"嘉兴\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   hm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"111\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token comment\">//2. 利用上面的数据来获取一个不可变的集合</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 获取到所有的键值对对象（Entry 对象）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> entries <span class=\"token operator\">=</span> hm<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">// 把 entries 变成一个数组</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token comment\">// 创建一个空数组</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token comment\">//toArray：将 entries 中的键值对拷贝到 arr1 数组中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">//toArray 方法在底层会比较集合的长度跟数组的长度两者的大小</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token comment\">// 如果集合的长度 > 数组的长度 ：数据在数组中放不下，此时会根据实际数据的个数，重新创建数组</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token comment\">// 如果集合的长度 &lt;= 数组的长度：数据在数组中放的下，此时不会创建新的数组，而是直接用</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token comment\">// 不可变的 map 集合</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token class-name\">Map</span> map <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofEntries</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\">// map.put(\"bbb\",\"222\");</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token comment\">//Map&lt;Object, Object> map = Map.ofEntries(hm.entrySet().toArray(new Map.Entry[0]));</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token comment\">//        Map&lt;String, String> map = Map.copyOf(hm);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token comment\">//        map.put(\"bbb\", \"222\");</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "集合",
                "知识点",
                "集合"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Base64/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Base64/",
            "title": "Base64编码",
            "date_published": "2024-02-27T01:36:25.958Z",
            "content_html": "<h1 id=\"base64\"><a class=\"anchor\" href=\"#base64\">#</a> Base64</h1>\n<h2 id=\"base64介绍\"><a class=\"anchor\" href=\"#base64介绍\">#</a> Base64 介绍</h2>\n<p><strong>疑惑</strong>：Base64 是什么，解决什么问题，Base64 字符串末尾的 = 是什么？</p>\n<p><strong>概述</strong>：</p>\n<blockquote>\n<p>Base64 在日常开发中的出镜率还是比较高的，那你真的了解它吗？它是加密算法吗？它有什么作用？具体算法是怎么样的？为什么叫 Base64？</p>\n</blockquote>\n<h2 id=\"base64是什么\"><a class=\"anchor\" href=\"#base64是什么\">#</a> Base64 是什么</h2>\n<p>Base64 是一种<mark>二进制到文本的编码</mark>方式。如果要具体一点的话，可以认为它是一种将<mark> byte 数组编码为字符串</mark>的方法，而却编码出的字符串<mark>只包含 ASCII 基础字符</mark>。</p>\n<p>例如字符串 <code>ShuSheng007</code>  对应的 Base64 为 <code>U2h1U2hlbmcwMDc=</code> 。其中那个  <code>=</code>  比较特殊，是<mark>填充符</mark>。</p>\n<p>值得注意的是 Base64<mark> 不是加密算法</mark>，其仅仅是一<mark>种编码方式</mark>，算法也是<mark>公开的</mark>，所以不能依赖它进行加密。</p>\n<h2 id=\"为什么叫base64\"><a class=\"anchor\" href=\"#为什么叫base64\">#</a> 为什么叫 Base64</h2>\n<p>因为它是基于 (Base) <strong>64</strong> 个字符的一种编码方式，使用其编码后的<mark>文本只包含 64 个 ASCII 码字符</mark> (偶尔加一个填充符 <strong>=</strong> )，如下所示：</p>\n<p><strong>Base64 使用到的 64 个字符</strong>：</p>\n<ul>\n<li><code>A-Z</code>  26 个</li>\n<li><code>a-z</code>  26 个</li>\n<li><code>0-9</code>  10 个</li>\n<li><code>+</code>  1 个</li>\n<li><code>-</code>  1 个</li>\n</ul>\n<p>下图是 Base64 码表，可以看到从 0 到 63 的每个数字都对应上面的一个字符。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/Untitled.jpeg\" alt=\"2\" /></p>\n<h2 id=\"base64-解决什么问题\"><a class=\"anchor\" href=\"#base64-解决什么问题\">#</a> Base64 解决什么问题</h2>\n<p>这块还是比较难说清楚的，我们就抓住主要矛盾吧。</p>\n<p>假设王二狗给牛翠花通过邮件发情书：</p>\n<blockquote>\n<p>亲爱的牛翠花我爱你，就像老鼠爱大米... 你是我的心，你是我的肝，你是我生命中的四分之三...</p>\n</blockquote>\n<p>我们首先要明白，网络中信息的传输只能传输 <code>0 和 1</code> ，所以我们首先要将这封情书转成 <code>01</code>  序列，那怎么转呢？这就有涉及到了编码方式，这块展开说能说两天，这里就假设使用 <code>utf-8</code>  转成的 <code>byte[]</code> ，值 是我瞎写的 <code>[100][11][1][13]....</code>  这个 <code>byte[]</code>  里面的那些数字，传输时候是以二进制形式进行的，格式如下：</p>\n<p><code>011001000001100100000001001101...</code></p>\n<p>那么当牛翠花收到这串数字后再将其按照 <code>utf-8</code>  解码，就能看到王二狗的情书了。</p>\n<p>如果一切都这么顺序就没 Base64 什么事了。由于信息从王二狗的电脑到牛翠花的电脑中间会经过好多路由器转发，牛翠花电脑上安装的邮件客户端也搞 幺蛾子。</p>\n<p>其中一个叫 阿璐 的路由器发现现在使用的是文本传输协议，而且有个 byte 的值是 [13]，而 13 在 ASCII 码中对应回车键，阿璐 一想，这玩意也表达不出个啥意思，算了给它省略了把，为下面的兄弟省点宽带，阿璐又看到一个 byte 值为 [07] 的又自作聪明，因为其在 ASCII 中表示铃声，又给省略了。这样等到 <code>01</code>  序列到达牛翠花的电脑时其实已经不是王二狗发出时的样子了，好死不死的牛翠花用的是 mac 电脑，邮件客户端也自作聪明，又给处理了好多 byte。最后导致的就是使用 <code>utf-8</code>  解码失败，或者解出来的内容不对。</p>\n<p>如果是英文还好一点，因为被处理的都是那些 ASCII 中不可见的字符，那些话还是可以出来的，如果是张图片，牛翠花可能就打不开了。</p>\n<p>所以，Base64 就是为了解决各系统以及传输协议中二进制不兼容的问题而生的。为啥使用 Base64 大家就兼容了呢？因为 Base64 满足了各方的需求，各方说了，俺们只保证支持 ASCII 中那些基础字符，其他的俺们不能保证，于是 Base64 就去从那些基础字符里挑了 64 个，所以大家都高兴了。</p>\n<p>目前由于传输导致的二进制改变已经很少见了，各种系统对二进制的兼容性处理也越来越好。假如你告诉我这串 <code>01</code>  是一张 <code>.jpg</code>  格式的图片，那我就按照 <code>.jpg</code>  算法将其恢复成一张 <code>.jpg</code>  图片，所以大家都很高兴。</p>\n<h2 id=\"ascii存在问题\"><a class=\"anchor\" href=\"#ascii存在问题\">#</a> ASCII 存在问题</h2>\n<p>地球人都知道计算机是欧美那帮人发明的，关键是这帮老外说的是英语，总共就 26 个字母。某一天一个老外在认真的设计 ASCII 码，他低头看了一眼手中的键盘，数了数按键，思考了一下，若有所思的加入了一些控制符，最后凑了 128 个字符 (后来进行了扩展)，搞定收工，沃日，他把我们说汉语的直接忽略了... 因为人家看定是只想着自己的文字啊，它们可能在想：什么？中国人也有可能用电脑吗？他们有电脑吗？到时候说英语好啦，汉字就不要用了。</p>\n<p>中国近 150 年来那叫一个矬 B 啊，落后愚昧，谁都能欺负。曾经的精英阶层（无论国共）均认为是中国的传统文化，以及汉语的复杂性导致了中国的全面衰落，大力提倡了汉字拉丁化，破四旧等等。足见咱们国家当年是多么的贫穷落后，把人的精神都逼成啥样了，准备放弃自己的文化了，但我们的祖国在近 20 年内迅速崛起了，虽然与西方仍然有较大的差距，但我们看到了光明的未来，这一点确实要感谢中国共产党。近年来文化也开始自信了，孔子学院也开到国外了，汉字也上了太空了，大部分妇女看到洋垃圾也不急着往回家捡了...</p>\n<h2 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h2>\n<ul>\n<li>证书</li>\n<li>电子邮件的附件，因为附件往往有不可见字符</li>\n<li>xml 中如果想嵌入另一个 xml 文件，直接嵌入，往往 xml 标签就乱套了，不容易解析，因为，需要把 xml 编译成字节数组的字符串，编译成可见字符。</li>\n<li>网页中的一些小图片，可以直接以 Base64 编码的方式嵌入，不用再链接请求消耗网络资源</li>\n<li>较老的纯文本协议 SMTP，这些文本偶尔传输一个文件时，需要用 Base64</li>\n</ul>\n<h2 id=\"base64算法\"><a class=\"anchor\" href=\"#base64算法\">#</a> Base64 算法</h2>\n<p>这里只做简单介绍，详细请参考相关技术文档</p>\n<p><strong>使用 Base64 进行编码，大致可以分为 4 步</strong>：</p>\n<ol>\n<li>将<mark>原始数据每三个字符作为一组</mark>，每个字节是 8bit，所以一共是 24 个 bit</li>\n<li>将<mark> 24 个 bit 分为四组</mark>，每组 6 个 bit</li>\n<li>在<mark>每组前面补加 <code>00</code> </mark>，将其<mark>补全成四组 8 个 bit</mark> 到此步，<mark>原生数据的 3 个字节已经变成了 4 个字节了</mark>，增大了将近 <mark>30%</mark></li>\n<li>根据 Base64 编码表得到扩展后每个字节的对应符号 (见下图)</li>\n</ol>\n<p><strong>下图是维基百科上面的一个例子</strong>：</p>\n<p>假如我们的原文为 <code>Man</code> ，那么下图演示了如何按照上面的步骤将其编码为 Base64 字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/Untitled.webp\" alt=\"\" /></p>\n<ul>\n<li>Bits：是对应的 ASCII 里面的二进制数据</li>\n<li>Sextets：是当前二进制范围的值</li>\n<li>Character：对应如下 64 字符编码表的值</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/Untitled.png\" alt=\"\" /></p>\n<p>可以发现 <code>Man</code>  对应的 Base64 为 TWFu. 现在大家应该明白为什么只有 64 个字符了把？因为算法将 8bit 分割成 6bit 了，而 6bit 的取值范围为 0 ~ 63</p>\n<h2 id=\"base64字符串末尾的-是什么\"><a class=\"anchor\" href=\"#base64字符串末尾的-是什么\">#</a> Base64 字符串末尾的 = 是什么</h2>\n<p>有时我们会在 Base64 字符末尾看到 = ，有时 1 个，有时 2 个，这时为啥？</p>\n<p>通过上面的讲述，我们知道了 Base64 编码过程是 3 个字符一组的进行，如果原文长度不是 3 的倍数怎么办呢？例如我们的原文为 <code>Man</code> ，他不够 3 个，那么只能在编码后的字符串中补  = 了。缺一个字符补一个，缺两个补两个即可，所以有时你会看到 Base64 字符串结尾有 1 个或者 2 个 = 。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/Untitled.webp\" alt=\"\" /></p>\n<h2 id=\"base64-datauri格式\"><a class=\"anchor\" href=\"#base64-datauri格式\">#</a> Base64 DataURI 格式</h2>\n<p>有时你会发现 web 页面传给你的 Base64 字符串前面有类似下面的东西。</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">data</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">image/jpeg;base64,   /9j/4AA</span></span></pre></td></tr></table></figure><p>这是 DataURI，大部分浏览器支持直接打开这类二进制数据，但是我们要格外注意，如果你只是想要真实的 Base64 内容就只需要取，后边的内容 <code>/9j/4AA</code> 。</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/bug/NoClassDefFoundError%20javaxxmlbindDatatypeConverter/",
            "url": "https://pigpigletsgo.github.io/bug/NoClassDefFoundError%20javaxxmlbindDatatypeConverter/",
            "title": "NoClassDefFoundError: javax/xml/bind/DatatypeConverter",
            "date_published": "2024-02-20T01:03:48.518Z",
            "content_html": "<h1 id=\"noclassdeffounderror-javaxxmlbinddatatypeconverter\"><a class=\"anchor\" href=\"#noclassdeffounderror-javaxxmlbinddatatypeconverter\">#</a> NoClassDefFoundError: javax/xml/bind/DatatypeConverter</h1>\n<p>问题描述：</p>\n<blockquote>\n<p>错误  <code>NoClassDefFoundError: javax/xml/bind/DatatypeConverter</code>  通常是因为  <code>javax.xml.bind</code>  包不在 Java 11 及更高版本中可用。这个包包含了  <code>DatatypeConverter</code>  类。如果你正在使用 Java 11 或更高版本，并且你的代码中使用了  <code>DatatypeConverter</code> ，你可能会遇到这个错误。你可以考虑使用其他类，如  <code>java.util.Base64</code> ，来替换  <code>DatatypeConverter</code>  的功能。</p>\n</blockquote>\n<p>如果不希望降低 jdk 版本而解决这个问题可以参考如下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.xml.bind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jaxb-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.sun.xml.bind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jaxb-impl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.sun.xml.bind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jaxb-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>activation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>为什么添加该依赖就不会报错了呢？是什么原理？</p>\n<p>答：</p>\n<blockquote>\n<p>当你在项目中添加这些依赖时，你其实是在你的项目中引入了  <code>javax.xml.bind.DatatypeConverter</code>  类所在的库。这样，当你的代码试图访问  <code>DatatypeConverter</code>  类时，JVM 就可以在你的项目的类路径中找到它，因此就不会抛出  <code>NoClassDefFoundError</code>  错误了。</p>\n<p>具体来说， <code>javax.xml.bind.DatatypeConverter</code>  类是在 Java 8 及更早版本的 JDK 中可用的，但在 Java 11 及更高版本中被移除了。这是因为 Java 9 引入了模块系统，一些以前的 Java EE 和 CORBA 模块（包括  <code>javax.xml.bind</code> ）被标记为 “deprecated” 并在 Java 11 中被移除。</p>\n<p>当你添加了上述的 Maven 依赖后，这些被移除的类会被添加回你的项目中，因此你的代码可以在 Java 11 或更高版本中正常运行。这就是为什么添加这些依赖可以解决  <code>NoClassDefFoundError: javax/xml/bind/DatatypeConverter</code>  错误的原理。。</p>\n</blockquote>\n",
            "tags": [
                "问题总汇",
                "问题总汇",
                "jdk版本问题",
                "SpringBoot",
                "Jwt"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E6%A1%88%E4%BE%8BDemo/%E5%88%86%E9%A1%B5/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E6%A1%88%E4%BE%8BDemo/%E5%88%86%E9%A1%B5/",
            "title": "SpringBoot+MyBatisPlus+javascript实现分页",
            "date_published": "2024-02-19T13:19:02.695Z",
            "content_html": "<h1 id=\"springboot-mybatisplus-javascript分页功能\"><a class=\"anchor\" href=\"#springboot-mybatisplus-javascript分页功能\">#</a> SpringBoot + MybatisPlus + javascript 分页功能</h1>\n<h3 id=\"导入依赖\"><a class=\"anchor\" href=\"#导入依赖\">#</a> 导入依赖</h3>\n<p>SpringBoot3.2.2 版本使用如下的 MybatisPlus 依赖否则报错，因为不兼容版本</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-spring-boot3-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>导入了 MybatisPlus 就可以编写工具类代码了，如下：</p>\n<p>配置 MybatisPlus 分页的配置类</p>\n<p>可以写到 com.dkx.config 包中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * &lt;P></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * \t\tMybatis-Plus 配置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * &lt;/p></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.dkx.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MybatisPlusConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t * 新的分页插件</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t * 避免缓存出现问题 (该属性会在旧插件移除后一同移除)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">MybatisPlusInterceptor</span> <span class=\"token function\">mybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">MybatisPlusInterceptor</span> interceptor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MybatisPlusInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\tinterceptor<span class=\"token punctuation\">.</span><span class=\"token function\">addInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PaginationInnerInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DbType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> interceptor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个类可以放到 com.dkx.util 包中，然后分页会用</p>\n<p>分页参数类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageParams</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 当前页码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> pageNo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 每页显示记录数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> pageSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>返回分页的数据类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 数据列表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> items<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 总记录数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> counts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 当前页码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> page<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 每页记录数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> pageSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PageResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> items<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> counts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> page<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> pageSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>counts <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>page <span class=\"token operator\">=</span> page<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pageSize <span class=\"token operator\">=</span> pageSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>响应类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> success<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240219210933410.png\" alt=\"image-2024021210933410\" /></p>\n<p>以上都可以放到 util 中管理</p>\n<p>PS：不用写 Mapper 类的代码</p>\n<p>service 类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PageResult</span><span class=\"token operator\">&lt;</span>实体类<span class=\"token operator\">></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageParams</span> pageParams<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> 实体类 xxx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>演示如下：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageParams</span> pageParams<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>serviceImpl 类</p>\n<p>只需要将里面的实体类换一下即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageParams</span> pageParams<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 拼装查询条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> queryWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 根据名称模糊查询，在 sql 中拼接 course_base.name like '% 值 %'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">like</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Book</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">,</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 根据课程审核状态查询 course_base.audit_status = ?</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   queryWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Book</span><span class=\"token operator\">::</span><span class=\"token function\">getDel</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 创建 page 分页参数对象，参数：当前页码，每页记录数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>pageParams<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pageParams<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 开始进行分页查询</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> pageResult <span class=\"token operator\">=</span> bookMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectPage</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">,</span> queryWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 数据列表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> items <span class=\"token operator\">=</span> pageResult<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 总记录数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">long</span> total <span class=\"token operator\">=</span> pageResult<span class=\"token punctuation\">.</span><span class=\"token function\">getTotal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> courseBasePageResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span>total<span class=\"token punctuation\">,</span>pageParams<span class=\"token punctuation\">.</span><span class=\"token function\">getPageNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pageParams<span class=\"token punctuation\">.</span><span class=\"token function\">getPageSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">return</span>  courseBasePageResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Controller 类</p>\n<p>到现在后端分页就完毕了，剩下的就是前端拿数据然后再分页展示的事儿了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"course/list\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PageParams</span> pageParams<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">Book</span> book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">PageResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Book</span><span class=\"token punctuation\">></span></span> courseBasePageResult <span class=\"token operator\">=</span> bookService<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span>pageParams<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> courseBasePageResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"前端分页\"><a class=\"anchor\" href=\"#前端分页\">#</a> 前端分页</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#content'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 展示区域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> shu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.shu'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 触发查询事件后获取内容的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> queryShu <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#queryShu'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询按钮 点击后触发事件的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> pageNo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token comment\">// 当前页</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> pageSize <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token comment\">// 总获取数据量 (后端请求的)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> pageSize1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token comment\">// 总展示数据量 (前端展示的)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> url1 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost/star/b/course/list?pageNo=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageNo<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&amp;pageSize=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageSize<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>queryShu<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> shu<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">let</span> totalPage <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> pageSize1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">let</span> lis <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">let</span> li <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newPage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            pageNo <span class=\"token operator\">=</span> newPage</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            r<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">let</span> starIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pageNo <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> pageSize1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">let</span> endIndex <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>pageNo <span class=\"token operator\">*</span> pageSize1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> starIndex <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;=</span> endIndex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    li <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;tr>'</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>auth <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>chu <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> <span class=\"token string\">'&lt;button onclick=\"delt(this)\">删除&lt;/button>'</span> <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;th>'</span><span class=\"token operator\">+</span> <span class=\"token string\">'&lt;button onclick=\"upd(this)\">修改&lt;/button>'</span> <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/th>'</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token operator\">+</span><span class=\"token string\">'&lt;/tr>'</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                lis <span class=\"token operator\">+=</span> li</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                content<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> lis</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 更新总页数显示</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#totalPage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>totalPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 显示总页数</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#currentPage'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>pageNo<span class=\"token punctuation\">)</span><span class=\"token comment\">// 显示当前页数</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 上一页按钮点击事件</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#prevBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageNo <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                pageNo<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>pageNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 切换到上一页</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 下一页按钮点击事件</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#nextBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pageNo <span class=\"token operator\">&lt;</span> totalPage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                pageNo<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>pageNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 切换到下一页</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 跳转 n 页</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#jumpBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#jumpInput'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;=</span> totalPage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>pageNo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 执行调用方法并传入当前页的初始值</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token function\">changePage</span><span class=\"token punctuation\">(</span>pageNo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>html 按钮部分</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Page<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prevBtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>上一页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nextBtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>下一页<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>currentPage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> / <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>totalPage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> 页</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jumpInput<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jumpBtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>跳转<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>效果演示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/recording.gif\" alt=\"recording\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "案例Demo",
                "java",
                "计算机学科",
                "web",
                "案例Demo"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/TreeUtil/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/TreeUtil/",
            "title": "",
            "date_published": "2024-02-16T11:28:18.091Z",
            "content_html": "<h1 id=\"treeutil\"><a class=\"anchor\" href=\"#treeutil\">#</a> TreeUtil</h1>\n<p>导入依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.hutool<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hutool-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.7.22<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建数据库：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240216193508088.png\" alt=\"image-20240216193508088\" /></p>\n<p>实体类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>callSuper <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Managebar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> parentId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> orderNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>service：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ManagebarService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">treeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ServiceImpl：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"managebarService\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ManagebarServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ManagebarMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ManagebarService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">treeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有资料分类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBaseMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2. 配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">TreeNodeConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNodeConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setIdKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 默认 id，可以不设置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setParentIdKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parentId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 父 id</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setNameKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 分类名称</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setDeep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                  <span class=\"token comment\">// 最大递归深度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setChildrenKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"childrenList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 孩子节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setWeightKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 排序字段</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//3. 转树</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> treeList <span class=\"token operator\">=</span> <span class=\"token class-name\">TreeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> treeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parentId\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getParentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderNum\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 扩展属性...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> treeList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Controller：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"managebarService\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ManagebarService</span> managebarService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>managebarService<span class=\"token punctuation\">.</span><span class=\"token function\">treeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问地址返回的数据效果如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240216193655576.png\" alt=\"image-20240216193655576\" /></p>\n<p>这样看着不明显我们通过工具进行解析一下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240216193729157.png\" alt=\"image-20240216193729157\" /></p>\n<p>完毕！</p>\n",
            "tags": []
        },
        {
            "id": "https://pigpigletsgo.github.io/bug/SpringBoot3.x%E4%BD%BF%E7%94%A8MyBatisPlus%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/bug/SpringBoot3.x%E4%BD%BF%E7%94%A8MyBatisPlus%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "SpringBoot3.x使用MyBatisPlus的问题",
            "date_published": "2024-02-15T03:44:27.623Z",
            "content_html": "<p>问题描述：</p>\n<blockquote>\n<p>springboot 由 3.1.5 升级到 3.2.0 报 Invalid value type for attribute ‘factoryBeanObjectType‘: java.lang.String</p>\n</blockquote>\n<p>目前 mybatisplus 没有支持 SpringBoot3.2.2 的所以我们需要使用如下坐标来解决问题：</p>\n<pre><code class=\"language-.xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-spring-boot3-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.5.5&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n",
            "tags": [
                "问题总汇",
                "问题总汇",
                "MyBatisPlus",
                "版本问题"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "title": "解决跨域问题",
            "date_published": "2024-02-12T12:35:08.435Z",
            "content_html": "<h1 id=\"解决nginx跨域问题\"><a class=\"anchor\" href=\"#解决nginx跨域问题\">#</a> 解决 Nginx 跨域问题</h1>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Origin *</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Methods <span class=\"token string\">'GET, POST, OPTIONS'</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Headers <span class=\"token string\">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个配置做了以下几件事：</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1648860\"> <code>Access-Control-Allow-Origin *</code>  允许所有源站点访问本服务器的数据</a>。</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1648860\"> <code>Access-Control-Allow-Methods 'GET, POST, OPTIONS'</code>  允许 GET、POST 和 OPTIONS 这三种 HTTP 请求方法</a>。</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1648860\"> <code>Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</code>  允许这些 HTTP 请求头的字段</a>。</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/",
            "title": "高可用",
            "date_published": "2024-02-12T12:35:08.395Z",
            "content_html": "<h2 id=\"高可用配置\"><a class=\"anchor\" href=\"#高可用配置\">#</a> 高可用配置</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-14-11-02_20230225142326.png\" alt=\"image_2023-02-01-14-11-02\" /></p>\n<h3 id=\"安装keepalived\"><a class=\"anchor\" href=\"#安装keepalived\">#</a> 安装 Keepalived</h3>\n<h4 id=\"编译安装\"><a class=\"anchor\" href=\"#编译安装\">#</a> 编译安装</h4>\n<p>下载地址:</p>\n<p><code>https://www.keepalived.org/download.html</code></p>\n<p>使用 <code>./configure</code>  编译安装</p>\n<p>如遇报错提示:</p>\n<pre><code>configure: error :\n!!! OpenSSL is not properly installed on your system !!!\n!!! Can not include OpenSSL headers files !!!\n</code></pre>\n<p>安装依赖</p>\n<pre><code>yum install openssl-devel\n</code></pre>\n<p><strong>yum 安装</strong></p>\n<pre><code>yum install keepalived\n</code></pre>\n<p><strong>配置</strong></p>\n<p>使用 yum 安装后配置文件在</p>\n<p><code>/etc/keepalived/Keepalived.conf</code></p>\n<p><strong>最小配置</strong></p>\n<p>第一台机器</p>\n<pre><code>! Configuration File for keepalived\n\nglobal_defs &#123;\n\trouter_id lb111\n&#125;\n#在内网当中通讯的协议 atguigu:实例名称\nvrrp_instance atguigu &#123;\n    state MASTER\n    interface ens33 #对应自己的网卡的名字\n    virtual_router_id 51\n    #主备竞选的的优先级高谁就是Master\n    priority 100 #优先级\n    advert_int 1 #间隔检测的时间\n    authentication &#123; #在内网当认证服务器,同一组要保持一致\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123; #虚拟的ip地址\n        192.168.244.200\n    &#125;\n&#125;\n</code></pre>\n<p>启动 Keepalived</p>\n<pre><code>systemctl start keepalived\n</code></pre>\n<p>查看 ip</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-27-59_20230225142344.png\" alt=\"image_2023-02-01-21-27-59\" /></p>\n<ul>\n<li>注意：使用 ip addr 来查看 ifconfig 查看不到</li>\n</ul>\n<p>第二台机器</p>\n<pre><code>! Configuration File for keepalived\n\nglobal_defs &#123;\n   router_id lb110\n&#125;\n\nvrrp_instance atguigu &#123;\n    state BACKUP #备机\n    interface ens33 \n    virtual_router_id 51\n    priority 50 #优先级要比Master低\n    advert_int 1\n    authentication &#123;\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.244.200\n    &#125;\n&#125;\n</code></pre>\n<p>ip add 查看</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-38-30_20230225142357.png\" alt=\"image_2023-02-01-21-38-30\" /></p>\n<p>只有一个 ip</p>\n<p>在 win 下 ping 一下虚拟 ip 查看效果:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-40-23_20230225142409.png\" alt=\"image_2023-02-01-21-40-23\" /></p>\n<p>我们将这个 111 的给断开直接关机</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-42-13_20230225142420.png\" alt=\"image_2023-02-01-21-42-13\" /></p>\n<p>断了一下有重新 ping 上了查看下 110 的 ip 状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-43-20_20230225142431.png\" alt=\"image_2023-02-01-21-43-20\" /></p>\n<p>可以看到 110 用 IP add 既然查看到了虚拟 ip</p>\n<p>这就是 ip 飘逸通过 keepalived 飘逸</p>\n<p>访问页面时也是通过虚拟 ip 来访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-45-28_20230225142445.png\" alt=\"image_2023-02-01-21-45-28\" /></p>\n<h3 id=\"高可用场景及解决方案\"><a class=\"anchor\" href=\"#高可用场景及解决方案\">#</a> 高可用场景及解决方案</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-14-11-16_20230225142457.png\" alt=\"image_2023-02-01-14-11-16\" /></p>\n<h3 id=\"选举方式\"><a class=\"anchor\" href=\"#选举方式\">#</a> 选举方式</h3>\n<p>优先级决定选举：谁的优先级高就越容易 Master</p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%98%B2%E7%9B%97%E9%93%BE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%98%B2%E7%9B%97%E9%93%BE/",
            "title": "防盗链",
            "date_published": "2024-02-12T12:35:08.378Z",
            "content_html": "<h2 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链</h2>\n<ul>\n<li>http 协议中的 referer</li>\n</ul>\n<h3 id=\"nginx防盗链配置\"><a class=\"anchor\" href=\"#nginx防盗链配置\">#</a> nginx 防盗链配置</h3>\n<blockquote>\n<p>valid_referers none | bolcked | server_names | strings ... ;</p>\n</blockquote>\n<ul>\n<li>\n<p>none, 检测 Refere 头域不存在的情况</p>\n</li>\n<li>\n<p>bolcked, 检测 Refere 头域的值被防火墙或者代理服务器删除或者伪装的情况，这种情况该头域的值不以 &quot;http://&quot; 或 &quot;https://&quot; 开头</p>\n</li>\n<li>\n<p>server_names, 设置一个或多个 URL, 检测 Refere 头域的值是否是这些 URL 中的某一个</p>\n</li>\n</ul>\n<p>在需要防盗链的 location 中配置</p>\n<pre><code>valid_referers 192.168.44.101;\nif($invalid_referer)&#123;\n    return 403;\n&#125;\n</code></pre>\n<p><strong>使用 curl 测试</strong></p>\n<p><code>curl -I http://192.168.44.101/img/logo.png</code></p>\n<p><strong>带引用</strong></p>\n<p><code>curl -e &quot;http://baidu.com&quot; -I http://192.168.44.101/img/loggo.png</code></p>\n<blockquote>\n<p>演示</p>\n</blockquote>\n<p><strong>0 号 Linux 配置如下</strong></p>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://192.168.244.139:8088;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        #正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n            valid_referers 192.168.244.128:8089;                                                                                                          \n            if ($invalid_referer) &#123;\n                return 403;\n            &#125;\n\n            root html;\n            index  index.html index.htm;\n        &#125;\n\n&#125;\n</code></pre>\n<ul>\n<li>在静态资源的 location 下配置防盗链，防盗链的方式为 ip 地址</li>\n</ul>\n<p>访问效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-19-32_20230225141924.png\" alt=\"image_2023-01-31-21-19-32\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-21-10_20230225141935.png\" alt=\"image_2023-01-31-21-21-10\" /></p>\n<ul>\n<li>从控制台中点击图片查看情况</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-27-47_20230225141948.png\" alt=\"image_2023-01-31-21-27-47\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-28-21_20230225141959.png\" alt=\"image_2023-01-31-21-28-21\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-28-32_20230225142012.png\" alt=\"image_2023-01-31-21-28-32\" /></p>\n<p><strong>none</strong></p>\n<p>图片查看效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-29-24_20230225142026.png\" alt=\"image_2023-01-31-21-29-24\" /></p>\n<h3 id=\"使用浏览器或curl检测\"><a class=\"anchor\" href=\"#使用浏览器或curl检测\">#</a> 使用浏览器或 curl 检测</h3>\n<p>测试命令: <code>curl http://192.168.244.128:8089</code></p>\n<p>效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-29-40_20230225142043.png\" alt=\"image_2023-02-01-09-29-40\" /></p>\n<p>测试命令: <code>curl -I http://192.168.244.128:8089</code></p>\n<p>效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-30-30_20230225142058.png\" alt=\"image_2023-02-01-09-30-30\" /></p>\n<p><strong>通过控制台查看图片</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-33-20_20230225142111.png\" alt=\"image_2023-02-01-09-33-20\" /></p>\n<h3 id=\"返回错误码\"><a class=\"anchor\" href=\"#返回错误码\">#</a> 返回错误码</h3>\n<p>我们将连接复制下来，到 Xshell 中 curl -I 一下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-34-04_20230225142126.png\" alt=\"image_2023-02-01-09-34-04\" /></p>\n<p>标头返回的是 200 请求状态码，在控制台中状态码为：403</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-35-02_20230225142136.png\" alt=\"image_2023-02-01-09-35-02\" /></p>\n<p><strong>如果使用:curl -e 来用其它网站引用这个 图片不带 referer 查看下效果</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-37-49_20230225142152.png\" alt=\"image_2023-02-01-09-37-49\" /></p>\n<p>返回的标头中状态码为：403 了</p>\n<h3 id=\"返回错误页面\"><a class=\"anchor\" href=\"#返回错误页面\">#</a> 返回错误页面</h3>\n<p>让限制的 ip 主机访问静态资源时转到自己定义的错误页面中</p>\n<p>0 号 Linux 配置如下:</p>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n\t    #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n     \t    proxy_pass http://192.168.244.139:8088;\n\t    #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n\t\n\t#正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n\t    valid_referers none 192.168.244.128:8089;\n\t    if ($invalid_referer) &#123;\n\t\treturn 401;\n\t    &#125;\n\n\t    root html;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        error_page   401 /401.html;\n        location = /401.html &#123;\n            root   html;\n        &#125;\n\n    &#125;\n</code></pre>\n<p>效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-10-20-48_20230225142205.png\" alt=\"image_2023-02-01-10-20-48\" /></p>\n<p>跳转到的页面展示效果:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-10-21-31_20230225142216.png\" alt=\"image_2023-02-01-10-21-31\" /></p>\n<p>解决中文乱码:</p>\n<p>配置错误页面:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;style&gt;\nhtml &#123; color-scheme: light dark; &#125;                                                                                                 \nbody &#123; width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;An error occurred.&lt;/h1&gt;\n&lt;p&gt;非法请求&lt;br/&gt;\nPlease try again later.&lt;/p&gt;\n&lt;p&gt;If you are the system administrator of this resource then you should check\nthe error log for details.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Faithfully yours, nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>再次访问查看:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-10-24-51_20230225142233.png\" alt=\"image_2023-02-01-10-24-51\" /></p>\n<h3 id=\"整合rewrite返回报错图片\"><a class=\"anchor\" href=\"#整合rewrite返回报错图片\">#</a> 整合 rewrite 返回报错图片</h3>\n<p>在 nginx/html 目录中创建一个 img 目录里面下载一个要显示的报错图片</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-11-11-48_20230225142248.png\" alt=\"image_2023-02-01-11-11-48\" /></p>\n<p>0 号 Linux 配置如下:</p>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://192.168.244.139:8088;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n\n        #正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n            valid_referers none 192.168.244.128:8089;\n            if ($invalid_referer) &#123;\n                #目标匹配所有   到/img/x.jpg\n                rewrite ^/      /img/x.jpg break;\n                #return /401.html;\n            &#125;\n\n            root html;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;                                                                                   \n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        error_page   401 /401.html;\n        location = /401.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/",
            "title": "反向代理",
            "date_published": "2024-02-12T12:35:08.361Z",
            "content_html": "<h2 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h2>\n<p><strong>不持支反向代理 <code>https</code> </strong> 服务器因为它是要对应证书</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-06-35_20230225141146.png\" alt=\"image_2023-01-28-16-06-35\" /></p>\n<ul>\n<li><strong>lvs 模型</strong></li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230129073941158_20230225141158.png\" alt=\"image-20230129073941158\" /></p>\n<h3 id=\"网关代理与反向代理\"><a class=\"anchor\" href=\"#网关代理与反向代理\">#</a> 网关，代理与反向代理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-06-45_20230225141210.png\" alt=\"image_2023-01-28-16-06-45\" /></p>\n<h3 id=\"反向代理在系统架构中的应用场景\"><a class=\"anchor\" href=\"#反向代理在系统架构中的应用场景\">#</a> 反向代理在系统架构中的应用场景</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-40-11_20230225141223.png\" alt=\"image_2023-01-28-16-40-11\" /></p>\n<h3 id=\"负载均衡器\"><a class=\"anchor\" href=\"#负载均衡器\">#</a> 负载均衡器</h3>\n<ul>\n<li>需要被负载均衡的服务器我们称之为服务器的集群</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-51-19_20230225141235.png\" alt=\"image_2023-01-28-16-51-19\" /></p>\n<h3 id=\"nginx的反向代理配置\"><a class=\"anchor\" href=\"#nginx的反向代理配置\">#</a> Nginx 的反向代理配置</h3>\n<ul>\n<li><strong>关键字</strong>: <code>proxy_pass</code>\n<ul>\n<li>在 location 中配置而且与 root 二选一不能同时使用</li>\n</ul>\n</li>\n</ul>\n<pre><code>server &#123;\n#  listen       80;\n  listen       8080;\n  server_name  localhost;\n  location / &#123;\n      proxy_pass http://www.qq.com;\n      #root   html;\n      index  index.html index.htm;\n  &#125;\n  error_page   500 502 503 504  /50x.html;\n  location = /50x.html &#123;\n      root   html;\n  &#125;\n&#125;\n</code></pre>\n<h4 id=\"proxy_pass跳转外网网站\"><a class=\"anchor\" href=\"#proxy_pass跳转外网网站\">#</a> proxy_pass 跳转外网网站</h4>\n<ul>\n<li>当我们访问时就会访问到 qq 的官网里</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-09-46-14_20230225141251.png\" alt=\"image_2023-01-29-09-46-14\" /></p>\n<ul>\n<li>但我们将反向代理的域名写成 <code>qq.com</code>  时</li>\n</ul>\n<pre><code>server &#123;                      \n    listen       8080;\n    #server_name 192.168.244.128;\n    #server_name localhost;\n    #在win中浏览器输入Linux的IP也能访问到项目,但不能win中输入bogon,Linux的主机名这样访问不到\n    server_name bogon;\n    location / &#123;\n        #反向代理关键字:proxy_pass\n        proxy_pass http://qq.com;\n        #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;                         \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;           \n&#125;\n</code></pre>\n<p>重启服务器后访问并查看网络情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-09-47-45_20230225141308.png\" alt=\"image_2023-01-29-09-47-45\" /></p>\n<p>可以看到 IP 域名请求时进行了重定向跳转到了 www.qq.com 页面中，我们 302 重定向会发送两次请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-09-49-51_20230225141319.png\" alt=\"image_2023-01-29-09-49-51\" /></p>\n<h4 id=\"proxy_pass跳转本地其它服务器中\"><a class=\"anchor\" href=\"#proxy_pass跳转本地其它服务器中\">#</a> proxy_pass 跳转本地其它服务器中</h4>\n<ul>\n<li>\n<p>跟 win 与 Linux 的原理一样，我们访问另一台服务器需要配置其 Linux 的 IP 地址</p>\n</li>\n<li>\n<p>访问到另一台服务器后另一台服务器访问自己本机中的项目</p>\n</li>\n</ul>\n<pre><code>server &#123;                      \n    listen       8080;\n    server_name bogon;        \n\n    location / &#123;\n        #反向代理关键字:proxy_pass\n        proxy_pass http://192.169.244.102;\n        #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;                         \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;           \n&#125;\n</code></pre>\n<p>另一个服务器的配置文件</p>\n<pre><code>server &#123;                      \n    listen       8080;\n    server_name bogon;        \n\n    location / &#123;\n        #反向代理关键字:proxy_pass\n        proxy_pass http://www.qq.com;\n        #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;                         \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;           \n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>配置这两个 Linux 虚拟机让其保证可以访问到自己创建的 index 页面如下效果:</li>\n</ol>\n<ul>\n<li>虚拟机 1 号</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-14-25-12_20230225141336.png\" alt=\"image_2023-01-29-14-25-12\" /></p>\n<ul>\n<li>虚拟机 2 号</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-14-25-48_20230225141347.png\" alt=\"image_2023-01-29-14-25-48\" /></p>\n<ol start=\"2\">\n<li>在一个主的 nginx 虚拟机的 nginx 配置文件中配置</li>\n</ol>\n<ul>\n<li>虚拟机 0 号</li>\n</ul>\n<pre><code>server &#123;             \n   listen       8080;\n   server_name localhost;\n   \n   location / &#123;     \n       #反向代理关键字:proxy_pass http://后面为虚拟机1号的ip与端口号8080\n       proxy_pass http://192.168.244.138:8080;\n       #root 只能查找本机中根目录的项目\n       #root   http://www.qq.com;\n       index  index.html index.htm;\n   &#125;                \n   error_page   500 502 503 504  /50x.html;                                \n   location = /50x.html &#123;                                                  \n       root   html; \n   &#125;                \n&#125;  \n</code></pre>\n<ul>\n<li>虚拟机 1 号</li>\n</ul>\n<pre><code>server &#123;          \n   listen       8080;\n   server_name  localhost;\n                 \n   location / &#123;\n       root   /www;\n       index  index.html index.htm;\n   &#125;             \n                 \n   error_page   500 502 503 504  /50x.html;\n   location = /50x.html &#123;\n       root   html;\n   &#125;             \n                      \n&#125;\n</code></pre>\n<p>当使用虚拟机 0 号的 ip 来访问浏览器请求时会反向代理到虚拟机 1 号中的根目录的项目中，效果如下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-14-32-52_20230225141555.png\" alt=\"image_2023-01-29-14-32-52\" /></p>\n<h3 id=\"基于反向代理的负载均衡-轮询一人一下\"><a class=\"anchor\" href=\"#基于反向代理的负载均衡-轮询一人一下\">#</a> 基于反向代理的负载均衡 (轮询):[一人一下]</h3>\n<ol>\n<li>安装至少三台 Linux 如果是虚拟机可以进行多开多安装</li>\n</ol>\n<ul>\n<li>在 0 号虚拟机的配置文件中配置如下:</li>\n</ul>\n<p>在 proxy_pass 后定义 http:// 别名，这个别名对应着 upstream 而 upstream 是和 server 同级的，在 upstream 中定义多个 (一组) 服务器</p>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080;\n        server 192.168.244.139:8080;\n    &#125;\n\n    server &#123;\n        listen       8080;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://httpds;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>浏览器请求效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-16-09-07_20230225141610.png\" alt=\"image_2023-01-29-16-09-07\" /></p>\n<p>再次访问请求效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-16-10-10_20230225141622.png\" alt=\"image_2023-01-29-16-10-10\" /></p>\n<h3 id=\"负载均衡策略\"><a class=\"anchor\" href=\"#负载均衡策略\">#</a> 负载均衡策略</h3>\n<p><strong>weight: 设置群众值</strong> (权重)</p>\n<p>通过群众分配比例，每台服务器多少请求转发过去</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-17-10-29_20230225141640.png\" alt=\"image_2023-01-29-17-10-29\" /></p>\n<ul>\n<li>0 号 Linux 的配置如下:</li>\n</ul>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8;\n        server 192.168.244.139:8080 weight=2;                                                                                                             \n    &#125;\n\n    server &#123;\n        listen       8080;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://httpds;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/test_20230225141658.gif\" alt=\"1\" /></p>\n<p>1 号 Linux 项目的请求转发几率比 2 号 Linux 大很多</p>\n<p><strong>down: 设置后不参与负载均衡器</strong></p>\n<ul>\n<li>在 weight 后面设置</li>\n</ul>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8 down;\n        server 192.168.244.139:8080 weight=2;\n    &#125;\n                                                                                                                    \n    server &#123;\n        listen       8080;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://httpds;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>效果如下:</p>\n<ul>\n<li>无论怎么刷新都只会反向代理请求 2 号的项目，1 号已经不参与了</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-16-59-00_20230225141715.png\" alt=\"image_2023-01-29-16-59-00\" /></p>\n<p><strong>backup: 备用</strong></p>\n<p>没有任何可用的群众时使用，正常情况下不参与</p>\n<p>0 号 Linux 配置如下:</p>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8 down;\n        server 192.168.244.139:8080 weight=2 backup;                                                                                                      \n    &#125;\n\n    server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://httpds;\n                #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-17-03-46_20230225141730.png\" alt=\"image_2023-01-29-17-03-46\" /></p>\n<p><strong>ip_hash</strong></p>\n<p>根据客户端的 ip 地址转发同一台服务器，可以保持会话</p>\n<p><strong>least_conn</strong></p>\n<p>最少链接访问</p>\n<p><strong>url_hash</strong></p>\n<p>根据用户访问的 url 定向转发请求</p>\n<p><strong>fair</strong></p>\n<p>根据后端服务器响应时间转发请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-19-00-03_20230225141744.png\" alt=\"image_2023-01-29-19-00-03\" /></p>\n<h3 id=\"反向代理tomcat\"><a class=\"anchor\" href=\"#反向代理tomcat\">#</a> 反向代理 Tomcat</h3>\n<p>操作步骤:</p>\n<ol>\n<li>开启至少两台 Linux</li>\n</ol>\n<p><strong>0 号 Linux 的配置如下:</strong></p>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8 down;\n        server 192.168.244.139:8088 weight=2 backup;\n    &#125;\n\n    server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://httpds;\n                #root 只能查找本机中根目录的项目                                                                                                          \n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>使用 upstream 负载均衡了两台 Linux 不过我们只使用 到了一个将 138 的 Linux 设置了 down 为不使用因为 1 号 Linux 的 nginx 端口号和 tomcat 的端口号有冲突问题所以 1 号 Linux 的 nginx 端口号我该为了 8088</p>\n</blockquote>\n<ul>\n<li>如下是 1 号 Linux 的配置:</li>\n</ul>\n<pre><code>server &#123;\n        listen       8088;\n        server_name  localhost;\n                                                                                                                                                          \n        location / &#123;\n            #这里配置的是访问Tomcat的ip地址\n            proxy_pass http://192.168.244.139:8080;\n            #root /www;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n&#125;\n</code></pre>\n<p>浏览器请求效果如下：我们发送 0 号虚拟机的请求反向代理到我们的 1 号 Linux 中的 Tomcat 上</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-08-26-10_20230225141803.png\" alt=\"image_2023-01-30-08-26-10\" /></p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/",
            "title": "动静分离",
            "date_published": "2024-02-12T12:35:08.340Z",
            "content_html": "<h2 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h2>\n<blockquote>\n<p>动静分离有一个比较常用的功能这个功能比较适用于中小型的网站，因为中小型网站的并发量不是很高而且需要分离出来的资源不是很多，需要将这些静态资源移动到前置的 Nginx 里</p>\n</blockquote>\n<p>为了提高网站的响应速度，减轻程序服务器 (Tomcat,Jboss 等) 的负载，对于静态资源，如图片，js,css 等文件，可以在反向代理服务器中进行缓存，这样浏览器在请求一个静态资源时，代理服务器就可以直接处理，而不用将请求转发给后端服务器，对于用户请求的动态文件，如 Servlet,jsp 则转发给 Tomcat,Jboss 服务器处理，这就是动静分离，即动态文件于静态文件的分离</p>\n<h3 id=\"使用动静分离的场景\"><a class=\"anchor\" href=\"#使用动静分离的场景\">#</a> 使用动静分离的场景</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-19-25-18_20230225140701.png\" alt=\"image_2023-01-29-19-25-18\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-19-17-18_20230225140714.png\" alt=\"image_2023-01-30-19-17-18\" /></p>\n<p>动静分离可通过 location 对请求 url 进行匹配，将网站静态资源 (HTML,javaScript,CSS,img 等文件) 于后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问，通常将静态资源放到 nginx 中，动态资源转发到 tomcat 服务器中</p>\n<p><strong>演示</strong></p>\n<p>0 号机 nginx 配置</p>\n<pre><code>server &#123;\n        listen       8080;\n\t\n        server_name localhost;\n        location / &#123;\n\t\t#httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n\t\tproxy_pass http://192.168.244.139:8088;\n\t\t#root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>1 号机的配置如下:</p>\n<pre><code>server &#123;\n        listen       8088;\n        server_name  localhost;\n\n        location / &#123;\n\t    proxy_pass http://192.168.244.139:8080/ngintestday28/web/;\n\t    #root /www;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n&#125;\n</code></pre>\n<p>1 号机中配置了 Tomcat</p>\n<p>访问浏览器效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-13-48-12_20230225140736.png\" alt=\"image_2023-01-30-13-48-12\" /></p>\n<p>将 1 号机中项目的静态文件删除</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-13-49-42_20230225140748.png\" alt=\"image_2023-01-30-13-49-42\" /></p>\n<p>刷新页面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-13-50-08_20230225140759.png\" alt=\"image_2023-01-30-13-50-08\" /></p>\n<p>变成了原始的样式</p>\n<p><strong>配置反向代理服务器上静态资源</strong></p>\n<p>在 0 号机中配置如下:</p>\n<pre><code> server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://192.168.244.139:8088;\n                #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        #uri地址\n        location /css &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;                                                                                                                                  \n            index  index.html index.htm;\n        &#125;\n&#125;\n</code></pre>\n<p>在 0 号机的 html 目录下传输过去项目的 css 样式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-00-23_20230225140816.png\" alt=\"image_2023-01-30-14-00-23\" /></p>\n<p>重启服务 <code>systemctl restart nginx.service</code>  , 请求访问地址查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-07-33_20230225140826.png\" alt=\"image_2023-01-30-14-07-33\" /></p>\n<p>静态资源由 nginx 返回，主页由 tomcat 返回</p>\n<p>剩下我们加上其它的样式代码</p>\n<ul>\n<li>js</li>\n</ul>\n<pre><code>server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://192.168.244.139:8088;\n                #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        #uri地址\n        location /css &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;\n            index  index.html index.htm;\n        &#125;\n\n        #uri地址\n        location /js &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;\n            index  index.html index.htm;\n        &#125;                                                                                                                                                 \n&#125;\n</code></pre>\n<p>重启服务 <code>systemctl restart nginx.service</code>  , 刷新页面查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-11-35_20230225140843.png\" alt=\"image_2023-01-30-14-11-35\" /></p>\n<p>可以看到 js 加载成功了</p>\n<ul>\n<li>fonts</li>\n</ul>\n<pre><code>#uri地址\n        location /fonts &#123;\n            #root 只能查找本机中根目录的项目                                                                                                              \n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;\n            index  index.html index.htm;\n        &#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-12-50_20230225140902.png\" alt=\"image_2023-01-30-14-12-50\" /></p>\n<ul>\n<li>img</li>\n</ul>\n<pre><code>#uri地址\n        location /img &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接                                                                         \n            root   html;\n            index  index.html index.htm;\n        &#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-13-41_20230225140916.png\" alt=\"image_2023-01-30-14-13-41\" /></p>\n<p>重启服务 <code>systemctl restart nginx.service</code>  刷新页面查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-15-12_20230225140929.png\" alt=\"image_2023-01-30-14-15-12\" /></p>\n<blockquote>\n<p>弊端：代码过多冗余度太大，下面为解决方式：使用正则表达式来解决问题</p>\n</blockquote>\n<ul>\n<li>\n<p>正则规则：以～* 开始在小括号中写入 (x|x|x)</p>\n</li>\n<li>\n<p>~ 根目录<em>任意：跟目录开始</em>任意的地方</p>\n</li>\n</ul>\n<pre><code>server &#123;\n        listen       8080;\n\t\n        server_name localhost;\n        location / &#123;\n\t\t#httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n\t\tproxy_pass http://192.168.244.139:8088;\n\t\t#root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\t\n\t#正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n\t    root html;\n            index  index.html index.htm;\n        &#125;\n&#125;\n</code></pre>\n<ul>\n<li>重启服务后，刷新页面查看效果</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-25-44_20230225140952.png\" alt=\"image_2023-01-30-14-25-44\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-26-23_20230225141003.png\" alt=\"image_2023-01-30-14-26-23\" /></p>\n<p>正常访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-45-45_20230225141014.png\" alt=\"image_2023-01-30-14-45-45\" /></p>\n<p><strong>使用正则配置动静分离</strong></p>\n<p>常见的 Nginx 正则表达式</p>\n<pre><code>^:匹配输入字符串的起始位置\n$:匹配输入字符串的结束位置\n*:匹配前面字符零次或多次.如&quot;ol*&quot;能匹配&quot;o&quot;及&quot;ol&quot;,&quot;oll&quot;\n+:匹配前面的字符一次或多次.如&quot;ol+&quot;能匹配&quot;ol&quot;及&quot;oll&quot;,&quot;olll&quot;但不能匹配&quot;o&quot;\n?:匹配前面的字符零次或一次.如&quot;do(es)?&quot;能匹配&quot;do&quot;或者&quot;does&quot;,&quot;?&quot;等效于&quot;&#123;0,1&#125;&quot;\n.:匹配除&quot;\\n&quot;之外的任何单个字符,诺要匹配包括&quot;\\n&quot;在内的任意字符,请使用诸如&quot;[.\\n]&quot;之类的模式\n\\:将后面接着的字符标记为一个特殊字符或一个原意字符或一个向后引用,如&quot;\\n&quot;匹配一个换行符,而&quot;\\$&quot;则匹配&quot;$&quot;\n\\d:匹配纯数字\n&#123;n&#125;:重复n次\n&#123;n,&#125;:重复n次或更多次\n&#123;n,m&#125;重复n到m次\n[]:定义匹配的字符范围\n[c]:匹配单个字符c\n[a-z]:匹配a-z小写字母的任意一个\n[a-zA-Z0-9]:匹配所有大小写字母或数字\n():表达式开始和结束位置\n|:或运算符 //例如:(js|img|css)\n</code></pre>\n<p>location 正则:</p>\n<pre><code>//location大致可分为三类\n精准匹配:location = /&#123;&#125;\n一般匹配:location /&#123;&#125;\n正则匹配: location ~/&#123;&#125;\n//location常用的匹配规则\n=:进行普通字符精准匹配,也即是完全匹配\n^~:表示前缀字符串匹配(不是正则匹配,需要使用字符串),如果匹配成功,则不再匹配其它,location\n~:区分大小写的匹配(需要用正则表达式)\n~*:不区分大小写的匹配(需要使用正则表达式)\n!~:区分大小写的匹配取非(需要使用正则表达式)\n!~*:不区分大小写的匹配取非(需要使用正表达式)\n//优先级\n首先精准匹配 =\n其次匹配前缀匹配 ^~\n其次是按文件中顺序的正则匹配 ~或~*\n然后匹配不带任何修饰的前缀匹配\n最后是交给 / 通用匹配\n</code></pre>\n<p><strong>注意</strong></p>\n<ul>\n<li>\n<p>精准匹配: = , 后面的表达式中写的是纯字符串</p>\n</li>\n<li>\n<p>字符串匹配: ^~ 和 <code>字符串匹配</code> ，后面的表达式中写的是纯字符串</p>\n</li>\n<li>\n<p>正则匹配: <sub>和</sub><em>和！<sub> 和！</sub></em>, 后面的表达式中写的是正则表达式</p>\n</li>\n</ul>\n<pre><code> (1）location = / &#123;&#125;\n=为精确匹配 / ，主机名后面不能带任何字符串，比如访问 / 和 /data，则 / 匹配，/data 不匹配\n再比如 location = /abc，则只匹配/abc ，/abc/或 /abcd不匹配。若 location  /abc，则即匹配/abc 、/abcd/ 同时也匹配 /abc/。\n\n（2）location / &#123;&#125;\n因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 比如访问 / 和 /data, 则 / 匹配， /data 也匹配，\n但若后面是正则表达式会和最长字符串优先匹配（最长匹配）\n\n（3）location /documents/ &#123;&#125;\n匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（4）location /documents/abc &#123;&#125;\n匹配任何以 /documents/abc 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（5）location ^~ /images/ &#123;&#125;\n匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条\n\n（6）location ~* \\.(gif|jpg|jpeg)$ &#123;&#125;\n匹配所有以 gif、jpg或jpeg 结尾的请求\n然而，所有请求 /images/ 下的图片会被 location ^~ /images/ 处理，因为 ^~ 的优先级更高，所以到达不了这一条正则\n\n（7）location /images/abc &#123;&#125;\n最长字符匹配到 /images/abc，优先级最低，继续往下搜索其它 location，会发现 ^~ 和 ~ 存在\n\n（8）location ~ /images/abc &#123;&#125;\n匹配以/images/abc 开头的，优先级次之，只有去掉 location ^~ /images/ 才会采用这一条\n\n（9）location /images/abc/1.html &#123;&#125;\n匹配/images/abc/1.html 文件，如果和正则 ~ /images/abc/1.html 相比，正则优先级更高\n\n优先级总结：\n(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (location /)\n</code></pre>\n<p>实际网站使用中，至少有三个匹配规则定义:</p>\n<ul>\n<li>第一个匹配必选规则:</li>\n</ul>\n<p>直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，比如说官网，这里是直接转发给后端应用服务器了，也可以是一个静态首页</p>\n<pre><code>location = / &#123;\n    proxy_pass http://127.0.0.1:8080/; \n&#125;\n</code></pre>\n<ul>\n<li>第二个必选规则:</li>\n</ul>\n<p>处理静态文件请求，这是 nginx 作为 http 服务器的强项，有两种配置模式，目录匹配或后缀匹配，人选其一或搭配使用</p>\n<pre><code>location ^~ /static/ &#123;\n    root /webroot/static/;\n&#125;\n\nlocation ~* \\.(html|gif|jpg|jpeg|png|css|js|ico)$ &#123;\n    root /webroot/res/;\n&#125;\n</code></pre>\n<ul>\n<li>第三个规则:</li>\n</ul>\n<p>通用规则，用来转发动态请求到后端服务器</p>\n<pre><code>location /api/ &#123;\n    proxy_pass http://127.0.0.1:3000/api/\n&#125;\n</code></pre>\n<h4 id=\"urlrewrite\"><a class=\"anchor\" href=\"#urlrewrite\">#</a> URLRewrite</h4>\n<p>rewrite 是实现 URL 重写的关键指令，根据 regex (正则表达式) 部分内容，重定向到 repacement, 结尾是 flag 标记</p>\n<p>格式:</p>\n<p>rewrite         &lt;regex&gt;         &lt;replacement&gt;       &lt;flag&gt;</p>\n<p>关键字              正则                    替代内容               标记</p>\n<p>关键字：其中关键字 error_log 不能改变</p>\n<p>正则:perl 兼容正则表达式语句进行规则匹配</p>\n<p>替代内容：将正则匹配的内容替换成 replacement</p>\n<p>flag 标记:rewrite 支持的 flag 标记</p>\n<p>flag 标记说明:</p>\n<p>last: &lt;font color=&quot;red&quot;&gt;# 本条规则匹配完成后，继续向下匹配新的 location URI 规则 &lt;/font&gt;</p>\n<p>break: &lt;font color=&quot;red&quot;&gt;# 本条规则匹配完成即终止，不再匹配后面的任何规则 &lt;/font&gt;</p>\n<p>redirect: &lt;font color=&quot;red&quot;&gt;# 返回 302 临时重定向，浏览器地址会显示跳转后的 URL 地址 &lt;/font&gt;</p>\n<p>permanment: &lt;font color=&quot;red&quot;&gt;# 返回 301 永久重定向，浏览器地址栏会显示跳转后的 URL 地址 &lt;/font&gt;</p>\n<p>URLRewrite 的优缺点</p>\n<p>优点：掩藏真实的 url 以及 url 中可能暴漏的参数，以及隐藏 web 使用的编程语言，提高安全性便于搜索引擎收录</p>\n<p>缺点：降低效率，影响性能，如果项目是内网使用，比如公司内部软件，则没有必要配置</p>\n<h4 id=\"负载均衡urlrewrite\"><a class=\"anchor\" href=\"#负载均衡urlrewrite\">#</a> 负载均衡 + URLRewrite</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-20-25-32_20230225141044.png\" alt=\"image_2023-01-31-20-25-32\" /></p>\n<p>开启 101 的防火墙</p>\n<pre><code>systemctl start firewalld\n</code></pre>\n<ul>\n<li>重载规则</li>\n</ul>\n<pre><code>firewalld-cmd --reload\n</code></pre>\n<ul>\n<li>查看已配置规则</li>\n</ul>\n<pre><code>firewalld-cmd --list-all\n</code></pre>\n<ul>\n<li>\n<p>设置规则需要注意的是:ip 为目标开放主机，端口号为本机要开放的端口号</p>\n</li>\n<li>\n<p>添加指定端口和 ip 访问（添加之后记得重新启动防火墙）</p>\n</li>\n</ul>\n<pre><code>firewalld-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.244.128&quot; port protocol=&quot;tcp&quot; port=&quot;8088&quot; accept&quot;\n</code></pre>\n<ul>\n<li>\n<p>ip: 为 0 号 Linux 的 ip</p>\n</li>\n<li>\n<p>port: 为 1 号 Linux 要开放的 Nginx 端口不需要开放 Tomcat 的端口号，也能访问到</p>\n</li>\n<li>\n<p>移除规则</p>\n</li>\n</ul>\n<pre><code>firewalld-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.8.102&quot; port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot;\n</code></pre>\n<ul>\n<li>重启防火墙</li>\n</ul>\n<pre><code>firewalld-cmd --reload\n</code></pre>\n<p>测试:</p>\n<ul>\n<li>将 1 号 Linux 开启防火墙，然后通过 0 号 Linux 反向代理访问一下页面</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-16-00-49_20230225141102.png\" alt=\"image_2023-01-31-16-00-49\" /></p>\n<p>访问不到 Error 了</p>\n<p>执行命令让 1 号 Linux 不让内网访问到但是可以让 0 号 Linux 的 Nginx 访问到</p>\n<p>当我们配置如下配置后:</p>\n<ul>\n<li>0 号 Linux 配置如下:</li>\n</ul>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n\t    #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n     \t    proxy_pass http://192.168.244.139:8088;\n\t    #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\t\n\t#正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n\t    root html;\n            index  index.html index.htm;\n        &#125;\n\n    &#125;\n</code></pre>\n<ul>\n<li>1 号 Linux 配置如下:</li>\n</ul>\n<pre><code> server &#123;\n        listen       8088;\n        server_name  localhost;\n\n        location / &#123;\n\t    proxy_pass http://192.168.244.139:8080/ngintestday28/web/;\n\t    #root /www;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n    &#125;\n</code></pre>\n<p>1 号 Linux 对 0 号 Linux 开放端口的设置信息如下:</p>\n<p><code>rule family=&quot;ipv4&quot; source address=&quot;192.168.244.128&quot; port port=&quot;8088&quot; protocol=&quot;tcp&quot; accept</code></p>\n<p>命令为如下:</p>\n<p><code>sudo firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;目标机IP(访问机)&quot; port protocol=&quot;协议&quot; port=&quot;本机Nginx端口&quot; accept&quot;</code></p>\n<h5 id=\"urlrewirte应用场景\"><a class=\"anchor\" href=\"#urlrewirte应用场景\">#</a> URLRewirte 应用场景</h5>\n<h5 id=\"配置方式\"><a class=\"anchor\" href=\"#配置方式\">#</a> 配置方式</h5>\n<h3 id=\"动静分离原理\"><a class=\"anchor\" href=\"#动静分离原理\">#</a> 动静分离原理</h3>\n<p>/css 的优先级比 / 高</p>\n<pre><code>location / &#123;#优先级比/css低\n        #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n        proxy_pass http://192.168.244.139:8088;\n        #root 只能查找本机中根目录的项目\n    #root   http://www.qq.com;\n    index  index.html index.htm;                                                                                                                  \n&#125;\nerror_page   500 502 503 504  /50x.html;\nlocation = /50x.html &#123;\n    root   html;\n&#125;\n\n#uri地址\nlocation /css &#123;#优先级比/高\n    #root 只能查找本机中根目录的项目\n    #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n    root   html;\n    index  index.html index.htm;\n&#125;\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85LNMP%E7%8E%AF%E5%A2%83%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85LNMP%E7%8E%AF%E5%A2%83%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/",
            "title": "安装LNMP环境防火墙配置",
            "date_published": "2024-02-12T12:35:08.296Z",
            "content_html": "<p><strong>网络术语</strong>:</p>\n<p><strong>LNMP</strong> 是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写，L 指 Linux,N 指 Nginx,M 一般指 MySQL, 也可以指 MariaDB,P 一般指 PHP, 也可以指 Perl 或 Python</p>\n<p>集成环境网站: <code>oneinstack.com</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-54-14_20230225140420.png\" alt=\"image_2023-02-02-11-54-14\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-54-55_20230225140432.png\" alt=\"image_2023-02-02-11-54-55\" /></p>\n<p>选择好要安装的后复制 wget 命令</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-56-36_20230225140443.png\" alt=\"image_2023-02-02-11-56-36\" /></p>\n<p>在 Linux 中直接执行命令即可安装</p>\n<p>安装完成后的软件位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-57-19_20230225140455.png\" alt=\"image_2023-02-02-11-57-19\" /></p>\n<p>如果访问不到 oneinstack 则如下操作:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-12-01-03_20230225140508.png\" alt=\"image_2023-02-02-12-01-03\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-12-01-20_20230225140521.png\" alt=\"image_2023-02-02-12-01-20\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240212202537236.png\" alt=\"image-20240212202537236\" /></p>\n<p>再次访问 ip</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-12-02-48_20230225140544.png\" alt=\"image_2023-02-02-12-02-48\" /></p>\n<p>但是网站连接是不安全的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240212202524096.png\" alt=\"image-20240212202524096\" /></p>\n<h3 id=\"修改nginx默认主页\"><a class=\"anchor\" href=\"#修改nginx默认主页\">#</a> 修改 Nginx 默认主页</h3>\n<p>从给出的路径 cd 到 Nginx 的 html 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-14-50-18_20230225140608.png\" alt=\"image_2023-02-02-14-50-18\" /></p>\n<p>配置到 html</p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85Discuz%E4%B8%8E%E5%8D%8F%E8%AE%AE%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85Discuz%E4%B8%8E%E5%8D%8F%E8%AE%AE%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC/",
            "title": "安装Discuz与协议自动跳转",
            "date_published": "2024-02-12T12:35:08.276Z",
            "content_html": "<p>访问官网地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNjdXoubmV0Lw==\">1</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-14-48-14_20230225140313.png\" alt=\"image_2023-02-04-14-48-14\" /></p>\n<p>上传到 Nginx 的 html 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-14-55-22_20230225140326.png\" alt=\"image_2023-02-04-14-55-22\" /></p>\n<p>解压缩: <code>unzip [压缩包名称]</code>  如果 unzip 报红，说明没有这个指令，执行命令查看包管理器中有没有该程序</p>\n<pre><code>yum list unzip\n</code></pre>\n<p>选择安装</p>\n<p>然后解压</p>\n<p><code>unzip [压缩包名]</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-13-23_20230225140340.png\" alt=\"image_2023-02-04-12-13-23\" /></p>\n<p>如果配置了安全证书那么，需要将显示的页面配置放到 443 安全证书配置的配置作用域下否则访问 https 443 端口不会走默认的 80 端口就不能访问到我们想要展示的页面了</p>\n<p>安装 Discuz</p>\n<p>如果上传了 upload 目录访问:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tY2VzNmF5NTFzenpkL3VwbG9hZC9pbnN0YWxs\">https:// 网站地址 /upload/install</span></p>\n<p>只上传了 upload 的目录内文件及访问</p>\n<p>浏览器访问 https:// 网站地址 /install</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-21-30-02_20230225140354.png\" alt=\"image_2023-02-04-21-30-02\" /></p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%BC%80%E6%BA%90%E7%89%88%E5%AE%89%E8%A3%85/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%BC%80%E6%BA%90%E7%89%88%E5%AE%89%E8%A3%85/",
            "title": "nginx开源版安装",
            "date_published": "2024-02-12T12:35:08.255Z",
            "content_html": "<p>打开官网页面点击 <code>Download</code>  ，会跳转到一个下载的页面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-02-32_20230225140136.png\" alt=\"image_2023-01-28-09-02-32\" /></p>\n<p>点击下载 Linux 版的 Nginx，之后上传到 Linux 中</p>\n<p>解压 Nginx</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-22-01_20230225140146.png\" alt=\"image_2023-01-28-09-22-01\" /></p>\n<p>解压完成后进入到解压后的目录中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-23-03_20230225140157.png\" alt=\"image_2023-01-28-09-23-03\" /></p>\n<p>目录中有一个 <code>configure</code>  脚本，用这个脚本来安装，安装过程中需要一些依赖</p>\n<p>执行该脚本进行安装可能会报错提示需要的依赖没有找到的错误</p>\n<p>需要的依赖：</p>\n<ul>\n<li>gcc：执行命令 <code>sudo yum install -y gcc</code></li>\n</ul>\n<p>错误提示:</p>\n<pre><code>./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=&lt;path&gt; option.\n</code></pre>\n<p><strong>缺少 pcre</strong> 库</p>\n<ul>\n<li>pcre: 执行命令： <code>sudo yum install -y pcre pcre-devel</code></li>\n</ul>\n<p><strong>同样的报错可能缺少 <code>zlib库</code> </strong></p>\n<ul>\n<li>zlib: 执行命令： <code>sudo yum install -y zlib zlib-devel</code></li>\n</ul>\n<p>报错解决！！执行下一步操作</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-34-26_20230225140212.png\" alt=\"image_2023-01-28-09-34-26\" /></p>\n<p>执行 <code>make</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-36-32_20230225140226.png\" alt=\"image_2023-01-28-09-36-32\" /></p>\n<p>执行 <code>sudo make install</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-38-18_20230225140240.png\" alt=\"image_2023-01-28-09-38-18\" /></p>\n<p>安装成功</p>\n<p>启动 Nginx 进入 sbin 目录在这个目录中有一个可执行的文件为 <code>nginx</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-39-54_20230225140252.png\" alt=\"image_2023-01-28-09-39-54\" /></p>\n<p>启动 Nginx</p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        }
    ]
}