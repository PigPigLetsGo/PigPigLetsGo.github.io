{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dkx の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/pun/",
            "url": "https://pigpigletsgo.github.io/pun/",
            "title": "public",
            "date_published": "2024-02-06T09:40:10.805Z",
            "content_html": "<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMUZyU21CWWtOVlRHeU5mcnp1d3gxeGc=\">https://pan.baidu.com/s/1FrSmBYkNVTGyNfrzuwx1xg</span><br />\n 提取码：qwe1</p>\n",
            "tags": []
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91-%E6%A6%82%E8%BF%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91-%E6%A6%82%E8%BF%B0/",
            "title": "红黑树-概述",
            "date_published": "2024-02-05T09:32:07.199Z",
            "content_html": "<h1 id=\"红黑树-概述\"><a class=\"anchor\" href=\"#红黑树-概述\">#</a> 红黑树 - 概述</h1>\n<p>红黑树也是一种自平衡的二叉搜索树，较之 AVL，插入和删除时旋转次数更少</p>\n<p><strong>红黑树和 AVL 树的区别主要在于它们判断平衡的依据不一样</strong>：</p>\n<p>之前学习的 AVL 树就是看左右子树的高度差，是不是超过了 1，超过了表示是不平衡的</p>\n<p>红黑树判断一颗树是不是平衡</p>\n<p><strong>红黑树与 AVL 树相比的优势</strong>：</p>\n<p>插入和删除时旋转次数更少</p>\n<h2 id=\"红黑树特性\"><a class=\"anchor\" href=\"#红黑树特性\">#</a> 红黑树特性</h2>\n<ol>\n<li>所有节点都有两种颜色：红 与 黑</li>\n<li>所有 null 视为 黑色</li>\n<li>红色节点不能相邻</li>\n<li>根节点是黑色</li>\n<li>从根到任意一个叶子节点，路径中的黑色节点数一样 (黑色完美平衡)</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240204210426638.png\" alt=\"image-20240204210426638\" /></p>\n<p>第五个规则说明的是，无论到 2,4,7,9,11 哪个叶子节点其它们所经过的黑色节点数目都是一样的，比如从 根节点到 2 算上根节点 再加上 3  就是经过两个 黑色节点，从根节点到 4 也同样，从根节点到 11 也同样，到 9 也同样。这时就算是 &quot;黑色完美平衡&quot;</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "数据结构与算法",
                "红黑树",
                "java",
                "计算机学科",
                "介绍",
                "数据结构与算法",
                "红黑树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91-%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E7%BA%A2%E9%BB%91%E6%A0%91/%E7%BA%A2%E9%BB%91%E6%A0%91-%E5%AE%9E%E7%8E%B0/",
            "title": "红黑树-实现",
            "date_published": "2024-02-05T09:31:55.796Z",
            "content_html": "<h2 id=\"红黑树-实现\"><a class=\"anchor\" href=\"#红黑树-实现\">#</a> 红黑树 - 实现</h2>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<h4 id=\"历史\"><a class=\"anchor\" href=\"#历史\">#</a> 历史</h4>\n<blockquote>\n<p>红黑树是一种自平衡二叉查找树，最早由一位名叫 Rudolf Bayer 的德国计算机科学家于 1972 年发明。然而，最初的树形结构不是现在的红黑树，而是一种称为 B 树的结构，它是一种多叉树，可用于在磁盘上存储大量数据。</p>\n<p>在 1980 年代早期，计算机科学家 Leonard Adleman 和 Daniel Sleator 推广了红黑树，并证明了它的自平衡性和高效性。从那时起，红黑树成为了最流行的自平衡二叉查找树之一，并被广泛应用于许多领域，如编译器、操作系统、数据库等。</p>\n<p>红黑树的名字来源于红色节点和黑色节点的交替出现，它们的颜色是用来维护树的平衡性的关键。它们的颜色具有特殊的意义，黑色节点代表普通节点，而红色节点代表一个新添加的节点，它们必须满足一些特定的规则才能维持树的平衡性。</p>\n</blockquote>\n<p>红黑树也是一种自平衡的二叉搜索树，较之 AVL，插入和删除时旋转次数更少</p>\n<h4 id=\"红黑树特性\"><a class=\"anchor\" href=\"#红黑树特性\">#</a> 红黑树特性</h4>\n<ol>\n<li>所有节点都有两种颜色：红🔴、黑⚫️</li>\n<li>所有 null 视为黑色⚫️</li>\n<li>红色🔴节点不能相邻</li>\n<li>根节点是黑色⚫️</li>\n<li>从根到任意一个叶子节点，路径中的黑色⚫️节点数一样</li>\n</ol>\n<h3 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h3>\n<h4 id=\"插入情况\"><a class=\"anchor\" href=\"#插入情况\">#</a> 插入情况</h4>\n<p>插入节点均视为红色🔴</p>\n<p>case 1：插入节点为根节点，将根节点变黑⚫️</p>\n<p>case 2：插入节点的父亲若为黑色⚫️，树的红黑性质不变，无需调整</p>\n<p>插入节点的父亲为红色🔴，触发红红相邻</p>\n<p>case 3：叔叔为红色🔴</p>\n<ul>\n<li>\n<p>父亲变为黑色⚫️，为了保证黑色平衡，连带的叔叔也变为黑色⚫️</p>\n</li>\n<li>\n<p>祖父如果是黑色不变，会造成这颗子树黑色过多，因此祖父节点变为红色🔴</p>\n</li>\n<li>\n<p>祖父如果变成红色，可能会接着触发红红相邻，因此对将祖父进行递归调整</p>\n</li>\n</ul>\n<p>case 4：叔叔为黑色⚫️</p>\n<ol>\n<li>父亲为左孩子，插入节点也是左孩子，此时即 LL 不平衡\n<ul>\n<li>让父亲变黑⚫️，为了保证这颗子树黑色不变，将祖父变成红🔴，但叔叔子树少了一个黑色</li>\n<li>祖父右旋，补齐一个黑色给叔叔，父亲旋转上去取代祖父，由于它是黑色，不会再次触发红红相邻</li>\n</ul>\n</li>\n<li>父亲为左孩子，插入节点是右孩子，此时即 LR 不平衡\n<ul>\n<li>父亲左旋，变成 LL 情况，按 1. 来后续处理</li>\n</ul>\n</li>\n<li>父亲为右孩子，插入节点也是右孩子，此时即 RR 不平衡\n<ul>\n<li>让父亲变黑⚫️，为了保证这颗子树黑色不变，将祖父变成红🔴，但叔叔子树少了一个黑色</li>\n<li>祖父左旋，补齐一个黑色给叔叔，父亲旋转上去取代祖父，由于它是黑色，不会再次触发红红相邻</li>\n</ul>\n</li>\n<li>父亲为右孩子，插入节点是左孩子，此时即 RL 不平衡\n<ul>\n<li>父亲右旋，变成 RR 情况，按 3. 来后续处理</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"删除情况\"><a class=\"anchor\" href=\"#删除情况\">#</a> 删除情况</h4>\n<p>case0：如果删除节点有两个孩子</p>\n<ul>\n<li>交换删除节点和后继节点的 key，value，递归删除后继节点，直到该节点没有孩子或只剩一个孩子</li>\n</ul>\n<p>如果删除节点没有孩子或只剩一个孩子</p>\n<p>case 1：删的是根节点</p>\n<ul>\n<li>删完了，直接将 root = null</li>\n<li>用剩余节点替换了根节点的 key，value，根节点孩子 = null，颜色保持黑色⚫️不变</li>\n</ul>\n<p>删黑色会失衡，删红色不会失衡，但删黑色有一种简单情况</p>\n<p>case 2：删的是黑⚫️，剩下的是红🔴，剩下这个红节点变黑⚫️</p>\n<p>删除节点和剩下节点都是黑⚫️，触发双黑，双黑意思是，<strong>少了一个黑</strong></p>\n<p>case 3：被调整节点的兄弟为红🔴，此时两个侄子定为黑 ⚫️</p>\n<ul>\n<li>删除节点是左孩子，父亲左旋</li>\n<li>删除节点是右孩子，父亲右旋</li>\n<li>父亲和兄弟要变色，保证旋转后颜色平衡</li>\n<li>旋转的目的是让黑侄子变为删除节点的黑兄弟，对删除节点再次递归，进入 case 4 或 case 5</li>\n</ul>\n<p>case 4：被调整节点的兄弟为黑⚫️，两个侄子都为黑 ⚫️</p>\n<ul>\n<li>将兄弟变红🔴，目的是将删除节点和兄弟那边的黑色高度同时减少 1</li>\n<li>如果父亲是红🔴，则需将父亲变为黑，避免红红，此时路径黑节点数目不变</li>\n<li>如果父亲是黑⚫️，说明这条路径还是少黑，再次让父节点触发双黑</li>\n</ul>\n<p>case 5：被调整节点的兄弟为黑⚫️，至少一个红🔴侄子</p>\n<ul>\n<li>如果兄弟是左孩子，左侄子是红🔴，LL 不平衡\n<ul>\n<li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑⚫️，平衡起见，左侄子也是黑⚫️</li>\n<li>原来兄弟要成为父亲，需要保留父亲颜色</li>\n</ul>\n</li>\n<li>如果兄弟是左孩子，右侄子是红🔴，LR 不平衡\n<ul>\n<li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑⚫️</li>\n<li>右侄子会取代原来父亲，因此它保留父亲颜色</li>\n<li>兄弟已经是黑了⚫️，无需改变</li>\n</ul>\n</li>\n<li>如果兄弟是右孩子，右侄子是红🔴，RR 不平衡\n<ul>\n<li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑⚫️，平衡起见，右侄子也是黑⚫️</li>\n<li>原来兄弟要成为父亲，需要保留父亲颜色</li>\n</ul>\n</li>\n<li>如果兄弟是右孩子，左侄子是红🔴，RL 不平衡\n<ul>\n<li>将来删除节点这边少个黑，所以最后旋转过来的父亲需要变成黑⚫️</li>\n<li>左侄子会取代原来父亲，因此它保留父亲颜色</li>\n<li>兄弟已经是黑了⚫️，无需改变</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>datastructure<span class=\"token punctuation\">.</span>redblacktree</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>datastructure<span class=\"token punctuation\">.</span>redblacktree<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedBlackTree</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token static\">BLACK</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>datastructure<span class=\"token punctuation\">.</span>redblacktree<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedBlackTree</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token static\">RED</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>* &lt;h3 > 红黑树 & lt;/h3></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedBlackTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token constant\">RED</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>       <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 父节点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       <span class=\"token class-name\">Color</span> color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 颜色</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>       <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>               left<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>               right<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>       <span class=\"token comment\">// 是否是左孩子</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>       <span class=\"token keyword\">boolean</span> <span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>           <span class=\"token keyword\">return</span> parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>       <span class=\"token comment\">// 叔叔</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>       <span class=\"token class-name\">Node</span> <span class=\"token function\">uncle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> parent<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>               <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>               <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>               <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>       <span class=\"token comment\">// 兄弟</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>       <span class=\"token class-name\">Node</span> <span class=\"token function\">sibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>               <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>               <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>               <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   <span class=\"token comment\">// 判断红</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>       <span class=\"token keyword\">return</span> node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   <span class=\"token comment\">// 判断黑</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">//        return !isRed(node);</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>       <span class=\"token keyword\">return</span> node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>   <span class=\"token comment\">// 右旋 1. parent 的处理 2. 旋转后新根的父子关系</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> pink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>       <span class=\"token class-name\">Node</span> yellow <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>       <span class=\"token class-name\">Node</span> green <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>green <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>           green<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>       yellow<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>       yellow<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>       pink<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>       pink<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>           root <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> pink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>   <span class=\"token comment\">// 左旋</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> pink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>       <span class=\"token class-name\">Node</span> yellow <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>       <span class=\"token class-name\">Node</span> green <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>green <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>           green<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>       yellow<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>       yellow<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>       pink<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>       pink<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>           root <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> pink<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> yellow<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    * 新增或更新</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    * &lt;br></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    * 正常增、遇到红红不平衡进行调整</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    * @param key   键</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    * @param value 值</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>       <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>           parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>               p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>               p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>               p<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>               <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>       <span class=\"token class-name\">Node</span> inserted <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>           root <span class=\"token operator\">=</span> inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> parent<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>           inserted<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> inserted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>           inserted<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>       <span class=\"token function\">fixRedRed</span><span class=\"token punctuation\">(</span>inserted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>   <span class=\"token keyword\">void</span> <span class=\"token function\">fixRedRed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>       <span class=\"token comment\">//case 1 插入节点是根节点，变黑即可</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>           x<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>       <span class=\"token comment\">//case 2 插入节点父亲是黑色，无需调整</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>       <span class=\"token comment\">/* case 3 当红红相邻，叔叔为红时</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>           需要将父亲、叔叔变黑、祖父变红，然后对祖父做递归处理</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>       */</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>       <span class=\"token class-name\">Node</span> uncle <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">uncle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>       <span class=\"token class-name\">Node</span> grandparent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>uncle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>           uncle<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>           grandparent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>           <span class=\"token function\">fixRedRed</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>       <span class=\"token comment\">//case 4 当红红相邻，叔叔为黑时</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// LL</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>           grandparent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>           <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// LR</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>           <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>           x<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>           grandparent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>           <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// RR</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>           grandparent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>           <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// RL</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>           <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>           x<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>           grandparent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>           <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    * 删除</pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    * &lt;br></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    * 正常删、会用到李代桃僵技巧、遇到黑黑不平衡进行调整</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    *</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    * @param key 键</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>       <span class=\"token class-name\">Node</span> deleted <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>       <span class=\"token function\">doRemove</span><span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>   <span class=\"token comment\">// 查找删除节点</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>       <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>               p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>               p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>               <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>   <span class=\"token comment\">// 查找剩余节点</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">findReplaced</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> deleted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> deleted<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>           <span class=\"token keyword\">return</span> deleted<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>           <span class=\"token keyword\">return</span> deleted<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>       <span class=\"token class-name\">Node</span> s <span class=\"token operator\">=</span> deleted<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>       <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>           s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>       <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>   <span class=\"token comment\">// 处理双黑 (case3、case4、case5)</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fixDoubleBlack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>       <span class=\"token class-name\">Node</span> sibling <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">sibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>       <span class=\"token comment\">//case 3 兄弟节点是红色</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>               <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>               <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>           parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>           sibling<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>           <span class=\"token function\">fixDoubleBlack</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>           <span class=\"token comment\">//case 4 兄弟是黑色，两个侄子也是黑色</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>               sibling<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">RED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>                   parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>                   <span class=\"token function\">fixDoubleBlack</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>           <span class=\"token comment\">//case 5 兄弟是黑色，侄子有红色</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>           <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>               <span class=\"token comment\">// LL</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>                   <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>                   sibling<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>                   sibling<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>               <span class=\"token comment\">// LR</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>               <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>                   sibling<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>                   <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>                   <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>               <span class=\"token comment\">// RL</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>               <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sibling<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>                   sibling<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>                   <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>                   <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>               <span class=\"token comment\">// RR</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>               <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>                   <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>                   sibling<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>                   sibling<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>               parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>           <span class=\"token comment\">// @TODO 实际也不会出现，触发双黑后，兄弟节点不会为 null</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>           <span class=\"token function\">fixDoubleBlack</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doRemove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> deleted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>       <span class=\"token class-name\">Node</span> replaced <span class=\"token operator\">=</span> <span class=\"token function\">findReplaced</span><span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>       <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> deleted<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>       <span class=\"token comment\">// 没有孩子</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>replaced <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>           <span class=\"token comment\">//case 1 删除的是根节点</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>               root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>                   <span class=\"token comment\">// 双黑调整</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>                   <span class=\"token function\">fixDoubleBlack</span><span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>                   <span class=\"token comment\">// 红色叶子，无需任何处理</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>                   parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>                   parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>               deleted<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>       <span class=\"token comment\">// 有一个孩子</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> deleted<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>           <span class=\"token comment\">//case 1 删除的是根节点</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>               root<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> replaced<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>               root<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> replaced<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>               root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">.</span><span class=\"token function\">isLeftChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>                   parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> replaced<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>                   parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> replaced<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>               replaced<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>               deleted<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> deleted<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> deleted<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span>deleted<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isBlack</span><span class=\"token punctuation\">(</span>replaced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>                   <span class=\"token comment\">// @TODO 实际不会有这种情况 因为只有一个孩子时 被删除节点是黑色 那么剩余节点只能是红色不会触发双黑</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>                   <span class=\"token function\">fixDoubleBlack</span><span class=\"token punctuation\">(</span>replaced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>                   <span class=\"token comment\">//case 2 删除是黑，剩下是红</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>                   replaced<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>           <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>       <span class=\"token comment\">//case 0 有两个孩子 => 有一个孩子 或 没有孩子</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>       <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> deleted<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>       deleted<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> replaced<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>       replaced<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>       <span class=\"token class-name\">Object</span> v <span class=\"token operator\">=</span> deleted<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>       deleted<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> replaced<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>       replaced<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>       <span class=\"token function\">doRemove</span><span class=\"token punctuation\">(</span>replaced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"390\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>以上代码中的 TODO 未作改正</li>\n</ul>\n<h4 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h4>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>普通二叉搜索树</th>\n<th>AVL 树</th>\n<th>红黑树</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查询</td>\n<td>平均 O (logn)，最坏 O (n)</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>插入</td>\n<td>平均 O (logn)，最坏 O (n)</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>平均 O (logn)，最坏 O (n)</td>\n<td>O(logn)</td>\n<td>O(logn)</td>\n</tr>\n<tr>\n<td>平衡性</td>\n<td>不平衡</td>\n<td>严格平衡</td>\n<td>近似平衡</td>\n</tr>\n<tr>\n<td>结构</td>\n<td>二叉树</td>\n<td>自平衡的二叉树</td>\n<td>具有红黑性质的自平衡二叉树</td>\n</tr>\n<tr>\n<td>查找效率</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>插入删除效率</td>\n<td>低</td>\n<td>中等</td>\n<td>高</td>\n</tr>\n</tbody>\n</table>\n<p>普通二叉搜索树插入、删除、查询的时间复杂度与树的高度相关，因此在最坏情况下，时间复杂度为 O (n)，而且容易退化成链表，查找效率低。</p>\n<p>AVL 树是一种高度平衡的二叉搜索树，其左右子树的高度差不超过 1。因此，它能够在 logn 的平均时间内完成插入、删除、查询操作，但是在维护平衡的过程中，需要频繁地进行旋转操作，导致插入删除效率较低。</p>\n<p>红黑树是一种近似平衡的二叉搜索树，它在保持高度平衡的同时，又能够保持较高的插入删除效率。红黑树通过节点着色和旋转操作来维护平衡。红黑树在维护平衡的过程中，能够进行较少的节点旋转操作，因此插入删除效率较高，并且查询效率也较高。</p>\n<p>综上所述，红黑树具有较高的综合性能，是一种广泛应用的数据结构。</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "数据结构与算法",
                "红黑树",
                "java",
                "计算机学科",
                "数据结构与算法",
                "红黑树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/avl%E6%A0%91/avl%E6%A0%91-%E6%A6%82%E8%BF%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/avl%E6%A0%91/avl%E6%A0%91-%E6%A6%82%E8%BF%B0/",
            "title": "avl树-概述",
            "date_published": "2024-02-04T10:01:35.923Z",
            "content_html": "<h1 id=\"avl树-概述\"><a class=\"anchor\" href=\"#avl树-概述\">#</a> avl 树 - 概述</h1>\n<p>前面学习过二叉搜索树就知道，如果二叉搜索树长的不平衡，就会影响到它的查找效率</p>\n<p>我们看如下图的  不平衡的 二叉树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240204173801900.png\" alt=\"image-20240204173801900\" /></p>\n<p>比如我想查询 1 的元素，那我就需要从根节点开始一路向左找，才能找到 1 的元素。而它的比较次数是 O (n)</p>\n<p>我们怎么解决这个问题呢？我们有个办法就是旋转让上面的二叉树重新变得左右平衡</p>\n<p>也就是让 上面的二叉树 整体向右旋转一下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240204174205969.png\" alt=\"image-20240204174205969\" /></p>\n<p>这时 就比 刚才的 二叉树 平衡了一些了， 此时在查询 1 元素效率就会好一点了，而且呢。旋转也不会破坏二叉搜索树的性质</p>\n<p>那新的问题又来了：如果判断给的二叉搜索树 是不平衡的然后让 其二叉树重新变得平衡呢？</p>\n<p>这时，可以通过如下规则来判断：</p>\n<blockquote>\n<p>如果一个节点的左右孩子，高度差超过 1，则此节点失衡，才需要旋转</p>\n</blockquote>\n<p>只有当 新增 或者 删除时可能会让一个平衡的二叉树变得不平衡，此时我们就需要进行旋转了。</p>\n<p><strong>AVL 树的定义</strong>：</p>\n<ul>\n<li>二叉搜索树在插入和删除时，节点可能失衡</li>\n<li>如果在插入和删除时通过旋转，始终让二叉搜索树保持平衡，称为自平衡的二叉搜索树</li>\n<li>AVL 是平衡二叉搜索树的实现之一</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "java",
                "数据结构与算法",
                "avl树",
                "java",
                "计算机学科",
                "介绍",
                "数据结构与算法",
                "树结构",
                "avl树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "二叉搜索树的实现",
            "date_published": "2024-02-04T09:32:20.718Z",
            "content_html": "<h1 id=\"二叉搜索树的实现\"><a class=\"anchor\" href=\"#二叉搜索树的实现\">#</a> 二叉搜索树的实现</h1>\n<p>创建二叉搜索树的结构：</p>\n<p>可以把 BSTree1 看作为 java 中的 map 集合他们做的事情都是类似的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Binary Search Tree 二叉搜索树</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BSTree1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 根节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">BSTNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 节点类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BSTNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">BSTNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">BSTNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 根据 key 创建节点的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 根据 key-value 创建节点的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 根据 key-value，还有 左右孩子 创建节点的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BSTNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BSTNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分析get方法的实现\"><a class=\"anchor\" href=\"#分析get方法的实现\">#</a> 分析 Get 方法的实现：</h2>\n<h3 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析：</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202191145907.png\" alt=\"image-20240202191145907\" /></p>\n<p>通过上图进行分析，通过 根节点 来跟 待查找的 key 进行比较</p>\n<p><strong>三成了三种情况</strong>：</p>\n<ol>\n<li>如果待查找的 key 小，那就应该从根节点开始向左找</li>\n<li>如果待查找的 key 大，那就应该从根节点开始向右找</li>\n<li>如果 两个 key 相等就是找到了不用找了</li>\n</ol>\n<h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查找关键字对应值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 通过调用该函数使用递归的方式实现的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// doGet(root, key);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 使用非递归的方式实现的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token function\">doGet1</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 内部使用的 不用暴露给外界 使用递归实现</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSTNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 没找到</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向左找</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向右找</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到了</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 使用非递归方式实现</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">doGet1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"扩展key的类型\"><a class=\"anchor\" href=\"#扩展key的类型\">#</a> 扩展 key 的类型</h2>\n<p>我们在实现二叉搜索树的时候他的属性 key 我们采用了 int 类型，为什么使用 int 呢？</p>\n<p>就是因为 key 与 key 之间可以进行大小比较，因此我们选择了 int 因为 int 做大小比较非常简单。</p>\n<p>那我希望对 key 进行扩展，我希望除了 int 类型意外更多的类型能够作为 key 的类型。</p>\n<p>答案是可以的，那我们第一个能想到的就是 泛型了</p>\n<h3 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉搜索树 泛型 key 版本 实现可以大小比较的版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 泛型：定义的泛型必须是 Comparable 的 子类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BSTree2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">T</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">BSTNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现min-查找最小值-的函数\"><a class=\"anchor\" href=\"#实现min-查找最小值-的函数\">#</a> 实现 min 查找最小值 的函数：</h2>\n<h3 id=\"分析-2\"><a class=\"anchor\" href=\"#分析-2\">#</a> 分析：</h3>\n<p>我们要找最小关键字，就从 根节点开始 不断向左找，一直走到头那么就是他最小关键字了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202192500425.png\" alt=\"image-20240202192500425\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202192624315.png\" alt=\"image-20240202192624315\" /></p>\n<h3 id=\"代码实现-3\"><a class=\"anchor\" href=\"#代码实现-3\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查找最小关键字对应的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">doMin</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">doMin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSTNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果节点为 null 就返回 null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><span class=\"token comment\">// 向左走 知道 节点为 null 说明就是最小值了，因为越往左边的值就越小</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">doMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不断向左递归</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现max-查找最大值的函数\"><a class=\"anchor\" href=\"#实现max-查找最大值的函数\">#</a> 实现 max 查找最大值的函数：</h2>\n<h3 id=\"分析-3\"><a class=\"anchor\" href=\"#分析-3\">#</a> 分析：</h3>\n<p>不断的向右走，走到头就是最大值了</p>\n<h3 id=\"代码实现-4\"><a class=\"anchor\" href=\"#代码实现-4\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查找最大关键字对应的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果节点为 null 直接返回 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义辅助指针</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span><span class=\"token comment\">// 不断向右循环，知道为 null 就停止</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回最右边的值 就是 最大值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现添加元素put函数\"><a class=\"anchor\" href=\"#实现添加元素put函数\">#</a> 实现添加元素 put 函数：</h2>\n<h3 id=\"分析-4\"><a class=\"anchor\" href=\"#分析-4\">#</a> 分析：</h3>\n<p>这个 put 函数的功能跟我们已经熟知的 map 中的 put 函数是相似的。</p>\n<p>添加时分为两种情况：</p>\n<ol>\n<li>当前的 key 在整个树中已经存在了，有了我们不会新增而是只做一个更新操作。</li>\n<li>当前的 key 在整个树中不存在，那么就新增，找到他合适的位置添加即可</li>\n</ol>\n<p>添加流程分析：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202194010543.png\" alt=\"image-20240202194010543\" /></p>\n<p>比如说，我要添加一个 key 为 1 的节点，先让 1 跟 根节点 进行比较，结果 比 1 根节点 的 key 小</p>\n<p>所以继续向左找，让 2 跟 1 作比较，结果 1 还是小</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202194142015.png\" alt=\"image-20240202194142015\" /></p>\n<p>所以继续向左找，让 1 跟 1 比较发现是相同的 ，这表示 这个树中 已经存在 1 了 那么就更新 1 的 value 值即可</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202194219324.png\" alt=\"image-20240202194219324\" /></p>\n<p>如果是 整个树中 不存在 添加 key 的值的情况如下：比如我要添加一个 key 为 9 的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202194427098.png\" alt=\"image-20240202194427098\" /></p>\n<p>跟 根节点 比较发现 大了，向右找，跟 8 比较 发现还是大了继续 向右找，8 的右边没有值了 是 null 那么就将 9 添加到 8 节点的 右边即可。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202194539235.png\" alt=\"image-20240202194539235\" /></p>\n<h3 id=\"代码实现-5\"><a class=\"anchor\" href=\"#代码实现-5\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存储关键字和对应值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 经过查找，找到 二叉搜索树中 对应 key　然后修改 key 对应的 value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      parent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span><span class=\"token comment\">// 将上次 更新的父节点 存储到 parent 变量中进行保存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token comment\">// 值小了 向左找</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span><span class=\"token comment\">// 值大了 向右找</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 更新 value</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 2. key 不存在，需要新增，创建一个新节点，但是考虑二叉搜索树是空的所以我们需要加一条判断</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">// new BSTNode(key, value);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">// 如果 二叉搜索树不是空的那么就让 新节点找到 适合自己的位置</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> parent<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token comment\">// 如果 新节点的 key 比 父节点的 key 小那么就是 父节点的左孩子</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> parent<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token comment\">// 如果 新节点的 key 比 父节点的 key 大那么就是 父节点的右孩子</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现successor-查找前任值函数\"><a class=\"anchor\" href=\"#实现successor-查找前任值函数\">#</a> 实现 successor 查找前任值函数：</h2>\n<h3 id=\"分析-5\"><a class=\"anchor\" href=\"#分析-5\">#</a> 分析：</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240203115103106.png\" alt=\"image-20240203115103106\" /></p>\n<p>可以先把二叉搜索树中的所有的 key 排个序，比如说 上图二叉搜索树中 排好序就是：1，2，3，4，5，6，7，8 这样的，排好序后 比如说我要找 4 这个节点的 前任节点，4 前一个 肯定是 3 后一个 肯定是 5</p>\n<p>排好序就很容易知道 4 的前任是谁 后任是谁了，那我们这颗 二叉搜索树 怎么排序呢？</p>\n<p>其实有一个最简单的方式就是：中序遍历，你可以看下 二叉搜索树 进行中序遍历后的结果就是 升序元素</p>\n<p>但是我们实际解决这个问题的时候并不会采用中序遍历，因为中序遍历 性能并不高</p>\n<p>我们可以根据下面的规则来高效的找到前任 和 后任：</p>\n<ol>\n<li>节点有左子树，此时前驱节点就是左子树的最大值，图中属于这种情况的有\n<ol>\n<li>2 的前驱是 1</li>\n<li>4 的前驱是 3</li>\n<li>6 的前驱是 5</li>\n<li>7 的前驱是 6</li>\n</ol>\n</li>\n<li>节点没有左子树，若离它最近的的祖先来从左而来，此祖先即为前驱，如\n<ol>\n<li>3 的祖先 2 自左而来，前驱 2</li>\n<li>5 的祖先 4 自左而来，前驱 4</li>\n<li>8 的祖先 7 自左而来，前驱 7</li>\n<li>1 没有这样的祖先，前驱 null</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"代码实现-6\"><a class=\"anchor\" href=\"#代码实现-6\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查找关键字的前驱值 也就是前任值 比如说 4 那就找 比 4 小 而且有比 其它节点值大的 3 ，如果是 7 那就找 6</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">successor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> toFrom <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         toFrom <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 没找到节点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">// 找到节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">return</span> toFrom <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> toFrom<span class=\"token punctuation\">.</span>value <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 查找关键字的后继值 有前任就有后任了 原理与前任是相反的</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">predecessor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token comment\">// 没找到节点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 找到节点</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现delete-删除函数\"><a class=\"anchor\" href=\"#实现delete-删除函数\">#</a> 实现 delete 删除函数：</h2>\n<h3 id=\"分析-6\"><a class=\"anchor\" href=\"#分析-6\">#</a> 分析：</h3>\n<ol>\n<li>删除节点没有左孩子，将右孩子托付给 Parent</li>\n<li>删除节点没有右孩子，将左孩子托付给 Parent</li>\n<li>删除节点左右孩子都没有，已经被涵盖在情况 1，情况 2 当中，把 null 托付给 Parent</li>\n<li>删除节点左右孩子都有，可以将它的后续节点 (称为 S) 托付给 Parent，再称 S 的父亲为 SP，有分两种情况\n<ol>\n<li>SP 就是被删除节点，此时 D 与 S 紧邻，只需将 S 托付给 Parent</li>\n<li>SP 不是被删除节点，此时 D 与 S 不相邻，此时需要将 S 的后代托付给 SP，再将 S 托付给 Parent</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"代码实现-7\"><a class=\"anchor\" href=\"#代码实现-7\">#</a> 代码实现：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据关键字删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         parent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 情况 1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 情况 2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 情况 4</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token class-name\">BSTNode</span> s <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">BSTNode</span> sParent <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         sParent <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sParent <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>sParent<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 托付方法</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSTNode</span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BSTNode</span> deleted<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BSTNode</span> child<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      root <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>deleted <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"递归版\"><a class=\"anchor\" href=\"#递归版\">#</a> 递归版：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">BSTNode</span> <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BSTNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> arrayList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> arrayList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      node<span class=\"token punctuation\">.</span>right  <span class=\"token operator\">=</span> <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> arrayList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> s <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   s<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> arrayList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   s<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">delete1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> arrayList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存被删除节点的值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   root <span class=\"token operator\">=</span> <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> arrayList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">return</span> arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现-范围-查询函数\"><a class=\"anchor\" href=\"#实现-范围-查询函数\">#</a> 实现 范围 查询函数：</h2>\n<h3 id=\"分析-7\"><a class=\"anchor\" href=\"#分析-7\">#</a> 分析：</h3>\n<p>三个函数，第一个 给一个 key 返回 比这个 key 小的值，第二个 给一个 key 返回 比这个 key 大的值，第三个 给两个 key 返回 这两个 key 区间的值</p>\n<p>对于二叉搜索树来讲，中序遍历就能得到 升序 结果，我们在中序遍历的过程中，加入一些条件</p>\n<h3 id=\"实现-小于-key-的查找函数\"><a class=\"anchor\" href=\"#实现-小于-key-的查找函数\">#</a> 实现 小于 key 的查找函数：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">less</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token class-name\">BSTNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         p <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"实现-大于-key-的查找函数\"><a class=\"anchor\" href=\"#实现-大于-key-的查找函数\">#</a> 实现 大于 key 的查找函数：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">greater</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token class-name\">BSTNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>key <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         p <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"实现-查找key1到key2之间的值函数\"><a class=\"anchor\" href=\"#实现-查找key1到key2之间的值函数\">#</a> 实现 查找 key1 到 key2 之间的值函数：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">BSTNode</span> p <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BSTNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token class-name\">BSTNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>key <span class=\"token operator\">></span> key1 <span class=\"token operator\">&amp;&amp;</span> pop<span class=\"token punctuation\">.</span>key <span class=\"token operator\">&lt;=</span> key2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pop<span class=\"token punctuation\">.</span>key <span class=\"token operator\">></span> key2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         p <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "数据结构与算法",
                "二叉搜索树",
                "java",
                "计算机学科",
                "数据结构与算法",
                "树结构",
                "二叉树搜索树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/english/part1/",
            "url": "https://pigpigletsgo.github.io/english/part1/",
            "title": "句子成分与基本句型-part1",
            "date_published": "2024-02-02T06:12:26.776Z",
            "content_html": "<h1 id=\"part1\"><a class=\"anchor\" href=\"#part1\">#</a> part1</h1>\n<h2 id=\"big-headings-句子成分与基本句型\"><a class=\"anchor\" href=\"#big-headings-句子成分与基本句型\">#</a> Big Headings - 句子成分与基本句型</h2>\n<p>为什么句成分那么重要呢？因为它对重句有很大的帮助！</p>\n<p><strong>复合句</strong>：一个<mark>复合句</mark>就是由简单句 裂变出来的：就是 <mark>主</mark> <mark>谓</mark> <mark>宾</mark> 延伸出来的。</p>\n<p><strong>所以我们就要学习</strong>：<mark>主语</mark>，<mark>谓语</mark>，<mark>宾语</mark> + <mark>宾补</mark></p>\n<blockquote>\n<p><strong>PS</strong>：再长的句子它归根结底还是： <mark>主</mark>，<mark>谓</mark>，<mark>宾</mark></p>\n</blockquote>\n<p>在英语中 只要有名词的 地方 就会有：<mark>定语</mark>，基本上每句话都有: <mark>状语</mark></p>\n<p><strong>造句需要两个条件</strong>：</p>\n<ol>\n<li>一个句子由几个部分构成</li>\n<li>这些构成句子的各个部分的顺序或者位置 (就是：主，谓，宾。到底是怎么排放的)</li>\n</ol>\n<p><strong><mark>句子成分</mark>就是<mark>构成句子</mark>的<mark>各个部分</mark>。英语的<mark>句子成分总共八个</mark></strong>：<mark>主语</mark>，<mark>谓语</mark>，<mark>宾语</mark>，<mark>表语</mark>，<mark>补语（宾补，主补）</mark>，<mark>定语</mark>，<mark>状语</mark>，还有一个不太重要的 <mark>同位语</mark></p>\n<h3 id=\"sub-headings-one-主语\"><a class=\"anchor\" href=\"#sub-headings-one-主语\">#</a> Sub Headings One - 主语</h3>\n<p>什么是主语呢？<strong>一般语法书的定义是这样</strong>：<mark>主语是一个句子叙述的主体</mark>。</p>\n<p>上面对于主语的定义，可能有点抽象。我们可以这样理解主语，<strong>主语就是</strong>：一句话<mark>主要叙述的对象</mark>或者这句话<mark>主</mark><mark>要讲的内容</mark>。</p>\n<p>这句话主要讲什么，这个 “什么” 就是主语。我们先用中文来解释：“我是中国人” ，这句话，主要讲的是 “我”，而不是 “中国人”，所以 “我” 是主语。“英语很难学” 这里主要讲 “英语”，而不是 “难学”，所以 “英语” 是主语。现在我们来看英文：“I am a teacher (我是老师)”，主要讲的是 “I” ，而不是 “teacher” ，所以 &quot;I&quot; 是主语。 &quot;Chinese is hard&quot; ，这里主要讲的是 &quot;Chinese&quot;，而不是 &quot;hard&quot; ，所以 &quot;Chinese&quot; 是主语。明白什么是主语，我们就要了解什么词语可以构成主语。<strong>一般来说，能够充当主语的词语有</strong>：<mark>名词</mark>，<mark>代词</mark>，<mark>数词</mark>，<mark>动词不定式</mark>，<mark>动名词</mark>，<mark>句子</mark>，<mark>其他</mark>。共 7 个</p>\n<blockquote>\n<p>我是中国人的解释：“我” 指的是 这句话的重点 主要讲的是我，不是中国人，是介绍我的情况，介绍我的身份的。所以 “我” 才是 “我是中国人” 这句话的重点，所以 “我” 才是 主语，是这句话的主体</p>\n</blockquote>\n<blockquote>\n<p>英语很难学的解释：我们重点是在说英语，在吐糟英语，英语是什么情况，所以它重点是说英语的情况而不是难学，难学的东西多了是不是，所以主语是 “英语”</p>\n</blockquote>\n<p><strong>如果还是不理解主语可以先记住这句话</strong>：在<strong>肯定句</strong>里面一般放在开头的那个 <mark>名词</mark>，<mark>代词</mark> 就是主语。</p>\n<h4 id=\"sub-headings-one-名词\"><a class=\"anchor\" href=\"#sub-headings-one-名词\">#</a> Sub Headings One - 名词</h4>\n<p><mark>名词都可以作主语</mark>。但是我们需要先了解一下什么是名词，<mark>名词就是世间万物的名称</mark>。<mark>世间万物不管看得见，还是看不见的都有一个名称</mark>。比如我们自己的名称，就是人名。我叫 “Nick”，&quot;Nick&quot; 就是我的名称，所以 &quot;Nick&quot; 就是一个名词。地方的名称，就是地名，地名也是名词，比如：China，Guang Dong，Guang Xi。我们生活中，所有看得见的物品，比如，电脑 (computer)，手机 (cellphone)，书 (book)，房子 (house) ，钢笔 (pen) 等等，都是名词，看不见的也是，比如：空气 (air)，风 (wind)，声音 (voice) 等等。</p>\n<p><strong>凡是名词都可以作主语，请看下面的例子</strong>：</p>\n<ol>\n<li><mark>Nick</mark> is a teacher，尼克是老师。(主要讲 Nick，所以人名 Nick 是主语)</li>\n<li><mark>Jack</mark> is a teacher，杰克是老师。(人名 Jack 作主语)</li>\n<li><mark>Lily</mark> is a student，莉莉是学生。(人名 Lily 作主语)</li>\n<li><mark>Guang Xi</mark> is beautiful，广西是美丽的。(地名 Guang Xi 作主语)</li>\n<li>The <mark>book</mark> is expensive，这本书很贵。(普通名词 book 作主语)，其中 &quot;the&quot; 是<mark>定冠词</mark></li>\n<li><mark>English</mark> is easy，英语很容易。(专有名词 English 作主语)</li>\n<li><mark>China</mark> is very large，中国很大。(专有名词 China 作主语)</li>\n</ol>\n<h4 id=\"sub-headings-two-人称代词指示代词\"><a class=\"anchor\" href=\"#sub-headings-two-人称代词指示代词\">#</a> Sub Headings Two - 人称代词 / 指示代词</h4>\n<p>代词就是为了避免重复而代替名词的词语。生活中使用代词的频率非常高，因为我们不能老是重复相同的名词。比如，我们不会说 ，“Nick is a teacher. Nick is from Guang Xi . Nick teaches English in Guang Dong” 连续用了三个名词 &quot;Nick&quot; ，这样就变得重复罗嗦了。应该用一个代词代替 &quot;Nick&quot;。所以应该说：&quot;Nick is a teacher <mark>He</mark> is from Guang Xi <mark>He</mark> teaches English in Guang Dong&quot;，其中句子中的&quot;He&quot; 就是<mark>人称代词</mark></p>\n<p><strong>代替人的代词就叫人称代词 (有些人称代词也可以指代事物)</strong>。上面例句的 &quot;He&quot; 代替了人 &quot;Nick&quot;，所以 &quot;He&quot; 就是一个人称代词。实际上，<mark>绝大部分的代词都可以作主语</mark>。英语代词的使用<mark>频率比中文要高</mark>。因为<mark>英语不喜欢重复</mark>，甚至<mark>不能容忍重复</mark>。这里主要通过比较单间的<mark>人称代词</mark>和<mark>指示代词</mark>来说明一下<mark>代词作主语的情况</mark>。<strong>人称代词又分为</strong> <mark>主格</mark>和<mark>宾格</mark>。</p>\n<p><strong>主格就是作主语的格式</strong>，<strong>宾格就是作宾语的格式</strong>。<mark>主格</mark>和<mark>宾格</mark>都<mark>指同一个意思</mark>，只是<mark>作用不同</mark>，这点跟中文不一样。<strong>人称代词的主格只有</strong>：&quot;<mark>I</mark> (我)，<mark>we</mark> (我们)，<mark>you</mark> (你，你们), <mark>she</mark> (她)，<mark>he</mark> (他)，<mark>it</mark> (它)，<mark>they</mark> (他们，她们，它们)&quot;。<mark>主格才可以作主语，宾格不可以</mark>，请看例句：</p>\n<ol>\n<li><mark>I</mark> am a teacher，我是老师。(人称代词主格 I 作主语，注意：不能说 me is a teacher)</li>\n<li><mark>She</mark> is beautiful，她很漂亮。(人称代词主格 She 作主语，注意：不能说 her is beautiful)</li>\n<li><mark>You</mark> are rich，你是有钱的。(人称代词主格 you 作主语)</li>\n<li><mark>He</mark> is very handsome，他很帅。(人称代词主格 he 作主语)</li>\n<li><mark>It</mark> is cheap，它便宜。(人称代词主格 It 作主语)</li>\n<li><mark>We</mark> are busy，我们忙。(人称代词主格 we 作主语)</li>\n<li><mark>They</mark> are happy，他们是快乐的。(人称代词主格 they 作主语)</li>\n</ol>\n<p><strong><mark>This</mark> 和 <mark>that</mark> 是<mark>指示代词</mark></strong>，也可以作<mark>主语</mark>。比如：</p>\n<ol>\n<li><mark>This</mark> is my pen，这是我的钢笔。(指示代词 this 作主语)</li>\n<li><mark>That</mark> is her computer，那是她的电脑。(指示代词 that 作主语)</li>\n</ol>\n<h4 id=\"sub-headings-three-数词\"><a class=\"anchor\" href=\"#sub-headings-three-数词\">#</a> Sub Headings three - 数词</h4>\n<p>数词最容易了，数词就是 1，2，3，4，5，6，7，8，9 (基数词) 或者 第一，第二，第三，第四，第五 (序数词)。不管是基数词还是序数词都可以作主语，比如：</p>\n<ol>\n<li><mark>The first</mark> is important，第一很重要</li>\n<li><mark>Eight</mark> is a lucky number，8 是一个幸运号码</li>\n</ol>\n<p>zero ，one，two，three，four，five，six，seven，eight，nine，ten：0，1，2，3，4，5，6，7，8，9</p>\n<p>first，second，third，fourth：第一，第二，第三，第四</p>\n<h4 id=\"sub-heading-four-动词不定式\"><a class=\"anchor\" href=\"#sub-heading-four-动词不定式\">#</a> Sub Heading four - 动词不定式</h4>\n<h4 id=\"sub-heading-five-动名词\"><a class=\"anchor\" href=\"#sub-heading-five-动名词\">#</a> Sub Heading five - 动名词</h4>\n<h4 id=\"sub-headings-six-句子\"><a class=\"anchor\" href=\"#sub-headings-six-句子\">#</a> Sub Headings six - 句子</h4>\n<p>一个句子也可以作主语。作主语的句子我们就叫 <mark>主语从句</mark></p>\n<h4 id=\"sub-heading-seven-其它\"><a class=\"anchor\" href=\"#sub-heading-seven-其它\">#</a> Sub Heading seven - 其它</h4>\n<p>在英语里面，有些词语<mark>看起来不是名词，但是就具有名词的含义</mark>。比如，&quot;old&quot; 本来是形容词，但是加上 &quot;the&quot; 之后就变成名词的含义了，&quot;the old&quot; 表示 &quot;老人&quot; 的意思，所以可以作主语。类此的词语还有：the old 老人 ，the poor 穷人，the rich 富人</p>\n<p>如：</p>\n<ol>\n<li><mark>The rich</mark> should help the poor，富人应该帮助穷人 (the rich 作主语)</li>\n<li>&quot;<mark>eat</mark>&quot;is a verb，&quot;eat&quot;是一个动词。(&quot;eat&quot;是动词原型，但是这里加上了 引号，表达名词含义，所以也可以作主语)，就是要表达：我跟你说啊&quot;eat&quot; 这个词它也是动词来的，加了双引号表达式 这个词 而不是 eat 的意思了。</li>\n</ol>\n<p>相对中文来说，英语的语法规则有点 &quot;怪&quot;。规则很死板，说一是一，说二是二，不想中文那样会变通。所以，在英语里面，能作主语的只有上面说的 7 个内容，其它一律不可以作主语。比如： 谓语动词，形容词，介词，副词等都不可以作主语，同这些词语主语都是错的。</p>\n<h3 id=\"sub-headings-one-谓语\"><a class=\"anchor\" href=\"#sub-headings-one-谓语\">#</a> Sub Headings One - 谓语</h3>\n<p>理解了主语，谓语就不难了。<strong>谓语定义就是</strong>：说明主语<mark>动作</mark>或者<mark>状态</mark>的词语。<strong>或者这样理解</strong>：说明主语<mark>做什么</mark>或者主语<mark>是什么</mark>，主语<mark>怎么样的</mark>词语。所以<strong>谓语是分两种</strong>，一种是<mark>动作型的谓语</mark>，另一种是<mark>状态型的谓语</mark>。(很多人忽略了状态型的谓语)。说明<mark>主语做什么的</mark>，就是<strong>动作型的谓语</strong>；说明<mark>主语是什么或者怎么样的</mark>就是<strong>状态型谓语</strong>。现在，我们先用中文来理解：&quot;我每天吃一个苹果&quot; 这里 &quot;吃&quot; 就是说明主语 &quot;我&quot; 做的一个动作，所以 &quot;吃&quot; 就是 谓语，动作型的谓语。&quot;我是英语老师&quot;，这里 &quot;是英语老师&quot; 就说明了主语 &quot;我&quot; 是什么，所以 &quot;是英语老师&quot; 是谓语，状态型的谓语。&quot;她很漂亮&quot; ，这里 &quot;很漂亮&quot; 也是谓语，状态型的谓语，在英语里面，也是一样的：&quot;I eat an apple every day&quot; 这里面的 &quot;eat&quot; 就是谓语，动作型的谓语。&quot;I am an English teacher&quot; 里面的 &quot;am an English teacher&quot; 就是谓语，状态型的谓语。&quot;She is very beautiful&quot; 里面的 &quot;is very beautiful&quot; 就是谓语，状态型的谓语。一般来说，动作型的谓语就是由动词构成的；状态型谓语就是由 &quot;系表结构&quot; 构成的。</p>\n<blockquote>\n<p><strong>注意了</strong>，谓语只跟主语有关系，说明主语的情况，跟其它成分没有关系。</p>\n</blockquote>\n<blockquote>\n<p>我吃一个苹果的解释：主语是 &quot;我&quot; 吃一个苹果是一个动作 是 &quot;吃&quot; 这个动作 所以 吃就是 谓语了</p>\n</blockquote>\n<blockquote>\n<p>我是英语老师的解释：没有描述动作，而是描述了是什么或怎么样</p>\n</blockquote>\n<h4 id=\"sub-headings-one-动作型谓语\"><a class=\"anchor\" href=\"#sub-headings-one-动作型谓语\">#</a> Sub Headings One - 动作型谓语</h4>\n<p>动作型的谓语就是由<mark>动词</mark>构成的，所以先来了解一下动词。<strong>动词的定义就是</strong>：表示<mark>动作</mark>或者<mark>心理行为</mark>的词语。很多人只知道表示动作是动词，而不知道<mark>表示心理行为的也是动词</mark>。<strong>比如</strong>：<mark>eat</mark> (吃)，<mark>drink</mark> (喝)，<mark>play</mark> (玩)，<mark>buy</mark> (买)，这些都是<mark>表示动作</mark>，所以是 动词。<strong>而像</strong>：<mark>think</mark> (思考)，<mark>like</mark> (喜欢)，<mark>know</mark> (知道)，<mark>consider</mark> (考虑)，<mark>hope</mark> (希望)，这些词语没有表示明显的动作，或者说是一种看不见的动作。这些都是<mark>表示心理行为的词语</mark>，也<mark>属于动词</mark>的范畴。</p>\n<h5 id=\"1-简单谓语-由-实义动词动词短语-构成\"><a class=\"anchor\" href=\"#1-简单谓语-由-实义动词动词短语-构成\">#</a> 1 <strong>简单谓语</strong> (由 &quot;实义动词 / 动词短语&quot; 构成)</h5>\n<p><mark>实义动词</mark>，就是表示 &quot;有实际意义&quot; 的动词，用来区别<mark>系动词</mark>，<mark>助动词</mark>，<mark>情态动词</mark>。这里不详细讲，动词的章节会详细介绍。</p>\n<p><mark>动词短语</mark>就是由<mark>动词</mark>和另一个<mark>单词</mark>或者几个<mark>单词构成的词组</mark>。动词短语虽然由<mark>几个词语构成</mark>，但是，实际上只是<mark>表示一个动作</mark>。比如：&quot;look after&quot; ，中文 &quot;照顾&quot; 的意思。&quot;照顾&quot; 只是一个动作，所以动词短语就相当于<mark>一个动词的作用</mark>。只是这个动词不是单独的一个词，而是几个词共同表达一个动作，因此可以把<mark>动词短语称为 &quot;复合动词&quot;</mark></p>\n<p><mark>一个实义动词</mark>或者<mark>一个动词短语</mark>都可以构成<mark>简单的谓语</mark>。</p>\n<p><strong>常见的简单动词和动词短语</strong>：<mark>简单动词</mark>：say (说)，talk (谈话)，speak (说)，type (打字)，eat (吃)，drink (喝)，play (玩)，buy (买) <mark>复合动词</mark>：look at (看)，look after (照顾)，get up (起床)</p>\n<p>以上任何一个<mark>实义动词</mark>或<mark>动词短语</mark>都可以作<mark>谓语</mark>，比如：</p>\n<ol>\n<li>\n<p>I <mark>work</mark> every day，我每天工作</p>\n<p>根据谓语定义：&quot;work&quot; 就是说明主语 &quot;I&quot; 做的动作，所以动词 &quot;work&quot; 就是谓语</p>\n</li>\n<li>\n<p>I <mark>run</mark> every day，我每天跑步</p>\n<p>根据谓语定义：&quot;run&quot; 就是说明主语 &quot;I&quot; 做的动作，所以动词 &quot;run&quot; 就是谓语</p>\n</li>\n<li>\n<p>I <mark>love</mark> you，我爱你</p>\n<p>根据谓语定义： &quot;love&quot; 就是说明主语 &quot;I&quot; 做的动作 (心理行为)，所以动词 &quot;love&quot; 就是谓语</p>\n</li>\n<li>\n<p>I <mark>speak</mark> Chinese，我讲中文</p>\n<p>根据谓语定义：&quot;speak&quot; 就是说明主语 &quot;I&quot; 做的动作，所以动词 &quot;speak&quot; 就是谓语</p>\n</li>\n<li>\n<p>She <mark>looks after</mark> her brother，她照顾她的弟弟（主语是第三人单数，所以谓语用了第三人称单数）</p>\n<p>根据谓语定义：&quot;looks after&quot; 就是说明主语 &quot;she&quot; 做的动作，所以动词短语 &quot;looks after&quot; 就是谓语</p>\n</li>\n<li>\n<p>I <mark>get up</mark> at six，我六点起床</p>\n<p>根据谓语定义：&quot;get up&quot; 就是说明主语 &quot;I&quot; 做的动作，所以动词短语 &quot;get up&quot; 就是谓语</p>\n</li>\n</ol>\n<h5 id=\"2-复合谓语\"><a class=\"anchor\" href=\"#2-复合谓语\">#</a> 2 复合谓语</h5>\n<p>复合谓语就是由<mark>简单谓语再加上其他词语</mark>，<mark>共同做谓语</mark>的情况。<strong>主要有下面三种形式</strong>：</p>\n<ol>\n<li>\n<p><mark>情态动词</mark> + <mark>实义动词</mark>或者<mark>动词短语</mark>的原型 ，<strong>比如</strong>：I <mark>speak</mark> Chinese 简单动词</p>\n</li>\n<li>\n<p>I <mark>can speak</mark> Chinese 复合谓语，其中 can 是 &quot;我能做到，我可以做到，我能&quot; 的意思</p>\n<p>I <mark>can speak</mark> Cantonese/Mandarin，我会说广东话 / 普通话</p>\n<p>I <mark>can look after</mark> her，我可以照顾她</p>\n<p>​\t&quot;can&quot; 就是一个<mark>情态动词</mark>，&quot;can speak&quot; 和 &quot;can look after&quot; 都是复合谓语。这里涉及到情态动词的情况。简单了解一下就可以了，以后细讲。</p>\n</li>\n<li>\n<p><mark>助动词</mark> + <mark>实义动词</mark> 或者 <mark>动词短语</mark>的原型，比如：</p>\n<p>I <mark>will buy</mark> a new book tomorrow，我明天要买一本新书。(一般将来时态)</p>\n<p>I <mark>will get up</mark> early tomorrow，我明天要早起。(一般将来时态)</p>\n<p>​\t&quot;will buy&quot; 和 &quot;will get up&quot; 都是复合谓语</p>\n</li>\n<li>\n<p><mark>助动词</mark> + 其它的<mark>动词形式</mark> (be + doing 或 Have/has + done) 比如：</p>\n<p>I <mark>am working</mark> now，我现在正在工作。(现在进行时态)</p>\n<p>I <mark>have learned</mark> English for 10 years，我已经学了 10 年英语了。(现在完成时态)</p>\n<p>​\t&quot;am working&quot; 和 &quot;have learned&quot; 都是复合谓语 (3)，(4) 都涉及到助动词。助动词是没有意思的，只是用来帮助构成某种结构 (所以也叫结构助词)，比如：时态，被动语态，疑问句，否定句等。这里简单了解一下就可以了，以后学到时态，被动语态，疑问句，否定句的时候，自然就明白了。</p>\n</li>\n</ol>\n<h4 id=\"sub-headings-two-状态型谓语-系表结构-状态型谓语\"><a class=\"anchor\" href=\"#sub-headings-two-状态型谓语-系表结构-状态型谓语\">#</a> Sub Headings Two - 状态型谓语 (系表结构 = 状态型谓语)</h4>\n<p><mark>状态型</mark>的谓语由 &quot;<mark> 系动词 + 表语</mark> &quot;构成。从某种意义上讲，&quot; 系动词 + 表语 &quot; 也是一种<mark>复合谓语</mark>。系动词主要由 &quot;be&quot; 充当，当然其他的系动词也可以。但是那些都是少数的，90% 以上的情况是由 &quot;be&quot; 充当，所以经常说 &quot;be + 表语&quot; 。&quot;be&quot; 是一个非常重要，也非常特殊的词语。&quot;be&quot; 有八种形式：</p>\n<p>&quot;be，am，is，are，was，were，being，been&quot;，但是他们意思都相同。</p>\n<p>&quot;be&quot; 一般表示 &quot;是&quot; 的意思，有时候在中文里面不用翻译出来。比如：&quot;be&quot; 后面跟一个形容词作表语的时候。(I am happy 我高兴。不会说：我是高兴的。不符合中文的表达习惯)</p>\n<p>我们最熟悉的 &quot;be&quot; 的格式就是：&quot;is are am&quot;</p>\n<p>当主语是 &quot;I&quot; 就用 &quot;am&quot;；当主语是单数或者 &quot;she&quot; 的时候用 &quot;is&quot;；当主语是负数或者 &quot;you&quot; 的时候用 &quot;are&quot;；下面就用 &quot;is are am&quot; 来举例说明<mark>状态型谓语</mark>的情况，比如：</p>\n<ol>\n<li>\n<p>I <mark>am happy</mark>，我高兴 / 我快乐</p>\n<p>am 是系动词，happy 是形容词作表语，所以状态型谓语就是 &quot;am happy&quot;</p>\n</li>\n<li>\n<p>He <mark>is a doctor</mark>，他是一名医生</p>\n<p>is 是系动词，a doctor 是名词作表语，所以状态型谓语就是 &quot;is a doctor&quot;</p>\n</li>\n<li>\n<p>You <mark>are cool</mark>，你好酷</p>\n<p>are 是系动词，cool 是形容词作表语，所以状态型谓语就是 &quot;are cool&quot;</p>\n</li>\n<li>\n<p>They <mark>are students</mark>，他们是学生</p>\n<p>are 是系动词，students 是名词作表语。所以状态型谓语就是 &quot;are students&quot;</p>\n</li>\n<li>\n<p>She <mark>is a teaher</mark>，她是一名老师</p>\n<p>is 是系动词，a teacher 是名词作表语。所以状态型谓语就是 &quot;is a teacher&quot;</p>\n</li>\n</ol>\n<p>另外，&quot;be&quot; 的其它格式，也简单了解一下：</p>\n<p>was /were 用于过去时态</p>\n<p>been 用于完成时态</p>\n<p>being 用于被动语态，放介词后面作介词宾语或者构成动名词</p>\n<p>be 用于动词不定式或者放在情态动词，助动词后，如：to be happy，will be，should be，can be</p>\n<p>状态型的谓语除了系动词外，还有一个重要的内容 ——<mark> 表语</mark>。其实，状态型的谓语比动作型的谓语还要重要，所以，为了学好状态型的谓语，我们马上开始学习表语的内容</p>\n<h4 id=\"sub-headings-thre-表语\"><a class=\"anchor\" href=\"#sub-headings-thre-表语\">#</a> Sub Headings Thre - 表语</h4>\n<p>表语其实<mark>属于谓语的范畴</mark>，但是<mark>不能说表语就是谓语</mark>，因为 &quot;<mark> 系动词 + 表语</mark> &quot;，才是<mark>谓语</mark>。系动词和表语是<mark>不能分开</mark>的。<mark>没有系动词就没有表语</mark>；<mark>没有表语就没有系动词</mark>。</p>\n<p><mark>表语的定义跟状态型的谓语一样的</mark>。说明<mark>主语是什么</mark>或者<mark>怎么样</mark>的词语就是表语，也可以说是说明主语的<mark>情况</mark>或者说明主语<mark>状态</mark>的词语。总之，<mark>系动词后面的词语就是表语</mark>，这样理解最容易了。</p>\n<p>表语的定义不太重要，重要的是什么词语可以作表语。</p>\n<p>在英语里面，<mark>名词</mark>，<mark>形容词</mark>，<mark>介词短语</mark>，<mark>名词所有格</mark>，<mark>动词不定式</mark>，<mark>动名词</mark>，<mark>代词</mark>，<mark>数词</mark>，<mark>分词</mark>，<mark>副词</mark>，<mark>句子</mark>都可以作<mark>表语</mark>。</p>\n<p>这里先用最简单的形容词，名词和介词短语来理解表语。其它的词语，后面讲解</p>\n<ol>\n<li>\n<p><strong>形容词作表语，比如</strong>：</p>\n<p>I <mark>am rich</mark>，我有钱</p>\n<p>You <mark>are busy</mark>，你忙</p>\n<p>He <mark>is rich</mark>，他有钱</p>\n<p>We <mark>are happy</mark>，我们是快乐的</p>\n<p>They <mark>are lucky</mark>，他们是幸运的</p>\n<p>It <mark>is beautiful</mark>，它漂亮</p>\n<p>She <mark>is beautiful</mark>，她漂亮</p>\n</li>\n<li>\n<p><strong>名词作表语，比如</strong>：Nick</p>\n<p>I <mark>am Nick</mark>，我是尼克</p>\n<p>You <mark>are my friend</mark>，你是我的朋友</p>\n<p>She <mark>is a nurse</mark>，她是一个护士</p>\n<p>He <mark>is a doctor</mark>，他是一个医生</p>\n<p>We <mark>are students</mark>，我们是学生</p>\n<p>They <mark>are boses</mark>，他们老板</p>\n<p>She <mark>is a teacher</mark>，她是老师</p>\n<p>Lily <mark>is a keyboard operator</mark>，莉莉是一名打字员</p>\n</li>\n<li>\n<p><strong>介词短语作表语，比如</strong>：in 就是一个介词，它表示 &quot;在&quot; 的意思 在什么什么地方</p>\n<p>I <mark>am in Guangxi</mark>，我在广西</p>\n<p>She <mark>is in Guangxi</mark>，她在广西</p>\n<p>You <mark>are in Beijing</mark>，你在北京</p>\n<p>They <mark>are in Shanghai</mark>，他们在上海</p>\n<p>We <mark>are in Guangzhou</mark>，我们在广州</p>\n<p>He <mark>is in Shenzhen</mark>，他在深圳</p>\n<p>She <mark>is in the classroom</mark>，她在教室里面</p>\n<p>He <mark>is in Guangxi</mark>，他在广西</p>\n<p>She <mark>is under the tree</mark>，她在树下</p>\n<p>They <mark>are on the playground</mark>，他们在操场上</p>\n</li>\n</ol>\n<p>上面学习 英语 成分 是为了 知道英语怎么造句。</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<blockquote>\n<p><strong>主语</strong>：主语就是一句话的主体，我们学习主语的目的是能要知道主语的位置以及由什么单词构成主语，至少需要掌握两个词语可以作为主语就是：名词和 代词</p>\n<p><strong>名词</strong>：所有名词都可以作为主语</p>\n<p><strong>人称代词的主格</strong>：I (我)，we (我们)，you (你，你们)，she (她)，it (它)，he (他)，they (它们，他们，她们)，这些都可以 作为 主语</p>\n<p><strong>谓语</strong>：说明主语的动作或者状态</p>\n<p><strong>谓语分为</strong>：1. 动作型谓语，2. 状态型谓语</p>\n<p><strong>1. 动作型谓语分为</strong>：1. 单间谓语 (由实义动词 / 动词短语组成)，2. 复合谓语 (在简单谓语再加上词语，共同做谓语：情态动词 + 实义动词或动词短语。助动词 + 实义动词或动词短语)</p>\n<p><strong>2. 状态型谓语</strong>：系动词 + 表语，系表结构 = 状态型谓语</p>\n<p><strong>表语</strong>：形容词，名词，介词短语等等。</p>\n</blockquote>\n<h3 id=\"句子成分很重要\"><a class=\"anchor\" href=\"#句子成分很重要\">#</a> 句子成分很重要</h3>\n<blockquote>\n<p><strong>主语</strong>：一句话的主体</p>\n<p><strong>谓语</strong>：说明主语的动作或状态</p>\n<p><strong>表语</strong>：跟系动词构成状态型谓语 - 系表结构</p>\n<p><strong>宾语</strong>：动作的对象或承受者 - 及物动词后的词语</p>\n<p><strong>宾补</strong>：补充说明宾语，使其意思更完整</p>\n<p><strong>状语</strong>：修饰谓语，说明谓语的情况</p>\n<p><strong>定语</strong>：修饰或限定名词的词语，偶尔修饰代词</p>\n<p><strong>同位语</strong>：跟前面的词语指代同一个人或事物</p>\n</blockquote>\n<h3 id=\"其他可以作主语的词语\"><a class=\"anchor\" href=\"#其他可以作主语的词语\">#</a> 其他可以作主语的词语</h3>\n<p>数词</p>\n<p>动词不定式短语 (非谓语动词短语)</p>\n<p>动名词短语 (非谓语动词短语)</p>\n<p>其他 (相当于名词或起到名词作用的词语)</p>\n<p>句子 (主语从句)</p>\n<h3 id=\"两种谓语-图解\"><a class=\"anchor\" href=\"#两种谓语-图解\">#</a> 两种谓语 - 图解</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202131632874.png\" alt=\"image-20240202131632874\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202131953129.png\" alt=\"image-20240202131953129\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202132317731.png\" alt=\"image-20240202132317731\" /></p>\n<h3 id=\"主语系动词表语\"><a class=\"anchor\" href=\"#主语系动词表语\">#</a> 主语 + 系动词 + 表语</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202132417450.png\" alt=\"image-20240202132417450\" /></p>\n<blockquote>\n<p>宾语非常简单 = 及物动词后面的词语</p>\n<p>能做宾语的词语和能做主语的词语一致</p>\n<p>注意下：做宾语的代词必须用代词宾格就可以了，还有做宾语的句子叫做宾语从句：名词，代词宾格，动词不定式短语，动名词短语，句子，数词 (极少)，其他 (相当于名词或起到名词作用的词语)</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135041598.png\" alt=\"image-20240202135041598\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135341971.png\" alt=\"image-20240202135341971\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135423414.png\" alt=\"image-20240202135423414\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135509975.png\" alt=\"image-20240202135509975\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135816763.png\" alt=\"image-20240202135816763\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135858722.png\" alt=\"image-20240202135858722\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240202135945177.png\" alt=\"image-20240202135945177\" /></p>\n",
            "tags": [
                "english",
                "english"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%A6%82%E8%BF%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%A6%82%E8%BF%B0/",
            "title": "二叉搜索树的概述",
            "date_published": "2024-01-30T11:50:46.256Z",
            "content_html": "<h1 id=\"二叉搜索树的概述\"><a class=\"anchor\" href=\"#二叉搜索树的概述\">#</a> 二叉搜索树的概述</h1>\n<p>之前我们已经学过了基础的数据结构了比如说：数组，链表，队列。在这些数据结构中如果我想去从中查找一个元素，这个效率高不高呢？答：并不高！都是线性时间 也就是 O (n)</p>\n<p>如果我的需求是必须快速查找，那么我们就需要引入一种新的算法或者数据结构了</p>\n<p>你可能会想到之前学过的 二分查找法，它能不能提高查询效率呢？</p>\n<p>答案：可以的！它可以达到 对数 时间，也就是 Olog (n)</p>\n<p><strong>不过它有限制</strong>：必须是针对一个已排序的数组 进行二分查找，但是话说回来 我们对一个数组 做排序 成本还是比较高的</p>\n<p>先去排序再去查找，好像有点得不偿失。</p>\n<p>那么有没有一个 折中的办法呢？答：有！就是我们换一种数据结构 不采用数组了，而是采用 本章要讲的 二叉搜索树</p>\n<p>用它既可以让我们查找效率比较高，也可以让我们在这个结构中加入新的元素时它就是已经排好序的结构</p>\n<p>如下图就一颗二叉搜索树，也称之为 二叉排序树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130193019818.png\" alt=\"image-20240130193019818\" /></p>\n<p>要成为 二叉搜索树 必须符合如下两个特征：</p>\n<ol>\n<li>树节点增加 key 属性，用来比较谁打谁小，key 不可以重复</li>\n<li>对于任意一个树节点，它的 key 比左子树的 key 都大，同时也比右子树的 key 都小</li>\n</ol>\n<p><strong>PS</strong>：而却 二叉搜索树 使用 中序遍历的结果 是一个 升序的 元素顺序，比如上图二叉搜索树 进行中序遍历结果为：1，2，3，4，5，6，7，8。</p>\n<p>对照上面的二叉搜索树来看如果我要在二叉树中的 6 节点添加一个节点那么它应该是几呢？</p>\n<p>首先它必须比 7 小因为 是 7 的左子树，还要比 6 大 因为是 6 的右子树。这样的话我们只能添加一个值为 6.5 的节点了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130193454111.png\" alt=\"image-20240130193454111\" /></p>\n<h2 id=\"演示-二叉搜索树-的查找效率如何\"><a class=\"anchor\" href=\"#演示-二叉搜索树-的查找效率如何\">#</a> 演示 二叉搜索树 的查找效率如何：</h2>\n<p>比如说 我要查找一个值为 8 的节点</p>\n<p>先从根节点开始 比较 发现比 4 大 那就从右子树开始找，因为根据二叉搜索树的定义中 4 左子树比 4 还要小 不可能存在 8 这个值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130193635687.png\" alt=\"image-20240130193635687\" /></p>\n<p>接下来跟 4 的右子树 的 7 进行比较 发现比 7 还大 那么就从 7 的右子树 找</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130193816974.png\" alt=\"image-20240130193816974\" /></p>\n<p>接下来 7 的右子树节点的值就是 8 到这就找到了 8 这个节点了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130193916340.png\" alt=\"image-20240130193916340\" /></p>\n<p>这样的话 就能看出 二叉搜索树可以 一次性 忽略一 半的 分叉 快速找到 我们想要找的节点</p>\n<p>上面只是 二叉搜索树 长的比较好的情况下的 结果，如果二叉搜索树长的很糟糕的话 情况就大不如意 了</p>\n<p>比如说我们看一个特殊情况：</p>\n<p>如下 也算是一颗 二叉搜索树 根节点 5 的左子树都比它小，4 的左子树也比 4 小，3 也是，2 也是</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130194359264.png\" alt=\"image-20240130194359264\" /></p>\n<p>但是这颗 二叉搜索树 长的比较丑，能看得出来 它<mark>不平衡</mark> 在这种情况下 如果要查找的话 那么它的性能可能就不是那么高了。</p>\n<p>比如说要查找 1 的话，那么就需要比较 5 次 才能找到 1 那么这时 时间复杂度 又回到线性时间了也就是 O (n) 了</p>\n<p>所以：二叉搜索树 它的平均 时间复杂度是 对数 时间，但是它有一个最糟的情况就是上面不平衡的二叉搜索树情况这种情况下 它的时间复杂度又会下降为 O (n) 线性时间了</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "数据结构与算法",
                "二叉搜索树",
                "java",
                "计算机学科",
                "介绍",
                "数据结构与算法",
                "树结构",
                "二叉树搜索树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "从中序与后序遍历序列构造二叉树",
            "date_published": "2024-01-30T08:00:08.655Z",
            "content_html": "<h1 id=\"从中序与后序遍历序列构造二叉树\"><a class=\"anchor\" href=\"#从中序与后序遍历序列构造二叉树\">#</a> 从中序与后序遍历序列构造二叉树</h1>\n<p>给定两个整数数组  <code>inorder</code>  和  <code>postorder</code>  ，其中  <code>inorder</code>  是二叉树的中序遍历，  <code>postorder</code>  是同一棵树的后序遍历，请你构造并返回这颗 <em>二叉树</em> 。</p>\n<p><strong>示例 1:</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n输出：[3,9,20,null,null,15,7]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入：inorder = [-1], postorder = [-1]\n输出：[-1]\n</code></pre>\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= inorder.length &lt;= 3000</code></li>\n<li><code>postorder.length == inorder.length</code></li>\n<li><code>-3000 &lt;= inorder[i], postorder[i] &lt;= 3000</code></li>\n<li><code>inorder</code>  和  <code>postorder</code>  都由 <strong>不同</strong> 的值组成</li>\n<li><code>postorder</code>  中每一个值都在  <code>inorder</code>  中</li>\n<li><code>inorder</code>  <strong>保证</strong>是树的中序遍历</li>\n<li><code>postorder</code>  <strong>保证</strong>是树的后序遍历</li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>没看过 “ 从前序与中序遍历序列构造二叉树 &quot; 可以先看下，从这个文章中我们知道了 前序遍历可以很容易的找到 某一层的 根节点 因为 根节点的值 是最先打印的 但是 光靠 前序遍历我们 看不出来 这个根节点它的 左右孩子 是 左边 还是右边的，所以我们需要 结合着 中序遍历 才能分辨出 左右孩子的位置</p>\n<p>而中序遍历 配合 后序遍历 还原二叉树也比较简单，我们只需要 通过后序遍历 的 最后一个值 就是 根节点 因为 后序遍历 顺序为：左，右，值　。　然后再通过 中序遍历来分辨 根节点 左右孩子的位置即可。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 判断 中序和 后序是否有元素，如果没有就返回 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     \t  <span class=\"token comment\">// 通过后序遍历数组的最后一个元素获取 二叉树的根节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> rootValue <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span>postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 将 root 节点存入创建的节点对象中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>rootValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 循环 中序数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 判断如果 中序数组 第 i 个索引值 等于 根节点就执行代码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rootValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组 元素为：inorder 数组的 0 到 i - 1 区间的元素，也就是当前根节点的左子树</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> inLeft<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组 元素为：inorder 数组的 i + 1 到 inorder.length - 1 区间的元素，也就是当前根节点的右子树</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">int</span> inRight<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 15,20,7</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组，元素为：postorder 数组的 0 到 i - 1 区间的元素，也就是当前根节点的左子树</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">int</span> postLeft<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 复制一个数组，元素为：postorder 数组的 i 到 postorder.length - 1 区间的元素，也就是当前根节点的右子树</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">int</span> postRight<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 15,7,20</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inLeft<span class=\"token punctuation\">,</span> postLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 9</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>inRight<span class=\"token punctuation\">,</span> postRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 20</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "还原二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "从前序与中序遍历序列构造二叉树",
            "date_published": "2024-01-30T07:12:29.928Z",
            "content_html": "<h1 id=\"从前序与中序遍历序列构造二叉树\"><a class=\"anchor\" href=\"#从前序与中序遍历序列构造二叉树\">#</a> 从前序与中序遍历序列构造二叉树</h1>\n<p>给定两个整数数组  <code>preorder</code>  和  <code>inorder</code>  ，其中  <code>preorder</code>  是二叉树的<strong>先序遍历</strong>，  <code>inorder</code>  是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p>\n<p><strong>示例 1:</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n输出: [3,9,20,null,null,15,7]\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: preorder = [-1], inorder = [-1]\n输出: [-1]\n</code></pre>\n<p><strong>提示:</strong></p>\n<ul>\n<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>\n<li><code>inorder.length == preorder.length</code></li>\n<li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>\n<li><code>preorder</code>  和  <code>inorder</code>  均 <strong>无重复</strong> 元素</li>\n<li><code>inorder</code>  均出现在  <code>preorder</code></li>\n<li><code>preorder</code>  <strong>保证</strong> 为二叉树的前序遍历序列</li>\n<li><code>inorder</code>  <strong>保证</strong> 为二叉树的中序遍历序列</li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>这个题目的意思是给了你 一颗二叉树它的 前序，中序遍历结果了</p>\n<p>比如说这颗二叉树的前序遍历结果是：1，2，4，3，6，7</p>\n<p>这颗二叉树的中序遍历结果是：4，2，1，6，3，7</p>\n<p>根据上面两个二叉树的遍历结果 二叉树创建出来应该是如下样子：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130102702438.png\" alt=\"image-20240130102702438\" /></p>\n<p>我们分析一下 还原二叉树的 过程：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240130103359529.png\" alt=\"image-20240130103359529\" /></p>\n<p>我们通过 前序遍历 就看得知 root 节点肯定是 1 ，但是我们继续从 前序遍历中找的 话 我们就很难分辨出哪个是 root 的左子树 和 右子树了，虽然我们看上面完整的二叉树我们得知了 root 的左子树和 右子树是 2，3。但是 还可能有一种情况使它 的 左子树 和 右子树为 2，6，所以我们不能 根据前序遍历确定它这个树 长什么样子</p>\n<p>这时我们再结合中序遍历的结果，中序遍历的特点是：先打印完 左子树 然后就是 中值，最后是 右子树，我们再看 中序遍历的结果：4，2，1，6，3，7。从 前序遍历中我们已知了 root 节点肯定是 1 那么 从中序遍历中看的话，1 是 root 而 1 左边就是 左子树的节点，而 1 的右边就是 右子树的节点了</p>\n<p>所以根据 中序遍历 我们确定了 1 的左子树分别是： 2，4。1 的右子树 分别是：3，6，7</p>\n<p>通过上面的了解得出如下：</p>\n<pre><code> 根 1                      根 1            \n  pre                       inf\n左 2,4                    左 4,2\n右 3,6,7                  右 6,3,7\n</code></pre>\n<p>通过上面列出的我们发现这好像是一个<mark>子问题</mark></p>\n<p>如果我们不看上面的东西了，我们就看这次 2，4 这个结果 你怎么分辨出 哪个是根节点，哪个是左 / 右子树？</p>\n<p><strong>答</strong>：</p>\n<p>我们先从 根节点 查看 我们从 前序遍历中 找到 第一个元素就是根节点 也就是 2，随后我们看 中序遍历 的 4 在 2 的左边说明了 4 是 左子树 得到答案如下：</p>\n<pre><code>  2\n /\n4\n</code></pre>\n<p>那我们再看 结果为：6，3，7 的呢？</p>\n<p>我们先看前序遍历中 3 是 第一个元素 那么它就是根节点，确定了根节点，我们再看中序遍历 6 在左边 那它就是左子树，7 在 3 的右边 那 7 就是 右子树 ，得到答案如下：</p>\n<pre><code>  3\n / \\\n6   7\n</code></pre>\n<p>就这样的向下 找 最后 节点为 null 了，我们就可以停止子问题的递归了。</p>\n<p>所以这道题 比较直接的 方法就是 使用递归的方法，根据两组遍历结果 去 确定根 确定左边有哪些，确定右边有哪些。知道没办法再次切分为止</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryDemo02</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> preOrderArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> infixOrderArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryDemo02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preOrderArray<span class=\"token punctuation\">,</span> infixOrderArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        b<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>heroNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                s<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前序遍历：\"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                root <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> preOrder<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inOrder<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> inOrder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 通过前序遍历我们获取 root 节点 的值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> rootValue <span class=\"token operator\">=</span> preOrder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 将 root 节点 赋值给 节点类</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span>rootValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inOrder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 循环 如果 当前索引值等于 root 节点说明找到了 root 节点的索引位置了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inOrder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rootValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 从 0 到 i - 1 就是左子树</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">//copyOfRange 根据 区间 复制 一个数组 参数：inOrder 要复制的数组 区间：从 0 到 i-1 (含头不含尾 所以 i 就是 i - 1 的效果)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inLeft <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inOrder<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [4. 2]</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 从 i + 1 到 inOrder.length - 1 就是右子树</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>inOrder<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inOrder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [6, 3, 7]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">// 从 1 到 i - 1 就是左子树 因为需要 略过 0 索引的值 因为它就是 根节点 而我们要找的是 4，2 中谁是根 这时我们需要前序遍历的结果来判断</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preLeft <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [2, 4]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">// 从 i + 1 到 preOrder.length - 1 就是右子树</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preRight <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>preOrder<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> preOrder<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [3, 6, 7]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preLeft<span class=\"token punctuation\">,</span> inLeft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preRight<span class=\"token punctuation\">,</span> inRight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>前序遍历：1\n前序遍历：2\n前序遍历：4\n前序遍历：3\n前序遍历：6\n前序遍历：7\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "还原二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "翻转二叉树",
            "date_published": "2024-01-29T09:10:55.567Z",
            "content_html": "<h1 id=\"翻转二叉树\"><a class=\"anchor\" href=\"#翻转二叉树\">#</a> 翻转二叉树</h1>\n<p>给你一棵二叉树的根节点  <code>root</code>  ，翻转这棵二叉树，并返回其根节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/invert1-tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [4,2,7,1,3,6,9]\n输出：[4,7,2,9,6,3,1]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/invert2-tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [2,1,3]\n输出：[2,3,1]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：root = []\n输出：[]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目范围在  <code>[0, 100]</code>  内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129164829389.png\" alt=\"image-20240129164829389\" /></p>\n<p>我们通过上面的二叉树来进行一个分析，看一下它的翻转效果，就是把它的左右孩子做一个交换</p>\n<p>比如说 1 的左右两个孩子 2，3 做一个交换，会先将 2 的左右孩子都跟着 交换过去</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129165101700.png\" alt=\"image-20240129165101700\" /></p>\n<p>然后是 2 的左右孩子 4，5 进行交换</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129165134547.png\" alt=\"image-20240129165134547\" /></p>\n<p>最后是 5 的左右孩子 7，8 交换一下位置，最终效果如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129165211883.png\" alt=\"image-20240129165211883\" /></p>\n<p>每个 有 左右节点的 处理 方式都是一样的，既然处理 逻辑都是一样的，那么这道题 显然使用递归来解释最为合适的</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">invertTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果 传入的节点为 null 或者 当前节点为 null 说明没有可处理的节点 直接结束</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 典型的交换位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> t <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 不断向左孩子递归并处理 需要交换的 左右孩子</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 不断向右孩子递归并处理 需要交换的 左右孩子</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "递归",
                "编程题",
                "二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6-%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86%E5%AE%9E%E7%8E%B0/",
            "title": "二叉树的层序遍历",
            "date_published": "2024-01-29T07:53:38.451Z",
            "content_html": "<h1 id=\"二叉树最小深度-层序遍历实现\"><a class=\"anchor\" href=\"#二叉树最小深度-层序遍历实现\">#</a> 二叉树最小深度 - 层序遍历实现</h1>\n<p>给定一个二叉树，找出其最小深度。</p>\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n<p>** 说明：** 叶子节点是指没有子节点的节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/ex_depth.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：2\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [2,null,3,null,4,null,5,null,6]\n输出：5\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数的范围在  <code>[0, 105]</code>  内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>对于求二叉树最大深度这个规律比较好找 就是 一共有几层那么二叉树最大深度就是几，但是怎么用层序遍历去找它的最小深度呢？</p>\n<blockquote>\n<p><strong>结论</strong>：</p>\n<p>层序遍历，遇到的第一个叶子节点所在层就是最小深度</p>\n</blockquote>\n<p>我们拿 下图 二叉树来举例</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129153215819.png\" alt=\"image-20240129153215819\" /></p>\n<p>其中的叶子节点分别是：4，3，7</p>\n<p>现在我们再来领悟：遇到的第一个叶子节点所在层就是<mark>最小深度</mark>，这句话就清楚一些了，它遇到的第一个叶子节点就是最小深度</p>\n<p>上面就是 层序遍历的结论那么结论有了些代码就容易多了。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 记录最小深度的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> sun <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            sun<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">TreeNode</span> poll <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 判断如果 当前节点的 左右两边都没有 孩子了 说明 是个叶子节点那么就直接返回 最小深度值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> poll<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">return</span> sun<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> sun<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "层序遍历"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/",
            "title": "二叉树最小深度",
            "date_published": "2024-01-29T02:21:45.717Z",
            "content_html": "<h1 id=\"二叉树最小深度\"><a class=\"anchor\" href=\"#二叉树最小深度\">#</a> 二叉树最小深度</h1>\n<p>给定一个二叉树，找出其最小深度。</p>\n<p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p>\n<p>** 说明：** 叶子节点是指没有子节点的节点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/ex_depth.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：2\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [2,null,3,null,4,null,5,null,6]\n输出：5\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数的范围在  <code>[0, 105]</code>  内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<p>如果已经学习过 二叉树最大深度的话 你可能会想到 这样写，如下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是，这样写是错误的！</p>\n<p>运行结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129093329129.png\" alt=\"image-20240129093329129\" /></p>\n<p>下面分析为什么这样写是错误的。</p>\n<p>分析执行过程</p>\n<pre><code>深度 2\n  1\n /\n2\n</code></pre>\n<p>我们根据上面的 例子来讲 首先它的根节点是 1</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 传进来 根节点 为 1 条件不成立</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 求根节点开始的左子树深度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">int</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 求出来的应该是 1 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 求根节点卡开始的右子树深度</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">int</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 求出来应该是 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 从 0 和 1 挑选出一个最小值也就是 0 然后 + 1 返回，所以就得出了 根节点它的深度是 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过上面分析可以得出这样的结果就不对了，它的深度应该是 2 才对</p>\n<p>问题就出在：它有一个子树是 null 的时候，我们应该不把它计算在内的</p>\n<p>对应下面的 例子来看</p>\n<p>我们看左边 不为 null 的子树 才是它的深度 ，右边为 null 的我们不应该把它作为深度的比较</p>\n<pre><code>深度 2\n  1\n /\n2\n</code></pre>\n<p>因此我们需要在 左右子树 返回了以后做一些判断</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">minDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> d1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> d2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>提交结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240129102110843.png\" alt=\"image-20240129102110843\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-%E4%BD%BF%E7%94%A8%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-%E4%BD%BF%E7%94%A8%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/",
            "title": "二叉树最大深度-使用层序遍历",
            "date_published": "2024-01-28T15:20:25.335Z",
            "content_html": "<h1 id=\"二叉树最大深度-使用层序遍历\"><a class=\"anchor\" href=\"#二叉树最大深度-使用层序遍历\">#</a> 二叉树最大深度 - 使用层序遍历</h1>\n<p>给定一个二叉树  <code>root</code>  ，返回其最大深度。</p>\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tmp-tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [1,null,2]\n输出：2\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点的数量在  <code>[0, 104]</code>  区间内。</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>使用层序遍历，层数即最大深度</p>\n<h2 id=\"我们先实现-层序遍历的代码\"><a class=\"anchor\" href=\"#我们先实现-层序遍历的代码\">#</a> 我们先实现 层序遍历的代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 将 根节点 放入栈中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 判断 如果 栈不为空 就循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 弹出 栈顶元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">HeroNode</span> poll <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 打印 从左到右 经过的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>poll <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 判断 当前元素的 左边是否为 null 不为 null 就向左走</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 判断 当前元素的 右边是否为 null 不为 null 就向右走</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>1\t2\t3\t4\t5\t6\t7\t\n</code></pre>\n<p>这样的打印我们并不能看出 二叉树 每层有几个 节点 我们需要使用一个变量来记录 每层二叉树的元素个数 代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 通过 c1 变量来 判断 二叉树每一层的 分界线</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 注意：这里获取 栈 的大小不能写在 for 循环中 因为 for 循环中 相当于每次循环都调用了 s.size () 了 最后的结果也是 意想之外的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> poll <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>poll <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         s<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>1\t\n2\t3\t\n4\t5\t6\t\n7\t\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "层序遍历"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-%E4%BD%BF%E7%94%A8%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-%E4%BD%BF%E7%94%A8%E9%9D%9E%E9%80%92%E5%BD%92%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%AE%9E%E7%8E%B0/",
            "title": "二叉树最大深度-使用非递归后序遍历求解",
            "date_published": "2024-01-28T14:40:36.374Z",
            "content_html": "<h1 id=\"二叉树最大深度-使用非递归后序遍历实现\"><a class=\"anchor\" href=\"#二叉树最大深度-使用非递归后序遍历实现\">#</a> 二叉树最大深度 - 使用非递归后序遍历实现</h1>\n<p>给定一个二叉树  <code>root</code>  ，返回其最大深度。</p>\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tmp-tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [1,null,2]\n输出：2\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点的数量在  <code>[0, 104]</code>  区间内。</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>使用非递归 的 后序遍历 我们需要使用到 栈 将经过的 节点 压入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128220924192.png\" alt=\"image-20240128220924192\" /></p>\n<p>我们先是 向左走到走并且 将 经过的所有节点都压入栈 中，当回去的时候再不断的将 栈中的元素 弹出</p>\n<p>但是我们可以注意一下，从 1 走到 4 走到头了，那么这时栈中元素的个数 就代表着 树 从 1 到 4 它的深度</p>\n<p>当然这不是最大深度，如果接下来是从 1 到 7 ，走到 7 可能会是如下图所示的样子：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128221252821.png\" alt=\"image-20240128221252821\" /></p>\n<p>那么这时我们就需要 将 最大深度 更新一下。</p>\n<p>每次如果有更大的值，那么就更新 最大深度的值，等到所有节点都遍历过一遍之后，记录的 最大深度的值 就是 这棵树的最大深度</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 先实现 非递归的后序遍历代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 记录 最近弹出元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> pop <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 记录 最大深度的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 非递归后序遍历我们需要使用到 栈来存储 回去的路</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 如果 cur 不为 null 并且 stack 不为空 就循环</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 判断 cur 不为 null 就将 当前 cur 存储到 栈中 记录来时的路</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 判断 最大深度的值 每次更新 max 的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    max <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 向左不断走</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 拿一下 栈顶元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">TreeNode</span> peek <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 判断 来时的上一个元素 的右边是否有节点 并 判断 来时的路的 右边节点是否走过了，走过就不走了不然会死循环 到这</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>peek<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> peek<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> pop<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token comment\">// 没路可走了 并且 右边的孩子也处理过了那么就弹出来时的路回到 上一步 继续下一轮循环</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 向右不断走</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    cur <span class=\"token operator\">=</span> peek<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 返回最大深度的值</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "后序遍历"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E8%A7%A3/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6-%E4%BD%BF%E7%94%A8%E9%80%92%E5%BD%92%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%B1%82%E8%A7%A3/",
            "title": "二叉树最大深度-使用递归后序遍历求解",
            "date_published": "2024-01-28T14:04:22.594Z",
            "content_html": "<h1 id=\"二叉树最大深度-使用递归实现后序遍历求解\"><a class=\"anchor\" href=\"#二叉树最大深度-使用递归实现后序遍历求解\">#</a> 二叉树最大深度 - 使用递归实现后序遍历求解</h1>\n<p>给定一个二叉树  <code>root</code>  ，返回其最大深度。</p>\n<p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/tmp-tree.jpg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：3\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [1,null,2]\n输出：2\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点的数量在  <code>[0, 104]</code>  区间内。</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<ol>\n<li>\n<p>得到左子树深度，得到右子树深度，二者最大者加一，就是本节点深度</p>\n</li>\n<li>\n<p>因为需要先得到左右子树深度，很显然是后序遍历典型应用</p>\n</li>\n<li>\n<p><strong>关于深度的定义</strong>：从根出发，离根最远的节点总边数</p>\n<p>注意：力扣里的深度定义要多一</p>\n</li>\n</ol>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 当前节点为 null 结束当前递归</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 看当前节点的 左边是否还有节点 (d1 只记录 左边 节点数量)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">int</span> d1 <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 看当前节点的 右边是否还有节点 (d2 只记录 右边 节点数量)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">int</span> d2 <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 选择最长的 分支 + 1 = 答案 (最深长度)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">,</span> d2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "后序遍历"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/",
            "title": "对称二叉树",
            "date_published": "2024-01-28T05:27:21.411Z",
            "content_html": "<h1 id=\"对称二叉树\"><a class=\"anchor\" href=\"#对称二叉树\">#</a> 对称二叉树</h1>\n<p>给你一个二叉树的根节点  <code>root</code>  ， 检查它是否轴对称。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/1698026966-JDYPDU-image.png\" alt=\"img\" /></p>\n<pre><code>输入：root = [1,2,2,3,4,4,3]\n输出：true\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/1698027008-nPFLbM-image.png\" alt=\"img\" /></p>\n<pre><code>输入：root = [1,2,2,null,3,null,3]\n输出：false\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目在范围  <code>[1, 1000]</code>  内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>比如说 我给出一个 对称的二叉树如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128114131089.png\" alt=\"image-20240128114131089\" /></p>\n<p>那么怎么判断它到底是不是对称的呢？</p>\n<p>首先根节点不用检查，我们让 根节点的 左右两个孩子去做比较，看看它俩的值是否一样，它俩值相等就表示至少从这两个节点开始它是对称的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128114317932.png\" alt=\"image-20240128114317932\" /></p>\n<p>然后接着往下走，此时需要注意：</p>\n<p>左边 2 节点的 左孩子 跟 右边 2 节点的 右孩子 进行对比，两个边上的对比一下</p>\n<p>然后 左边 2 节点的 右孩子 跟 右边 2 节点 的 左孩子 进行对比</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128114716085.png\" alt=\"image-20240128114716085\" /></p>\n<p>接着往下比较也是类似的 比如说 比较到 3 节点了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128114812764.png\" alt=\"image-20240128114812764\" /></p>\n<p>也是 左边 3 节点 的 左孩子 跟 右边 3 节点的 右孩子 进行比较</p>\n<p>左边 3 节点的 右孩子 跟 右边 3 节点的 左孩子 进行比较</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240128114955109.png\" alt=\"image-20240128114955109\" /></p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSymmetric</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//root 节点不用做比较 去比较 root 的 left 和 right 节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果 两边都是 null 说明也是一样的 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//left 和 right 不能同时为 null ，其中一个为 null 说明不对称</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 如果 左边的 值 和 右边的值不一样 说明不对称</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 1：判断 两边是否一样。2：判断内部两个是否一样</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "对称二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E4%BA%8C%E5%8F%89%E6%A0%91/%E4%BA%8C%E5%8F%89%E6%A0%91-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/",
            "title": "二叉树-深度优先遍历[递归和非递归的实现]",
            "date_published": "2024-01-27T11:58:35.132Z",
            "content_html": "<h1 id=\"二叉树-深度优先遍历\"><a class=\"anchor\" href=\"#二叉树-深度优先遍历\">#</a> 二叉树 - 深度优先遍历</h1>\n<p>对于 二叉树 而言它的 深度优先遍历 而 又可以分成 三种 分别是:</p>\n<ol>\n<li>pre-order: 前序遍历</li>\n<li>in-order: 中序遍历</li>\n<li>post-order: 后序遍历</li>\n</ol>\n<p>而这三种遍历方式 它们 又有 各自的规则，除了各自规则以外 它们有一个共同特点，就是要 遍历的过程中 <mark>深入到 叶子节点</mark></p>\n<p>也就是深入到 离 跟节点 更远的 叶子节点</p>\n<h3 id=\"下面演示-每一种遍历-是怎样工作的\"><a class=\"anchor\" href=\"#下面演示-每一种遍历-是怎样工作的\">#</a> 下面演示 每一种遍历 是怎样工作的:</h3>\n<p>下面是一个使用数组来表示的二叉树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125205457243.png\" alt=\"image-20240125205457243\" /></p>\n<p>树中的每一个节点 有两种颜色 一种就是 灰色的 表示这个节点在遍历的时候还没有访问过，还有一种是 绿色的 表示这个节点是被访问过了</p>\n<h3 id=\"我们先看遍历规则\"><a class=\"anchor\" href=\"#我们先看遍历规则\">#</a> 我们先看遍历规则:</h3>\n<h4 id=\"前序遍历规则\"><a class=\"anchor\" href=\"#前序遍历规则\">#</a> 前序遍历规则:</h4>\n<ol>\n<li>先访问该节点</li>\n<li>然后是左子树</li>\n<li>最后是右子树</li>\n</ol>\n<p>我们先从根节点开始，先访问根节点的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210317581.png\" alt=\"image-20240125210317581\" /></p>\n<p>访问了根节点后，然后是 左子树 访问 2 节点</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210419966.png\" alt=\"image-20240125210419966\" /></p>\n<p>下面再访问 2 的 左子树，也就是 4</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210441701.png\" alt=\"image-20240125210441701\" /></p>\n<p>4 没有 左右子树 说明 4 已经走完了，4 走完了 相当于 2 的左子树完成了  而 2 的右子树 是 null 所以 也算是完成了 至此 2 和 4 它俩作为 1 的左子树就 遍历完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210653199.png\" alt=\"image-20240125210653199\" /></p>\n<p>跟节点的 左子树 完成了，就轮到 根节点的 右子树了</p>\n<p>先访问 根节点的 右子树 打印 3</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210741366.png\" alt=\"image-20240125210741366\" /></p>\n<p>3 访问完成就 访问 3 的左子树 5 ,  5 由于没有左右子树 所以就算访问完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210818485.png\" alt=\"image-20240125210818485\" /></p>\n<p>然后再 访问 3 的右子树 6 的左右子树也没有 也算访问完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210900629.png\" alt=\"image-20240125210900629\" /></p>\n<p>最后 根节点的 左右子树 都完成了 那么 1 也算是完整的结束了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240125210942582.png\" alt=\"image-20240125210942582\" /></p>\n<p>所以整个 前序遍历打印出来的值为: 1,2,4,3,5,6</p>\n<h4 id=\"中序遍历\"><a class=\"anchor\" href=\"#中序遍历\">#</a> 中序遍历:</h4>\n<ol>\n<li>先访问左子树</li>\n<li>然后是该节点</li>\n<li>最后是右子树</li>\n</ol>\n<p>从根节点开始，第一个拿到的就是根节点 但是不能打印根节点的值，因为规则是 先得访问完根节点的 左子树 然后才能打印 根节点的值 也就是 2</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126153317899.png\" alt=\"image-20240126153317899\" /></p>\n<p>但是到了 2 也不能着急打印 2 的值，得先 访问 当前节点的左子树 也就是 4, 而 4 也不能直接打印类似的我们需要访问 4 的左子树 然而 4 没有左子树 那么 就打印 4 这个左子树就算完成了 接着访问 4 的右子树 但是 4 没有右子树 所以 4 就算访问完了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126153602094.png\" alt=\"image-20240126153602094\" /></p>\n<p>4 完成了 那么就 意味着 上一个节点 2 它的左子树遍历完成了，左子树 遍历完成了 就是 第二步了 可以打印 当前的 2 的值了</p>\n<p>2 没有 右子树 所以 2 整个 也算是完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192423383.png\" alt=\"image-20240126192423383\" /></p>\n<p>2 跟 4 作为 1 的左子树 完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192444669.png\" alt=\"image-20240126192444669\" /></p>\n<p>1 的左子树完成了 就可以打印 1 节点的值了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192512137.png\" alt=\"image-20240126192512137\" /></p>\n<p>接下来访问 1 的右子树，它不会直接打印 3 因为 它先进入 3 (右子树) 而 3 还有 左右子树 并没有结束 因此它需要先找到 3 的左子树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192629421.png\" alt=\"image-20240126192629421\" /></p>\n<p>5 没有左右子树 就算是遍历完成了，打印 5 的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192701205.png\" alt=\"image-20240126192701205\" /></p>\n<p>5 完成了 回到 3 打印 3</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192724301.png\" alt=\"image-20240126192724301\" /></p>\n<p>接下来访问 3 的右子树，同样的 先看 6 有没有左子树 没有就打印 6 然后再看 6 的右子树 也没有 直接结束</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126192740086.png\" alt=\"image-20240126192740086\" /></p>\n<p><strong>最终结果就是</strong>: 4, 2, 1, 5, 3, 6</p>\n<h4 id=\"后序遍历\"><a class=\"anchor\" href=\"#后序遍历\">#</a> 后序遍历:</h4>\n<ol>\n<li>先访问左子树</li>\n<li>然后是右子树</li>\n<li>最后是该节点</li>\n</ol>\n<p>首先它不能直接打印 根节点 所以先看 根节点的左子树 再看 当前节点是否有左右子树 如何有 就先访问 左子树 直到深部</p>\n<p>如下图就是：根节点 1 它有左子树 2 而 2 又有左子树 4 所以访问左子树直到节点 4 的位置 为止 4 没有左子树就看右子树 也没有右子树那么直接打印 4 的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193244860.png\" alt=\"image-20240126193244860\" /></p>\n<p>4 打印完成了 它作为 2 的左子树就完成了 回到 节点 2 看 2 的右子树 却没有 右子树 那么就打印 2 的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193338410.png\" alt=\"image-20240126193338410\" /></p>\n<p>2 和 4 完成了 就相当于 1 的左子树完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193359413.png\" alt=\"image-20240126193359413\" /></p>\n<p>接着访问 1 的右子树 进入 3 而 3 有左右子树 所以 进入 左子树 5 而 5 没有左右子树那么就 打印 5 的值，3 的左子树就算完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193529967.png\" alt=\"image-20240126193529967\" /></p>\n<p>5 打印了 看 3 的右子树 6 而 6 没有左右子树 那么直接打印 6 的值，那么 3 的右子树也算完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193610941.png\" alt=\"image-20240126193610941\" /></p>\n<p>3 的左右字数完成了 就可以 打印 3 的值了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193902502.png\" alt=\"image-20240126193902502\" /></p>\n<p>3 , 5 , 6 它们是 1 的右子树，那么 1 的左右子树 都打印完成 就该 打印 1 的值了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126193946876.png\" alt=\"image-20240126193946876\" /></p>\n<p><strong>最终结果</strong>: 4, 2, 5, 6, 3, 1</p>\n<h2 id=\"代码实现-递归实现-前序遍历-中序遍历-后序遍历\"><a class=\"anchor\" href=\"#代码实现-递归实现-前序遍历-中序遍历-后序遍历\">#</a> 代码实现 - 递归实现：前序遍历，中序遍历，后序遍历</h2>\n<p>我们要遍历的 二叉树 如下图所示</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240126233751871.png\" alt=\"image-20240126233751871\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个二叉树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> binaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树 (后面使用递归方式创建二叉树)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===前序遍历===\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1 2 4 3 5 6</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===中序遍历===\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 4 2 1 5 3 6</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===后序遍历===\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 4 2 5 6 3 1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 定义 BinaryTree 二叉树</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 前序遍历，遍历是从根节点 (root) 开始的</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 后序遍历</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> no <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// 前序遍历方法</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// 先输出父节点</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树前序遍历</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树前序遍历</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">// 中序遍历方法</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树中序遍历</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树中序遍历</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">// 后序遍历方法</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树后序遍历</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树后序遍历</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果:</p>\n<pre><code>===前序遍历===\n1\n2\n4\n3\n5\n6\n===中序遍历===\n4\n2\n1\n5\n3\n6\n===后序遍历===\n4\n2\n5\n6\n3\n1\n</code></pre>\n<h2 id=\"非递归实现-前序遍历-中序遍历\"><a class=\"anchor\" href=\"#非递归实现-前序遍历-中序遍历\">#</a> 非递归实现：前序遍历，中序遍历</h2>\n<p><strong>三种遍历的共同规律</strong>:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127001714441.png\" alt=\"image-20240127001714441\" /></p>\n<p>前序遍历打印的值是：1，2，4，3，5，6</p>\n<p>中序遍历打印的值是：4，2，1，5，3，6</p>\n<p>后序遍历打印的值是：4，2，5，6，3，1</p>\n<p>它们好像也没啥规律啊，打印的值也不一样</p>\n<p>虽然它们打印值的顺序是有先有后，但是它们走的路径是一样的。这三种遍历方式在树中走的路径是一样的，它们都需要从根节点出发，先走左边。左边发现没有了 该回头走了 2 发现没有右子树 所以又从 2 回到 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127002213528.png\" alt=\"image-20240127002213528\" /></p>\n<p>这是左边子树走完了，那么接下来走右边从 1 到 3 然后 3 到 5 ，5 发现没路了，那么从 5 回到 3 再看右边有没有 结果 右边有就从 3 到 6 ，6 发现没路了 就 回到 3 最后从 3 回到 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127002357606.png\" alt=\"image-20240127002357606\" /></p>\n<p>这就走完了 一圈了</p>\n<p>根据上图分析得出 它们打印的值 不一样 但是 它们走的路径却是 一样的，我们就从这点出发来看 非递归的实现方式</p>\n<p>我们先编写让 遍历 沿着左边路径 走</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 把当前节点 更新成 当前节点的左孩子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>1\n2\n4\n</code></pre>\n<p>现在它可以沿着 左边路径 走了 但是问题 来了我们怎么让 它 把这颗二叉树 走全呢？</p>\n<p>这里有一个很关键的步骤就是我得沿着 4 向回走了，因为我们来的时候 1，2，4 向回走 才能找到 它右边后续的节点</p>\n<p>向回走就引出一个新的问题了，就是我们需要让它记住来时的路</p>\n<p>比如说我们已经走到 4 了，我们向回走就需要知道 2，但是 4 并没有一个属性来记录它的父节点是谁因此它找不到父节点 2，也就是找不到来时的路，那怎么办呢？但是我们可以考虑使用一种数据结构来记录 每个节点来时的路</p>\n<p>什么数据结构比较合适呢？答案是 使用 <mark>栈</mark> 比较合适</p>\n<p>我们 走的时候 经过一个节点 就把 这个节点记录到 栈里，比如说 先经过的是 1 那就在循环结束前把 1 存入到栈里</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127004429521.png\" alt=\"image-20240127004429521\" /></p>\n<p>然后继续向左走，走到 2 了 那么就把 2 也放到 栈里</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127004520894.png\" alt=\"image-20240127004520894\" /></p>\n<p>然后走到 4 了最后把 4 也记录到 栈里</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127004559737.png\" alt=\"image-20240127004559737\" /></p>\n<p>4 左边的路不通了 没有左孩子了，说明走到头了 该向回走了，那么 来的时候 1，2，4 这个顺序 回的时候我就从 栈 弹出 4，2，1 的每个元素就可以了，这样就通过栈就记录了它来时的路</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>经过的路：1\n经过的路：2\n经过的路：4\n回来的路：4\n回来的路：2\n回来的路：1\n</code></pre>\n<p>这样我们就解决了 左边半个路 的问题了 那右边半个呢？</p>\n<p>我们只需要将 回去的路的 右边节点赋值给当前的 cur 此时 cur 就不等于 null 了就会继续执行 右边的操作了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>经过的路：1\n经过的路：2\n经过的路：4\n回来的路：4\n回来的路：2\n回来的路：1\n经过的路：3\n经过的路：5\n回来的路：5\n回来的路：3\n经过的路：6\n回来的路：6\n</code></pre>\n<p>上面的代码就可以完成绕树一圈，而上面的代码同样可以解决两个问题别分是 前序遍历 和 中序遍历</p>\n<p>将代码稍作修改 你就会发现这就是  前序遍历 的值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// System.out.println (\"回来的路：\" + pop);</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>经过的路：1\n经过的路：2\n经过的路：4\n经过的路：3\n经过的路：5\n经过的路：6\n</code></pre>\n<p>再稍作修改打印的就是中序遍历了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// System.out.println (\"经过的路：\" + cur.getNo ());</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>回来的路：4\n回来的路：2\n回来的路：1\n回来的路：5\n回来的路：3\n回来的路：6\n</code></pre>\n<p>所以上面的代码既可以处理前序遍历 又 可以处理中序遍历</p>\n<h3 id=\"图解非递归前序遍历\"><a class=\"anchor\" href=\"#图解非递归前序遍历\">#</a> 图解非递归前序遍历</h3>\n<p><strong>下面通过图解的方式来理解上述的非递归实现 深度优先遍历 的代码</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127084704473.png\" alt=\"image-20240127084704473\" /></p>\n<p>图中 橙色背景 的 节点 代表着 cur 节点，前序遍历 是 该值，左值，右值 的打印顺序 所以当前的 cur 也就是 root 节点可以先打印，打印完了就 压入栈中</p>\n<p>PS：上面是二叉树，下面是 栈 用于存储来时的路</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127084853485.png\" alt=\"image-20240127084853485\" /></p>\n<p>上述操作 代表了 &lt;--- 所指向的代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//   &lt;---</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路       &lt;---</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127085115429.png\" alt=\"image-20240127085115429\" /></p>\n<p>按照 值，左，右的顺序接下来我们就要处理它的左孩子，找到当前节点的左孩子 将来 把左孩子 作为下一轮的 循环节点 也就是 2</p>\n<p>上述操作 代表了 &lt;--- 所指向的代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//         &lt;---</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着打印 2 当前的值并压入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127085341229.png\" alt=\"image-20240127085341229\" /></p>\n<p>然后接着处理 左孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127085421291.png\" alt=\"image-20240127085421291\" /></p>\n<p>同样的 打印它的值并压入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127085456653.png\" alt=\"image-20240127085456653\" /></p>\n<p>再处理 4 的左孩子时发现 左孩子是 null 了，也就是这条路走到头了 此时代码中 if 条件已经不成立了 就会进入 else 中 意味着该往回走了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127085632013.png\" alt=\"image-20240127085632013\" /></p>\n<p>此时它就需要 弹栈 处理右孩子了，接下来 就将 4 弹出 往回走</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127085741090.png\" alt=\"image-20240127085741090\" /></p>\n<p>弹出之后检查它有没有 右孩子，如果是 null 的话 那么就继续向上走 继续走来时的路</p>\n<p>上述操作  代表了 &lt;--- 所指向的代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//         &lt;--- 左孩子 访问到头了就执行 else 操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//     &lt;---  弹出来时的路，也就是来时的上个节点 (往回走)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//      &lt;---  获取当前节点的 右孩子如果没有就是 null</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果 4 没有右孩子那么就 继续弹栈把 2 给弹出栈</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127090337979.png\" alt=\"image-20240127090337979\" /></p>\n<p>然后看下 2 有没有 右孩子，而 2 也没有 右孩子 那就打印值 之后继续 向回走，把 1 弹出栈，此时栈中没有来时的路了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127090424356.png\" alt=\"image-20240127090424356\" /></p>\n<p>1 弹出之后 1 有右孩子，下面把 1 的右孩子 赋值给了 cur ，cur 再次进入循环，准备处理 3 ，先打印 3 的值并且把 3 入栈</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127090600563.png\" alt=\"image-20240127090600563\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 下次循环 cur 就是 3 它不是 null 了而 栈是 空的 满足了一个条件继续操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//cur 不为 null 而是 3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"经过的路：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印 3 的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//         &lt;--- 左孩子 访问到头了就执行 else 操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//     &lt;---  1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      cur <span class=\"token operator\">=</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//      &lt;---  pop.getRight () = 3 ===>  1 &lt;= 赋值 = 3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>值，左，右的顺序处理 左孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127090826908.png\" alt=\"image-20240127090826908\" /></p>\n<p>同样打印 5 的值 并且 入栈，然后处理 左孩子 但是 5 没有左孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127090921275.png\" alt=\"\" /></p>\n<p>没有左孩子那么 cur 就是 null 了，就可以操作 else 往回走了，把 5 弹出栈 再看 5 有没有 右孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127091046740.png\" alt=\"image-20240127091046740\" /></p>\n<p>结果 5 也没有右孩子 可处理 那就继续 往回走 弹出 3 再看 3 是否有 右孩子 可处理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127091133714.png\" alt=\"image-20240127091133714\" /></p>\n<p>3 有右孩子，那么就将 3 的右孩子 作为 cur 继续下一轮的循环操作，下轮循环 将 6 打印 并 入栈</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127091245472.png\" alt=\"image-20240127091245472\" /></p>\n<p>同样的 6 接着 处理 左孩子 没有 左孩子那么 cur 为 null 执行 else 弹出 6 并 打印  6 然后看有没有右孩子 结果没有 右孩子那么 cur 为 null 栈也为空 循环停止 程序结束！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127091438611.png\" alt=\"image-20240127091438611\" /></p>\n<p>上面就是整个，前序遍历的 执行流程</p>\n<h3 id=\"图解非递归中序遍历\"><a class=\"anchor\" href=\"#图解非递归中序遍历\">#</a> 图解非递归中序遍历</h3>\n<p>中序遍历打印值的操作 跟 前序遍历不同 我们先看下 中序遍历打印值的 规则：</p>\n<ol>\n<li>左孩子</li>\n<li>值</li>\n<li>右孩子</li>\n</ol>\n<p>从上面规则可以看出我们 在进入 while 循环 进入 if 判断时我们不能直接就打印 当前值 而是 需要先打印 左孩子的值</p>\n<p>因此 打印值的 操作 我们需要 放到 回来的时候再打印，因为回来的时候意味着它的左子树 都完成了</p>\n<p>刚开始让它按照我们规划的路线沿着左边走到头</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127113608322.png\" alt=\"image-20240127113608322\" /></p>\n<p>走到头之后 cur 就等于 null 了，之后进入到 else 往回走，弹出 4 并打印</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127113714829.png\" alt=\"image-20240127113714829\" /></p>\n<p>4 没有右孩子 算是完成了，接着弹出 2 并 打印 2</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127113754415.png\" alt=\"image-20240127113754415\" /></p>\n<p>2 也没有 右孩子 那么就 弹出 1 打印 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127113836904.png\" alt=\"image-20240127113836904\" /></p>\n<p>处理 1 的右孩子，1 的右孩子是 3 同样不能立刻打印 先沿着左边路走到头，没有左孩子了 回来的时候再打印</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114001864.png\" alt=\"image-20240127114001864\" /></p>\n<p>走到 5 没有左子树了 回来的时候 弹出 5 并 打印 5 的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114044174.png\" alt=\"image-20240127114044174\" /></p>\n<p>5 也没有 右孩子 接着弹出 3 打印 3 的值 并 找 3 的右孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114144345.png\" alt=\"image-20240127114144345\" /></p>\n<p>3 有右孩子 是 6 那么 打印 6 的值 并 入栈，然后 看 6 有没有 左孩子 没有就走 else 弹出 6 并打印然后看 6 有没有 右孩子 没有就 结束循环了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114329817.png\" alt=\"image-20240127114329817\" /></p>\n<h2 id=\"非递归实现后序遍历\"><a class=\"anchor\" href=\"#非递归实现后序遍历\">#</a> 非递归实现：后序遍历</h2>\n<p>后序遍历的 while 循环里面的 if 判断是和 前序 和 中序 是一样的 不用改，只有在 else 回来的时候需要改一下</p>\n<p>为了把 这个问题解释清楚 先用 中序遍历 举个例子</p>\n<p>下面二叉树 给 2 的右孩子 多加了一个 节点 7</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114604689.png\" alt=\"image-20240127114604689\" /></p>\n<p>我们主要看一下回来的时候的一些注意事项，去的就不用说了，反正沿着左边的路走到头</p>\n<p>走到头并且到经到过的节点 入栈中 就可以了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114713129.png\" alt=\"image-20240127114713129\" /></p>\n<p>那我们看 它回去的时候会做什么</p>\n<p>每次回去的时候 都会把 栈中的 节点 要弹出</p>\n<p>比如说 4 这个节点 进行弹出 并打印 4 的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127114922771.png\" alt=\"image-20240127114922771\" /></p>\n<p>接下来从 4 回到 2 ，2 也被弹出</p>\n<p>那 2 还有 右孩子啊 ，将来 从 7 回来的时候 难道 用不着这个 2 了吗？</p>\n<p><mark>注意</mark>：上面的前序和中序 这两种情况确实用不着 2 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127115032673.png\" alt=\"image-20240127115032673\" /></p>\n<p>为什么呢？原因如下：</p>\n<p>我们分析一下 中序遍历的 情况 是怎么样的</p>\n<p>中序遍历：左，值，右</p>\n<p>所以它把 2 打印完了 接下来就 遍历 右节点 也就是 7 既然 2 已经打印完了 那么 它 回来的时候 就不会再 经过 2 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127144217040.png\" alt=\"image-20240127144217040\" /></p>\n<p>上图中 7 处理完成后 回来时就直接到 1 节点了</p>\n<p>上面 分析的中序情况就是 前序 ，中序 和 后序 不一样的地方。</p>\n<p>比如还是刚才这个情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127144511300.png\" alt=\"image-20240127144511300\" /></p>\n<p>比如说 我要向回走了 从 4 走到 2，如果我将 2 从 栈中弹出来 那就不对了，因为后序遍历 它的规则是 左，右，值。</p>\n<p>它需要把 2 的左子树和 右子树 处理完了 才能 打印 2 的值，如果把 2 弹出了 将来 7 回来的时候就找不到 2 的值了，这是后序遍历跟前面的 遍历不一样的地方</p>\n<p>所以我们需要在弹栈的时候多加一些条件，不是在所有的情况下都需要在回来时立马弹栈。</p>\n<p>我们可能需要让这个 2 节点在栈里面多留一会儿，等它的右子树处理完了我们才能弹栈，这是后序 跟 前两者的区别</p>\n<p>代码实现如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// System.out.println (\"经过的路：\" + cur.getNo ());</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">HeroNode</span> peek <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断右子树是否完成了，因为走到 else 左子树肯定是完成了不然不会走到 else　里</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 当 当前节点的右子树为 null 时，表示右子树处理完成了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果当右子树不为 null 的时候，我们应该进入 右子树进行下一轮的处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         cur <span class=\"token operator\">=</span> peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当进入到 else 时肯定是 左子树已经 处理完了 没有右子树了，当进入 else 时 获取 栈顶元素 判断它有没有 右子树，如果没有那就弹出 栈顶元素并 打印 继续下一论循环，如果有右子树那么就 进入到右子树进行下一轮的循环</p>\n<p>但是光是上面这么写只是满足了一个条件而已如果你直接 Run 就会发现死循环了如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/recording.gif\" alt=\"recording\" /></p>\n<p>但是还有一个条件，不光是这一个条件，我们看如下的 二叉树进行分析：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127150018953.png\" alt=\"image-20240127150018953\" /></p>\n<p>上面代码是 符合 栈顶 元素 它的 右子树 是否为 null ，如果为 null 就等于没有右子树 也就意味着 右子树算是处理完了</p>\n<p>那符合这种情况的都有哪些节点呢？</p>\n<p>根据上图中：4，7，5，6 都是符合的，但是呢 还有几个节点比如说 1，2，3。比如说 将来 我的 栈顶 是 2 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240127150355001.png\" alt=\"image-20240127150355001\" /></p>\n<p>2 有右孩子 它的 right 不为 null ，这个时候我们怎么判断它的右子树是否处理完成了呢？</p>\n<p>这里需要用到一个技巧：</p>\n<p>首先我去记录一下 最近 一次 弹栈 的元素，比如说 4 已经处理完了 弹栈了，那我就用一个变量将它记录起来</p>\n<p>记录下来后我们用在 比如说 4 往 2 走，从 4 回来 说明 2 的右孩子 还没处理呢，这时 2 应该保留在 栈里不要弹栈</p>\n<p>如果是上次弹栈是 7 从 7 往回走这时就需要弹栈了，因为 7 是 2 的右孩子 都从 7 开始往回走了就说明右孩子处理完了，这时 2 这个节点是可以弹栈的</p>\n<p>那我们就可以 用一个临时变量记录 上次 弹栈的 元素，记录下来 我每次去判断栈顶元素的 右孩子看看它是不是跟上一次 记录下来的临时变量 是相等的，如果它俩相等就说明 右子树处理完了</p>\n<h4 id=\"最终实现代码如下\"><a class=\"anchor\" href=\"#最终实现代码如下\">#</a> 最终实现代码如下：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个二叉树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> binaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树 (后面使用递归方式创建二叉树)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最近一次弹栈的元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// System.out.println (\"经过的路：\" + cur.getNo ());</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">// 打印 回去的路</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">HeroNode</span> peek <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断右子树是否完成了，因为走到 else 左子树肯定是完成了不然不会走到 else　里</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 当 当前节点的右子树为 null 时，表示右子树处理完成了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回来的路：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果当右子树不为 null 的时候，我们应该进入 右子树进行下一轮的处理</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    cur <span class=\"token operator\">=</span> peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 定义 BinaryTree 二叉树</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> no <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>回来的路：4\n回来的路：7\n回来的路：2\n回来的路：5\n回来的路：6\n回来的路：3\n回来的路：1\n</code></pre>\n<h2 id=\"优化非递归遍历-记忆一套代码模板-基于后序遍历修改\"><a class=\"anchor\" href=\"#优化非递归遍历-记忆一套代码模板-基于后序遍历修改\">#</a> 优化非递归遍历 - 记忆一套代码模板 - 基于后序遍历修改</h2>\n<p>我们发现 它们的代码还是非常接近的 尤其是 前序 和 中序，就是打印的位置不同，后序其实也跟前两种差不多 只是在 向回走的时候多了 一些条件检查</p>\n<p>那能不能将这三份代码结合起来，写一个统一的模板 能够同时处理三种遍历呢？答案是 可以的！</p>\n<p>这样的好处是，将来记忆一套代码模板 就不能去记 三份了</p>\n<p>我们基于后序遍历的代码来进行修改，因为后序遍历它走的路是最全的，它其实是 绕着所有节点走一圈，而对于前序中序呢 它会提前去吧栈顶元素 弹出，所以它会少走几步路，所以我们从后序遍历代码的基础上进行修改</p>\n<p>最终代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个二叉树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> binaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树 (后面使用递归方式创建二叉树)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> cur <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代表当前节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> pop <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最近一次弹栈的元素</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 如果 沿着 左边的路还没走完 或者 栈中回去的路还没走完 那么就进行循环操作</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 判断 去的路是否还有</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压入栈 ， 为了记住回来的路</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前：\"</span> <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// 待处理左子树</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">HeroNode</span> peek <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断右子树是否完成了，因为走到 else 左子树肯定是完成了不然不会走到 else　里</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 当 当前节点的右子树为 null 时，表示右子树处理完成了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中：\"</span> <span class=\"token operator\">+</span> peek<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 右子树 处理完成</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>               <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后：\"</span> <span class=\"token operator\">+</span> pop<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token comment\">// 待处理 右子树</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果当右子树不为 null 的时候，我们应该进入 右子树进行下一轮的处理</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中：\"</span> <span class=\"token operator\">+</span> peek<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token comment\">// 我要处理右子树</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    cur <span class=\"token operator\">=</span> peek<span class=\"token punctuation\">.</span><span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 定义 BinaryTree 二叉树</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> no <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>前：1\n前：2\n前：4\n中：4\n后：4\n中：4\n中：2\n前：7\n中：7\n后：7\n中：7\n后：2\n中：1\n前：3\n前：5\n中：5\n后：5\n中：5\n中：3\n前：6\n中：6\n后：6\n中：6\n后：3\n后：1\n</code></pre>\n<p>这样我们就是用一套代码实现了 通用的 非递归 - 前，中，后序遍历了。</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "数据结构与算法",
                "二叉树",
                "java",
                "计算机学科",
                "数据结构与算法",
                "树结构",
                "二叉树",
                "二叉树的遍历"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/video/movie/Reality/%E5%8A%A0%E8%8F%B2%E7%8C%AB%E7%94%B5%E5%BD%B1/",
            "url": "https://pigpigletsgo.github.io/video/movie/Reality/%E5%8A%A0%E8%8F%B2%E7%8C%AB%E7%94%B5%E5%BD%B1/",
            "title": "加菲猫-电影",
            "date_published": "2024-01-24T10:48:47.076Z",
            "content_html": "<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"加菲猫1\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%8E%AC%20%E7%94%B5%E5%BD%B1%E7%8F%8D%E8%97%8F/%F0%9F%93%81%20%E6%97%A0%E5%AD%97%E5%B9%95/%F0%9F%93%81%20%E5%8A%A0%E8%8F%B2%E7%8C%AB1/Garfield.2004.mp4\"},{\"name\":\"加菲猫2\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%8E%AC%20%E7%94%B5%E5%BD%B1%E7%8F%8D%E8%97%8F/%F0%9F%93%81%20%E6%97%A0%E5%AD%97%E5%B9%95/%F0%9F%93%81%20%E5%8A%A0%E8%8F%B2%E7%8C%AB2/Garfield.2006.mp4\"}]'></div></div></p>\n",
            "tags": [
                "video",
                "movie",
                "Reality",
                "电影"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/video/movie/animation/%E7%90%A6%E5%AE%AB%E5%A5%87%E9%AA%8F-%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/",
            "url": "https://pigpigletsgo.github.io/video/movie/animation/%E7%90%A6%E5%AE%AB%E5%A5%87%E9%AA%8F-%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/",
            "title": "琦宫奇骏-千与千寻",
            "date_published": "2024-01-24T10:48:47.064Z",
            "content_html": "<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"千与千寻\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%8E%AC%20%E7%94%B5%E5%BD%B1%E7%8F%8D%E8%97%8F/%F0%9F%93%81%20%E6%97%A0%E5%AD%97%E5%B9%95/%F0%9F%93%81%20%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/Spirited-Away.mp4\"}]'></div></div></p>\n",
            "tags": [
                "video",
                "movie",
                "animation",
                "动画电影"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/video/movie/animation/%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA/",
            "url": "https://pigpigletsgo.github.io/video/movie/animation/%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA/",
            "title": "冰河世纪",
            "date_published": "2024-01-24T10:48:47.060Z",
            "content_html": "<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"冰河世纪1\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%90%BC%20%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1/%F0%9F%93%81%20%E7%94%A8%E7%94%B5%E8%84%91%E7%9C%8B/%F0%9F%93%81%20%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA/%E5%86%B0%E5%B7%9D%E6%97%B6%E4%BB%A3.mp4\"},{\"name\":\"冰河世纪2\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%90%BC%20%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1/%F0%9F%93%81%20%E7%94%A8%E7%94%B5%E8%84%91%E7%9C%8B/%F0%9F%93%81%20%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA2/%E5%86%B0%E5%B7%9D%E6%97%B6%E4%BB%A32.mp4\"},{\"name\":\"冰河世纪3\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%90%BC%20%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1/%F0%9F%93%81%20%E7%94%A8%E7%94%B5%E8%84%91%E7%9C%8B/%F0%9F%93%81%20%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA3/%E5%86%B0%E5%B7%9D%E6%97%B6%E4%BB%A33.mp4\"}]'></div></div></p>\n",
            "tags": [
                "video",
                "movie",
                "animation",
                "动画电影"
            ]
        }
    ]
}