{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dkx の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/",
            "title": "二叉树的层序遍历",
            "date_published": "2024-01-08T02:23:50.623Z",
            "content_html": "<h1 id=\"二叉树的层序遍历\"><a class=\"anchor\" href=\"#二叉树的层序遍历\">#</a> 二叉树的层序遍历</h1>\n<p>给你二叉树的根节点  <code>root</code>  ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071605011.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[9,20],[15,7]]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [1]\n输出：[[1]]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：root = []\n输出：[]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目在范围  <code>[0, 2000]</code>  内</li>\n<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n<h2 id=\"题目要求分析\"><a class=\"anchor\" href=\"#题目要求分析\">#</a> 题目要求分析：</h2>\n<p>对二叉树进行一个层序遍历，顺序是一层一层的遍历</p>\n<pre><code>\t   1\n\t /   \\\n\t2\t\t 3\n  /  \\   /   \\\n 4\t\t5 6\t  7\n</code></pre>\n<p>从最顶层的数据节点也就是 1</p>\n<pre><code>1\n</code></pre>\n<p>然后就是第二层的节点</p>\n<pre><code>1\t2\t3\n</code></pre>\n<p>然后就是第三层，有四个数据节点</p>\n<pre><code>1\t2\t3\t4\t5\t6\t7\n</code></pre>\n<p>也就是说，我们遍历二叉树的顺序是按一层一层来的，将来遍历出来的应该就是 1, 2, 3, 4, 5, 6, 7。这叫层序遍历</p>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<pre><code>\t   1\n\t /   \\\n\t2\t\t 3\n  /  \\   /   \\\n 4\t\t5 6\t  7\n \n # 我们可以设定一个队列\n 头[]尾\n # 我们可以把第一层 根节点 加入到 队列里面去\n 头[1]尾\n # 每次 从 队列 里 获取一个元素 \n 1 # 把刚才的1 弹出，判断1是否有左右孩子，如果有比如说 左孩子2 那么就加入到队列里，右孩子3也加入到队列里面去\n 头[2, 3]尾 # 此时队列里面存储了 第二层的数据\n # 此时 第一层的数据 已经遍历完了\n # 遍历第二层的数据，将队列 头部的 元素 弹出来\n 1 2 # 把2 弹出，判断2是否有左右孩子，有就加入到队列里面\n 头[3, 4, 5]尾 # 第三层的左半个节点就添加完了，重复这个过程\n 1 2 3 # 把3 弹出， 判断是否有 左右孩子，有就加入到队列里面\n 头[5, 6, 7]尾 # 第三层的右半个节点就添加完了，重复这个过程\n 1 2 3 4 # 弹出4 判断是否有左右孩子，判断没有了，队列中就不需要加入节点了\n 头[6, 7]尾\n 1 2 3 4 5 # 弹出5 判断是否有左右孩子，判断没有了，队列中就不需要加入节点了\n 头[7]尾\n 1 2 3 4 5 6 # 弹出6 判断是否有左右孩子，判断没有了，队列中就不需要加入节点了\n 头[]尾\n 1 2 3 4 5 7 # 弹出7 判断是否有左右孩子，判断没有了，队列中就不需要加入节点了\n</code></pre>\n<ul>\n<li>我们已知 第一个节点 是 root 节点 根节点，那么下面几层呢 都需要间接的获得</li>\n</ul>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> c1<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            c2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            c2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        c1 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"leetcode中-精选-题解-分享\"><a class=\"anchor\" href=\"#leetcode中-精选-题解-分享\">#</a> leetcode 中 精选 题解 分享</h1>\n<p>leetcode 中 精选 的 解题 分享：</p>\n<p>分享地址 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9iaW5hcnktdHJlZS1sZXZlbC1vcmRlci10cmF2ZXJzYWwvc29sdXRpb25zLzI0NDg1My9iZnMtZGUtc2hpLXlvbmctY2hhbmctamluZy16b25nLWppZS1jZW5nLXh1LWJpYW4tbC8=\">https://leetcode.cn/problems/binary-tree-level-order-traversal/solutions/244853/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/</span></p>\n<h2 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h2>\n<p>本文将会讲解为什么这道题适合用广度优先搜索（BFS），以及 BFS 适用于什么样的场景。</p>\n<p>DFS（深度优先搜索）和 BFS（广度优先搜索）就像孪生兄弟，提到一个总是想起另一个。然而在实际使用中，我们用 DFS 的时候远远多于 BFS。那么，是不是 BFS 就没有什么用呢？</p>\n<p>如果我们使用 DFS/BFS 只是为了遍历一棵树、一张图上的所有结点的话，那么 DFS 和 BFS 的能力没什么差别，我们当然更倾向于更方便写、空间复杂度更低的 DFS 遍历。不过，某些使用场景是 DFS 做不到的，只能使用 BFS 遍历。这就是本文要介绍的两个场景：「层序遍历」、「最短路径」。</p>\n<p>本文包括以下内容：</p>\n<p>DFS 与 BFS 的特点比较<br />\n BFS 的适用场景<br />\n如何用 BFS 进行层序遍历<br />\n如何用 BFS 求解最短路径问题<br />\n DFS 与 BFS<br />\n 让我们先看看在二叉树上进行 DFS 遍历和 BFS 遍历的代码比较。</p>\n<p>DFS 遍历使用 递归：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>BFS 遍历使用<strong>队列</strong>数据结构：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Java 的 pop 写作 poll ()</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只是比较两段代码的话，最直观的感受就是：DFS 遍历的代码比 BFS 简洁太多了！这是因为递归的方式隐含地使用了系统的 栈，我们不需要自己维护一个数据结构。如果只是简单地将二叉树遍历一遍，那么 DFS 显然是更方便的选择。</p>\n<p>虽然 DFS 与 BFS 都是将二叉树的所有结点遍历了一遍，但它们遍历结点的顺序不同</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071748839.gif\" alt=\"DFS 与 BFS 对比\" /></p>\n<p>这个遍历顺序也是 BFS 能够用来解「层序遍历」、「最短路径」问题的根本原因。下面，我们结合几道例题来讲讲 BFS 是如何求解层序遍历和最短路径问题的。</p>\n<p>BFS 的应用一：层序遍历<br />\n BFS 的层序遍历应用就是本题了：</p>\n<p>LeetCode 102. Binary Tree Level Order Traversal 二叉树的层序遍历（Medium）</p>\n<p>给定一个二叉树，返回其按层序遍历得到的节点值。 层序遍历即逐层地、从左到右访问所有结点。</p>\n<p>什么是层序遍历呢？简单来说，层序遍历就是把二叉树分层，然后每一层从左到右遍历</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071749831.jpeg\" alt=\"二叉树的层序遍历\" /></p>\n<p>乍一看来，这个遍历顺序和 BFS 是一样的，我们可以直接用 BFS 得出层序遍历结果。然而，层序遍历要求的输入结果和 BFS 是不同的。层序遍历要求我们区分每一层，也就是返回一个二维数组。而 BFS 的遍历结果是一个一维数组，无法区分每一层。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071749563.jpeg\" alt=\"BFS 遍历与层序遍历的输出结果不同\" /></p>\n<p>那么，怎么给 BFS 遍历的结果分层呢？我们首先来观察一下 BFS 遍历的过程中，结点进队列和出队列的过程：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071749442.gif\" alt=\"BFS 遍历的过程（动图）\" /></p>\n<p>截取 BFS 遍历过程中的某个时刻</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071749419.jpeg\" alt=\"BFS 遍历中某个时刻队列的状态\" /></p>\n<p>可以看到，此时队列中的结点是 3、4、5，分别来自第 1 层和第 2 层。这个时候，第 1 层的结点还没出完，第 2 层的结点就进来了，而且两层的结点在队列中紧挨在一起，我们 无法区分队列中的结点来自哪一层。</p>\n<p>因此，我们需要稍微修改一下代码，在每一层遍历开始前，先记录队列中的结点数量 n（也就是这一层的结点数量），然后一口气处理完这一层的 n 个结点</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二叉树的层序遍历</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 变量 i 无实际意义，只是为了循环 n 次</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样，我们就将 BFS 遍历改造成了层序遍历。在遍历的过程中，结点进队列和出队列的过程为</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401071750587.gif\" alt=\"img\" /></p>\n<p>可以看到，在 while 循环的每一轮中，都是将当前层的所有结点出队列，再将下一层的所有结点入队列，这样就实现了层序遍历</p>\n<p>最终我们得到的题解代码为:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> level <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            level<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "编程题",
                "二叉树",
                "广度优先搜索"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/math/100%E4%BB%A5%E5%86%85%E5%8A%A0%E5%87%8F%E6%B3%95%E9%80%9F%E7%AE%97/",
            "url": "https://pigpigletsgo.github.io/math/100%E4%BB%A5%E5%86%85%E5%8A%A0%E5%87%8F%E6%B3%95%E9%80%9F%E7%AE%97/",
            "title": "100以内加减法速算技巧",
            "date_published": "2024-01-06T12:21:40.453Z",
            "content_html": "<h1 id=\"100以内加减法速算技巧\"><a class=\"anchor\" href=\"#100以内加减法速算技巧\">#</a> 100 以内加减法速算技巧</h1>\n<h2 id=\"不进位加法\"><a class=\"anchor\" href=\"#不进位加法\">#</a> 不进位加法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>23</mn><mo>+</mo><mn>34</mn><mo>=</mo><mn>57</mn></mrow><annotation encoding=\"application/x-tex\">23 + 34 = 57\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span></span></span></p>\n<p>十位：头 + 头 = 头</p>\n<p>个位：尾 + 尾 = 尾</p>\n<h2 id=\"进位加法\"><a class=\"anchor\" href=\"#进位加法\">#</a> 进位加法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>36</mn><mo>+</mo><mn>28</mn><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">36 + 28 = 64\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p>十位：头 + 头 + 1 = 头</p>\n<p>个位：尾 - 尾的补数 = 尾</p>\n<ul>\n<li>补数指的是 尾数 凑够 10 的数 是多少 比如 8 凑够 10 就是 2</li>\n</ul>\n<h2 id=\"不退位减法\"><a class=\"anchor\" href=\"#不退位减法\">#</a> 不退位减法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>46</mn><mo>−</mo><mn>25</mn><mo>=</mo><mn>21</mn></mrow><annotation encoding=\"application/x-tex\">46 - 25 = 21\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>十位：头 - 头 = 头</p>\n<p>个位：尾 - 尾 = 尾</p>\n<h2 id=\"退位减法\"><a class=\"anchor\" href=\"#退位减法\">#</a> 退位减法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>47</mn><mo>−</mo><mn>29</mn><mo>=</mo><mn>18</mn></mrow><annotation encoding=\"application/x-tex\">47 - 29 = 18\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span></span></span></p>\n<p>十位：头 - 头 - 1 = 头</p>\n<p>个位：尾 + 尾的补数 = 尾</p>\n<ul>\n<li>补数指的是 尾数 凑够 10 的数 是多少 比如 9 凑够 10 就是 1</li>\n</ul>\n",
            "tags": [
                "math",
                "math",
                "速算技巧",
                "加法",
                "减法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/bug/ClassNotFoundException/",
            "url": "https://pigpigletsgo.github.io/bug/ClassNotFoundException/",
            "title": "java.lang.ClassNotFoundException:javax.xml.bind.DatatypeConverter",
            "date_published": "2024-01-06T03:15:25.988Z",
            "content_html": "<h3 id=\"javalangclassnotfoundexceptionjavaxxmlbinddatatypeconverter\"><a class=\"anchor\" href=\"#javalangclassnotfoundexceptionjavaxxmlbinddatatypeconverter\">#</a> java.lang.ClassNotFoundException:javax.xml.bind.DatatypeConverter</h3>\n<p>报错描述：</p>\n<p>java.lang.ClassNotFoundException:javax.xml.bind.DatatypeConverter</p>\n<p>原因：可能是因为 SpringBoot 项目结合 JWT 进行登录时出现的问题，因为 jdk 版本太高导致的。</p>\n<h4 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案：</h4>\n<h5 id=\"一降低jdk版本\"><a class=\"anchor\" href=\"#一降低jdk版本\">#</a> 一，降低 jdk 版本</h5>\n<h5 id=\"二在maven中添加依赖\"><a class=\"anchor\" href=\"#二在maven中添加依赖\">#</a> 二，在 maven 中添加依赖</h5>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.xml.bind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jaxb-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>因为 javax.xml.bind 在 jdk8 中 有，但是在更高版本就没有了，所以我们加上就行了。</p>\n",
            "tags": [
                "问题总汇",
                "问题总汇",
                "jdk版本问题"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/MD5%E5%8A%A0%E5%AF%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/MD5%E5%8A%A0%E5%AF%86/",
            "title": "MD5加密代码",
            "date_published": "2024-01-06T03:11:19.167Z",
            "content_html": "<h2 id=\"md5加密代码\"><a class=\"anchor\" href=\"#md5加密代码\">#</a> MD5 加密代码</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDigest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoSuchAlgorithmException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MD5</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> strSrc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">char</span> hexChars<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'3'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'6'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'8'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token char\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'f'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> strSrc<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">MessageDigest</span> md <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageDigest</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MD5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            md<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            bytes <span class=\"token operator\">=</span> md<span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                chars<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hexChars<span class=\"token punctuation\">[</span>b <span class=\"token operator\">>>></span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                chars<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hexChars<span class=\"token punctuation\">[</span>b <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NoSuchAlgorithmException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MD5加密出错！！+\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个加密的结果与 MySQL 中的结果是一摸一样的</p>\n<p>验证：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309101615100.png\" alt=\"image-20230910161535468\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309101615139.png\" alt=\"image-20230910161547664\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springsecurity",
                "计算机学科",
                "springsecurity",
                "MD5"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/SpringSecurity/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/SpringSecurity/",
            "title": "SpringSecurity",
            "date_published": "2024-01-06T03:11:19.167Z",
            "content_html": "<h1 id=\"springsecurity️\"><a class=\"anchor\" href=\"#springsecurity️\">#</a> SpringSecurity⭐️</h1>\n<p>[TOC]</p>\n<hr />\n<h2 id=\"0-简介\"><a class=\"anchor\" href=\"#0-简介\">#</a> 0 简介🎃</h2>\n<p>Spring Security 是 Spring 家族中的一个安全管理框架，相比与另外一个安全框架<strong> Shiro</strong>, 它提供了更丰富的功能，社区资源也比 Shiro 丰富 &lt;img src=&quot;./images/% E4% BC% A0% E9%80%81% E9%97% A8.png&quot; alt=&quot;传送门&quot; style=&quot;zoom:10%;&quot; align=&quot;right&quot;/&gt;</p>\n<p>一般来说中大型的项目都是使用<strong> SpringSecurity</strong> 来做安全框架，小项目用 Shiro 的比较多，因为相比与 SpringSecurity , Shiro 的上手更加的简单</p>\n<p>一般 Web 应用的需要进行<strong>认证</strong>和<strong>授权</strong></p>\n<p><strong>认证</strong>：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</p>\n<p><strong>授权</strong>：经过认证后判断当前用户是否有权限进行某个操作<br />\n而认证和授权也是 SpringSecurity 作为安全框架的核心功能</p>\n<hr />\n<h2 id=\"1-快速入门\"><a class=\"anchor\" href=\"#1-快速入门\">#</a> 1 快速入门🕋</h2>\n<h3 id=\"11-准备工作️\"><a class=\"anchor\" href=\"#11-准备工作️\">#</a> 1.1 准备工作⚡️</h3>\n<p>我们先要搭建一个简单的 SpringBoot 工程</p>\n<p>1. 设置父工程，添加依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 在 SpringBoot2.7.10 之后 SpringSecurity 的 WebWebSecurityConfigurerAdapter 已弃用了 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.5.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.dkx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>maven-learn-springSecurity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>jar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>maven-learn-springSecurity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>http://maven.apache.org<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2. 创建启动类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">App</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 创建 Controller</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"12-引入springsecurity\"><a class=\"anchor\" href=\"#12-引入springsecurity\">#</a> 1.2 引入 SpringSecurity🍰</h3>\n<p>在 SpringBoot 项目中使用 SpringSecurity 我们只需要引入依赖即可实现入门案例。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--SpringSecurity 启动器 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>引入依赖后我们在尝试去访问之前的接口就会自动跳转到一个 SpringSecurity 的默认登录页面，默认用户名是 user, 密码会输出在控制台。</p>\n<p>必须登录之后才能对接口进行访问。</p>\n<p>2.<strong> 操作</strong>：</p>\n<p>重新访问 hello 接口后出现的页面需要输入账号和密码，账号默认 user 密码在控制台打印</p>\n<p><img data-src=\"./images/image-20230515122204230.png\" alt=\"image-20230515122204230\" /></p>\n<p>启动 SpringBoot 后控制台自动打印 password</p>\n<p><img data-src=\"./images/image-20230515111742527.png\" alt=\"image-20230515111742527\" /></p>\n<p>输入账号，密码后进入页面内</p>\n<p><img data-src=\"./images/image-20230515111838401.png\" alt=\"image-20230515111838401\" /></p>\n<p>输入默认的退出接口：logout 完整接口路径如下：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//localhost:8080/logout</span></span></pre></td></tr></table></figure><p><img data-src=\"./images/image-20230515122335159.png\" alt=\"image-20230515122335159\" /></p>\n<p>点击后退出到登录页面</p>\n<p><img data-src=\"./images/image-20230515122409008.png\" alt=\"image-20230515122409008\" /></p>\n<hr />\n<h2 id=\"2-认证\"><a class=\"anchor\" href=\"#2-认证\">#</a> 2 认证🍾</h2>\n<h3 id=\"21-登录校验流程\"><a class=\"anchor\" href=\"#21-登录校验流程\">#</a> 2.1 登录校验流程🏷</h3>\n<p>jwt = json web token</p>\n<p><img data-src=\"./images/image-20211215094003288-1684293988758-1.png\" alt=\"image-20211215094003288\" /></p>\n<hr />\n<h3 id=\"22-原理初探\"><a class=\"anchor\" href=\"#22-原理初探\">#</a> 2.2 原理初探🎉</h3>\n<p>想要知道如何实现自己的登录流程就必须要先知道入门案例中 SpringSecurity 的流程。</p>\n<h4 id=\"221-springsecurity完整流程\"><a class=\"anchor\" href=\"#221-springsecurity完整流程\">#</a> 2.2.1 SpringSecurity 完整流程📟</h4>\n<p>SpringSecurity 的原理其实就是一个 &lt;ins style=&quot;color:red&quot;&gt; 过滤器链 &lt;/ins&gt;，内部包含了提供各种功能的过滤器，这里我们可以看看入门案例中的过滤器。</p>\n<p><img data-src=\"./images/image-20230515125451221.png\" alt=\"image-20230515125451221\" /><br />\n 图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p>\n<p><strong>UsernamePasswordAuthenticationFilter</strong>：负责处理我们的登录页面填写了用户名密码后的登录请求，入门案例的认证工作主要由它负责。</p>\n<p><strong>ExceptionTranslationFilter</strong>：处理过滤器链中抛出的任何 AccessDeniedException 和 AuthenticationException。</p>\n<p><strong>FilterSecurityInterceptor</strong>：负责权限校验的过滤器</p>\n<p><strong>我们可以通过 Debug 查看当前系统中 SpringSecurity 过滤器链中有哪些过滤器及它们的顺序</strong></p>\n<p><img data-src=\"./images/image-20230515131823600.png\" alt=\"image-20230515131823600\" /></p>\n<h4 id=\"222-认证流程详解\"><a class=\"anchor\" href=\"#222-认证流程详解\">#</a> 2.2.2 认证流程详解🏯</h4>\n<p><img data-src=\"./images/image-20230515135851738.png\" alt=\"image-20230515135851738\" /></p>\n<p><strong>概念速查</strong>：</p>\n<p><strong>Authentication 接口</strong>：它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p>\n<p><strong>AuthenticationManager 接口</strong>：定义了认证 Authentication 的方法。</p>\n<p><strong>UserDetailsService 接口</strong>：加载用户特定数据的核心接口，里面定义了一个根据用户名查询用户信息的方法。</p>\n<p><strong>UserDetails 接口</strong>：提供核心用户信息，通过 UserDetailsService 根据用户名获取处理的用户信息要封装成 UserDetails 对象返回，然后将这些信息封装到 Authentication 对象中。</p>\n<p><strong>登录验证</strong></p>\n<p><img data-src=\"./images/image-20230515140642377.png\" alt=\"image-20230515140642377\" /></p>\n<p><strong>思考</strong>：Jwt 认证过滤器中从获取到了 userid 后怎么获取到完整的用户信息？</p>\n<p><img data-src=\"./images/image-20230515140959180.png\" alt=\"image-20230515140959180\" /></p>\n<p><img data-src=\"./images/image-20230515143734436.png\" alt=\"image-20230515143734436\" /></p>\n<hr />\n<h3 id=\"23解决问题\"><a class=\"anchor\" href=\"#23解决问题\">#</a> 2.3. 解决问题🎸</h3>\n<h4 id=\"231-思路分析\"><a class=\"anchor\" href=\"#231-思路分析\">#</a> 2.3.1 思路分析🏭</h4>\n<p><strong>登录</strong>：</p>\n<p>① 自定义登录接口</p>\n<ul>\n<li>调用 providerManager 的方法进行认证，如果认证通过生成 jwt</li>\n<li>把用户信息存入 redis 中</li>\n</ul>\n<p>② 自定义 UserDetailsService</p>\n<ul>\n<li>在这个实现类中去查询数据库</li>\n</ul>\n<p><strong>校验</strong>：</p>\n<p>① 定义 jwt 认证过滤器</p>\n<ul>\n<li>获取 token</li>\n<li>解析 token 获取其中的 userid</li>\n<li>从 redis 中获取用户信息</li>\n<li>存入 SecurityContextHolder</li>\n</ul>\n<h4 id=\"232-准备工作\"><a class=\"anchor\" href=\"#232-准备工作\">#</a> 2.3.2 准备工作🔑</h4>\n<p><mark>注意事项</mark>：</p>\n<p>Redis 的配置类使用了 FastJson 来进行序列化的，需要导入自己的 util 报下的 FastJson 否则在存储 redis 对象信息时会出现没有存储 @Type 对象信息情况，后面进行获取的时候我们需要获取的是对象信息但是转换会发生 ClassCaseException 异常。</p>\n<p>① 添加依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--redis 依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--fastjson 依赖 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.47<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">&lt;!--jwt 依赖 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.jsonwebtoken<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jjwt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.9.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>② 添加 Redis 相关配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSON</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerializerFeature</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JavaType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TypeFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisSerializer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SerializationException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>parser<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ParserConfig</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>nio<span class=\"token punctuation\">.</span>charset<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Charset</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * Redis 使用 FastJson 序列化</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @author sg</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FastJsonRedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RedisSerializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Charset</span> <span class=\"token constant\">DEFAULT_CHARSET</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">static</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">ParserConfig</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGlobalInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAutoTypeSupport</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FastJsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clazz <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SerializationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SerializerFeature<span class=\"token punctuation\">.</span>WriteClassName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_CHARSET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SerializationException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bytes <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> bytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_CHARSET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">JavaType</span> <span class=\"token function\">getJavaType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TypeFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">constructType</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisConnectionFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RedisTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>serializer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringRedisSerializer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">FastJsonRedisSerializer</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FastJsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 使用 StringRedisSerializer 来序列化和反序列化 redis 的 key 值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// Hash 的 key 也采用 StringRedisSerializer 的序列化方式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>③ 响应类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonInclude</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonInclude<span class=\"token punctuation\">.</span>Include</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 状态码</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 提示信息，如果有错误时，前端可以获取该字段进行提示</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 查询到的结果数据，</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>④ 工具类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>jsonwebtoken<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Claims</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>jsonwebtoken<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JwtBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>jsonwebtoken<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Jwts</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>jsonwebtoken<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SignatureAlgorithm</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKey</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKeySpec</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UUID</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * JWT 工具类</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 有效期为</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">JWT_TTL</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span><span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 60 * 60 *1000  一个小时</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 设置秘钥明文，设置长度不能大于 11</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">JWT_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"sangeng\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 生成 jtw</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param subject token 中要存放的数据（json 格式）</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">JwtBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 生成 jtw</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @param subject token 中要存放的数据（json 格式）</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @param ttlMillis token 超时时间</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">JwtBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> ttlMillis<span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置过期时间</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JwtBuilder</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uuid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">SignatureAlgorithm</span> signatureAlgorithm <span class=\"token operator\">=</span> <span class=\"token class-name\">SignatureAlgorithm</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HS256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">long</span> nowMillis <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Date</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>nowMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ttlMillis<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            ttlMillis<span class=\"token operator\">=</span><span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_TTL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">long</span> expMillis <span class=\"token operator\">=</span> nowMillis <span class=\"token operator\">+</span> ttlMillis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">Date</span> expDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>expMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">)</span>           <span class=\"token comment\">// 唯一的 ID</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 主题  可以是 JSON 数据</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sg\"</span><span class=\"token punctuation\">)</span>     \t<span class=\"token comment\">// 签发者</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuedAt</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 签发时间</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">signWith</span><span class=\"token punctuation\">(</span>signatureAlgorithm<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 HS256 对称加密算法签名，第二个参数为秘钥</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span>expDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * 创建 token</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * @param id</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * @param subject</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     * @param ttlMillis</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">JwtBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> ttlMillis<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置过期时间</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> <span class=\"token string\">\"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> <span class=\"token function\">parseJWT</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     * 生成加密后的秘钥 secretKey</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SecretKey</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encodedKey <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> key <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>encodedKey<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> encodedKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     * 解析</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     * @param jwt</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * @throws Exception</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Claims</span> <span class=\"token function\">parseJwt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> jwt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token class-name\">Claims</span> claims<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExpiredJwtException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            claims <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getClaims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">return</span> claims<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>⑤ Redis 工具类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rawtypes\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisCache</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 缓存基本的对象，Integer、String、实体类等</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param key 缓存的键值</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param value 缓存的值</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 缓存基本的对象，Integer、String、实体类等</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param key 缓存的键值</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param value 缓存的值</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param timeout 时间</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param timeUnit 时间颗粒度</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> timeUnit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> timeUnit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 设置有效时间</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param key Redis 键</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @param timeout 超时时间</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * @return true = 设置成功；false = 设置失败</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * 设置有效时间</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @param key Redis 键</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * @param timeout 超时时间</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @param unit 时间单位</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @return true = 设置成功；false = 设置失败</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * 获得缓存的基本对象。</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     * @param key 缓存键值</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     * @return 缓存键值对应的数据</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">ValueOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> operation <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> operation<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     * 删除单个对象</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">deleteObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>     * 删除集合对象</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * @param collection 多个对象</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">deleteObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span> collection<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>collection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>     * 缓存 List 数据</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     * @param key 缓存的键值</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     * @param dataList 待缓存的 List 数据</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     * @return 缓存的对象</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">long</span> <span class=\"token function\">setCacheList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataList<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token class-name\">Long</span> count <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rightPushAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dataList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     * 获得缓存的 list 对象</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     * @param key 缓存的键值</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     * @return 缓存键值对应的数据</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCacheList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * 缓存 Set</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     * @param key 缓存键值</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     * @param dataSet 缓存的数据</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>     * @return 缓存数据的对象</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">BoundSetOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">setCacheSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataSet<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token class-name\">BoundSetOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> setOperation <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundSetOps</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> dataSet<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            setOperation<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">return</span> setOperation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * 获得缓存的 set</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCacheSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>     * 缓存 Map</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>     * @param dataMap</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> dataMap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataMap <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> dataMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     * 获得缓存的 Map</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCacheMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>     * 往 Hash 中存入数据</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>     * @param key Redis 键</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>     * @param hKey Hash 键</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>     * @param value 值</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hKey<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>     * 获取 Hash 中的数据</pre></td></tr><tr><td data-num=\"184\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"185\"></td><td><pre>     * @param key Redis 键</pre></td></tr><tr><td data-num=\"186\"></td><td><pre>     * @param hKey Hash 键</pre></td></tr><tr><td data-num=\"187\"></td><td><pre>     * @return Hash 中的对象</pre></td></tr><tr><td data-num=\"188\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hKey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token class-name\">HashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> opsForHash <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token keyword\">return</span> opsForHash<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"196\"></td><td><pre>     * 删除 Hash 中的数据</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"198\"></td><td><pre>     * @param key</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>     * @param hkey</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> hkey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token class-name\">HashOperations</span> hashOperations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        hashOperations<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>     * 获取多个 Hash 中的数据</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>     * @param key Redis 键</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>     * @param hKeys Hash 键集合</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>     * @return Hash 对象集合</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getMultiCacheMapValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> hKeys<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiGet</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>     * 获得缓存的基本对象列表</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>     * @param pattern 字符串前缀</pre></td></tr><tr><td data-num=\"223\"></td><td><pre>     * @return 对象列表</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> pattern<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>⑥ Web 工具类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebUtils</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 将字符串渲染到客户端</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param response 渲染对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param string 待渲染的字符串</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return null</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">renderString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>⑦ 实体类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 用户表 (User) 实体类</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author 三更</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40356785423868312L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    * 主键</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    * 用户名</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    * 昵称</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    * 密码</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    * 账号状态（0 正常 1 停用）</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    * 邮箱</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    * 手机号</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phonenumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    * 用户性别（0 男，1 女，2 未知）</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    * 头像</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> avatar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    * 用户类型（0 管理员，1 普通用户）</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    * 创建人的用户 id</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> createBy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    * 创建时间</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    * 更新人</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> updateBy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    * 更新时间</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> updateTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    * 删除标志（0 代表未删除，1 代表已删除）</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> delFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"233-实现️\"><a class=\"anchor\" href=\"#233-实现️\">#</a> 2.3.3 实现⛵️</h4>\n<h5 id=\"2331-数据库校验用户\"><a class=\"anchor\" href=\"#2331-数据库校验用户\">#</a> 2.3.3.1 数据库校验用户🎃</h5>\n<p>从之前的分析我们可以知道，我们可以自定义一个 UserDetailsService，让 SpringSecurity 使用我们的 UserDetailsService，我们自己的 UserDetailsService 可以从数据库中查询用户名和密码</p>\n<h5 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作💃</h5>\n<p>我们先创建一个用户表，建表语句如下：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_user<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'主键'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>user_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'NULL'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>nick_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'NULL'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'昵称'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>password<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'NULL'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'密码'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'账号状态（0正常 1停用）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>email<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'邮箱'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>phonenumber<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'手机号'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sex<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户性别（0男，1女，2未知）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>avatar<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'头像'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>user_type<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">CHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'1'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户类型（0管理员，1普通用户）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_by<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建人的用户id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">DATETIME</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_by<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新人'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">DATETIME</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'更新时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>del_flag<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'删除标志（0代表未删除，1代表已删除）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'用户表'</span></pre></td></tr></table></figure><p>引入 MyBatisPlus 和 MySQL 驱动的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>mysql<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mysql-connector-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.0.28<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>druid<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置数据库信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> com.alibaba.druid.pool.DruidDataSource</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/test<span class=\"token punctuation\">?</span>characterEncoding=utf<span class=\"token punctuation\">-</span>8<span class=\"token important\">&amp;serverTimezone=UTC</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> dkx</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">mybatis-plus</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">mapper-locations</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mapper/<span class=\"token important\">*.xml</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">config-location</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>mybatis/mybatis<span class=\"token punctuation\">-</span>config.xml</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">global-config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">banner</span><span class=\"token punctuation\">:</span> off</pre></td></tr></table></figure><p>定义 Mapper 接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试 MP 是否能正常使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token class-name\">Result</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">05</span><span class=\"token operator\">-</span><span class=\"token number\">16</span> <span class=\"token number\">17</span><span class=\"token operator\">:</span><span class=\"token number\">27</span><span class=\"token operator\">:</span><span class=\"token number\">34.013</span>  <span class=\"token constant\">INFO</span> <span class=\"token number\">16256</span> <span class=\"token operator\">--</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>druid<span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span></span>DruidDataSource</span>   <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>dataSource<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> inited</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> userName<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> nickName<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> phonenumber<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> sex<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> avatar<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userType<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> createBy<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createTime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> updateBy<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> updateTime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> delFlag<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h5 id=\"核心代码实现\"><a class=\"anchor\" href=\"#核心代码实现\">#</a> 核心代码实现🌵</h5>\n<p>创建一个类实现 UserDetailsService 接口，重写其中的方法，让其用户名从数据库中查询用户信息</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDetailsServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        查询用户信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        如果没有查询到用户就抛出异常</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名或密码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//TODO        查询对应的权限信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为 UserDetailsService 方法的返回值是 UserDetails 类型，所以需要定义一个类，实现该接口，把用户信息封装在其中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginUser</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//    返回权限信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//    获取密码</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//    获取用户名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//    判断是否没过期</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//    是否没有超时</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCredentialsNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//    用户是否可用状态</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意</strong>：如果要测试，需要往用户表中写入用户数据，并且如果你想让用户的密码是明文存储，需要在密码前加 {noop}。<strong>例如</strong>：</p>\n<p><img data-src=\"./images/image-20230516174146080.png\" alt=\"image-20230516174146080\" /></p>\n<p>&lt;font style=&quot;color:red&quot;&gt; 不加 {noop} 登录后端就会报错如下 &lt;/font&gt;：</p>\n<p><img data-src=\"./images/image-20230516174034569.png\" alt=\"image-20230516174034569\" /></p>\n<p>这样登录的时候就可以用 123 作为用户名，123 作为密码了登录了。</p>\n<p><img data-src=\"./images/image-20230516174127584.png\" alt=\"image-20230516174127584\" /></p>\n<p><strong>总结流程</strong>：</p>\n<ol>\n<li>重写 UserDetailsService，实现了从数据查询用户名和密码，进行校验的工作</li>\n<li>在 loadUserByUsername (String username) 方法中进行查询用户并做一些安全的校验查询用户是否为 null</li>\n<li>loadUserByUsername (String username) 方法执行没有任何异常则封装成 LoginUser 对象返回</li>\n<li noop=\"\">密码在数据库中存储是明文存储，需要在前面加上</li>\n<li>重写后启动 SpringBoot 控制台就不会输出 jwt 生成的 password 了</li>\n</ol>\n<h5 id=\"2332-密码加密存储\"><a class=\"anchor\" href=\"#2332-密码加密存储\">#</a> 2.3.3.2 密码加密存储🐰</h5>\n<p>实际项目中我们不会把密码明文存储在数据库中。</p>\n<p>默认使用的 PasswordEncoder 要求数据库中的密码格式为: {id} password. 它会根据 id 去判断密码的加密方式，但是我们一般不会采用这种方式，所以就需要替换 PasswordEncoder。</p>\n<p>我们一般使用 SpringSecurity 为我们提供的 BCryptPasswordEncoder。</p>\n<p>我们只需要使用把 BCryptPasswordEncoder 对象注入 Spring 容器中，SpringSecurity 就会使用该 PasswordEncoder 来进行密码校验。</p>\n<p>我们可以定义一个 SpringSecurity 的配置类，SpringSecurity 要求这个配置类要继承 WebSecurityConfigurerAdapter。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t <span class=\"token comment\">// 将 BCryptPasswordEncoder 对象注入容器中来替代 PasswordEncoder 的加密方式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意</strong>：</p>\n<ul>\n<li>BCryptPasswordEncoder 校验的密码加密方式并不是 jwt，否则密码错误会报 403 错误</li>\n</ul>\n<p>在测试类中创建 BCryptPasswordEncoder 调用 encode (传入密码) 来生成加密后的密码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">BCryptPasswordEncoder</span> passwordEncoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span> encode <span class=\"token operator\">=</span> passwordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>encode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token class-name\">Result</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>$<span class=\"token number\">2</span>a$<span class=\"token number\">10</span>$<span class=\"token class-name\"><span class=\"token namespace\">jBm<span class=\"token punctuation\">.</span></span>Lr0NFXSuPspDFIGv1ulorD</span><span class=\"token operator\">/</span><span class=\"token number\">6</span>cySeE<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">aWmvrLhT5<span class=\"token punctuation\">.</span></span>YVsrVkSKm</span></pre></td></tr></table></figure><p>将加密后的密文先手动设置到数据库一个用户信息中：</p>\n<p><img data-src=\"./images/image-20230520205719441.png\" alt=\"image-20230520205719441\" /></p>\n<h5 id=\"2333-登录接口\"><a class=\"anchor\" href=\"#2333-登录接口\">#</a> 2.3.3.3 登录接口🍡</h5>\n<p>接下来我们需要自定义登录接口，然后让 SpringSecurity 对这个接口放行，让用户访问这个接口的时候不用登录也能访问。</p>\n<p>在接口中我们通过 AuthenticationManager 的 authenticate 方法来进行用户认证，所以需要在 SecurityConfig 中配置把 AuthenticationManager 注入容器。</p>\n<p>认证成功的话要生成一个 jwt，放入响应中返回。并且为了让用户下回请求时能通过 jwt 识别出具体的是哪个用户，我们需要把用户信息存入 redis，可以把用户 id 作为 key。</p>\n<blockquote>\n<p>这里不用在 mapper 中写代码，直接在 loginService 中写返回类型为 ResponseReuslt 的方法参数为对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LoginServcie</span> loginServcie<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t <span class=\"token comment\">// 自定义登录接口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/user/login\"</span> <span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> loginServcie<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t <span class=\"token comment\">// 配置 BCryptPasswordEncoder 用户密码校验规则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t <span class=\"token comment\">// 配置放行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        http</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 关闭 csrf</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 不通过 Session 获取 SecurityContext</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATELESS</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 对于登录接口 允许匿名访问</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 除上面外的所有请求全部需要鉴权认证</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t <span class=\"token comment\">// 注入 AuthenticationManager 容器</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthenticationManager</span> <span class=\"token function\">authenticationManagerBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticationManagerBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoginService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 自动装配 Redis 工具类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisCache</span> redisCache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 自动装配 AuthenticationManager</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationManager</span> authenticationManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        AuthenticationManager authenticate 进行用户认证</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authenticationToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Authentication</span> authenticate <span class=\"token operator\">=</span> authenticationManager<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//        如果认证没通过，给出对应的提示</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>authenticate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//        如果认证通过了，使用 userid 生成一个 jwt (token) jwt (token) 存入 ResponseResult 返回</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">LoginUser</span> loginUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">)</span> authenticate<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> userId <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//        生成 jwt</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">String</span> jwt <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 把 token 响应给前端</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span>jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        把完整的用户信息存入 redis,userid 作为 key</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        redisCache<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login:\"</span><span class=\"token operator\">+</span>userId<span class=\"token punctuation\">,</span>loginUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置 Redis</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.244.142</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr></table></figure><ul>\n<li>记得开启 Redis 否则报错，状态码：500</li>\n</ul>\n<h5 id=\"2334-认证过滤器\"><a class=\"anchor\" href=\"#2334-认证过滤器\">#</a> 2.3.3.4 认证过滤器🎅</h5>\n<p>我们需要自定义一个过滤器，这个过滤器会去获取请求头中的 token, 对 token 进行解析取出其中的 userId。</p>\n<p>使用 userId 去 redis 中获取对应的 LoginUser 对象。</p>\n<p>然后封装 Authentication 对象存入 SecurityContextHolder</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JwtAuthenticationTokenFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisCache</span> redisCache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">FilterChain</span> filterChain<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//        获取 token</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//            放行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        解析 token 获取 userId</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseJWT</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            userId <span class=\"token operator\">=</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token非法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        通过 userId 从 redis 中获取用户信息 LoginUser</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> redisKey <span class=\"token operator\">=</span> <span class=\"token string\">\"login:\"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">LoginUser</span> loginUser <span class=\"token operator\">=</span> redisCache<span class=\"token punctuation\">.</span><span class=\"token function\">getCacheObject</span><span class=\"token punctuation\">(</span>redisKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>loginUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户未登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        如果能从 redis 中获取 LoginUser 就存入 securityContextHolder</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//        TODO 获取权限信息封装到 Authentication 中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authentication <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">(</span>loginUser<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAuthentication</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        放行</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">JwtAuthenticationTokenFilter</span> jwtAuthenticationTokenFilter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        http</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 关闭 csrf</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 不通过 Session 获取 SecurityContext</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATELESS</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           \t\t <span class=\"token comment\">// 返回值为 HttpSecurity 可以继续调用其它的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 对于登录接口 允许匿名访问</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//permitAll 代表无论是否登录都能访问</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 除上面外的所有请求全部需要鉴权认证</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 把 token 校验过滤器添加到过滤器链中</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationTokenFilter<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 添加过滤器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t  <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthenticationManager</span> <span class=\"token function\">authenticationManagerBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticationManagerBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"2335-退出登录\"><a class=\"anchor\" href=\"#2335-退出登录\">#</a> 2.3.3.5 退出登录🦄</h5>\n<p>我们只需要定义一个登录接口，然后获取 SecurityContextHolder 中的认证信息，删除 redis 中对应的数据即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoginService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisCache</span> redisCache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationManager</span> authenticationManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//        AuthenticationManager authenticate 进行用户认证</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authenticationToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Authentication</span> authenticate <span class=\"token operator\">=</span> authenticationManager<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>authenticationToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        如果认证没通过，给出对应的提示</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>authenticate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        如果认证通过了，使用 userid 生成一个 jwt jwt 存入 ResponseResult 返回</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>       <span class=\"token comment\">//Authenticatoin.getPrincipal () 可以获取代表当前用户信息。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">LoginUser</span> loginUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">)</span> authenticate<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> userId <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        生成 jwt</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> jwt <span class=\"token operator\">=</span> <span class=\"token class-name\">JwtUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">createJWT</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span>jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        把完整的用户信息存入 redis,userid 作为 key</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        redisCache<span class=\"token punctuation\">.</span><span class=\"token function\">setCacheObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login:\"</span><span class=\"token operator\">+</span>userId<span class=\"token punctuation\">,</span>loginUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseResult</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        获取 SecurityContextHolder 中的用户 id</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">UsernamePasswordAuthenticationToken</span> authentication <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UsernamePasswordAuthenticationToken</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">LoginUser</span> loginUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">)</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Long</span> userId <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//        删除 redis 中的值</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        redisCache<span class=\"token punctuation\">.</span><span class=\"token function\">deleteObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login:\"</span><span class=\"token operator\">+</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"注销成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"3-授权\"><a class=\"anchor\" href=\"#3-授权\">#</a> 3 授权🍨</h2>\n<h3 id=\"3-权限系统的作用\"><a class=\"anchor\" href=\"#3-权限系统的作用\">#</a> 3 权限系统的作用🛴</h3>\n<p>例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书的功能，不可能让它看到并且去使用添加书籍信息，删除书籍信息等功能，但是如果是一个图书管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p>\n<p>总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</p>\n<p>我们不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮。因为如果只是这样，如果有人知道了对应的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</p>\n<p>所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行响应的操作。</p>\n<hr />\n<h3 id=\"31-授权基本流程\"><a class=\"anchor\" href=\"#31-授权基本流程\">#</a> 3.1 授权基本流程🦅</h3>\n<p>在 SpringSecurity 中，会使用默认的 FilterSecurityInterceptor 来进行权限校验，在 FilterSecurityInterceptor 中会从 SecurityContextHolder 获取其中的 Authentication，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p>\n<p>所以我们在项目中只需要把当前登录用户的权限信息也存入 Authentication。</p>\n<p>然后设置我们的资源所需的权限即可。</p>\n<hr />\n<h3 id=\"32-授权实现\"><a class=\"anchor\" href=\"#32-授权实现\">#</a> 3.2 授权实现🌜</h3>\n<h4 id=\"321-限制访问资源所需权限\"><a class=\"anchor\" href=\"#321-限制访问资源所需权限\">#</a> 3.2.1 限制访问资源所需权限🗑</h4>\n<p>SpringSecurity 为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p>\n<p>但是要使用它我们需要先开启相关配置。</p>\n<p>在 SecurityConfig 类中添加注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableGlobalMethodSecurity</span><span class=\"token punctuation\">(</span>prePostEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后就可以使用对应的注解。@PreAuthorize</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LoginService</span> loginService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//hasAuthoriry：读取注解中的属性值返回结果是 boolean 值，test 权限则返回 true 去执行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasAuthority('test')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"322-封装权限信息\"><a class=\"anchor\" href=\"#322-封装权限信息\">#</a> 3.2.2 封装权限信息🗾</h4>\n<p>我们前面在写 UserDetailsServiceImpl 的时候说过，在查询出用户后还要获取对应的权限信息，封装到 UserDetails 中返回。</p>\n<p>我们先直接把权限信息写死封装到 UserDetails 中进行测试。</p>\n<p>我们之前定义了 UserDetails 的实现类 LoginUser，想要让其封装权限信息就要对其进行修改。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sangeng<span class=\"token punctuation\">.</span>domain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>fastjson<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JSONField</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GrantedAuthority</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>authority<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleGrantedAuthority</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>userdetails<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDetails</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collectors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginUser</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 存储权限信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> permissions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 存储 SpringSecurity 所需要的权限信息的集合，加上该注解表示不会被序列化</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@JSONField</span><span class=\"token punctuation\">(</span>serialize <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> authorities<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">,</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> permissions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>permissions <span class=\"token operator\">=</span> permissions<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span>  <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAuthorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>authorities<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> authorities<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 把 permissions 中字符串类型的权限信息转换成 GrantedAuthority 对象存入 authorities 中</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        authorities <span class=\"token operator\">=</span> permissions<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleGrantedAuthority</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> authorities<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCredentialsNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"323-从数据库查询权限信息\"><a class=\"anchor\" href=\"#323-从数据库查询权限信息\">#</a> 3.2.3 从数据库查询权限信息</h4>\n<h5 id=\"3231-rbac权限模型\"><a class=\"anchor\" href=\"#3231-rbac权限模型\">#</a> 3.2.3.1 RBAC 权限模型</h5>\n<p>RBAC 权限模型 (Role-Based Access Control) 即：基于角色的权限控制，这是目前最常被开发者使用也是相对易用，通用权限模型。</p>\n<p><img data-src=\"./images/image-20211222110249727.png\" alt=\"image-20211222110249727\" /></p>\n<h4 id=\"3232-准备工作\"><a class=\"anchor\" href=\"#3232-准备工作\">#</a> 3.2.3.2 准备工作</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_menu<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>menu_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'NULL'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'菜单名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>path<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'路由地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>component<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'组件路径'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>visible<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'菜单状态（0显示 1隐藏）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'菜单状态（0正常 1停用）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>perms<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'权限标识'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>icon<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'#'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'菜单图标'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_by<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_by<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>del_flag<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'是否删除（0未删除 1已删除）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>remark<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'备注'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'菜单表'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_menu<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>menu_name<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">,</span>perms<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'部门管理'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dept'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'system/dept/index'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'system:dept:list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_menu<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>menu_name<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>component<span class=\"token punctuation\">,</span>perms<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'测试'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dept'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'system/test/index'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'system:test:list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*Table structure for table `sys_role` */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>role_key<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'角色权限字符串'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'角色状态（0正常 1停用）'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>del_flag<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'del_flag'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_by<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_by<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>update_time<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>remark<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'备注'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4 <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'角色表'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span>role_key<span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'CEO'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ceo'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span>role_key<span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'Coder'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'coder'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/*Table structure for table `sys_role_menu` */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role_menu<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role_menu<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>role_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'角色ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>menu_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'菜单id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>role_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>menu_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role_menu<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>role_id<span class=\"token punctuation\">,</span>menu_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_role_menu<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>role_id<span class=\"token punctuation\">,</span>menu_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*Table structure for table `sys_user_role` */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_user_role<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_user_role<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'用户id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>role_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'角色id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>user_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>role_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8mb4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sys_user_role<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">,</span>role_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> </pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>查询用户权限 SQL</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">DISTINCT</span> em<span class=\"token punctuation\">.</span>perms </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsys_user_role <span class=\"token keyword\">AS</span> ur</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">#联表查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> sys_role <span class=\"token keyword\">AS</span> ro <span class=\"token keyword\">ON</span> ur<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">=</span> ro<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> sys_role_menu rm <span class=\"token keyword\">ON</span> ur<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">=</span> rm<span class=\"token punctuation\">.</span>role_id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> sys_menu <span class=\"token keyword\">AS</span> em <span class=\"token keyword\">ON</span> em<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> rm<span class=\"token punctuation\">.</span>menu_id </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">WHERE</span><span class=\"token comment\">#查询条件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tur<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">AND</span> ro<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token operator\">AND</span> em<span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>菜单表 (Menu) 实体类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>sangeng<span class=\"token punctuation\">.</span>domain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableId</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>baomidou<span class=\"token punctuation\">.</span>mybatisplus<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TableName</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonInclude</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 菜单表 (Menu) 实体类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @author makejava</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @since 2021-11-24 15:30:08</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"sys_menu\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@JsonInclude</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonInclude<span class=\"token punctuation\">.</span>Include</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Menu</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">54979041104113736L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    * 菜单名</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> menuName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    * 路由地址</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    * 组件路径</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> component<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    * 菜单状态（0 显示 1 隐藏）</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> visible<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    * 菜单状态（0 正常 1 停用）</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    * 权限标识</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> perms<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    * 菜单图标</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> icon<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> createBy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> updateBy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> updateTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    * 是否删除（0 未删除 1 已删除）</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> delFlag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    * 备注</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> remark<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3233-代码实现\"><a class=\"anchor\" href=\"#3233-代码实现\">#</a> 3.2.3.3 代码实现</h4>\n<p>我们只需要根据用户 id 去查询到其所对应的权限信息即可。</p>\n<p>所以我们可以先写一个 mapper，其中提供一个方法可以根据 userid 查询权限信息。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Mapper</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MenuMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectPermsByUserId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建对应的 mapper 文件，定义对应的 sql 语句。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"https://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!--namespace 绑定一个对应的 Dao (Mapper) 接口 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.dkx.mapper.MenuMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectPermsByUserId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>String<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        SELECT DISTINCT em.perms</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        FROM sys_user_role as ur</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                 LEFT JOIN sys_role as ro ON ur.role_id = ro.id</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                 LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                 LEFT JOIN sys_menu as em ON em.id = rm.menu_id</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        WHERE ur.user_id = 2</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          AND ro.status = 0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          AND em.status = 0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后我们可以在 UserDetailsServiceImpl 中去调用该 mapperd 的方法查询权限信息封装到 LoginUser 对象中即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDetailsServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MenuMapper</span> menuMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//        查询用户信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token operator\">::</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">,</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        如果没有查询到用户就抛出异常</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名或密码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//TODO        查询对应的权限信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> menuMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectPermsByUserId</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//        List&lt;String> list = new ArrayList&lt;>(Arrays.asList(\"test\",\"admin\"));</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"4-自定义失败处理\"><a class=\"anchor\" href=\"#4-自定义失败处理\">#</a> 4 自定义失败处理💤</h2>\n<p>我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的 json，这样可以让前端能够响应进行统一的处理，要实现这个功能我们需要知道 SpringSecurity 的异常处理机制。</p>\n<p>在 SpringSecurity 中，如果我们在认证或者授权的过程中出现了异常会被 ExceptionTranslationFilter 捕获到。在 ExceptionTranslationFilter 中会去判断是认证失败还是授权失败出现的异常。</p>\n<p>如果是认证过程中出现的异常会被封装成 AuthenticationException 然后调用 AuthenticationEntryPoint 对象的方法去进行异常处理。</p>\n<p>如果是授权过程中出现的异常会被封装成 AccessDeniedException 然后调用 AccessDeniedHander 对象的方法去进行异常处理。</p>\n<p>所以如果我们需要自定义异常处理，我们只需要自定义 AuthenticationEntryPoint 和 AccessDeniedHanler 然后配置给 SpeingSecurity 即可。</p>\n<p>① 自定义实现类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthenticationEntryPointImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationEntryPoint</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ResponseResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNAUTHORIZED</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"用户认证失败请查询登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        处理异常</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">WebUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccessDeniedHandlerImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccessDeniedHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AccessDeniedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ResponseResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FORBIDDEN</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"用户授权失败请查询登录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">WebUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>② 配置 SpeingSecurity</p>\n<p>在 SecurityConfig 类中，先注入对应的处理器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationEntryPoint</span> authenticationEntryPoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">AccessDeniedHandler</span> accessDeniedHandler<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后我们可以使用 HttpSecurity http 对象的方法去配置。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配置异常处理器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>http<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 配置认证失败处理器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>authenticationEntryPoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 配置授权失败处理器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>accessDeniedHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>测试步骤</strong>：</p>\n<ol>\n<li>先测试 login 接口，拿到 token 再去用 token 放到 hello 接口中去请求</li>\n</ol>\n<p><strong>测试授权失败场景</strong>：</p>\n<p>将权限表达式中的权限值改为登录系统中不存在的，再将 hello 接口请求中添加 token 携带 token 去请求</p>\n<p><img data-src=\"./images/image-20230518143620414.png\" alt=\"image-20230518143620414\" /></p>\n<p><strong>PostMan 结果</strong>：</p>\n<p><img data-src=\"./images/image-20230518143302423.png\" alt=\"image-20230518143302423\" /></p>\n<p><strong>测试认证失败场景</strong>：</p>\n<p>只需要将用户名请求过去一个数据库中不存在的即可。</p>\n<p><img data-src=\"./images/image-20230518143449553.png\" alt=\"image-20230518143449553\" /></p>\n<hr />\n<h2 id=\"5-跨域\"><a class=\"anchor\" href=\"#5-跨域\">#</a> 5 跨域🍂</h2>\n<p>浏览器处于安全的考虑，使用 XMLHttpRequest 对象发起 HTTP 请求时必须遵守同源策略，否则就是跨域的 HTTP 请求，默认情况下是被禁止的，同源策略要求源相同才能正常进行通信，及协议，域名，端口号都完全一致。</p>\n<p>前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p>\n<p>所以我们就要处理一下，让前端能进行跨域请求。</p>\n<p>① 先对 SpringBoot 配置，运行跨域请求。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CorsConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CorsRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 设置允许跨域的路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 设置允许跨域请求的域名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedOriginPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 是否允许 cookie</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 设置允许的请求方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 设置允许的 header 属性</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 跨域允许时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">maxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>② 开启 SpringSecurity 的跨域访问</p>\n<p>由于我们的资源都会收到 SpringSecurity 的保护，所以想要跨域访问还要让 SpringSecurity 运行跨域访问。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   http</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 关闭 csrf</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 不通过 Session 获取 SecurityContext</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATELESS</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 对于登录接口 允许匿名访问</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 除上面外的所有请求全部需要鉴权认证</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 添加过滤器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationTokenFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 配置异常处理器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 配置认证失败处理器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>authenticationEntryPoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>accessDeniedHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">// 允许跨域</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"6-遗留小问题\"><a class=\"anchor\" href=\"#6-遗留小问题\">#</a> 6 遗留小问题</h2>\n<h3 id=\"其它权限校验方法\"><a class=\"anchor\" href=\"#其它权限校验方法\">#</a> 其它权限校验方法</h3>\n<p>我们前面都是使用 @PreAuthorize 注解，然后在其中使用的是 hasAuthority 方法进行校验，SpringSecurity 还为我们提供了其它方法例如：hasAnyAuthority，hasRole，HasAnyRole 等。</p>\n<p>这里我们先不急着去介绍这些方法，我们先去理解 hasAuthority 的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p>\n<p>​\thasAuthority 方法实际是执行到了 SecurityExpressionRoot 的 hasAuthority，大家只要断点调试既可知道它内部的校验原理。</p>\n<p>​\t它内部其实是调用 authentication 的 getAuthorities 方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p>\n<p>​\thasAnyAuthority 方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasAnyAuthority('admin','test','system:dept:list')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>hasRole 要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasRole('system:dept:list')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\thasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasAnyRole('admin','system:dept:list')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"自定义权限校验方法\"><a class=\"anchor\" href=\"#自定义权限校验方法\">#</a> 自定义权限校验方法</h3>\n<p>我们也可以定义自己的权限校验方法，在 @PreAuthorize 注解中使用我们的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SGExpressionRoot</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasAuthority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> authority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取当前用户的权限</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Authentication</span> authentication <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">LoginUser</span> loginUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">)</span> authentication<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> permissions <span class=\"token operator\">=</span> loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">getPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 判断用户权限集合中是否存在 authority</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> permissions<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>authority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 SPEL 表达式中使用 @ex 相当于获取容器中 bean 的名字未 ex 的对象。然后再调用这个对象的 hasAuthority 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@ex.hasAuthority('system:dept:list')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"基于配置的权限控制\"><a class=\"anchor\" href=\"#基于配置的权限控制\">#</a> 基于配置的权限控制</h3>\n<p>我们也可以在配置类中使用使用配置的方式对资源进行权限控制。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   http</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 关闭 csrf</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 不通过 Session 获取 SecurityContext</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATELESS</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 对于登录接口 允许匿名访问</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anonymous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testCors\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAuthority</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"system:dept:list222\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 除上面外的所有请求全部需要鉴权认证</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 添加过滤器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationTokenFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">// 配置异常处理器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 配置认证失败处理器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>authenticationEntryPoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>accessDeniedHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token comment\">// 允许跨域</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"csrf\"><a class=\"anchor\" href=\"#csrf\">#</a> CSRF</h3>\n<p>​\tCSRF 是指跨站请求伪造（Cross-site request forgery），是 web 常见的攻击之一。</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZyZWVraW5nMTAxL2FydGljbGUvZGV0YWlscy84NjUzNzA4Nw==\">https://blog.csdn.net/freeking101/article/details/86537087</span></p>\n<p>​\tSpringSecurity 去防止 CSRF 攻击的方式就是通过 csrf_token。后端会生成一个 csrf_token，前端发起请求的时候需要携带这个 csrf_token, 后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</p>\n<p>​\t我们可以发现 CSRF 攻击依靠的是 cookie 中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是 token，而 token 并不是存储中 cookie 中，并且需要前端代码去把 token 设置到请求头中才可以，所以 CSRF 攻击也就不用担心了。</p>\n<hr />\n<h3 id=\"认证成功处理器\"><a class=\"anchor\" href=\"#认证成功处理器\">#</a> 认证成功处理器</h3>\n<p>​\t实际上在 UsernamePasswordAuthenticationFilter 进行登录认证的时候，如果登录成功了是会调用 AuthenticationSuccessHandler 的方法进行认证成功后的处理的。AuthenticationSuccessHandler 就是登录成功处理器。</p>\n<p>​\t我们也可以自己去自定义成功处理器进行成功后的相应处理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SGSuccessHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationSuccessHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"认证成功了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationSuccessHandler</span> successHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">successHandler</span><span class=\"token punctuation\">(</span>successHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"认证失败处理器\"><a class=\"anchor\" href=\"#认证失败处理器\">#</a> 认证失败处理器</h3>\n<p>​\t实际上在 UsernamePasswordAuthenticationFilter 进行登录认证的时候，如果认证失败了是会调用 AuthenticationFailureHandler 的方法进行认证失败后的处理的。AuthenticationFailureHandler 就是登录失败处理器。</p>\n<p>​\t我们也可以自己去自定义失败处理器进行失败后的相应处理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SGFailureHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationFailureHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAuthenticationFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> exception<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"认证失败了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationSuccessHandler</span> successHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationFailureHandler</span> failureHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//                配置认证成功处理器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">successHandler</span><span class=\"token punctuation\">(</span>successHandler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//                配置认证失败处理器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">failureHandler</span><span class=\"token punctuation\">(</span>failureHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"登出成功处理器\"><a class=\"anchor\" href=\"#登出成功处理器\">#</a> 登出成功处理器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SGLogoutSuccessHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LogoutSuccessHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLogoutSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Authentication</span> authentication<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注销成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationSuccessHandler</span> successHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AuthenticationFailureHandler</span> failureHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LogoutSuccessHandler</span> logoutSuccessHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//                配置认证成功处理器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">successHandler</span><span class=\"token punctuation\">(</span>successHandler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//                配置认证失败处理器</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">failureHandler</span><span class=\"token punctuation\">(</span>failureHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 配置注销成功处理器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessHandler</span><span class=\"token punctuation\">(</span>logoutSuccessHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springsecurity",
                "计算机学科",
                "springsecurity"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/JWT/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/JWT/",
            "title": "JWT",
            "date_published": "2024-01-06T03:11:19.157Z",
            "content_html": "<h2 id=\"jwt\"><a class=\"anchor\" href=\"#jwt\">#</a> JWT</h2>\n<h4 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h4>\n<p>JWT 是 JSON Web Token 的缩写，即 JSON Web 令牌，是一种自包含令牌 (自己能包含重要信息)，是为了在网络引用环境间传递声明而执行的一种基于 JSON 的开发标准</p>\n<p>JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。</p>\n<p>JWT 最重要的作用就是对 token 的信息的防伪作用。</p>\n<h3 id=\"jwt令牌的组成\"><a class=\"anchor\" href=\"#jwt令牌的组成\">#</a> JWT 令牌的组成</h3>\n<p>一个 JWT 由三个部分组成：JWT 头，有效载荷，签名哈希</p>\n<p>最后由这三者组合进行 base64url 编码得到 JWT</p>\n<p>典型的，一个 JWT 看起来如下图：该对象为一个很长的字符串，字符之间通过 “.” 分隔符分为三个子串。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">https://jwt.io/</span></p>\n<h3 id=\"jwt头\"><a class=\"anchor\" href=\"#jwt头\">#</a> JWT 头</h3>\n<p>JWT 头部分是一个描述 JWT 元数据的 JSON 对象，通常如下所示：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"typ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的代码中，alg 属性表示签名使用的算法，默认为 HMAC SHA256 (写为 HS256)</p>\n<p>typ 属性表示令牌的类型，JWT 令牌统一写为 JWT。</p>\n<p>最后，使用 Base64URL 算法将上述 JSON 对象转换为字符串保存。</p>\n<h3 id=\"有效载荷\"><a class=\"anchor\" href=\"#有效载荷\">#</a> 有效载荷</h3>\n<p>有效载荷部分，是 JWT 的主体内容部分，也是一个 JSON 对象，包含需要传递的数据，JWT 指定七个默认字段供选择。</p>\n<p>iss：jwt 签发者</p>\n<p>sub：主题</p>\n<p>aud：接收 jwt 的一方</p>\n<p>exp：jwt 的过期时间，这个过期事件必须要大于签发时间</p>\n<p>nbf：定义在什么时间之前，该 jwt 都是不可用的。</p>\n<p>jat：jwt 的签发时间</p>\n<p>jti：jwt 的唯一身份标识，主要用来作为一次性 token，从而回避重放攻击。</p>\n<p><strong>除以上默认字段外，我们还可以自定义私有字段，如下例</strong>：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Helen\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"role\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"editor\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"helen.jpg\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>请注意，默认情况下 JWT 是未加密的，任何人都可以解读其内容，因此不要构建隐私信息字段，存放保密信息，以防止信息泄露</p>\n<p>JSON 对象也是用 Base64URL 算法转换为字符串保存。</p>\n<h3 id=\"签名哈希\"><a class=\"anchor\" href=\"#签名哈希\">#</a> 签名哈希</h3>\n<p>签名哈希部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p>\n<p>首先，需要指定一个密码 (secret)。改密码仅仅为保存在服务器中，并且不能向用户公开。然后，使用标头中指定的签名算法 (默认情况下为 HMAC SHA256) 根据以下公式生成签名。</p>\n<pre><code>HMACSHA256(base64urlEncode(header) + &quot;.&quot; + base64UrlEncode(claims).secret) ==&gt; 签名 hash\n</code></pre>\n<p>在计算出签名哈希后，JWT 头，有效载荷和签名哈希的三个部分组合成一个字符串，每个部分用 “.” 分隔，就构成整个 JWT 对象。</p>\n<h3 id=\"base64url算法\"><a class=\"anchor\" href=\"#base64url算法\">#</a> Base64URL 算法</h3>\n<p>如前所述，JWT 头和有效载荷序列化的算法都用到了 Base64URL。该算法和常见 Base64 算法类似，稍有差别。</p>\n<p>作为令牌的 JWT 可以放在 URL 中 (例如 api.example/?token=xxx)。Base64 中用的三个字符是 “+” , “/” 和 “=” ，由于在 URL 中有特殊含义，因此 Base64URL 中对他们做了替换： “=” 去掉，“+” 用 “-” 替换，“/” 用 “_” 替换，这就是 Base64URL 算法</p>\n<h3 id=\"jwt工具类代码\"><a class=\"anchor\" href=\"#jwt工具类代码\">#</a> JWT 工具类代码</h3>\n<p>具体可以根据自己的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>jsonwebtoken<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKey</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>spec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecretKeySpec</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UUID</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JWTHelper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 设置有效期 一个小时</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Long</span> <span class=\"token constant\">JWT_TTL</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 设置密钥 设置长度不能大于 11</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">JWT_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"liusangbaoyo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 生成 JWT</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param subject token 中要存放的数据 (JSON 格式)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJwt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJwt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJwt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 设置过期时间</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> ttlMillis<span class=\"token punctuation\">,</span> <span class=\"token function\">getUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JwtBuilder</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> uuid<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">SignatureAlgorithm</span> signatureAlgorithm <span class=\"token operator\">=</span> <span class=\"token class-name\">SignatureAlgorithm</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HS256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">long</span> nowMillis <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Date</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>nowMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ttlMillis <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            ttlMillis <span class=\"token operator\">=</span> <span class=\"token class-name\">JWTHelper</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_TTL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">long</span> expMills <span class=\"token operator\">=</span> nowMillis <span class=\"token operator\">+</span> ttlMillis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Date</span> expDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>expMills<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>uuid<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 唯一的 ID</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 主题，可以是 JSON 数据</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dkx\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 签发者</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setIssuedAt</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 签发时间</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">signWith</span><span class=\"token punctuation\">(</span>signatureAlgorithm<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 使用 HS256 对称加密算法签名，第二个参数为密钥</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span>expDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createJwt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> subject<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> ttlMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getJwtBuilder</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> ttlMillis<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SecretKey</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encodedKey <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JWTHelper</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JWT_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>encodedKey<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> encodedKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"AES\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Claims</span> <span class=\"token function\">parseJwt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> jwt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">Claims</span> claims<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">SecretKey</span> secretKey <span class=\"token operator\">=</span> <span class=\"token function\">generalKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">setSigningKey</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">parseClaimsJws</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExpiredJwtException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            claims <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getClaims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">return</span> claims<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"jwt中的claims\"><a class=\"anchor\" href=\"#jwt中的claims\">#</a> JWT 中的 Claims</h3>\n<p>Claims 有索赔，声称，要求或者权利要求的含义，但是笔者觉得任一个翻译都不怎么合乎语义，这里保留 Claims 关键字直接作为命名。JWT 的核心作用就是保护 Claims 的完整性 (或者数据加密) ，保证 JWT 传输的过程中 Claims 不被篡改 (或者不被破解)。Claims 在 JWT 原始内容中是一个 JSON 格式的字符串，其中单个 Claims 是 k-v 结构，作为 JsonNode 中的一个 find-value，这里列出了常用的规范中预定义好的 Claim；</p>\n<table>\n<thead>\n<tr>\n<th>简称</th>\n<th>全称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iss</td>\n<td>Issuer</td>\n<td>发行方</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>Subject</td>\n<td>主体</td>\n</tr>\n<tr>\n<td>aud</td>\n<td>Audience</td>\n<td>(接收) 目标方</td>\n</tr>\n<tr>\n<td>exp</td>\n<td>Expiration Time</td>\n<td>过期时间</td>\n</tr>\n<tr>\n<td>nbf</td>\n<td>Not Before</td>\n<td>早于该定义的时间的 JWT 不能被接受处理</td>\n</tr>\n<tr>\n<td>iat</td>\n<td>Issued At</td>\n<td>JWT 发行时的时间戳</td>\n</tr>\n<tr>\n<td>jti</td>\n<td>JWT ID</td>\n<td>JWT 的唯一标识</td>\n</tr>\n</tbody>\n</table>\n<p>这些预定义的 Claim 并不要求强制使用，何时选用何种 Claim 完全由使用者决定，而为了使 JWT 更加紧凑，这些 Claim 都是用了简短的命名方式去定义。在不和内建的 Claim 冲突的前提下，使用者可以自定义新的公共 Claim，如：</p>\n<table>\n<thead>\n<tr>\n<th>简称</th>\n<th>全称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cid</td>\n<td>Customer ID</td>\n<td>客户 ID</td>\n</tr>\n<tr>\n<td>rid</td>\n<td>Role ID</td>\n<td>角色 ID</td>\n</tr>\n</tbody>\n</table>\n<p>一定要注意，在 JWT 实现中，Claims 会作为 payload 部分进行 Base64 编码，明文会直接暴漏，敏感信息一般不应该设计为一个自定义 Claim。</p>\n<p>&lt;span alt='solid'&gt; 取出上述 JWT 工具类中设置的 userId 与 username 的值 &lt;/span&gt;.</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">String</span> jwt <span class=\"token operator\">=</span> <span class=\"token class-name\">JWTHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">createJwt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1233L</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jiashujv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Claims</span> claims <span class=\"token operator\">=</span> <span class=\"token class-name\">JWTHelper</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseJwt</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Integer</span> id <span class=\"token operator\">=</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id: \"</span><span class=\"token operator\">+</span>id<span class=\"token operator\">+</span><span class=\"token string\">\", name: \"</span><span class=\"token operator\">+</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springsecurity",
                "计算机学科",
                "springsecurity",
                "JWT"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/thymeleaf+SpringSecurity/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springsecurity/thymeleaf+SpringSecurity/",
            "title": "Thymeleaf中SpringSecurity的使用",
            "date_published": "2024-01-06T03:11:19.157Z",
            "content_html": "<h1 id=\"thymeleaf中springsecurity的使用️\"><a class=\"anchor\" href=\"#thymeleaf中springsecurity的使用️\">#</a> Thymeleaf 中 SpringSecurity 的使用⭐️</h1>\n<blockquote>\n<p>SpringSecurity 可以在一些视图技术中进行控制显示效果，例如：JSP 或 Thymeleaf。在非前后端分离且使用 SpringBoot 的项目中多使用 Thymeleaf 作为视图展示技术。</p>\n</blockquote>\n<blockquote>\n<p>Thymeleaf 对 SpringSecurity 的支持都放在 Thymeleaf-extras-springsecurityX<sup>X 代表某一个版本</sup>中，目前最新版本为 5。所以需要在项目中添加此 jar 包的依赖和 thymeleaf 的依赖。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.thymeleaf.extras<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>thymeleaf-extras-springsecurity5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.4.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--thymeleaf 依赖 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-thymeleaf<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 html 页面中引入 thymeleaf 命名空间和 security 命名空间。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>th</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>sec</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.thymeleaf.org/thymeleaf-extras-springsecurity5<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>自定义登录页面</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> http<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   http</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 关闭 csrf 防护，类似于关闭防火墙</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STATELESS</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 表单提交</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 自定义登录界面，thymeleaf 通过接口跳转到对应的页面中直接找会报 404</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">loginPage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 登录成功后跳转到的页面接口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">successForwardUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 授权</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 放行，静态资源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/js/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/fonts/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/img/**\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/login.html\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationTokenFilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 把 token 校验过滤器添加到过滤器链中</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>jwtAuthenticationTokenFilter<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token comment\">// 添加过滤器</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   http<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>authenticationEntryPoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>accessDeniedHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"1-获取属性\"><a class=\"anchor\" href=\"#1-获取属性\">#</a> 1 获取属性</h2>\n<blockquote>\n<p>可以在 html 页面中通过 sec:authentication=&quot;&quot; 获取 UsernamePasswordAuthenticationToken 中所有 getXXX 的内容，包含父类中的 getXXX 的内容。</p>\n</blockquote>\n<p><strong>根据源码得出下面属性</strong>：</p>\n<ul>\n<li>name：登录账号名称</li>\n<li>principal：登录主体，在自定义登录逻辑中是 UserDetails</li>\n<li>credentials：凭证<sup>密码 / 证据</sup></li>\n<li>authorities：权限和角色</li>\n<li>details：实际上是 WebAuthenticationDetails 的实例。可以获取 remoteAddress (客户端 ip) 和 sessionId (当前 sessionId)</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>账号: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authentication</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>登录账号: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authentication</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>principal.username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 处于安全原因凭证显示不出来 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>凭证: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authentication</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>credentials<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>权限和角色: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authentication</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>authorities<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>客户端地址: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authentication</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>details.remoteAddress<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">&lt;!--SessionId 也不显示 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sessionId: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authentication</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>details.sessionId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"./images/image-20230523095318581.png\" alt=\"image-20230523095318581\" /></p>\n<p><mark>权限</mark>就是在 UserDetails 实现类中查询数据库所添加到 Authentication 中的。如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDetailsServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserMapper</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleMapper</span> roleMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserTable</span><span class=\"token punctuation\">></span></span> wrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LambdaQueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        wrapper<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserTable</span><span class=\"token operator\">::</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">UserTable</span> user <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectOne</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名或密码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//        通过 username 查询用户权限</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> roleMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectByRole</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SQL</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token keyword\">select</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"selectByRole\"</span> resultType<span class=\"token operator\">=</span><span class=\"token string\">\"String\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span> <span class=\"token keyword\">DISTINCT</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        mt<span class=\"token punctuation\">.</span>roting</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        user_table <span class=\"token keyword\">AS</span> u</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> user_role <span class=\"token keyword\">AS</span> ur <span class=\"token keyword\">ON</span> u<span class=\"token punctuation\">.</span>role <span class=\"token operator\">=</span> ur<span class=\"token punctuation\">.</span>user_id</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> role_menu <span class=\"token keyword\">AS</span> rm <span class=\"token keyword\">ON</span> ur<span class=\"token punctuation\">.</span>role_id <span class=\"token operator\">=</span> rm<span class=\"token punctuation\">.</span>role_id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> menu_table <span class=\"token keyword\">AS</span> mt <span class=\"token keyword\">ON</span> mt<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> rm<span class=\"token punctuation\">.</span>menu_id</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">WHERE</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        u<span class=\"token punctuation\">.</span><span class=\"token keyword\">STATUS</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token operator\">AND</span> u<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token comment\">#&#123;username&#125;;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">select</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"12-权限判断\"><a class=\"anchor\" href=\"#12-权限判断\">#</a> 1.2 权限判断🍨</h2>\n<h3 id=\"121-设置用户角色和权限\"><a class=\"anchor\" href=\"#121-设置用户角色和权限\">#</a> 1.2.1 设置用户角色和权限</h3>\n<p>设定用户具有 admin，/insert，/delete 权限 ROLE_abc 角色。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">,</span><span class=\"token class-name\">AuthorityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">commaSeparatedSpringToAuthorityList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin,ROLE_abc,/insert,/delete\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"122-控制页面显示效果\"><a class=\"anchor\" href=\"#122-控制页面显示效果\">#</a> 1.2.2 控制页面显示效果</h3>\n<p>在页面中根据用户权限和角色判断页面中显示的内容</p>\n<p><strong>通过权限判断</strong>：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasAuthority('/insert')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>新增<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasAuthority('/delete')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasAuthority('/update')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasAuthority('/select')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查看<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>通过角色判断</strong>：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasRole('abc')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>新增<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasRole('abc')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>删除<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasRole('abc')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">sec:</span>authorize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hasRole('abc')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>查看<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-退出登录\"><a class=\"anchor\" href=\"#2-退出登录\">#</a> 2 退出登录🌮</h2>\n<p>用户只需要向 Spring Security 项目中发送 <mark>/logout</mark> 退出请求即可。</p>\n<h3 id=\"21-退出登录\"><a class=\"anchor\" href=\"#21-退出登录\">#</a> 2.1 退出登录🎉</h3>\n<p>实现退出非常简单，只要在页面中添加 <mark>/logout</mark> 的超链接即可。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/logout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>注销<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springsecurity",
                "计算机学科",
                "springsecurity",
                "thymeleaf"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springmvc/REST%E9%A3%8E%E6%A0%BC/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springmvc/REST%E9%A3%8E%E6%A0%BC/",
            "title": "REST风格",
            "date_published": "2024-01-06T03:03:32.454Z",
            "content_html": "<h1 id=\"rest\"><a class=\"anchor\" href=\"#rest\">#</a> REST</h1>\n<h3 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h3>\n<ul>\n<li>\n<p>REST 简介 (Repersentational State Transfer), 表现形式状态转换</p>\n<ul>\n<li>传统风格资源描述形式</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2xhaG9zdC91c2VyL2dldEJ5SWQ/aWQ9MQ==\">http://loclahost/user/getById?id=1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2VyL3NhdmVVc2Vy\">http://localhost/user/saveUser</span></li>\n</ul>\n</li>\n<li>\n<p>REST 风格描述形式</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2VyLzE=\">http://localhost/user/1</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2Vy\">http://localhost/user</span></li>\n</ul>\n</li>\n<li>\n<p>优点:</p>\n<ul>\n<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li>\n<li>书写简化</li>\n</ul>\n</li>\n<li>\n<p>按照 REST 风格访问资源时使用 &lt;font style=&quot;color:red&quot;&gt;<strong> 行为动作</strong> &lt;/font&gt; 区分对资源进行了何种操作</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2Vycw==\">http://localhost/users</span>         查询全部用户信息    GET (查询)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2Vycy8x\">http://localhost/users/1</span>      查询指定用户信息    GET (查询)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2Vycw==\">http://localhost/users</span>         添加用户信息           POST (新增 / 保存)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2Vycw==\">http://localhost/users</span>         修改用户信息           PUT (修改 / 更新)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC91c2Vycy8x\">http://localhost/users/1</span>      删除用户信息           DELETE (删除)</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"REST%E9%A3%8E%E6%A0%BC_md_files/image_2023-03-03-11-03-53_20230307150309.png?v=1&amp;type=image&amp;token=V1:zQ12RX8ah08KPGpWyX_M1Djk4mXiqtwHcxoY3zJstAo\" alt=\"image_2023-03-03-11-03-53\" /></p>\n<p>&lt;font style=&quot;color:red&quot;&gt;<strong> 注意事项:</strong>&lt;/font&gt;</p>\n<p>上述行为是约定方式，约定不是规范，可以打破，所以称 REST 风格，而不是 REST 规范</p>\n<p>描述模块的名称通常使用复数，也就是加 s 的格式描述，表示此类资源，而非单个资源，例如:users,books,accounts...</p>\n<ul>\n<li>根据 REST 风格对资源进行访问称为 &lt;font style=&quot;color:red&quot;&gt;<strong>RESTful</strong>&lt;/font&gt;</li>\n</ul>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤:</h3>\n<p>1. 设定 http 请求动作</p>\n<p>method = <span class=\"exturl\" data-url=\"aHR0cDovL1JlcXVlc3RNZXRob2QuWFhY\">RequestMethod.XXX</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    使用 REST 风格设置 save 方法为 POST 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"save\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//    @PathVariable: 这个变量的值来自于路径，但是不清楚来自于路径的哪里</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user delete running...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 设定请求参数 (路径变量)</p>\n<p>@RequestMapping(value = &quot;/users/&lt;font style=&quot;color:red&quot;&gt;{id}&lt;/font&gt;&quot;,method = RequestMethod.XXXX)</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;@PathVariabl&lt;/font&gt;</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">UserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user UserById running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"userbyid\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"requestmapping\"><a class=\"anchor\" href=\"#requestmapping\">#</a> @RequestMapping</h3>\n<ul>\n<li>\n<p>类型：方法注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器方法定义上方</p>\n</li>\n<li>\n<p>作用：设置当前控制器方法请求访问路径</p>\n</li>\n<li>\n<p>属性:</p>\n<ul>\n<li>value (默认): 请求访问路径</li>\n<li>method:http 请求动作，标准动作 (GET/POST/PUT/DELETE)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pathvariable\"><a class=\"anchor\" href=\"#pathvariable\">#</a> @PathVariable</h3>\n<ul>\n<li>\n<p>类型：形参注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器方法形参定义前面</p>\n</li>\n<li>\n<p>作用：绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</p>\n</li>\n</ul>\n<p><strong>@RequestBody @RequestParam @PathVariable</strong></p>\n<ul>\n<li>\n<p>区别</p>\n<ul>\n<li>@RequestParam 用于接收 url 地址传参或表单传参</li>\n<li>@RequestBody 用于接收 json 数据</li>\n<li>@PathVariable 用于接收路径参数，使用 {参数名称} 描述路径参数</li>\n</ul>\n</li>\n<li>\n<p>&lt;font style=&quot;color:red&quot;&gt; 应用 &lt;/font&gt;</p>\n<ul>\n<li>后期开发中，发送请求参数超过 1 个时，以 json 格式为主，@RequestBody 引用较广</li>\n<li>如果发送非 json 格式数据，选用 @RequestParam 接收请求参数</li>\n<li>采用 RESTful 进行开发，当参数数量较少时，例如 1 个，可以采用 @PathVariable 接收请求路径变量，通常用于传递 id 值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"restful快速开发\"><a class=\"anchor\" href=\"#restful快速开发\">#</a> RESTful 快速开发</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DELETE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    @PathVariable: 这个变量的值来自于路径，但是不清楚来自于路径的哪里</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user delete running...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/users/&#123;u&#125;\"</span><span class=\"token punctuation\">,</span>method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user update running...\"</span><span class=\"token operator\">+</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简化重复在方法上写 @Response 和 /users 路径名</p>\n<p><img data-src=\"REST%E9%A3%8E%E6%A0%BC_md_files/image_2023-03-03-18-36-15_20230307150329.png?v=1&amp;type=image&amp;token=V1:oejCepTy_6hcgPfchIWBnq7Ta1iUEofW-gRbLdJWc-c\" alt=\"image_2023-03-03-18-36-15\" /></p>\n<ul>\n<li>整体 Controller 代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配置 controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 定义类上整个类生效</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//@ResponseBody</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将 controller 和 responsebody 两个注解功能合二为一</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//    使用 REST 风格设置 save 方法为 POST 请求</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//    @RequestMapping(method = RequestMethod.POST)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//    简化上面的注解功能与上面的 method = RequestMethod.POST 是对等的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"save\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//    @RequestMapping(value = \"/&#123;id&#125;\",method = RequestMethod.DELETE)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//    简化上面注解，有参数加上参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//    @PathVariable: 这个变量的值来自于路径，但是不清楚来自于路径的哪里</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user delete running...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//    @RequestMapping(value = \"/&#123;user&#125;\",method = RequestMethod.PUT)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//    简化上面注解</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user update running...\"</span><span class=\"token operator\">+</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"update\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//    @RequestMapping( value = \"/&#123;id&#125;\",method = RequestMethod.GET)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//    简化上面注解</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">UserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user UserById running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"userbyid\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//    @RequestMapping(method = RequestMethod.GET)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//    简化上面注解</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user getAll running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"getAll\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"restcontroller\"><a class=\"anchor\" href=\"#restcontroller\">#</a> @RestController</h3>\n<ul>\n<li>\n<p>类型：类注解</p>\n</li>\n<li>\n<p>位置：基于 SpringMvc 的 RESTful 开发控制器类定义上方</p>\n</li>\n<li>\n<p>作用：设置当前控制器类为 RESTful 风格，等同于 @Controller 与 @ResponseBody 两个注解组合功能</p>\n</li>\n</ul>\n<h3 id=\"getmappingpostmappingputmappingdeletemapping\"><a class=\"anchor\" href=\"#getmappingpostmappingputmappingdeletemapping\">#</a> @GetMapping,@PostMapping,@PutMapping,@DeleteMapping</h3>\n<ul>\n<li>\n<p>类型：方法注解</p>\n</li>\n<li>\n<p>位置：基于 SpringMvc 的 RESTful 开发控制器方法定义上方</p>\n</li>\n<li>\n<p>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如:@GetMapping 对应 GET 请求</p>\n</li>\n<li>\n<p>属性</p>\n<ul>\n<li>value (默认): 请求访问路径</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//    @PathVariable: 这个变量的值来自于路径，但是不清楚来自于路径的哪里</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"springmvc user delete running...\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"delete\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"设置对静态资源的访问放行\"><a class=\"anchor\" href=\"#设置对静态资源的访问放行\">#</a> 设置对静态资源的访问放行</h3>\n<ul>\n<li>由于 SpringMvcConfig 中查找资源设置了 <code>/</code>  会查找所有的资源作为 SpringMvc 资源，会导致静态页面资源被 SpringMvc 拦截走导致访问不到，所以我们需要定义一个类来过滤</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @3/3/20239:03 PM</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 过滤 web 静态资源不让 Spring 拦截走，因为在 SpringMvcConfig 中的查找资源使用了 / 为找全部</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcSupport</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebMvcConfigurationSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addResourceHandlers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceHandlerRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        当访问 /page/??? 时不要走 MVC，走 /page 目录下的内容</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        如果访问了 /page/** 的请求就访问 /page/ 下的内容</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pages/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//        如果访问了 /css/** 的请求就访问 /css/ 下的内容</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/css/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        如果访问了 /fonts/** 的请求就访问 /fonts/ 下的内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/plugins/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/plugins/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//        如果访问了 /js/** 的请求就访问 /js/ 下的内容</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addResourceHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/js/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addResourceLocations</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/js/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springmvc",
                "计算机学科",
                "springmvc"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springmvc/SpringMVC%E7%AE%80%E4%BB%8B/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springmvc/SpringMVC%E7%AE%80%E4%BB%8B/",
            "title": "SpringMVC",
            "date_published": "2024-01-06T03:03:26.801Z",
            "content_html": "<h1 id=\"springmvc\"><a class=\"anchor\" href=\"#springmvc\">#</a> SpringMVC</h1>\n<p><strong>1. 什么是 MVC</strong></p>\n<p>MVC 是一种软件架构的思想，将软件按照模型，视图，控制器来划分</p>\n<p>M: Model, 模型层，指工程中的 javaBean, 作用是处理数据</p>\n<p>JavaBean 分为两类:</p>\n<ul>\n<li>\n<p>一类称为实体类 Bean: 专门存储业务数据的，如 Student,User 等</p>\n</li>\n<li>\n<p>一类称为业务处理 Bean: 指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问</p>\n</li>\n</ul>\n<p>V: View, 视图层，指工程中的 html 或 jsp 等页面，作用是与用户进行交互，展示数据</p>\n<p>C: Controller, 控制层，指工程中的 Servlet, 作用是接收请求和响应浏览器</p>\n<p>MVC 的工作流程:</p>\n<p>用户通过视图层发送请求到服务器，在服务器中请求被 Controller 接收，Controller 调用相应的 Model 层处理请求，处理完毕将结果返回到 Controller,Controller 再根据请求处理的结果找到相应的 View 视图，渲染数据后最终响应给浏览器</p>\n<h2 id=\"spring概述\"><a class=\"anchor\" href=\"#spring概述\">#</a> Spring 概述</h2>\n<ul>\n<li>SpringMVC 技术与 Servlet 技术功能等同，均属于 web 层开发技术</li>\n</ul>\n<p>当前 web 程序的工作流程</p>\n<p>web 通过浏览器访问页面，前端页面使用异步提交的方式发送到后端服务器，后端服务器采用，表现层，业务层，数据层的三层架构的形式进行开发，页面发送的请求由表现层接收，获取用户的请求参数后，将参数传递到业务层再由业务层访问数据层得到用户需要访问的数据后将数据返回给表现层</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-02-28-09-55-34_20230228095922.png?v=1&amp;type=image&amp;token=V1:mM4SRRKC4ipI2jAbTv_XKB0Lvj3FXM3SLxSyTJlV5dI\" alt=\"image_2023-02-28-09-55-34\" /></p>\n<p>表现层拿到数据后将数据转换成 json 格式发送给前端页面，前端页面接收数据后解析数据并组织成用户浏览的最终页面信息交给浏览器</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-02-28-10-04-48_20230228114047.png?v=1&amp;type=image&amp;token=V1:lPxGAY3PyF3SDnLjjy4wO3gbPVodnCklfxcALZQRTNg\" alt=\"image_2023-02-28-10-04-48\" /></p>\n<ul>\n<li>\n<p>SpringMVC 是一种基于 Java 实现 MVC 模型的轻量级 web 框架</p>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>使用简单，开发便捷（相比于 Servlet）</li>\n</ul>\n</li>\n<li>\n<p>灵活性强</p>\n</li>\n</ul>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-02-28-10-09-22_20230228114059.png?v=1&amp;type=image&amp;token=V1:zipI1kWUI2CjRJWAdJ7YDmvma9-wlq57vyvpwhD5jdU\" alt=\"image_2023-02-28-10-09-22\" /></p>\n<ul>\n<li>小结\n<ul>\n<li>SpringMVC 是一种表现层框架技术</li>\n<li>SpringMVC 用于进行表现层功能开发</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h2>\n<p>1. 使用 SpringMVC 技术需要先导入 SpringMVC 坐标与 Servlet 坐标</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.servlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>javax.servlet-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.2.10.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-02-28-11-01-23_20230228114117.png?v=1&amp;type=image&amp;token=V1:4HI6B2csKa50-InxxCciyzZXscbTRiNsq4IulZb8424\" alt=\"image_2023-02-28-11-01-23\" /></p>\n<p>2. 创建 SpringMVC 控制器类 (等同于 Servlet 功能)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用 @Controller 定义 bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    设置当前路径的访问操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//    设置当前操作的返回值类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 初始化 SpringMVC 环境 (同 Spring 环境), 设定 SpringMVC 加载对应的 bean</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建 SpringMvc 的配置类，加载 controller 对应的 bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.dkx.springmvc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4. 初始化 Servlet 容器，加载 SpringMVC 环境，并设置 SpringMVC 技术处理的请求</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个 Servlet 容器启动的配置类，在里面加载 Spring 的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainerInitializerConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    加载 SpringMvc 容器配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        c<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//    设置哪些请求归属 SpringMvc 处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        设置所有请求归 SpringMvc 去处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//    加载 SpringMvc 容器的配置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"controller\"><a class=\"anchor\" href=\"#controller\">#</a> @Controller</h2>\n<ul>\n<li>\n<p>类型：类注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器类定义上方</p>\n</li>\n<li>\n<p>作用：设定 SpringMvc 的核心控制器 bean</p>\n</li>\n</ul>\n<h2 id=\"requestmapping\"><a class=\"anchor\" href=\"#requestmapping\">#</a> @RequestMapping</h2>\n<ul>\n<li>\n<p>类型：方法注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器方法定义上方</p>\n</li>\n<li>\n<p>作用：设置当前控制器方法请求访问路径</p>\n</li>\n<li>\n<p>相关属性</p>\n<ul>\n<li>value (默认): 请求访问路径</li>\n</ul>\n</li>\n<li>\n<p>SpringMVC 入门程序开发总结 (1+N)</p>\n<ul>\n<li>一次性工作\n<ul>\n<li>创建工程，设置服务器，加载工程</li>\n<li>导入坐标</li>\n<li>创建 web 容器启动类，加载 SpringMVC 配置，并设置 SpringMVC 请求拦截路径</li>\n<li>SpringMVC 核心配置类（设置配置类，扫描 controller 包，加载 Controller 控制器 bean）</li>\n</ul>\n</li>\n<li>多次工作\n<ul>\n<li>定义处理请求的控制器类</li>\n<li>定义处理请求的控制器方法，并配置映射路径（@RequestMapping）与返回 json 数据（@ResponseBody）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>AbstractDispatcherServletInitializer 类是 SpringMvc 提供的快速初始化 web3.0 容器的抽象类</p>\n</li>\n<li>\n<p>AbstractDispatcherServletInitializer 提供三个接口方法供用户实现</p>\n<ul>\n<li>createServletApplicationContext () 方法，创建 Servlet 容器时，加载 SpringMVC 对应的 bean 并放入 WebApplicationContext 对象范围中，而 WebApplicationContext 的范围为 ServletContext 范围，即整个 web 容器范围</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    加载 SpringMvc 容器配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createServletApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigWebApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        c<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>getServletMappings () 方法，设定 SpringMVC 对应的请求映射路径，设置为 / 表示拦截所有请求，任意请求都将转入到 SpringMVC 进行处理</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    设置哪些请求归属 SpringMvc 处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//        设置所有请求归 SpringMvc 去处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>createRootApplicationContext () 方法，如果创建 Servlet 容器时需要加载非 SpringMVC 对应的 bean, 使用当前方法进行，使用方式同 createServletApplicationContext ()</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    加载 SpringMvc 容器的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WebApplicationContext</span> <span class=\"token function\">createRootApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"入门案例工作流程分析\"><a class=\"anchor\" href=\"#入门案例工作流程分析\">#</a> 入门案例工作流程分析</h2>\n<ul>\n<li>启动服务器初始化过程</li>\n</ul>\n<ol>\n<li>\n<p>服务器启动，执行 ServletContainersInitConfig 类，初始化 web 容器</p>\n</li>\n<li>\n<p>执行 createServletApplicationContext 方法，创建了 WebApplicationContext 对象</p>\n</li>\n<li>\n<p>加载 SpringMvcConfig</p>\n</li>\n<li>\n<p>执行 @ComponentScan 加载对应的 bean</p>\n</li>\n<li>\n<p>加载 UserController, 每个 @RequestMapping 的名称对应一个具体的方法</p>\n</li>\n<li>\n<p>执行 getServletMapping 方法，定义所有的请求都通过 SpringMvc</p>\n</li>\n</ol>\n<ul>\n<li>单次请求过程</li>\n</ul>\n<ol>\n<li>\n<p>发送请求 localhost/save</p>\n</li>\n<li>\n<p>web 容器发现所有请求都经过 SpringMVC, 将请求交给 SpringMVC 处理</p>\n</li>\n<li>\n<p>解析请求路径 /save</p>\n</li>\n<li>\n<p>由 /save 匹配执行对应的方法 save ()</p>\n</li>\n<li>\n<p>执行 save ()</p>\n</li>\n<li>\n<p>检测到有 @ResponseBody 直接将 save () 方法的返回值作为响应体返回给请求方</p>\n</li>\n</ol>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-02-28-14-48-08_20230228150010.png?v=1&amp;type=image&amp;token=V1:oD4mrSPwUaDZwAcbwGn2GXxkKorT-HhDI2vSyA0S5hs\" alt=\"image_2023-02-28-14-48-08\" /></p>\n<h2 id=\"controller加载控制与业务bean加载控制\"><a class=\"anchor\" href=\"#controller加载控制与业务bean加载控制\">#</a> Controller 加载控制与业务 bean 加载控制</h2>\n<ul>\n<li>\n<p>SpringMVC 相关 bean (表现层 bean)</p>\n</li>\n<li>\n<p>Spring 控制的 bean</p>\n<ul>\n<li>业务 bean (Service)</li>\n<li>功能 bean (DataSource 等)</li>\n</ul>\n</li>\n<li>\n<p>SpringMVC 相关 bean 加载控制</p>\n<ul>\n<li>SpringMVC 加载的 bean 对应的包均在 com.dkx.spring.controller 包内</li>\n</ul>\n</li>\n<li>\n<p>Spring 相关 bean 加载控制</p>\n<ul>\n<li>方式一：Spring 加载的 bean 设定扫描范围为 com.dkx.spring, 排除掉 controller 包内的 bean</li>\n<li>方式二：Spring 加载的 bean 设定扫描范围为精准范围，例如 Service 包，dao 包等</li>\n<li>方式三：不区分 Spring 与 SpringMVC 的环境，加载到同一个环境中</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-02-28-14-57-35_20230228150025.png?v=1&amp;type=image&amp;token=V1:HfBhhMHkzrQ-8QgMljigm3w6tD8kggRnAG3XqMB4To0\" alt=\"image_2023-02-28-14-57-35\" /></p>\n<h2 id=\"componentscan\"><a class=\"anchor\" href=\"#componentscan\">#</a> @ComponentScan</h2>\n<ul>\n<li>\n<p>名称:@ComponentScan</p>\n</li>\n<li>\n<p>类型：类注解</p>\n</li>\n<li>\n<p>作用：<strong>用于设定扫描 Bean 路径，多个数据使用数组格式</strong></p>\n</li>\n<li>\n<p>范例:</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"com.dkx.spring\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        excludeFilters <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                classes <span class=\"token operator\">=</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>属性\n<ul>\n<li>excludeFilters: 排除扫描路径加载的 bean, 需要指定类别 (type) 与具体项 (classes)</li>\n<li>includeFilters: 加载指定的 bean, 需要指定类别 (type) 与具体项 (classes)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"简化初始化servlet容器\"><a class=\"anchor\" href=\"#简化初始化servlet容器\">#</a> 简化初始化 Servlet 容器</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义简化 Servlet 容器启动的配置类，在里面加载 Spring 的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletContainersInitConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 加载 Spring 容器配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 加载 SpringMVC 容器配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 设置哪些请求归属 SpringMVC 处理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       <span class=\"token comment\">// 设置所有请求归属 SpringMVC 去拦截处理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"postman简介\"><a class=\"anchor\" href=\"#postman简介\">#</a> PostMan 简介</h2>\n<ul>\n<li>\n<p>PostMan 是一款功能强大的网页调试与发送网页 HTTP 请求的 Chrome 插件</p>\n</li>\n<li>\n<p>作用：常用于进行接口测试</p>\n</li>\n<li>\n<p>特征</p>\n<ul>\n<li>简单</li>\n<li>实用</li>\n<li>美观</li>\n<li>大方</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"postman基本使用\"><a class=\"anchor\" href=\"#postman基本使用\">#</a> PostMan 基本使用</h3>\n<ul>\n<li>\n<p>注册登录</p>\n</li>\n<li>\n<p>创建工作空间 / 进入工作空间</p>\n</li>\n<li>\n<p>发起请求测试结果</p>\n</li>\n</ul>\n<h2 id=\"请求与响应\"><a class=\"anchor\" href=\"#请求与响应\">#</a> 请求与响应</h2>\n<h3 id=\"请求的映射路径\"><a class=\"anchor\" href=\"#请求的映射路径\">#</a> 请求的映射路径</h3>\n<p><strong>问题</strong></p>\n<ul>\n<li>如果两个 Controller 不同的类中有同样一个访问路径为  <code>/save</code>  那么，将会报错如下:</li>\n</ul>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image-20230301103255294_20230301150535.png?v=1&amp;type=image&amp;token=V1:M6qs_9a4bb7PuqGlYabymKsv4IQO9Q2Q3d3iWhTUQRs\" alt=\"image-20230301103255294\" /></p>\n<p>导致错误的代码</p>\n<ul>\n<li>UserController</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User Save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>BookController</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book delete running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>团队多人开发，每人设置不同的请求路径，冲突问题如何解决 ---&lt;font style=&quot;color:red&quot;&gt; 设置模块名作为请求路径前缀 &lt;/font&gt;</li>\n</ol>\n<ul>\n<li>在 UserController 类中的 save 访问路径加上 user 的一级路径，BookController 中也要这样加上统一规范</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User Save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问路径查看效果</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-10-45-02_20230301104757.png?v=1&amp;type=image&amp;token=V1:uJXvcIF9AnGIXFW3S4geaxdy89MMGTSc8GflaJMsft0\" alt=\"image_2023-03-01-10-45-02\" /></p>\n<h3 id=\"简化书写\"><a class=\"anchor\" href=\"#简化书写\">#</a> 简化书写</h3>\n<ul>\n<li>\n<p>类上定义整个模块的路径前缀</p>\n</li>\n<li>\n<p>类中定义访问路径的具体</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book save running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book delete running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book delete'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问结果</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-01-34_20230301150555.png?v=1&amp;type=image&amp;token=V1:jB0L_yef15YHTi5og4N4HpBXFyOb6wSR3OwRebOmpuU\" alt=\"image_2023-03-01-11-01-34\" /></p>\n<h2 id=\"请求方式\"><a class=\"anchor\" href=\"#请求方式\">#</a> 请求方式</h2>\n<h3 id=\"get请求\"><a class=\"anchor\" href=\"#get请求\">#</a> Get 请求</h3>\n<ul>\n<li>处理中文乱码问题\n<ul>\n<li>在 pom.xml 中配置 Tomcat7 的编码具体看如下:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.tomcat.maven<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>tomcat7-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>port</span><span class=\"token punctuation\">></span></span>80<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>port</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>path</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>path</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uriEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            UTF-8</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>uriEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book save running...\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Send Request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-15-51_20230301150615.png?v=1&amp;type=image&amp;token=V1:F_VyXVqNDeJgU9E7axr187s12rN-X4K0NS6RrRcftj4\" alt=\"image_2023-03-01-11-15-51\" /></p>\n<p>show console result</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-17-02_20230301150628.png?v=1&amp;type=image&amp;token=V1:DFtAW_rQFgFqa0IsqReHfQuo3nsiKdX2BZ500bUxq-4\" alt=\"image_2023-03-01-11-17-02\" /></p>\n<h4 id=\"post请求\"><a class=\"anchor\" href=\"#post请求\">#</a> Post 请求</h4>\n<ul>\n<li>普通参数：form 表单 Post 请求传参，表单参数名与形参变量名相同，定义形参即可接收参数</li>\n</ul>\n<p>Post 请求不能在 Url 中写？来进行参数的赋值</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-18-32_20230301150645.png?v=1&amp;type=image&amp;token=V1:wSNFsoibWZGB1HTtkzEcZjiqGzndvgIl_0fyokBgVRg\" alt=\"image_2023-03-01-11-18-32\" /></p>\n<p>我们需要在响应体中进行赋值</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-22-51_20230301150656.png?v=1&amp;type=image&amp;token=V1:-F2apK9f0drjPUy_2QVN29uOciF-ofSIGq3YzvKu5UI\" alt=\"image_2023-03-01-11-22-51\" /></p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-26-14_20230301150709.png?v=1&amp;type=image&amp;token=V1:WFlzGxbF9kovBCkYt3HB5I1oec2XGZbPTrFzXlzB6F0\" alt=\"image_2023-03-01-11-26-14\" /></p>\n<p>show console result</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-26-51_20230301150723.png?v=1&amp;type=image&amp;token=V1:TKGTq0suvc8qDFKv7pBYBVi50TwopZPOHb36uXPPGuU\" alt=\"image_2023-03-01-11-26-51\" /></p>\n<h2 id=\"处理请求参数中文乱码问题\"><a class=\"anchor\" href=\"#处理请求参数中文乱码问题\">#</a> 处理请求参数中文乱码问题</h2>\n<ul>\n<li>在 config 目录下 ServletConfig 类中定义处理乱码的过滤方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServeltConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getRootConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletConfigClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SpringMvcConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//    处理乱码</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getServletFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">CharacterEncodingFilter</span> character <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CharacterEncodingFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        character<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        多个 character 使用，(逗号) 分隔</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>character<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-38-16_20230301150740.png?v=1&amp;type=image&amp;token=V1:TL148AyiBBTqA7icy316397q2umA9OTps_VPFKQDwpU\" alt=\"image_2023-03-01-11-38-16\" /></p>\n<p>send request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-44-17_20230301150750.png?v=1&amp;type=image&amp;token=V1:JxP3dqC6yZIvE5BaFZV76wo4I1tmt4jVEA7cnsqzj_w\" alt=\"image_2023-03-01-11-44-17\" /></p>\n<p>show console result</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-44-39_20230301150805.png?v=1&amp;type=image&amp;token=V1:OrO83t7BqaxrMO8XxtMqyaK_IpNcxS9VEzuDADDZn-k\" alt=\"image_2023-03-01-11-44-39\" /></p>\n<ul>\n<li>&lt;font style=&quot;color:red&quot;&gt;<strong> 注意</strong> &lt;/font&gt;: 此处理乱码方式对 POST 有效，但对 GET 无效</li>\n</ul>\n<h3 id=\"requestparam\"><a class=\"anchor\" href=\"#requestparam\">#</a> @RequestParam</h3>\n<ul>\n<li>\n<p>问题：如果发送请求参数的 key 与我们接收参数的参数名不相同那么则接收不到参数</p>\n</li>\n<li>\n<p>类型：形参注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器方法形参定义前面</p>\n</li>\n<li>\n<p>作用：绑定请求参数与处理器方法形参间的关系</p>\n</li>\n<li>\n<p>参数:</p>\n<ul>\n<li>required: 是否为必传参数</li>\n<li>defaultValue: 参数默认值</li>\n</ul>\n</li>\n</ul>\n<p>send request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-58-02_20230301150821.png?v=1&amp;type=image&amp;token=V1:H27NRXNfyD6vdxJel_CMq_Xcmjl_BSg5281qxzIITac\" alt=\"image_2023-03-01-11-58-02\" /></p>\n<p>show console result</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-57-49_20230301150831.png?v=1&amp;type=image&amp;token=V1:QAiUWisL8vXBpDSD2FSWmtPUfyjsCikHHY5JsG9yyHY\" alt=\"image_2023-03-01-11-57-49\" /></p>\n<ul>\n<li>用于在访问路径的方法的参数列表中对请求参数进行形参之间绑定关系</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/book\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BookController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//                    RequestParam 绑定请求参数和形参之间的关系</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book save running...\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>send request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-59-05_20230301150845.png?v=1&amp;type=image&amp;token=V1:oVlgDoybS8okUommnvOQsbZcoQuXHUcaswo6kTPzqDE\" alt=\"image_2023-03-01-11-59-05\" /></p>\n<p>show console result</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-11-59-33_20230301150858.png?v=1&amp;type=image&amp;token=V1:W_wzg-57RrwZCwaWil5BWiQxeao6aG1zuq3tDYJ7jcA\" alt=\"image_2023-03-01-11-59-33\" /></p>\n<h2 id=\"五种数据类型的传参方式\"><a class=\"anchor\" href=\"#五种数据类型的传参方式\">#</a> 五种数据类型的传参方式</h2>\n<h3 id=\"普通参数\"><a class=\"anchor\" href=\"#普通参数\">#</a> 普通参数:</h3>\n<ul>\n<li>url 地址传参，地址参数名与形参变量名相同，定义形参即可接收参数</li>\n</ul>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-14-50-09_20230301150944.png?v=1&amp;type=image&amp;token=V1:tUp4kE9X3Q390V2oQM6mfl3QXE7pfFm_ZJCkqnZnEWc\" alt=\"image_2023-03-01-14-50-09\" /></p>\n<ul>\n<li>请求参数名与形参变量名 &lt;font style=&quot;color:red&quot;&gt;<strong> 不同</strong> &lt;/font&gt;, 使用 &lt; font style=&quot;color:red&quot;&gt;<strong>@RequestParam</strong>&lt;/font&gt; 绑定参数关系</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//                RequestParam 绑定请求参数和形参之间的关系</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Book save running...\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMVC Book save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"pojo参数嵌套pojo参数\"><a class=\"anchor\" href=\"#pojo参数嵌套pojo参数\">#</a> POJO 参数 / 嵌套 POJO 参数:</h3>\n<p>前者：请求参数名与形参对象属性名相同，定义 POJO 类型形参即可接收参数</p>\n<p>后者：POJO 对象中包含 POJO 对象</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;<strong> 注意:</strong> &lt;/font&gt;<strong> 编写实体类代码的时候一定加上 getter 和 setter 还有 toString 否则值为 null</strong></p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-14-57-29_20230301151000.png?v=1&amp;type=image&amp;token=V1:XTzNFGj6VAvumdlB39Pl4riYLGUujwAJXmhB9OdgjVk\" alt=\"image_2023-03-01-14-57-29\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    pojo 参数，如果发送请求的参数名和 pojo 类中的属性名相同则可以接收到参数值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User Save'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组参数\"><a class=\"anchor\" href=\"#数组参数\">#</a> 数组参数:</h3>\n<ul>\n<li>请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型形参即可接收参数</li>\n</ul>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-15-01-24_20230301151014.png?v=1&amp;type=image&amp;token=V1:XcAYDtTIOhiDO5t9lZkcQv8Y9rmOSZ41jDh87czsFV8\" alt=\"image_2023-03-01-15-01-24\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    数组参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/arrayParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">arrayParam</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User arrayParam running...'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"集合保存普通参数\"><a class=\"anchor\" href=\"#集合保存普通参数\">#</a> 集合保存普通参数:</h3>\n<ul>\n<li>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</li>\n</ul>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-15-03-14_20230301151028.png?v=1&amp;type=image&amp;token=V1:X2_xC1nK4n4iW6DK2y-sXI5DcZzKEpoqJviXMThD9Pg\" alt=\"image_2023-03-01-15-03-14\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    集合参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/listParam\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span>           <span class=\"token comment\">/*List 是引用类型它会创建对象 set 属性，加上注解来让它直接往里面添加值 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listParam</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User listParam running...'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"传递json数据\"><a class=\"anchor\" href=\"#传递json数据\">#</a> 传递 json 数据</h3>\n<ol>\n<li>导入坐标</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.9.9<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>设置发送 json 数据（请求 body 中添加 json 数据）</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401061105792.png\" alt=\"image-20230417173450225\" /></p>\n</li>\n<li>\n<p>开启自动转换 json 数据的支持</p>\n</li>\n</ol>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image-20230301170021890_20230301214324.png?v=1&amp;type=image&amp;token=V1:6bhIWdxVMSWxSQbI-fN2xHbDAqoboL1GOote0oUILio\" alt=\"image-20230301170021890\" /></p>\n<p>&lt;font style=&quot;color:red&quot;&gt;<strong> 注意事项：</strong>&lt;/font&gt;<strong>@EnableWebMvc</strong> 注解功能强大，该注解整合了多个功能，此处仅使用其中一部分功能，即 json 数据进行自动类型转换</p>\n<ol start=\"4\">\n<li>\n<p>设置接收 json 数据</p>\n</li>\n<li>\n<p>设置接收 json 数据 @RequestBody</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    RequestBody: 用于接收前端给后端传递的 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listParamforJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User listParamforJson'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//-------------------------------Run Result-------------------------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>唱<span class=\"token punctuation\">,</span> 跳<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Wrapr</span><span class=\"token punctuation\">,</span> 篮球<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h4 id=\"json数组\"><a class=\"anchor\" href=\"#json数组\">#</a> json 数组</h4>\n<ul>\n<li>在 SpringMvcConfig 配置类中 配置注解 @EnableWebMvc</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.dkx.spring\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebMvc</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringMvcConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Controller 类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//    RequestBody: 用于接收前端给后端传递的 json 数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listParamforJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>likes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User listParamforJson'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>send request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-15-45-34_20230301165118.png?v=1&amp;type=image&amp;token=V1:EJPbv1_S3rPUXUUsGYLCRhMZJIPY-oNY0aKvUXguYbE\" alt=\"image_2023-03-01-15-45-34\" /></p>\n<p>show console result</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-16-09-14_20230301165133.png?v=1&amp;type=image&amp;token=V1:jTNEFJBIf4haD9ulFJuhmqJo3Of4rVXOVZXMogd0svQ\" alt=\"image_2023-03-01-16-09-14\" /></p>\n<h4 id=\"json对象pojo\"><a class=\"anchor\" href=\"#json对象pojo\">#</a> json 对象 (POJO)</h4>\n<ul>\n<li>User</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"User&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\", name1='\"</span> <span class=\"token operator\">+</span> name1 <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\", name2='\"</span> <span class=\"token operator\">+</span> name2 <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\", name3='\"</span> <span class=\"token operator\">+</span> name3 <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token string\">\", name4='\"</span> <span class=\"token operator\">+</span> name4 <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token string\">\", address=\"</span> <span class=\"token operator\">+</span> address <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span> <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name3<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name4<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Address</span> address<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name1 <span class=\"token operator\">=</span> name1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name2 <span class=\"token operator\">=</span> name2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name3 <span class=\"token operator\">=</span> name3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name4 <span class=\"token operator\">=</span> name4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name3<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name1 <span class=\"token operator\">=</span> name1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name2 <span class=\"token operator\">=</span> name2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name3 <span class=\"token operator\">=</span> name3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name4 <span class=\"token operator\">=</span> name4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> name1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name1 <span class=\"token operator\">=</span> name1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> name2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name2 <span class=\"token operator\">=</span> name2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> name3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name3 <span class=\"token operator\">=</span> name3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> name4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name4 <span class=\"token operator\">=</span> name4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Address</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> provind<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> provind<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>provind <span class=\"token operator\">=</span> provind<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getProvind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> provind<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProvind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> provind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>provind <span class=\"token operator\">=</span> provind<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setCity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> city<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> city<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Address&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token string\">\"provind='\"</span> <span class=\"token operator\">+</span> provind <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token string\">\", city='\"</span> <span class=\"token operator\">+</span> city <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>UserController</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pojo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    RequestBody: 用于接收前端给后端传递的 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pojoParam</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User pojoParam'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>send request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-16-42-25_20230301165202.png?v=1&amp;type=image&amp;token=V1:mKrSrm0-gLapYKgMEwSH646T1WJFZm2vsjQ3fHRlZPk\" alt=\"image_2023-03-01-16-42-25\" /></p>\n<h4 id=\"json数组pojo\"><a class=\"anchor\" href=\"#json数组pojo\">#</a> json 数组 (POJO)</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/listPOJO\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    @RequestBody: 用于接收前端给后端传递的 json 数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">listPOJOforParamJson</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'module':'springMvc User listPOJOforParamJson'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>send request</p>\n<p><img data-src=\"SpringMVC%E7%AE%80%E4%BB%8B_md_files/image_2023-03-01-16-50-01_20230301165216.png?v=1&amp;type=image&amp;token=V1:GODlLy0uFoSWsaNCDANiuu1TzfbXUFdIUdcyNcF7LqU\" alt=\"image_2023-03-01-16-50-01\" /></p>\n<h3 id=\"enablewebmvc\"><a class=\"anchor\" href=\"#enablewebmvc\">#</a> @EnableWebMvc</h3>\n<ul>\n<li>\n<p>类型：配置类注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 配置类定义上方</p>\n</li>\n<li>\n<p>作用:<strong> 开启 SpringMvc 多项辅助功能</strong></p>\n</li>\n</ul>\n<h3 id=\"requestbody\"><a class=\"anchor\" href=\"#requestbody\">#</a> @RequestBody</h3>\n<ul>\n<li>\n<p>类型：形参注解</p>\n</li>\n<li>\n<p>位置：SpringM vc 控制器方法形参定义前面</p>\n</li>\n<li>\n<p>作用:<strong> 将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</strong></p>\n</li>\n</ul>\n<h2 id=\"requestbody与requestparam区别\"><a class=\"anchor\" href=\"#requestbody与requestparam区别\">#</a> @RequestBody 与 RequestParam 区别</h2>\n<ul>\n<li>\n<p>区别</p>\n<ul>\n<li>@RequestParam 用于接收 url 地址传参，表单传参 (application/x-www-form-urlencoded)</li>\n<li>@requestBody 用于接收 json 数据 (application/json)</li>\n</ul>\n</li>\n<li>\n<p>应用</p>\n<ul>\n<li>后期开发中，发送 json 格式数据为主，@RequestBody 应用较广</li>\n<li>如果发送非 json 格式数据，选用 @RequestParam 接收请求参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"日期类型参数传递\"><a class=\"anchor\" href=\"#日期类型参数传递\">#</a> 日期类型参数传递</h2>\n<ul>\n<li>日期类型数据基于系统不同格式也不尽相同\n<ul>\n<li>2088-08-18</li>\n<li>2088/08/18</li>\n<li>08/18/2088</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"datetimeformat\"><a class=\"anchor\" href=\"#datetimeformat\">#</a> @DateTimeFormat</h3>\n<ul>\n<li>\n<p>类型：形参注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器方法形参前面</p>\n</li>\n<li>\n<p>作用：设定日期时间型数据格式</p>\n</li>\n<li>\n<p>属性:pattern: 日期时间格式字符串</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 设定日期时间类型格式，如果格式在 json 传递参数时不一致则会导致报错</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@DateTimeFormat</span><span class=\"token punctuation\">(</span>pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> date<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> date<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"User&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token string\">\", date=\"</span> <span class=\"token operator\">+</span> date <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>controller</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/json\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&#123;'model':'springMVC'&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//--------------------------------Result--------------------------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token char\">'Dkx'</span><span class=\"token punctuation\">,</span> date<span class=\"token operator\">=</span><span class=\"token class-name\">Wed</span> <span class=\"token class-name\">Dec</span> <span class=\"token number\">19</span> <span class=\"token number\">08</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> <span class=\"token constant\">CST</span> <span class=\"token number\">2001</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>PostMan, 发送 json 的数据</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Dkx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2001-12-19\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型转换器\"><a class=\"anchor\" href=\"#类型转换器\">#</a> 类型转换器</h3>\n<p>帮我们进行类型转换的接口，将 Date 转换为 String 类型但是从第二个 Date 参数开始不进行自动转换</p>\n<ul>\n<li>Converter 接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Converter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">T</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>请求参数年龄数据 (String --&gt; Integer)</p>\n</li>\n<li>\n<p>日期格式转换 (String --&gt; Date)</p>\n</li>\n<li>\n<p>@EnablewebMvc 功能之一：根据类型匹配对应的类型转换器</p>\n</li>\n</ul>\n<h2 id=\"响应\"><a class=\"anchor\" href=\"#响应\">#</a> 响应</h2>\n<ul>\n<li>响应页面</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    响应页面 / 跳转页面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toJumpPage\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toJumpPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"页面跳转\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"/page.jsp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>响应数据\n<ul>\n<li>文本数据</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    响应文本数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toText\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    [WARNING] No mapping for GET /response text: 找一个文件为 response 找不到报错异常</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//    加上 ResponseBody 用于接收 json 数据 （application/json）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回纯文本数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"response text\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>json 数据</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//    响应 POJO 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toJsonPOJO\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">toJsonPOJO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回POJO对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小日子-刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>响应 json 数据 (对象集合转 json 数组)</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toJsonList\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toJsonList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回Json集合数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        user1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        user1<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"responsebody\"><a class=\"anchor\" href=\"#responsebody\">#</a> @ResponseBody</h3>\n<ul>\n<li>\n<p>类型：方法注解</p>\n</li>\n<li>\n<p>位置：SpringMvc 控制器方法定义上方</p>\n</li>\n<li>\n<p>作用：设<strong>置当前控制器返回值作为响应体</strong></p>\n</li>\n</ul>\n<p>帮我们转换的接口：HttpMessageConverter 接口</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springmvc",
                "计算机学科",
                "springmvc"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springboot/MiniO/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springboot/MiniO/",
            "title": "Minio",
            "date_published": "2024-01-06T03:01:41.977Z",
            "content_html": "<h1 id=\"一-minio\"><a class=\"anchor\" href=\"#一-minio\">#</a> 一、Minio</h1>\n<h2 id=\"11-介绍\"><a class=\"anchor\" href=\"#11-介绍\">#</a> 1.1、介绍</h2>\n<p>本项目采用 Minio 构建分布式文件系统，MiniO 是一个非常轻量的服务，可以很简单的和其它应用的结合使用，它兼容亚马孙 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片，视频，日志文件，备份数据和容器 / 虚拟机镜像等。</p>\n<p>它一大特点就是轻量，使用简单，功能强大，支持各种平台，单个文件最大 5TB，兼容 Amazon S3 接口，提供了 Java，Python，Go 等多版本 SDK 支持。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taW4uaW8=\">https://min.io</span></p>\n<p>中文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWluaW8ub3JnLmNuLyVFRiVCQyU4Q2h0dHA6Ly9kb2NzLm1pbmlvLm9yZy5jbi9kb2NzLw==\">https://www.minio.org.cn/，http://docs.minio.org.cn/docs/</span></p>\n<p>Minio 集群采用去中心化共享架构，每个节点是对等关系，通过 Nginx 可对 Minio 进行负载均衡访问。</p>\n<p><strong>去中心化有什么好处？</strong>。</p>\n<p>在大数据领域，通常的设计理念都是无中心和分布式。Minio 分布式模式可以帮助你搭建一个高可用的对象存储服务，你可以使用这些存储设备，而不用考虑其真实物理位置。</p>\n<p>它将分布在不用服务器上的多块硬盘组成一个对象存储服务。由于硬盘分布在不同的节点，分布式 Minio 避免了单点故障。如下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310302141371.png\" alt=\"image-20231030214114635\" /></p>\n<p>Minio 使用纠删码技术来保护数据，它是一种恢复丢失和损坏数据的数学算法，它将数据分块冗余的分散存储在各个节点的磁盘上，所有的可用磁盘组成一个集合，上图由 8 块硬盘组成一个集合，当上传一个文件时会通过纠删码算法计算对文件进行分块存储，除了将文件本身分成 4 个数据块，还会生成 4 个校验块，数据块和校验块会分散的存储在这 8 块硬盘上。</p>\n<p>使用纠删码的好处是即便丢失一半数量 (N//2) 的硬盘，仍然可以恢复数据。比如上边集合中有 4 个以内的硬盘损坏仍可保证数据恢复，不影响上传和下载，如果多余一半的硬盘坏了则无法恢复</p>\n<h2 id=\"12-数据恢复演示\"><a class=\"anchor\" href=\"#12-数据恢复演示\">#</a> 1.2、数据恢复演示</h2>\n<p>下边在本机演示 Minio 恢复数据的过程。在本地创建 4 个目录表示 4 个硬盘。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310302148756.png\" alt=\"image-20231030214820074\" /></p>\n<p>下载 minio，下载地址在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5taW5pby5pby9zZXJ2ZXIvbWluaW8vcmVsZWFzZS8lRUYlQkMlOEMlRTUlOEYlQUYlRTQlQkIlOEUlRTglQUYlQkUlRTclQTglOEIlRTglQjUlODQlRTYlOTYlOTklRTYlODklQkUlRTUlODglQjBtaW5pbyVFNyU5QSU4NCVFNSVBRSU4OSVFOCVBMyU4NSVFNiU5NiU4NyVFNCVCQiVCNm1pbmlvLnppcCVFOCVBNyVBMyVFNSU4RSU4QiVFNSU4RCVCMyVFNSU4RiVBRiVFNCVCRCVCRiVFNyU5NCVBOCVFRiVCQyU4Q0NNRCVFOCVCRiU5QiVFNSU4NSVBNSVFNiU5QyU4OW1pbmlvLmV4ZSVFNyU5QSU4NCVFNyU5QiVBRSVFNSVCRCU5NSVFRiVCQyU4QyVFOCVCRiU5MCVFOCVBMSU4QyVFNCVCOCU4QiVFOCVCRSVCOSVFNyU5QSU4NCVFNSU5MSVCRCVFNCVCQiVBNCVFRiVCQyU5QQ==\">https://dl.minio.io/server/minio/release/，可从课程资料找到 minio 的安装文件 minio.zip 解压即可使用，CMD 进入有 minio.exe 的目录，运行下边的命令：</span></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>minio.exe server D:<span class=\"token punctuation\">\\</span>develop<span class=\"token punctuation\">\\</span>minio_data<span class=\"token punctuation\">\\</span>data1  D:<span class=\"token punctuation\">\\</span>develop<span class=\"token punctuation\">\\</span>minio_data<span class=\"token punctuation\">\\</span>data2  D:<span class=\"token punctuation\">\\</span>develop<span class=\"token punctuation\">\\</span>minio_data<span class=\"token punctuation\">\\</span>data3  D:<span class=\"token punctuation\">\\</span>develop<span class=\"token punctuation\">\\</span>minio_data<span class=\"token punctuation\">\\</span>data4</pre></td></tr></table></figure><p>启动完成后效果如下所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310310858167.png\" alt=\"image-20231031085828981\" /></p>\n<p>说明如下：</p>\n<pre><code>WARNING: MINIO_ACCESS_KEY and MINIO_SECRET_KEY are deprecated.\n         Please use MINIO_ROOT_USER and MINIO_ROOT_PASSWORD\nFormatting 1st pool, 1 set(s), 4 drives per set.\nWARNING: Host local has more than 2 drives of set. A host failure will result in data becoming unavailable.\nWARNING: Detected default credentials 'minioadmin:minioadmin', we recommend that you change these values with 'MINIO_ROOT_USER' and 'MINIO_ROOT_PASSWORD' environment variables\n</code></pre>\n<p>1）老版本使用的 MINIO_ACCESS_KEY 和 MINIO_SECRET_KEY 不推荐使用，推荐使用 MINIO_ROOT_USER 和 MINIO_ROOT_PASSWORD 设置账号和密码。</p>\n<p>2）pool 即 minio 节点组成的池子，当前有一个 pool 和 4 个硬盘组成的 set 集合</p>\n<p>3）因为集合是 4 个硬盘，大于 2 的硬盘损坏数据将无法恢复。</p>\n<p>4）账号和密码默认为 minioadmin、minioadmin，可以在环境变量中设置通过 'MINIO_ROOT_USER' and 'MINIO_ROOT_PASSWORD' 进行设置。</p>\n<p>下边输入 http://localhost:9000 进行登录，账号和密码为：minioadmin/minioadmin</p>\n<p>登录成功后，下一步创建 bucket，桶，它相当于存储文件的目录，可以创建若干的桶。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310310900241.png\" alt=\"image-20231031090017162\" /></p>\n<p>输入 bucket 的名称，点击 “CreateBucket”，创建成功</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310310900332.png\" alt=\"image-20231031090033336\" /></p>\n<p>点击 “upload” 上传文件。</p>\n<p>下边上传几个文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310310900295.png\" alt=\"image-20231031090045752\" /></p>\n<p>下边去四个目录观察文件的存储情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310310901020.png\" alt=\"image-20231031090107880\" /></p>\n<p>我们发现上传的 1.mp4 文件存储在了四个目录，即四个硬盘上。</p>\n<p>下边测试 minio 的数据恢复过程：</p>\n<p>1、首先删除一个目录。</p>\n<p>删除目录后仍然可以在 web 控制台上传文件和下载文件。</p>\n<p>稍等片刻删除的目录自动恢复。</p>\n<p>2、删除两个目录。</p>\n<p>删除两个目录也会自动恢复。</p>\n<p>3、删除三个目录 。</p>\n<p>由于 集合中共有 4 块硬盘，有大于一半的硬盘损坏数据无法恢复。</p>\n<p>此时报错：We encountered an internal error, please try again.  (Read failed.  Insufficient number of drives online) 在线驱动器数量不足。</p>\n<h1 id=\"二-sdk\"><a class=\"anchor\" href=\"#二-sdk\">#</a> 二、SDK</h1>\n<h2 id=\"21-上传文件\"><a class=\"anchor\" href=\"#21-上传文件\">#</a> 2.1、上传文件</h2>\n<p>MinIO 提供多个语言版本 SDK 的支持，下边找到 java 版本的文档：</p>\n<p>地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm1pbi5pby9kb2NzL2phdmEtY2xpZW50LXF1aWNrc3RhcnQtZ3VpZGUuaHRtbA==\">https://docs.min.io/docs/java-client-quickstart-guide.html</span></p>\n<p>最低需求 Java 1.8 或更高版本:</p>\n<p>maven 依赖如下：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.minio<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>minio<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>8.4.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.squareup.okhttp3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>okhttp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.8.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 media-service 工程添加此依赖。</p>\n<p>参数说明：</p>\n<p>需要三个参数才能连接到 minio 服务。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Endpoint</td>\n<td>对象存储服务的 URL</td>\n</tr>\n<tr>\n<td>Access Key</td>\n<td>Access key 就像用户 ID，可以唯一标识你的账户。</td>\n</tr>\n<tr>\n<td>Secret Key</td>\n<td>Secret key 是你账户的密码。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"22-添加\"><a class=\"anchor\" href=\"#22-添加\">#</a> 2.2、添加</h2>\n<p>编写上传代码进行测试：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>minio<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MinioClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>minio<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UploadObjectArgs</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @2023/10/319:34</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @comment 测试 Minio 的 SDK</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinioTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">MinioClient</span> minioClient <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">MinioClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.249.128:9000\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">credentials</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minioadmin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            <span class=\"token string\">\"minioadmin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">UploadObjectArgs</span> build <span class=\"token operator\">=</span> <span class=\"token class-name\">UploadObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testbucket\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 桶名称</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Backup\\\\Documents\\\\My Pictures\\\\Camera Roll\\\\瑞克.png\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 指定上传文件路径</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dkx\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定上传文件的对象名 (随便起名)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>              <span class=\"token comment\">//.object (\"/root/dkx/dkx1.png\") // 可以创建多级目录来进行存储</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 调用函数上传文件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">uploadObject</span><span class=\"token punctuation\">(</span>build<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行完后，查看上传的结果：</p>\n<p>可以看到上传成功了！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310311009033.png\" alt=\"image-20231031100946983\" /></p>\n<h2 id=\"23-删除\"><a class=\"anchor\" href=\"#23-删除\">#</a> 2.3、删除</h2>\n<p>测试删除指定的桶对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>minio<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MinioClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">io<span class=\"token punctuation\">.</span>minio<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RemoveObjectArgs</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @2023/10/319:34</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @comment 测试 Minio 的 SDK</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinioTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">MinioClient</span> minioClient <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">MinioClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.249.128:9000\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">credentials</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minioadmin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            <span class=\"token string\">\"minioadmin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 删除指定桶对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">RemoveObjectArgs</span> removeObjectArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">RemoveObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testbucket\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dkx\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 调用函数上传文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">removeObject</span><span class=\"token punctuation\">(</span>removeObjectArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看删除结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310311014474.png\" alt=\"image-20231031101414466\" /></p>\n<p>设置 contentType 可以通过 com.j256.simplemagic.ContentType 枚举类查看常用的 mimeType（媒体类型）</p>\n<p>通过扩展名得到 mimeType，代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据扩展名取出 mimeType</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ContentInfo</span> extensionMatch <span class=\"token operator\">=</span> <span class=\"token class-name\">ContentInfoUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">findExtensionMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> mimeType <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_OCTET_STREAM_VALUE</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通用 mimeType，字节流</span></pre></td></tr></table></figure><p>完善上边的代码 如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 根据扩展名取出 mimeType</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">ContentInfo</span> extensionMatch <span class=\"token operator\">=</span> <span class=\"token class-name\">ContentInfoUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">findExtensionMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">String</span> mimeType <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_OCTET_STREAM_VALUE</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通用 mimeType，字节流</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>extensionMatch<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      mimeType <span class=\"token operator\">=</span> extensionMatch<span class=\"token punctuation\">.</span><span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token class-name\">UploadObjectArgs</span> testbucket <span class=\"token operator\">=</span> <span class=\"token class-name\">UploadObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testbucket\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token comment\">//                    .object(\"test001.mp4\")</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"001/test001.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 添加子目录</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">filename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\develop\\\\upload\\\\1mp4.temp\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">contentType</span><span class=\"token punctuation\">(</span>mimeType<span class=\"token punctuation\">)</span><span class=\"token comment\">// 默认根据扩展名确定文件内容类型，也可以指定</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">uploadObject</span><span class=\"token punctuation\">(</span>testbucket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"24-查询\"><a class=\"anchor\" href=\"#24-查询\">#</a> 2.4、查询</h2>\n<p>通过查询文件查看文件是否存在 minio 中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">MinioClient</span> minioClient <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">MinioClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.249.128:9000\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">credentials</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minioadmin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"minioadmin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 查询文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test_search</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token class-name\">GetObjectArgs</span> getObjectArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">GetObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testbucket\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test/dkx.png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token class-name\">GetObjectResponse</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token class-name\">FileOutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      object <span class=\"token operator\">=</span> minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>getObjectArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\dkx.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>object <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            object<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>outputStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>校验文件的完整性，对文件计算出 md5 值，比较原始文件的 md5 和目标文件的 md5，一致则说明完整</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 校验文件的完整性对文件的内容进行 md5</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fileInputStream1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\develop\\\\upload\\\\1.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取 minio 中文件的 md5 值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> source_md5 <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span>fileInputStream1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\develop\\\\upload\\\\1a.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取本地下载的文件的 md5 值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> local_md5 <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span>fileInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>source_md5<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>local_md5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下载成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"三-springboot整合minio\"><a class=\"anchor\" href=\"#三-springboot整合minio\">#</a> 三、SpringBoot 整合 minio</h1>\n<h2 id=\"31-配置yml\"><a class=\"anchor\" href=\"#31-配置yml\">#</a> 3.1、配置 yml</h2>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">minio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//192.168.249.128<span class=\"token punctuation\">:</span><span class=\"token number\">9000</span> <span class=\"token comment\">#Minio 服务所在地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">bucketName</span><span class=\"token punctuation\">:</span> testbucket <span class=\"token comment\">#存储桶名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">accessKey</span><span class=\"token punctuation\">:</span> minioadmin <span class=\"token comment\">#访问的 key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">secretKey</span><span class=\"token punctuation\">:</span> minioadmin <span class=\"token comment\">#访问的秘钥</span></pre></td></tr></table></figure><p>编写配置类来加载配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinioConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.endpoint&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> endpoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.accessKey&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accessKey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.secretKey&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MinioClient</span> <span class=\"token function\">minioClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">MinioClient</span> minioClient <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">MinioClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">endpoint</span><span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">credentials</span><span class=\"token punctuation\">(</span>accessKey<span class=\"token punctuation\">,</span> secretKey<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> minioClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 上传文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param companyId 机构 id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param uploadFileParamsDto 文件信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param localFilePath 文件本地路径</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return 返回文件信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">UploadFileResultDto</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> companyId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UploadFileParamsDto</span> uploadFileParamsDto<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> localFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写接口的实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaFileServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFilesMapper</span> mediaFilesMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MinioClient</span> minioClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> currentProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaProcessMapper</span> mediaProcessMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 存储普通文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.files&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_mediafiles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 存储视频</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.videofiles&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_video<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">UploadFileResultDto</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> companyId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UploadFileParamsDto</span> uploadFileParamsDto<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                         <span class=\"token class-name\">String</span> localFilePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 文件名</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">String</span> filename <span class=\"token operator\">=</span> uploadFileParamsDto<span class=\"token punctuation\">.</span><span class=\"token function\">getFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">// 先得到扩展名</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token class-name\">String</span> extension <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 得到 mimeType</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token class-name\">String</span> mimeType <span class=\"token operator\">=</span> <span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span>extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 子目录</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">String</span> defaultFolderPath <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultFolderPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 文件的 md5 值</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token class-name\">String</span> fileMd5 <span class=\"token operator\">=</span> <span class=\"token function\">getFileMd5</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>localFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token class-name\">String</span> objectName <span class=\"token operator\">=</span> defaultFolderPath<span class=\"token operator\">+</span>fileMd5<span class=\"token operator\">+</span>extension<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// 上传文件到 minio</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token function\">addMediaFilesToMinIO</span><span class=\"token punctuation\">(</span>localFilePath<span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">,</span> bucket_mediafiles<span class=\"token punctuation\">,</span> objectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         <span class=\"token class-name\">XueChengPlusException</span><span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上传文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token comment\">// 将文件信息存入数据库</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token class-name\">MediaFiles</span> mediaFiles <span class=\"token operator\">=</span> currentProxy<span class=\"token punctuation\">.</span><span class=\"token function\">addMediaFilesToDb</span><span class=\"token punctuation\">(</span>companyId<span class=\"token punctuation\">,</span> fileMd5<span class=\"token punctuation\">,</span> uploadFileParamsDto<span class=\"token punctuation\">,</span> bucket_mediafiles<span class=\"token punctuation\">,</span> objectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mediaFiles<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         <span class=\"token class-name\">XueChengPlusException</span><span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件上传后保存信息失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token comment\">// 准备返回的对象</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token class-name\">UploadFileResultDto</span> uploadFileResultDto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UploadFileResultDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>mediaFiles<span class=\"token punctuation\">,</span>uploadFileResultDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">return</span> uploadFileResultDto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 controller 层：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description 媒资文件管理接口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/6 11:29</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaFilesController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">MediaFileService</span> mediaFileService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"upload/coursefile\"</span><span class=\"token punctuation\">,</span> consumes <span class=\"token operator\">=</span> <span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MULTIPART_FORM_DATA_VALUE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">UploadFileResultDto</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestPart</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filedata\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token class-name\">UploadFileParamsDto</span> uploadFileParamsDto <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UploadFileParamsDto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 原始文件名称</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      uploadFileParamsDto<span class=\"token punctuation\">.</span><span class=\"token function\">setFilename</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginalFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 文件大小</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      uploadFileParamsDto<span class=\"token punctuation\">.</span><span class=\"token function\">setFileSize</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 文件类型</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      uploadFileParamsDto<span class=\"token punctuation\">.</span><span class=\"token function\">setFileType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"001001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token class-name\">Long</span> companyId <span class=\"token operator\">=</span> <span class=\"token number\">1232141425L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 创建一个临时文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token class-name\">File</span> file1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         file1 <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTempFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minio\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"temp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         file<span class=\"token punctuation\">.</span><span class=\"token function\">transferTo</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// 获取文件路径</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token class-name\">String</span> absoluteFile <span class=\"token operator\">=</span> file1<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// Long companyId, UploadFileParamsDto uploadFileParamsDto, String localFilePath</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 上传图片</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> mediaFileService<span class=\"token punctuation\">.</span><span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>companyId<span class=\"token punctuation\">,</span> uploadFileParamsDto<span class=\"token punctuation\">,</span> absoluteFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"后端实现分片上传文件\"><a class=\"anchor\" href=\"#后端实现分片上传文件\">#</a> 后端实现分片上传文件</h2>\n<h3 id=\"52-断点续传技术\"><a class=\"anchor\" href=\"#52-断点续传技术\">#</a> 5.2 断点续传技术</h3>\n<h4 id=\"521-什么是断点续传\"><a class=\"anchor\" href=\"#521-什么是断点续传\">#</a> 5.2.1 什么是断点续传</h4>\n<p>通常视频文件都比较大，所以对于媒资系统上传文件的需求要满足大文件的上传要求。http 协议本身对上传文件大小没有限制，但是客户的网络环境质量、电脑硬件环境等参差不齐，如果一个大文件快上传完了网断了没有上传完成，需要客户重新上传，用户体验非常差，所以对于大文件上传的要求最基本的是断点续传。</p>\n<h4 id=\"什么是断点续传\"><a class=\"anchor\" href=\"#什么是断点续传\">#</a> 什么是断点续传：</h4>\n<p>​    引用百度百科：断点续传指的是在下载或上传时，将下载或上传任务（一个文件或一个压缩包）人为的划分为几个部分，每一个部分采用一个线程进行上传或下载，如果碰到网络故障，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载，断点续传可以提高节省操作时间，提高用户体验性。</p>\n<p>断点续传流程如下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021007223.png\" alt=\"image-20231102100719107\" /></p>\n<p>流程如下：</p>\n<p>1、前端上传前先把文件分成块</p>\n<p>2、一块一块的上传，上传中断后重新上传，已上传的分块则不用再上传</p>\n<p>3、各分块上传完成最后在服务端合并文件</p>\n<p>编写 文件上传前校验文件的业务逻辑代码：</p>\n<p>编写 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description 媒资文件管理业务类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:55</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 检查文件是否存在</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param fileMd5 文件 md5 值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">RestResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 接口 实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description TODO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaFileServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFilesMapper</span> mediaFilesMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MinioClient</span> minioClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> currentProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaProcessMapper</span> mediaProcessMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 存储普通文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.files&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_mediafiles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token comment\">// 存储视频</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.videofiles&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_video<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 先查询数据库</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token class-name\">MediaFiles</span> mediaFiles <span class=\"token operator\">=</span> mediaFilesMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mediaFiles<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token comment\">// 桶</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         <span class=\"token class-name\">String</span> bucket <span class=\"token operator\">=</span> mediaFiles<span class=\"token punctuation\">.</span><span class=\"token function\">getBucket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token comment\">//objectname</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token class-name\">String</span> filePath <span class=\"token operator\">=</span> mediaFiles<span class=\"token punctuation\">.</span><span class=\"token function\">getFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token comment\">// 如果数据库存在再查询 minio</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token class-name\">GetObjectArgs</span> getObjectArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">GetObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token comment\">// 查询远程服务获取到一个流对象</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\">FilterInputStream</span> inputStream <span class=\"token operator\">=</span> minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>getObjectArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               <span class=\"token comment\">// 文件已存在</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token comment\">// 文件不存在</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 contrller：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/10/3120:29</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BigFileController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> mediaFileService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 文件上传前检查文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upload/checkfile\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">checkfile</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileMd5\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> mediaFileService<span class=\"token punctuation\">.</span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 分块文件上传前的检查 业务逻辑代码：</p>\n<p>编写 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description 媒资文件管理业务类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:55</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 检查分块是否存在</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param fileMd5 文件 md5 值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param chunkIndex 分块序号</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token class-name\">RestResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">checkChunk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> chunkIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 接口的 实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description TODO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaFileServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFilesMapper</span> mediaFilesMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MinioClient</span> minioClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> currentProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaProcessMapper</span> mediaProcessMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 存储普通文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.files&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_mediafiles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token comment\">// 存储视频</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.videofiles&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_video<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">checkChunk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> chunkIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 根据 md5 得到分块文件所在目录的路径</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token class-name\">String</span> chunkFileFolderPath <span class=\"token operator\">=</span> <span class=\"token function\">getChunkFileFolderPath</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 如果数据库存在再查询 minio</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token class-name\">GetObjectArgs</span> getObjectArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">GetObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucket_video<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>chunkFileFolderPath<span class=\"token operator\">+</span>chunkIndex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">// 查询远程服务获取到一个流对象</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         <span class=\"token class-name\">FilterInputStream</span> inputStream <span class=\"token operator\">=</span> minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span>getObjectArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inputStream<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 文件已存在</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">// 文件不存在</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 controller：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/10/3120:29</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BigFileController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> mediaFileService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 分块文件上传前的检查</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upload/checkchunk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">checkchunk</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileMd5\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                           <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chunk\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> chunk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">return</span> mediaFileService<span class=\"token punctuation\">.</span><span class=\"token function\">checkChunk</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 文件 上传 业务逻辑代码：</p>\n<p>编写 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description 媒资文件管理业务类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:55</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 上传分块</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param fileMd5 文件 md5 值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param chunk 分块序号</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param localChunkFilePath 分块文件本地路径</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token class-name\">RestResponse</span> <span class=\"token function\">uploadChunk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> chunk<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                            <span class=\"token class-name\">String</span> localChunkFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 接口  实现类 ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description TODO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaFileServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFilesMapper</span> mediaFilesMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MinioClient</span> minioClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> currentProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaProcessMapper</span> mediaProcessMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 存储普通文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.files&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_mediafiles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token comment\">// 存储视频</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.videofiles&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_video<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span> <span class=\"token function\">uploadChunk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> chunk<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> localChunkFilePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 分块文件的路径</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token class-name\">String</span> chunkFilePath <span class=\"token operator\">=</span> <span class=\"token function\">getChunkFileFolderPath</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 获取 mimeType</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">String</span> mimeType <span class=\"token operator\">=</span> <span class=\"token function\">getMimeType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 将分块文件上传到 minio</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token function\">addMediaFilesToMinIO</span><span class=\"token punctuation\">(</span>localChunkFilePath<span class=\"token punctuation\">,</span> mimeType<span class=\"token punctuation\">,</span> bucket_video<span class=\"token punctuation\">,</span> chunkFilePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">validfail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"上传分块文件失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">// 上传成功</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 controller：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Dkx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/10/3120:29</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @function</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BigFileController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> mediaFileService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 上传文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"upload/uploadchunk\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span> <span class=\"token function\">uploadchunk</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">MultipartFile</span> file<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                   <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fileMd5\"</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                   <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chunk\"</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">int</span> chunk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">File</span> localFile <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         localFile <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTempFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minio\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"temp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         file<span class=\"token punctuation\">.</span><span class=\"token function\">transferTo</span><span class=\"token punctuation\">(</span>localFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token class-name\">String</span> absolutePath <span class=\"token operator\">=</span> localFile<span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">return</span> mediaFileService<span class=\"token punctuation\">.</span><span class=\"token function\">uploadChunk</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">,</span> absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 合并文件 业务逻辑代码：</p>\n<p>编写 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description 媒资文件管理业务类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:55</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     *  因为要解决事务失效的问题所以对外暴漏接口 来实现代理调用</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param companyId</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param fileMd5</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param uploadFileParamsDto</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param bucket</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param objectName</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">MediaFiles</span> <span class=\"token function\">addMediaFilesToDb</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> companyId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                 <span class=\"token class-name\">UploadFileParamsDto</span> uploadFileParamsDto<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                 <span class=\"token class-name\">String</span> bucket<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> objectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token class-name\">RestResponse</span> <span class=\"token function\">mergechunks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> companyId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token keyword\">int</span> chunkTotal<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                            <span class=\"token class-name\">UploadFileParamsDto</span> uploadFileParamsDto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 接口 实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author Mr.M</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @description TODO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @date 2022/9/10 8:58</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MediaFileServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MediaFileService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFilesMapper</span> mediaFilesMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MinioClient</span> minioClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaFileService</span> currentProxy<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">MediaProcessMapper</span> mediaProcessMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 存储普通文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.files&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_mediafiles<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token comment\">// 存储视频</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;minio.bucket.videofiles&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> bucket_video<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestResponse</span> <span class=\"token function\">mergechunks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> companyId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> chunkTotal<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UploadFileParamsDto</span> uploadFileParamsDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 分块文件所在目录</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token class-name\">String</span> chunkFileFolderPath <span class=\"token operator\">=</span> <span class=\"token function\">getChunkFileFolderPath</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 找到所有的分块文件</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComposeSource</span><span class=\"token punctuation\">></span></span> sources <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>chunkTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> <span class=\"token class-name\">ComposeSource</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucket_video<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>chunkFileFolderPath <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 源文件名称</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token class-name\">String</span> filename <span class=\"token operator\">=</span> uploadFileParamsDto<span class=\"token punctuation\">.</span><span class=\"token function\">getFilename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// 扩展名</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token class-name\">String</span> extension <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// 合并后文件的 objectname</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token class-name\">String</span> objectName <span class=\"token operator\">=</span> <span class=\"token function\">getFilePathByMd5</span><span class=\"token punctuation\">(</span>fileMd5<span class=\"token punctuation\">,</span> extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 指定合并后的 objectName 等信息</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token class-name\">ComposeObjectArgs</span> composeObjectArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">ComposeObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucket_video<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>objectName<span class=\"token punctuation\">)</span><span class=\"token comment\">// 合并后的文件的 objectname</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">sources</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">)</span><span class=\"token comment\">// 指定源文件</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">//=========== 合并文件 ============</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token comment\">// 报错 size 1048576 must be greater than 5242880，minio 默认的分块文件大小为 5M</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">composeObject</span><span class=\"token punctuation\">(</span>composeObjectArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"合并文件出错,bucket:&#123;&#125;,objectName:&#123;&#125;,错误信息:&#123;&#125;\"</span><span class=\"token punctuation\">,</span>bucket_video<span class=\"token punctuation\">,</span>objectName<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">validfail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"合并文件异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token comment\">//=========== 校验合并后的和源文件是否一致，视频上传才成功 ===========</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token comment\">// 先下载合并后的文件</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token function\">downloadFileFromMinIO</span><span class=\"token punctuation\">(</span>bucket_video<span class=\"token punctuation\">,</span> objectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>         <span class=\"token comment\">// 计算合并后文件的 md5</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>         <span class=\"token class-name\">String</span> mergeFile_md5 <span class=\"token operator\">=</span> <span class=\"token class-name\">DigestUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">md5Hex</span><span class=\"token punctuation\">(</span>fileInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>         <span class=\"token comment\">// 比较原始 md5 和合并后文件的 md5</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fileMd5<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>mergeFile_md5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"校验合并文件md5值不一致,原始文件:&#123;&#125;,合并文件:&#123;&#125;\"</span><span class=\"token punctuation\">,</span>fileMd5<span class=\"token punctuation\">,</span>mergeFile_md5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">validfail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"文件校验失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>         <span class=\"token comment\">// 文件大小</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>         uploadFileParamsDto<span class=\"token punctuation\">.</span><span class=\"token function\">setFileSize</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">validfail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"文件校验失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token comment\">//============== 将文件信息入库 ============</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token class-name\">MediaFiles</span> mediaFiles <span class=\"token operator\">=</span> currentProxy<span class=\"token punctuation\">.</span><span class=\"token function\">addMediaFilesToDb</span><span class=\"token punctuation\">(</span>companyId<span class=\"token punctuation\">,</span> fileMd5<span class=\"token punctuation\">,</span> uploadFileParamsDto<span class=\"token punctuation\">,</span> bucket_video<span class=\"token punctuation\">,</span> objectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mediaFiles <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">validfail</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"文件入库失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token comment\">//========== 清理分块文件 =========</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token function\">clearChunkFiles</span><span class=\"token punctuation\">(</span>chunkFileFolderPath<span class=\"token punctuation\">,</span>chunkTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token class-name\">RestResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     * 清除分块文件</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * @param chunkFileFolderPath 分块文件路径</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * @param chunkTotal 分块文件总数</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearChunkFiles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> chunkFileFolderPath<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> chunkTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DeleteObject</span><span class=\"token punctuation\">></span></span> objects <span class=\"token operator\">=</span>  <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-></span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span>chunkTotal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteObject</span><span class=\"token punctuation\">(</span>chunkFileFolderPath<span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token class-name\">RemoveObjectsArgs</span> removeObjectsArgs <span class=\"token operator\">=</span> <span class=\"token class-name\">RemoveObjectsArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucket_video<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">objects</span><span class=\"token punctuation\">(</span>objects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Result</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DeleteError</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> results <span class=\"token operator\">=</span> minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">removeObjects</span><span class=\"token punctuation\">(</span>removeObjectsArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token comment\">// 要想真正删除</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      results<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>         <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token class-name\">DeleteError</span> deleteError <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     * 从 minio 下载文件</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     * @param bucket 桶</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     * @param objectName 对象名称</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     * @return 下载后的文件</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">File</span> <span class=\"token function\">downloadFileFromMinIO</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> bucket<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> objectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>      <span class=\"token comment\">// 临时文件</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>      <span class=\"token class-name\">File</span> minioFile <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>      <span class=\"token class-name\">FileOutputStream</span> outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>      <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>         <span class=\"token class-name\">InputStream</span> stream <span class=\"token operator\">=</span> minioClient<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GetObjectArgs</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                                                    <span class=\"token punctuation\">.</span><span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                                                    <span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>objectName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                                                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>         <span class=\"token comment\">// 创建临时文件</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>         minioFile<span class=\"token operator\">=</span><span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTempFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"minio\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".merge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>         outputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>minioFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>         <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span>outputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>         <span class=\"token keyword\">return</span> minioFile<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>         e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>outputStream<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>               outputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>               e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     * 得到合并后的文件的地址</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     * @param fileMd5 文件 id 即 md5 值</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>     * @param fileExt 文件扩展名</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFilePathByMd5</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> fileExt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      <span class=\"token keyword\">return</span>   fileMd5<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileMd5<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileMd5 <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span>fileMd5 <span class=\"token operator\">+</span>fileExt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>   <span class=\"token comment\">// 得到分块文件的目录</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getChunkFileFolderPath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileMd5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>      <span class=\"token keyword\">return</span> fileMd5<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileMd5<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> fileMd5 <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"chunk\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springboot",
                "计算机学科",
                "springboot"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/SpringBoot%E6%95%B4%E5%90%88docker%E9%83%A8%E7%BD%B2xxl-job-2.3.1/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/SpringBoot%E6%95%B4%E5%90%88docker%E9%83%A8%E7%BD%B2xxl-job-2.3.1/",
            "title": "XXL-JOB介绍和使用",
            "date_published": "2024-01-06T02:58:18.367Z",
            "content_html": "<h1 id=\"一-xxl-job介绍\"><a class=\"anchor\" href=\"#一-xxl-job介绍\">#</a> 一、 XXL-JOB 介绍</h1>\n<p>XXL-JOB 是一个轻量级分布式任务调度平台，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHV4dWVsaS5jb20veHhsLWpvYi8=\">https://www.xuxueli.com/xxl-job/</span></p>\n<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHV4dWVsaS5jb20veHhsLWpvYi8jJUUzJTgwJThBJUU1JTg4JTg2JUU1JUI4JTgzJUU1JUJDJThGJUU0JUJCJUJCJUU1JThBJUExJUU4JUIwJTgzJUU1JUJBJUE2JUU1JUI5JUIzJUU1JThGJUIwWFhMLUpPQiVFMyU4MCU4Qg==\">https://www.xuxueli.com/xxl-job/#《分布式任务调度平台 XXL-JOB》</span></p>\n<p>XXL-JOB 主要有调度中心、执行器、任务：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021141945.png\" alt=\"image-20231102114124616\" /></p>\n<p><strong>调度中心：</strong></p>\n<p>​    负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码；</p>\n<p>​    主要职责为执行器管理、任务管理、监控运维、日志管理等</p>\n<p><strong>任务执行器：</strong></p>\n<p>​    负责接收调度请求并执行任务逻辑；</p>\n<p>​    只要职责是注册服务、任务执行服务（接收到任务后会放入线程池中的任务队列）、执行结果上报、日志服务等</p>\n<p>** 任务：** 负责执行具体的业务处理。</p>\n<p>调度中心与执行器之间的工作流程如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021142092.png\" alt=\"image-20231102114151941\" /></p>\n<p><strong>执行流程：</strong></p>\n<p>​    1. 任务执行器根据配置的调度中心的地址，自动注册到调度中心</p>\n<p>​    2. 达到任务触发条件，调度中心下发任务</p>\n<p>​    3. 执行器基于线程池执行任务，并把执行结果放入内存队列中、把执行日志写入日志文件中</p>\n<p>​    4. 执行器消费内存队列中的执行结果，主动上报给调度中心</p>\n<p>​    5. 当用户在调度中心查看任务日志，调度中心请求任务执行器，任务执行器读取任务日志文件并返回日志详情</p>\n<hr />\n<h1 id=\"二-使用配置\"><a class=\"anchor\" href=\"#二-使用配置\">#</a> 二、使用配置</h1>\n<p>执行命令拉取 xxl-job-2.3.1</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull xuxueli/xxl-job-admin:2.3.1</pre></td></tr></table></figure><p>拉取成功后，创建挂载配置路径：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token parameter variable\">-m</span> <span class=\"token number\">777</span> /root/tmp/xxl-job/data/applogs</pre></td></tr></table></figure><p>创建完成后在 /root/tem/xxl-job/ 目录中 创建 配置文件 application.properties</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021026700.png\" alt=\"image-20231102102637272\" /></p>\n<p>配置内容如下：</p>\n<p>里面就更改下自己的 ip 地址和数据库账户和密码即可。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">### web</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server.port=8080</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server.servlet.context<span class=\"token punctuation\">-</span>path=/xxl<span class=\"token punctuation\">-</span>job<span class=\"token punctuation\">-</span>admin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">### actuator</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>management.server.servlet.context<span class=\"token punctuation\">-</span>path=/actuator</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>management.health.mail.enabled=false</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">### resources</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>spring.mvc.servlet.load<span class=\"token punctuation\">-</span>on<span class=\"token punctuation\">-</span>startup=0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>spring.mvc.static<span class=\"token punctuation\">-</span>path<span class=\"token punctuation\">-</span>pattern=/static/<span class=\"token important\">**</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>spring.resources.static<span class=\"token punctuation\">-</span>locations=classpath<span class=\"token punctuation\">:</span>/static/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">### freemarker</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>spring.freemarker.templateLoaderPath=classpath<span class=\"token punctuation\">:</span>/templates/</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>spring.freemarker.suffix=.ftl</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>spring.freemarker.charset=UTF<span class=\"token punctuation\">-</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>spring.freemarker.request<span class=\"token punctuation\">-</span>context<span class=\"token punctuation\">-</span>attribute=request</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>spring.freemarker.settings.number_format=0.<span class=\"token comment\">##########</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">### mybatis</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>mybatis.mapper<span class=\"token punctuation\">-</span>locations=classpath<span class=\"token punctuation\">:</span>/mybatis<span class=\"token punctuation\">-</span>mapper/<span class=\"token important\">*Mapper.xml</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">### xxl-job, datasource</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>spring.datasource.url=jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//192.168.249.128<span class=\"token punctuation\">:</span>3306/xxl_job<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>spring.datasource.username=root</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>spring.datasource.password=dkx.</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>spring.datasource.driver<span class=\"token punctuation\">-</span>class<span class=\"token punctuation\">-</span>name=com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">### datasource-pool</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>spring.datasource.type=com.zaxxer.hikari.HikariDataSource</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>spring.datasource.hikari.minimum<span class=\"token punctuation\">-</span>idle=10</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>spring.datasource.hikari.maximum<span class=\"token punctuation\">-</span>pool<span class=\"token punctuation\">-</span>size=30</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>spring.datasource.hikari.auto<span class=\"token punctuation\">-</span>commit=true</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>spring.datasource.hikari.idle<span class=\"token punctuation\">-</span>timeout=30000</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>spring.datasource.hikari.pool<span class=\"token punctuation\">-</span>name=HikariCP</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>spring.datasource.hikari.max<span class=\"token punctuation\">-</span>lifetime=900000</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>spring.datasource.hikari.connection<span class=\"token punctuation\">-</span>timeout=10000</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>spring.datasource.hikari.connection<span class=\"token punctuation\">-</span>test<span class=\"token punctuation\">-</span>query=SELECT 1</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>spring.datasource.hikari.validation<span class=\"token punctuation\">-</span>timeout=1000</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">### xxl-job, email</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>spring.mail.host=smtp.qq.com</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>spring.mail.port=25</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>spring.mail.username=xxx@qq.com</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>spring.mail.from=xxx@qq.com</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>spring.mail.password=xxx</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>spring.mail.properties.mail.smtp.auth=true</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>spring.mail.properties.mail.smtp.starttls.enable=true</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>spring.mail.properties.mail.smtp.starttls.required=true</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory</pre></td></tr><tr><td data-num=\"53\"></td><td><pre> </pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">### xxl-job, access token</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>xxl.job.accessToken=default_token</pre></td></tr><tr><td data-num=\"56\"></td><td><pre> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">### xxl-job, i18n (default is zh_CN, and you can choose \"zh_CN\", \"zh_TC\" and \"en\")</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>xxl.job.i18n=zh_CN</pre></td></tr><tr><td data-num=\"59\"></td><td><pre> </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">## xxl-job, triggerpool max size</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>xxl.job.triggerpool.fast.max=200</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>xxl.job.triggerpool.slow.max=100</pre></td></tr><tr><td data-num=\"63\"></td><td><pre> </pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">### xxl-job, log retention days</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>xxl.job.logretentiondays=30</pre></td></tr></table></figure><p>到 github 中 拉取一下项目里面有一个 sql 文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3h1eHVlbGkveHhsLWpvYg==\">https://github.com/xuxueli/xxl-job</span></p>\n<p>或者到码云：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20veHV4dWVsaTAzMjMveHhsLWpvYg==\">https://gitee.com/xuxueli0323/xxl-job</span> 拉取项目。主要是 sql 文件啊</p>\n<p>我们需要找到这个 sql 文件然后创建一个数据库并导入 sql 文件，再进行下一步！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021034863.png\" alt=\"image-20231102103400507\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021035033.png\" alt=\"image-20231102103536623\" /></p>\n<p>配置完成后启动 xxl-job-2.3.1 并创建容器：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">18080</span>:8080 <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>xxl <span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token parameter variable\">-v</span> /root/tmp/xxl-job/application.properties:/application.properties  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PARAMS</span><span class=\"token operator\">=</span><span class=\"token string\">'--spring.config.location=/application.properties'</span> xuxueli/xxl-job-admin:2.3.1</pre></td></tr></table></figure><p>启动成功后访问 uri：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMjQ5LjEyODoxODA4MC94eGwtam9iLWFkbWluL2pvYmdyb3Vw\">http://192.168.249.128:18080/xxl-job-admin/jobgroup</span></p>\n<p>账号：admin ，密码：123456</p>\n<p>访问后页面如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021028455.png\" alt=\"image-20231102102848028\" /></p>\n<p>创建一个执行器</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021046055.png\" alt=\"image-20231102104642146\" /></p>\n<p>点击新增，填写执行器信息，appname 是前边在 nacos 中配置 xxl 信息时指定的执行器的应用名。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021047493.png\" alt=\"image-20231102104700103\" /></p>\n<p>添加成功：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021047508.png\" alt=\"image-20231102104719719\" /></p>\n<p>在需要用到的业务模块中导入依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.xuxueli<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>xxl-job-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置 application.yml 如下，也可以配置到 nacos 中：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">xxl</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">job</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">admin</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">addresses</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//192.168.101.65<span class=\"token punctuation\">:</span>8088/xxl<span class=\"token punctuation\">-</span>job<span class=\"token punctuation\">-</span>admin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">executor</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">appname</span><span class=\"token punctuation\">:</span> media<span class=\"token punctuation\">-</span>process<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">ip</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">logpath</span><span class=\"token punctuation\">:</span> /data/applogs/xxl<span class=\"token punctuation\">-</span>job/jobhandler</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">logretentiondays</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">accessToken</span><span class=\"token punctuation\">:</span> default_token</pre></td></tr></table></figure><p>&lt;font color='red'&gt; 注意 &lt;/font &gt; 配置中的 appname 这是执行器的应用名，port 是执行器启动的端口，如果本地启动多个执行器注意端口不能重复。</p>\n<p>在从 github 或者 gitee 中拉取的 xxl-job-2.3.1 项目中找到</p>\n<p>E:\\ 学成在线项目 — 资料 \\day06 断点续传 xxl-job\\ 资料 \\xxl-job-2.3.1\\xxl-job-executor-samples\\xxl-job-executor-sample-springboot\\src\\main\\java\\com\\xxl\\job\\executor\\core\\config\\XxlJobConfig.java</p>\n<p>配置文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021057889.png\" alt=\"image-20231102105732814\" /></p>\n<p>将该配置文件拷贝到 自己项目的该模块的 config 目录中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021058604.png\" alt=\"image-20231102105838113\" /></p>\n<p>启动服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021102864.png\" alt=\"image-20231102110215950\" /></p>\n<p>可以看到服务就自动的注册到了执行器中了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021102303.png\" alt=\"image-20231102110243545\" /></p>\n<p>点击 查看 (1)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021104929.png\" alt=\"image-20231102110416038\" /></p>\n<p>执行器执行任务</p>\n<p>从 xxl-job-2.3.1 项目中先来拿到一个例子就是如下代码：</p>\n<p>E:\\ 学成在线项目 — 资料 \\day06 断点续传 xxl-job\\ 资料 \\xxl-job-2.3.1\\xxl-job-executor-samples\\xxl-job-executor-sample-springboot\\src\\main\\java\\com\\xxl\\job\\executor\\service\\jobhandler\\SampleXxlJob.java</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021117873.png\" alt=\"image-20231102111700620\" /></p>\n<p>然后将这个代码，拷贝到自己项目的模块的 service 业务中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * XxlJob 开发示例（Bean 模式）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 开发步骤：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      1、任务开发：在 Spring Bean 实例中，开发 Job 方法；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      2、注解配置：为 Job 方法添加注解 \"@XxlJob (value=\" 自定义 jobhandler 名称 \", init =\"JobHandler 初始化方法 \", destroy =\"JobHandler 销毁方法 \")\"，注解 value 值对应的是调度中心新建任务的 JobHandler 属性的值。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *      3、执行日志：需要通过 \"XxlJobHelper.log\" 打印执行日志；</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *      4、任务结果：默认任务结果为 \"成功\" 状态，不需要主动设置；如有诉求，比如设置任务结果为失败，可以通过 \"XxlJobHelper.handleFail/handleSuccess\" 自主设置任务结果；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author xuxueli 2019-12-11 21:52:51</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SampleXxlJob</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SampleXxlJob</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 1、简单任务示例（Bean 模式）</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@XxlJob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demoJobHandler\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">demoJobHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"视频处理...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// default success</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021118433.png\" alt=\"image-20231102111804565\" /></p>\n<p>然后就可以在这里面来编写自己的业务逻辑代码了。</p>\n<p>那么这个任务执行器中的任务怎么执行呢，我们需要到控制台中的执行任务中进行配置：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021127816.png\" alt=\"image-20231102112746770\" /></p>\n<p>其中的 bean 指的就是 执行任务 业务逻辑代码中注入的 bean 名称</p>\n<p>也可以选择其它的比如 Java 那么右边的框就不能输入了，下面就是输入要执行的 Java 代码。</p>\n<p>搞完上面的后就重启后端服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021132541.png\" alt=\"image-20231102113214411\" /></p>\n<p>启动服务后那 任务怎么执行呢，我们需要 ，在控制台 中 任务管理的 任务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021133078.png\" alt=\"image-20231102113310041\" /></p>\n<p>启动后就可以看到每隔 5 秒后端控制台就会打印出一句话</p>\n<pre><code>c.xxl.job.core.executor.XxlJobExecutor   : &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job regist JobThread success, jobId:2, handler:com.xxl.job.core.handler.impl.MethodJobHandler@1dcca426[class com.xuecheng.media.service.jobhandler.SampleXxlJob#demoJobHandler]\n视频处理...\n视频处理...\n视频处理...\n视频处理...\n视频处理...\n视频处理...\n</code></pre>\n<p>在运行报表中可以看到调度情况如下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311021136278.png\" alt=\"image-20231102113642675\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "计算机学科",
                "基础",
                "springcloud"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/sentinel/sentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/sentinel/sentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96/",
            "title": "Sentinel规则持久化",
            "date_published": "2024-01-06T02:53:16.074Z",
            "content_html": "<h1 id=\"sentinel-规则持久化\"><a class=\"anchor\" href=\"#sentinel-规则持久化\">#</a> Sentinel 规则持久化</h1>\n<h2 id=\"一-修改order-service服务\"><a class=\"anchor\" href=\"#一-修改order-service服务\">#</a> 一、修改 order-service 服务</h2>\n<p>修改 OrderService，让其监听 Nacos 中的 sentinel 规则配置。</p>\n<p>具体步骤如下：</p>\n<h3 id=\"1引入依赖\"><a class=\"anchor\" href=\"#1引入依赖\">#</a> 1. 引入依赖</h3>\n<p>在 order-service 中引入 sentinel 监听 nacos 的依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.csp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>sentinel-datasource-nacos<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"2配置nacos地址\"><a class=\"anchor\" href=\"#2配置nacos地址\">#</a> 2. 配置 nacos 地址</h3>\n<p>在 order-service 中的 application.yml 文件配置 nacos 地址及监听的配置信息：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">sentinel</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">flow</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span> <span class=\"token comment\"># nacos 地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token key atrule\">dataId</span><span class=\"token punctuation\">:</span> orderservice<span class=\"token punctuation\">-</span>flow<span class=\"token punctuation\">-</span>rules</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token key atrule\">groupId</span><span class=\"token punctuation\">:</span> SENTINEL_GROUP</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token key atrule\">rule-type</span><span class=\"token punctuation\">:</span> flow <span class=\"token comment\"># 还可以是：degrade、authority、param-flow</span></pre></td></tr></table></figure><h2 id=\"二-修改sentinel-dashboard源码\"><a class=\"anchor\" href=\"#二-修改sentinel-dashboard源码\">#</a> 二、修改 sentinel-dashboard 源码</h2>\n<p>SentinelDashboard 默认不支持 nacos 的持久化，需要修改源码。</p>\n<h3 id=\"1-解压\"><a class=\"anchor\" href=\"#1-解压\">#</a> 1. 解压</h3>\n<p>解压课前资料中的 sentinel 源码包：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644436.png\" alt=\"image-20210618201340086\" /></p>\n<p>然后并用 IDEA 打开这个项目，结构如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644159.png\" alt=\"image-20210618201412878\" /></p>\n<h3 id=\"2-修改nacos依赖\"><a class=\"anchor\" href=\"#2-修改nacos依赖\">#</a> 2. 修改 nacos 依赖</h3>\n<p>在 sentinel-dashboard 源码的 pom 文件中，nacos 的依赖默认的 scope 是 test，只能在测试时使用，这里要去除：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644823.png\" alt=\"image-20210618201607831\" /></p>\n<p>将 sentinel-datasource-nacos 依赖的 scope 去掉：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.csp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>sentinel-datasource-nacos<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"3-添加nacos支持\"><a class=\"anchor\" href=\"#3-添加nacos支持\">#</a> 3. 添加 nacos 支持</h3>\n<p>在 sentinel-dashboard 的 test 包下，已经编写了对 nacos 的支持，我们需要将其拷贝到 main 下。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644434.png\" alt=\"image-20210618201726280\" /></p>\n<h3 id=\"4-修改nacos地址\"><a class=\"anchor\" href=\"#4-修改nacos地址\">#</a> 4. 修改 nacos 地址</h3>\n<p>然后，还需要修改测试代码中的 NacosConfig 类：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644320.png\" alt=\"image-20210618201912078\" /></p>\n<p>修改其中的 nacos 地址，让其读取 application.properties 中的配置：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644820.png\" alt=\"image-20210618202047575\" /></p>\n<p>在 sentinel-dashboard 的 application.properties 中添加 nacos 地址配置：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">nacos.addr</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">localhost:8848</span></pre></td></tr></table></figure><h3 id=\"5-配置nacos数据源\"><a class=\"anchor\" href=\"#5-配置nacos数据源\">#</a> 5. 配置 nacos 数据源</h3>\n<p>另外，还需要修改 com.alibaba.csp.sentinel.dashboard.controller.v2 包下的 FlowControllerV2 类：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644684.png\" alt=\"w\" /></p>\n<p>让我们添加的 Nacos 数据源生效：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644334.png\" alt=\"image-20210618202334536\" /></p>\n<h3 id=\"6-修改前端页面\"><a class=\"anchor\" href=\"#6-修改前端页面\">#</a> 6. 修改前端页面</h3>\n<p>接下来，还要修改前端页面，添加一个支持 nacos 的菜单。</p>\n<p>修改 src/main/webapp/resources/app/scripts/directives/sidebar/ 目录下的 sidebar.html 文件：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644086.png\" alt=\"image-20210618202433356\" /></p>\n<p>将其中的这部分注释打开：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644031.png\" alt=\"image-20210618202449881\" /></p>\n<p>修改其中的文本：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644504.png\" alt=\"image-20210618202501928\" /></p>\n<h3 id=\"7-重新编译-打包项目\"><a class=\"anchor\" href=\"#7-重新编译-打包项目\">#</a> 7. 重新编译、打包项目</h3>\n<p>运行 IDEA 中的 maven 插件，编译和打包修改好的 Sentinel-Dashboard：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171644941.png\" alt=\"image-20210618202701492\" /></p>\n<h3 id=\"8启动\"><a class=\"anchor\" href=\"#8启动\">#</a> 8. 启动</h3>\n<p>启动方式跟官方一样：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> sentinel-dashboard.jar</pre></td></tr></table></figure><p>如果要修改 nacos 地址，需要添加参数：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> <span class=\"token parameter variable\">-Dnacos.addr</span><span class=\"token operator\">=</span>localhost:8848 sentinel-dashboard.jar</pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "springcloud-高级",
                "sentinel",
                "计算机学科",
                "springcloud",
                "Sentinel",
                "持久化"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/seata/seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/seata/seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90/",
            "title": "seata的部署和集成",
            "date_published": "2024-01-06T02:51:53.386Z",
            "content_html": "<h1 id=\"seata的部署和集成\"><a class=\"anchor\" href=\"#seata的部署和集成\">#</a> seata 的部署和集成</h1>\n<h1 id=\"一-部署seata的tc-server\"><a class=\"anchor\" href=\"#一-部署seata的tc-server\">#</a> 一、部署 Seata 的 tc-server</h1>\n<h2 id=\"1下载\"><a class=\"anchor\" href=\"#1下载\">#</a> 1. 下载</h2>\n<p>首先我们要下载 seata-server 包，地址在<span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2Jsb2cvZG93bmxvYWQuaHRtbA==\"> http</span><span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2Jsb2cvZG93bmxvYWQuaHRtbA==\">😕/seata.io/zh-cn/blog/download</span><span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2Jsb2cvZG93bmxvYWQuaHRtbA==\">.</span><span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2Jsb2cvZG93bmxvYWQuaHRtbA==\">html</span></p>\n<p>当然，课前资料也准备好了：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750149.png\" alt=\"image-20210622202357640\" /></p>\n<h2 id=\"2解压\"><a class=\"anchor\" href=\"#2解压\">#</a> 2. 解压</h2>\n<p>在非中文目录解压缩这个 zip 包，其目录结构如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750336.png\" alt=\"image-20210622202515014\" /></p>\n<h2 id=\"3修改配置\"><a class=\"anchor\" href=\"#3修改配置\">#</a> 3. 修改配置</h2>\n<p>修改 conf 目录下的 registry.conf 文件：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750504.png\" alt=\"image-20210622202622874\" /></p>\n<p>内容如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">registry</span> <span class=\"token value attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">  # tc 服务的注册中心类，这里选择 nacos，也可以是 eureka、zookeeper 等</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">  type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">  nacos</span> <span class=\"token value attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">    # seata tc 服务注册到 nacos 的服务名称，可以自定义</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">    application</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"seata-tc-server\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">    serverAddr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"127.0.0.1:8848\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">    group</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"DEFAULT_GROUP\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">    namespace</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">    cluster</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"SH\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">    username</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">    password</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">config</span> <span class=\"token value attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">  # 读取 tc 服务端的配置文件的方式，这里是从 nacos 配置中心读取，这样如果 tc 是集群，可以共享配置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">  type</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">  # 配置 nacos 地址等信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key attr-name\">  nacos</span> <span class=\"token value attr-value\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key attr-name\">    serverAddr</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"127.0.0.1:8848\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key attr-name\">    namespace</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key attr-name\">    group</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"SEATA_GROUP\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key attr-name\">    username</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key attr-name\">    password</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key attr-name\">    dataId</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">\"seataServer.properties\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  &#125;</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>Seata-1.7.0 版本的配置如下：</p>\n<p>找到 yml 配置文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180927758.png\" alt=\"image-20231018092704361\" /></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7091</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>logback<span class=\"token punctuation\">-</span>spring.xml</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>user.home<span class=\"token punctuation\">&#125;</span>/logs/seata</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">extend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">logstash-appender</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">4560</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">kafka-appender</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">bootstrap-servers</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token key atrule\">topic</span><span class=\"token punctuation\">:</span> logback_to_logstash</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">console</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> seata</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> seata</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># support: nacos, consul, apollo, zk, etcd3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\"># 改这里会报错</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SEATA_GROUP</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">#access-key: \"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">#secret-key: \"\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> seataServer.properties</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token key atrule\">preferred-networks</span><span class=\"token punctuation\">:</span> 30.240.*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>tc<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> DEFAULT_GROUP</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> SH</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">#access-key: \"\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token comment\">#secret-key: \"\"</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">store</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\"># support: file 、 db 、 redis</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> db</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span> druid</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token key atrule\">db-type</span><span class=\"token punctuation\">:</span> mysql</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>13306/seata<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;rewriteBatchedStatements=true&amp;serverTimezone=GMT</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> dkx.</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token key atrule\">min-conn</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token key atrule\">max-conn</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token key atrule\">global-table</span><span class=\"token punctuation\">:</span> global_table</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token key atrule\">branch-table</span><span class=\"token punctuation\">:</span> branch_table</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token key atrule\">lock-table</span><span class=\"token punctuation\">:</span> lock_table</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token key atrule\">distributed-lock-table</span><span class=\"token punctuation\">:</span> distributed_lock</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token key atrule\">query-limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">#  server:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#    service-port: 8091 #If not configured, the default is '$&#123;server.port&#125; + 1000'</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token key atrule\">secretKey</span><span class=\"token punctuation\">:</span> SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token key atrule\">tokenValidityInMilliseconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1800000</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token key atrule\">ignore</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token key atrule\">urls</span><span class=\"token punctuation\">:</span> /<span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.css</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.js</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.html</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.map</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.svg</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.png</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.ico</span><span class=\"token punctuation\">,</span>/console<span class=\"token punctuation\">-</span>fe/public/<span class=\"token important\">**</span><span class=\"token punctuation\">,</span>/api/v1/auth/login</pre></td></tr></table></figure><h2 id=\"4在nacos添加配置\"><a class=\"anchor\" href=\"#4在nacos添加配置\">#</a> 4. 在 nacos 添加配置</h2>\n<p>特别注意，为了让 tc 服务的集群可以共享配置，我们选择了 nacos 作为统一配置中心。因此服务端配置文件 seataServer.properties 文件需要在 nacos 中配好。</p>\n<p>格式如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750398.png\" alt=\"image-20210622203609227\" /></p>\n<p>配置内容如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 数据存储方式，db 代表数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">store.mode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">db</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">store.db.datasource</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">druid</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">store.db.dbType</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">mysql</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">store.db.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">store.db.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">store.db.user</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">store.db.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">store.db.minConn</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">store.db.maxConn</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">store.db.globalTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">global_table</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">store.db.branchTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">branch_table</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">store.db.queryLimit</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">store.db.lockTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lock_table</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key attr-name\">store.db.maxWait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5000</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 事务、日志等配置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">server.recovery.committingRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key attr-name\">server.recovery.asynCommittingRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">server.recovery.rollbackingRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key attr-name\">server.recovery.timeoutRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key attr-name\">server.maxCommitRetryTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key attr-name\">server.maxRollbackRetryTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key attr-name\">server.rollbackRetryTimeoutUnlockEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key attr-name\">server.undo.logSaveDays</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">7</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key attr-name\">server.undo.logDeletePeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">86400000</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 客户端与服务端传输方式</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key attr-name\">transport.serialization</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">seata</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key attr-name\">transport.compressor</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">none</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 关闭 metrics 功能，提高性能</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token key attr-name\">metrics.enabled</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key attr-name\">metrics.registryType</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">compact</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key attr-name\">metrics.exporterList</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">prometheus</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key attr-name\">metrics.exporterPrometheusPort</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">9898</span></pre></td></tr></table></figure><p><mark>其中的数据库地址、用户名、密码都需要修改成你自己的数据库信息。</mark></p>\n<h2 id=\"5创建数据库表\"><a class=\"anchor\" href=\"#5创建数据库表\">#</a> 5. 创建数据库表</h2>\n<p>特别注意：tc 服务在管理分布式事务时，需要记录事务相关数据到数据库中，你需要提前创建好这些表。</p>\n<p>新建一个名为 seata 的数据库，运行课前资料提供的 sql 文件：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750346.png\" alt=\"image-20210622204145159\" /></p>\n<p>这些表主要记录全局事务、分支事务、全局锁信息：</p>\n<pre><code class=\"language-mysql\">\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- 分支事务表\n-- ----------------------------\nDROP TABLE IF EXISTS `branch_table`;\nCREATE TABLE `branch_table`  (\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  `transaction_id` bigint(20) NULL DEFAULT NULL,\n  `resource_group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `resource_id` varchar(256) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `branch_type` varchar(8) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `status` tinyint(4) NULL DEFAULT NULL,\n  `client_id` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `gmt_create` datetime(6) NULL DEFAULT NULL,\n  `gmt_modified` datetime(6) NULL DEFAULT NULL,\n  PRIMARY KEY (`branch_id`) USING BTREE,\n  INDEX `idx_xid`(`xid`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;\n\n-- ----------------------------\n-- 全局事务表\n-- ----------------------------\nDROP TABLE IF EXISTS `global_table`;\nCREATE TABLE `global_table`  (\n  `xid` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,\n  `transaction_id` bigint(20) NULL DEFAULT NULL,\n  `status` tinyint(4) NOT NULL,\n  `application_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `transaction_service_group` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `transaction_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `timeout` int(11) NULL DEFAULT NULL,\n  `begin_time` bigint(20) NULL DEFAULT NULL,\n  `application_data` varchar(2000) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `gmt_create` datetime NULL DEFAULT NULL,\n  `gmt_modified` datetime NULL DEFAULT NULL,\n  PRIMARY KEY (`xid`) USING BTREE,\n  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,\n  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;\n\nSET FOREIGN_KEY_CHECKS = 1;\n</code></pre>\n<h2 id=\"6启动tc服务\"><a class=\"anchor\" href=\"#6启动tc服务\">#</a> 6. 启动 TC 服务</h2>\n<p>进入 bin 目录，运行其中的 seata-server.bat 即可：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750008.png\" alt=\"image-20210622205427318\" /></p>\n<p>启动成功后，seata-server 应该已经注册到 nacos 注册中心了。</p>\n<p>打开浏览器，访问 nacos 地址：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODQ4\">http://localhost:8848</span>，然后进入服务列表页面，可以看到 seata-tc-server 的信息：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750053.png\" alt=\"image-20210622205901450\" /></p>\n<h1 id=\"二-微服务集成seata\"><a class=\"anchor\" href=\"#二-微服务集成seata\">#</a> 二、微服务集成 seata</h1>\n<h2 id=\"1引入依赖\"><a class=\"anchor\" href=\"#1引入依赖\">#</a> 1. 引入依赖</h2>\n<p>首先，我们需要在微服务中引入 seata 依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 版本较低，1.3.0，因此排除 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>seata-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">&lt;!--seata starter 采用 1.4.2 版本 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>seata-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;seata.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2修改配置文件\"><a class=\"anchor\" href=\"#2修改配置文件\">#</a> 2. 修改配置文件</h2>\n<p>需要修改 application.yml 文件，添加一些配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># TC 服务注册中心的配置，微服务根据这些信息去注册中心获取 tc 服务地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 参考 tc 服务自己的 registry.conf 中的配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># tc</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> DEFAULT_GROUP</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>tc<span class=\"token punctuation\">-</span>server <span class=\"token comment\"># tc 服务在 nacos 中的服务名称</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> SH</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">tx-service-group</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>demo <span class=\"token comment\"># 事务组，根据这个获取 tc 服务的 cluster 名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">vgroup-mapping</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 事务组与 TC 服务 cluster 的映射关系</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">seata-demo</span><span class=\"token punctuation\">:</span> SH</pre></td></tr></table></figure><p>要从 nacos 中找到一个服务，我需要知道什么信息。</p>\n<p>我们从 nacos 找到一个服务至少需要知道 namespace，group，application-name 和 cluster</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180945757.png\" alt=\"image-20231018094533567\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180948844.png\" alt=\"image-20231018094851842\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>nacos 服务名称组成包括？</p>\n<ul>\n<li>namespace + group + serviceName + cluster</li>\n</ul>\n<p>seata 客户端获取 tc 的 cluster 名称方式</p>\n<ul>\n<li>以 tx-group-service 的值为 key 到 vgroupMapping 中查找</li>\n</ul>\n</blockquote>\n<h1 id=\"三-tc服务的高可用和异地容灾\"><a class=\"anchor\" href=\"#三-tc服务的高可用和异地容灾\">#</a> 三、TC 服务的高可用和异地容灾</h1>\n<h2 id=\"1模拟异地容灾的tc集群\"><a class=\"anchor\" href=\"#1模拟异地容灾的tc集群\">#</a> 1. 模拟异地容灾的 TC 集群</h2>\n<p>计划启动两台 seata 的 tc 服务节点：</p>\n<table>\n<thead>\n<tr>\n<th>节点名称</th>\n<th>ip 地址</th>\n<th>端口号</th>\n<th>集群名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>seata</td>\n<td>127.0.0.1</td>\n<td>8091</td>\n<td>SH</td>\n</tr>\n<tr>\n<td>seata2</td>\n<td>127.0.0.1</td>\n<td>8092</td>\n<td>HZ</td>\n</tr>\n</tbody>\n</table>\n<p>之前我们已经启动了一台 seata 服务，端口是 8091，集群名为 SH。</p>\n<p>现在，将 seata 目录复制一份，起名为 seata2</p>\n<p>修改 seata2/conf/registry.conf 内容如下：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">registry</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\"># tc 服务的注册中心类，这里选择 nacos，也可以是 eureka、zookeeper 等</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token directive\"><span class=\"token keyword\">type</span> = <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  nacos</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># seata tc 服务注册到 nacos 的服务名称，可以自定义</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    application = \"seata-tc-server\"</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    serverAddr = \"127.0.0.1:8848\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    group = \"DEFAULT_GROUP\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    namespace = \"\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cluster = \"HZ\"</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    username = \"nacos\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    password = \"nacos\"</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">config</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\"># 读取 tc 服务端的配置文件的方式，这里是从 nacos 配置中心读取，这样如果 tc 是集群，可以共享配置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token directive\"><span class=\"token keyword\">type</span> = <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\"># 配置 nacos 地址等信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  nacos</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    serverAddr = \"127.0.0.1:8848\"</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    namespace = \"\"</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    group = \"SEATA_GROUP\"</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    username = \"nacos\"</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    password = \"nacos\"</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    dataId = \"seataServer.properties\"</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Seata-1.7.0 版本的配置如下：</p>\n<p>找到 yml 配置文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181958636.png\" alt=\"image-20231018092704361\" /></p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">7091</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span> classpath<span class=\"token punctuation\">:</span>logback<span class=\"token punctuation\">-</span>spring.xml</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>user.home<span class=\"token punctuation\">&#125;</span>/logs/seata</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">extend</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">logstash-appender</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">4560</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token key atrule\">kafka-appender</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">bootstrap-servers</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token key atrule\">topic</span><span class=\"token punctuation\">:</span> logback_to_logstash</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">console</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> seata</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> seata</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\"># support: nacos, consul, apollo, zk, etcd3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\"># 改这里会报错</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SEATA_GROUP</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">#access-key: \"\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">#secret-key: \"\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> seataServer.properties</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token key atrule\">preferred-networks</span><span class=\"token punctuation\">:</span> 30.240.*</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span> seata<span class=\"token punctuation\">-</span>tc<span class=\"token punctuation\">-</span>server</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> DEFAULT_GROUP</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> HZ <span class=\"token comment\"># 修改集群地址</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">#access-key: \"\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token comment\">#secret-key: \"\"</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">store</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\"># support: file 、 db 、 redis</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> db</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span> druid</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token key atrule\">db-type</span><span class=\"token punctuation\">:</span> mysql</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>13306/seata<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;rewriteBatchedStatements=true&amp;serverTimezone=GMT</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> dkx.</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token key atrule\">min-conn</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token key atrule\">max-conn</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token key atrule\">global-table</span><span class=\"token punctuation\">:</span> global_table</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token key atrule\">branch-table</span><span class=\"token punctuation\">:</span> branch_table</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token key atrule\">lock-table</span><span class=\"token punctuation\">:</span> lock_table</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token key atrule\">distributed-lock-table</span><span class=\"token punctuation\">:</span> distributed_lock</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token key atrule\">query-limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#  server:</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">#    service-port: 8091 #If not configured, the default is '$&#123;server.port&#125; + 1000'</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token key atrule\">secretKey</span><span class=\"token punctuation\">:</span> SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token key atrule\">tokenValidityInMilliseconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1800000</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token key atrule\">ignore</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token key atrule\">urls</span><span class=\"token punctuation\">:</span> /<span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.css</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.js</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.html</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.map</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.svg</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.png</span><span class=\"token punctuation\">,</span>/<span class=\"token important\">**/*.ico</span><span class=\"token punctuation\">,</span>/console<span class=\"token punctuation\">-</span>fe/public/<span class=\"token important\">**</span><span class=\"token punctuation\">,</span>/api/v1/auth/login</pre></td></tr></table></figure><p>进入 seata2/bin 目录，然后运行命令：</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>seata-server<span class=\"token punctuation\">.</span>bat <span class=\"token operator\">-</span>p 8092</pre></td></tr></table></figure><p>1.7.0 版本实在不行就配置文件里修改端口号</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310182005822.png\" alt=\"image-20231018200503303\" /></p>\n<p>打开 nacos 控制台，查看服务列表：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750772.png\" alt=\"image-20210624151150840\" /></p>\n<p>点进详情查看：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180750333.png\" alt=\"image-20210624151221747\" /></p>\n<h2 id=\"2将事务组映射配置到nacos\"><a class=\"anchor\" href=\"#2将事务组映射配置到nacos\">#</a> 2. 将事务组映射配置到 nacos</h2>\n<p>接下来，我们需要将 tx-service-group 与 cluster 的映射关系都配置到 nacos 配置中心。</p>\n<p>新建一个配置：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180751774.png\" alt=\"image-20210624151507072\" /></p>\n<p>配置的内容如下：</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 事务组映射关系</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">service.vgroupMapping.seata-demo</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">SH</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">service.enableDegrade</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">service.disableGlobalTransaction</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 与 TC 服务的通信配置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">transport.type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">TCP</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">transport.server</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NIO</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">transport.heartbeat</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">transport.enableClientBatchSendRequest</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.bossThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyBoss</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.workerThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyServerNIOWorker</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.serverExecutorThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyServerBizHandler</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.shareBossWorker</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.clientSelectorThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyClientSelector</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.clientSelectorThreadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.clientWorkerThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyClientWorkerThread</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.bossThreadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.workerThreadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">default</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key attr-name\">transport.shutdown.wait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">3</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># RM 配置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key attr-name\">client.rm.asyncCommitBufferLimit</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key attr-name\">client.rm.lock.retryInterval</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key attr-name\">client.rm.lock.retryTimes</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key attr-name\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key attr-name\">client.rm.reportRetryCount</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key attr-name\">client.rm.tableMetaCheckEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key attr-name\">client.rm.tableMetaCheckerInterval</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">60000</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key attr-name\">client.rm.sqlParserType</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">druid</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key attr-name\">client.rm.reportSuccessEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token key attr-name\">client.rm.sagaBranchRegisterEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># TM 配置</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key attr-name\">client.tm.commitRetryCount</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key attr-name\">client.tm.rollbackRetryCount</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key attr-name\">client.tm.defaultGlobalTransactionTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">60000</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key attr-name\">client.tm.degradeCheck</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token key attr-name\">client.tm.degradeCheckAllowTimes</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token key attr-name\">client.tm.degradeCheckPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">2000</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># undo 日志配置</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key attr-name\">client.undo.dataValidation</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key attr-name\">client.undo.logSerialization</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jackson</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key attr-name\">client.undo.onlyCareUpdateColumns</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key attr-name\">client.undo.logTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">undo_log</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token key attr-name\">client.undo.compress.enable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token key attr-name\">client.undo.compress.type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">zip</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token key attr-name\">client.undo.compress.threshold</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">64k</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token key attr-name\">client.log.exceptionRate</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr></table></figure><h2 id=\"3微服务读取nacos配置\"><a class=\"anchor\" href=\"#3微服务读取nacos配置\">#</a> 3. 微服务读取 nacos 配置</h2>\n<p>接下来，需要修改每一个微服务的 application.yml 文件，让微服务读取 nacos 中的 client.properties 文件：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> nacos</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SEATA_GROUP <span class=\"token comment\"># 这里和 nacos 添加配置文件中的 group 要一致</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> client.properties</pre></td></tr></table></figure><p>重启微服务，现在微服务到底是连接 tc 的 SH 集群，还是 tc 的 HZ 集群，都统一由 nacos 的 client.properties 来决定了。</p>\n<p>8092</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310182016810.png\" alt=\"image-20231018201640218\" /></p>\n<p>7091</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310182017126.png\" alt=\"image-20231018201658572\" /></p>\n<p>可以看到 8092 没有任何人注册，而是都注册到了 7091 上了</p>\n<p>我们去 nacos 控制台中对刚才创建的配置文件的集群地址进行修改为：HZ</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310182019284.png\" alt=\"image-20231018201902967\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310182019735.png\" alt=\"image-20231018201919714\" /></p>\n<p>在 8092 的 seata 启动窗口就可以看到如下信息：</p>\n<p>此时服务就全部都切换到了 8092 这个 seata 服务上了，7091 就没用了甚至于停掉也没有问题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310182027851.png\" alt=\"image-20231018202705207\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "springcloud-高级",
                "seata",
                "计算机学科",
                "springcloud",
                "部署",
                "Seata"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/canal/%E5%AE%89%E8%A3%85Canal/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/canal/%E5%AE%89%E8%A3%85Canal/",
            "title": "安装和配置Canal",
            "date_published": "2024-01-06T02:51:08.278Z",
            "content_html": "<h1 id=\"安装和配置canal\"><a class=\"anchor\" href=\"#安装和配置canal\">#</a> 安装和配置 Canal</h1>\n<p>下面我们就开启 mysql 的主从同步机制，让 Canal 来模拟 salve</p>\n<h1 id=\"1开启mysql主从\"><a class=\"anchor\" href=\"#1开启mysql主从\">#</a> 1. 开启 MySQL 主从</h1>\n<p>Canal 是基于 MySQL 的主从同步功能，因此必须先开启 MySQL 的主从功能才可以。</p>\n<p>这里以之前用 Docker 运行的 mysql 为例：</p>\n<h2 id=\"11开启binlog\"><a class=\"anchor\" href=\"#11开启binlog\">#</a> 1.1. 开启 binlog</h2>\n<p>打开 mysql 容器挂载的日志文件，我的在 <code>/tmp/mysql/conf</code>  目录:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310210931806.png\" alt=\"image-20210813153241537\" /></p>\n<p>修改文件：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /tmp/mysql/conf/my.cnf</pre></td></tr></table></figure><p>添加内容：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">log-bin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/var/lib/mysql/mysql-bin</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 数据库名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">binlog-do-db</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">dkx</span></pre></td></tr></table></figure><p>配置解读：</p>\n<ul>\n<li><code>log-bin=/var/lib/mysql/mysql-bin</code> ：设置 binary log 文件的存放地址和文件名，叫做 mysql-bin</li>\n<li><code>binlog-do-db=dkx</code> ：指定对哪个 database 记录 binary log events，这里记录 heima 这个库</li>\n</ul>\n<p>最终效果：</p>\n<figure class=\"highlight ini\"><figcaption data-lang=\"ini\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">mysqld</span><span class=\"token punctuation\">]</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>skip-name-resolve</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">character_set_server</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">utf8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">datadir</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/var/lib/mysql</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">server-id</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">log-bin</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">/var/lib/mysql/mysql-bin</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">binlog-do-db</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">dkx</span></pre></td></tr></table></figure><p>重启 mysql</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> restart mysql</pre></td></tr></table></figure><p>可以看到如下图中出现了指定文件表示成功！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211007103.png\" alt=\"image-20231021100731994\" /></p>\n<h2 id=\"12设置用户权限\"><a class=\"anchor\" href=\"#12设置用户权限\">#</a> 1.2. 设置用户权限</h2>\n<p>接下来添加一个仅用于数据同步的账户，出于安全考虑，这里仅提供对 heima 这个库的操作权限。</p>\n<pre><code class=\"language-mysql\">create user canal@'%' IDENTIFIED by 'canal';\nGRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT,SUPER ON *.* TO 'canal'@'%' identified by 'canal';\nFLUSH PRIVILEGES;\n</code></pre>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> canal IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'canal'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">REPLICATION</span> SLAVE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">REPLICATION</span> CLIENT <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'canal'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'canal'</span><span class=\"token variable\">@'%'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>FLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>mysql 8.0.2 可以使用如下命令：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> canal IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'canal'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">SELECT</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">VIEW</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">REPLICATION</span> SLAVE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">REPLICATION</span> CLIENT <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'canal'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>FLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>重启 mysql 容器即可</p>\n<pre><code>docker restart mysql\n</code></pre>\n<p>测试设置是否成功：在 mysql 控制台，或者 Navicat 中，输入命令：</p>\n<pre><code>show master status;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211015054.png\" alt=\"image-20231021101552134\" /></p>\n<h1 id=\"2安装canal\"><a class=\"anchor\" href=\"#2安装canal\">#</a> 2. 安装 Canal</h1>\n<h2 id=\"21创建网络\"><a class=\"anchor\" href=\"#21创建网络\">#</a> 2.1. 创建网络</h2>\n<p>我们需要创建一个网络，将 MySQL、Canal、MQ 放到同一个 Docker 网络中：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network create dkx</pre></td></tr></table></figure><p>让 mysql 加入这个网络：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network connect dkx mysql</pre></td></tr></table></figure><h2 id=\"23安装canal\"><a class=\"anchor\" href=\"#23安装canal\">#</a> 2.3. 安装 Canal</h2>\n<p>课前资料中提供了 canal 的镜像压缩包:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211145229.png\" alt=\"image-20210813161804292\" /></p>\n<p>大家可以上传到虚拟机，然后通过命令导入：</p>\n<pre><code>docker load -i canal.tar\n</code></pre>\n<p>然后运行命令创建 Canal 容器：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">11111</span>:11111 <span class=\"token parameter variable\">--name</span> canal <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.destinations</span><span class=\"token operator\">=</span>dkx1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.master.address</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.249.128:3306  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.dbUsername</span><span class=\"token operator\">=</span>canal  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.dbPassword</span><span class=\"token operator\">=</span>canal  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.connectionCharset</span><span class=\"token operator\">=</span>UTF-8 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.tsdb.enable</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.gtidon</span><span class=\"token operator\">=</span>false  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">canal.instance.filter.regex</span><span class=\"token operator\">=</span>dkx<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span><span class=\"token punctuation\">..</span>* <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token parameter variable\">--network</span> dkx1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token parameter variable\">-d</span> canal/canal-server:v1.1.5</pre></td></tr></table></figure><p>说明:</p>\n<ul>\n<li><code>-p 11111:11111</code> ：这是 canal 的默认监听端口</li>\n<li><code>-e canal.instance.master.address=mysql:3306</code> ：数据库地址 (同一网络可以使用容器名互联) 和端口，如果不知道 mysql 容器地址，可以通过 <code>docker inspect 容器id</code>  来查看</li>\n<li><code>-e canal.instance.dbUsername=canal</code> ：数据库用户名</li>\n<li><code>-e canal.instance.dbPassword=canal</code>  ：数据库密码</li>\n<li><code>-e canal.instance.filter.regex=</code> ：要监听的表名称</li>\n</ul>\n<p>表名称监听支持的语法：</p>\n<pre><code>mysql 数据解析关注的表，Perl正则表达式.\n多个正则之间以逗号(,)分隔，转义符需要双斜杠(\\\\) \n常见例子：\n1.  所有表：.*   or  .*\\\\..*\n2.  canal schema下所有表： canal\\\\..*\n3.  canal下的以canal打头的表：canal\\\\.canal.*\n4.  canal schema下的一张表：canal.test1\n5.  多个规则组合使用然后以逗号隔开：canal\\\\..*,mysql.test1,mysql.test2 \n</code></pre>\n<p>查看启动日志，查看是否启动成功了：</p>\n<pre><code class=\"language-sh·\">[root@localhost tmp]# docker logs -f canal\nDOCKER_DEPLOY_TYPE=VM\n==&gt; INIT /alidata/init/02init-sshd.sh\n==&gt; EXIT CODE: 0\n==&gt; INIT /alidata/init/fix-hosts.py\n==&gt; EXIT CODE: 0\n==&gt; INIT DEFAULT\nGenerating SSH1 RSA host key: [  OK  ]\nStarting sshd: [  OK  ]\nStarting crond: [  OK  ]\n==&gt; INIT DONE\n==&gt; RUN /home/admin/app.sh\n==&gt; START ...\nstart canal ...\nstart canal successful\n==&gt; START SUCCESSFUL ...\n</code></pre>\n<p>查看 canal 是否与 mysql 进行建立连接了</p>\n<p>步骤：</p>\n<p>1、进入 canal 内部</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost tmp<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it canal bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@a02803287608 admin<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>2、使用命令监控 canal 的日志信息</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@a02803287608 admin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-rwxr-xr-x. <span class=\"token number\">1</span> admin admin <span class=\"token number\">3941</span> Apr <span class=\"token number\">19</span>  <span class=\"token number\">2021</span> app.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x. <span class=\"token number\">2</span> admin admin   <span class=\"token number\">43</span> Apr <span class=\"token number\">19</span>  <span class=\"token number\">2021</span> bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>drwxr-xr-x. <span class=\"token number\">1</span> admin admin   <span class=\"token number\">66</span> Apr <span class=\"token number\">19</span>  <span class=\"token number\">2021</span> canal-server</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rwxr-xr-x. <span class=\"token number\">1</span> admin admin  <span class=\"token number\">670</span> Apr <span class=\"token number\">19</span>  <span class=\"token number\">2021</span> health.sh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>lrwxrwxrwx. <span class=\"token number\">1</span> admin admin   <span class=\"token number\">44</span> Apr <span class=\"token number\">19</span>  <span class=\"token number\">2021</span> node_exporter -<span class=\"token operator\">></span> /home/admin/node_exporter-0.18.1.linux-arm64</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>drwxr-xr-x. <span class=\"token number\">2</span> admin admin   <span class=\"token number\">56</span> Jun  <span class=\"token number\">5</span>  <span class=\"token number\">2019</span> node_exporter-0.18.1.linux-arm64</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@a02803287608 admin<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -f canal-server/logs/canal/canal.log</span></pre></td></tr></table></figure><p>打印日志如下</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2023</span>-10-21 <span class=\"token number\">10</span>:31:37.324 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.alibaba.otter.canal.deployer.CanalLauncher - <span class=\"token comment\">## set default uncaught exception handler</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2023</span>-10-21 <span class=\"token number\">10</span>:31:37.376 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.alibaba.otter.canal.deployer.CanalLauncher - <span class=\"token comment\">## load canal configurations</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2023</span>-10-21 <span class=\"token number\">10</span>:31:37.392 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.alibaba.otter.canal.deployer.CanalStarter - <span class=\"token comment\">## start the canal server.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2023</span>-10-21 <span class=\"token number\">10</span>:31:37.466 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.alibaba.otter.canal.deployer.CanalController - <span class=\"token comment\">## start the canal server[172.22.0.3(172.22.0.3):11111]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2023</span>-10-21 <span class=\"token number\">10</span>:31:39.126 <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span> INFO  com.alibaba.otter.canal.deployer.CanalStarter - <span class=\"token comment\">## the canal server is running now ......</span></pre></td></tr></table></figure><p>可以看到启动没什么问题</p>\n<p>查看 mysql 连接的日志</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@a02803287608 admin<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -f canal-server/logs/dkx1/dkx1.log</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> start position successfully, EntryPosition<span class=\"token punctuation\">[</span>included<span class=\"token operator\">=</span>false,journalName<span class=\"token operator\">=</span>mysql-bin.000006,position<span class=\"token operator\">=</span><span class=\"token number\">4</span>,serverId<span class=\"token operator\">=</span><span class=\"token number\">1000</span>,gtid<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span>null<span class=\"token operator\">></span>,timestamp<span class=\"token operator\">=</span><span class=\"token number\">1697857809000</span><span class=\"token punctuation\">]</span> cost <span class=\"token builtin class-name\">:</span> 521ms , the next step is binlog dump</pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "springcloud-高级",
                "canal",
                "计算机学科",
                "基础",
                "springcloud",
                "Canal"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/OpenResty/%E5%AE%89%E8%A3%85OpenResty/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/OpenResty/%E5%AE%89%E8%A3%85OpenResty/",
            "title": "安装OpenResty",
            "date_published": "2024-01-06T02:48:59.643Z",
            "content_html": "<h1 id=\"安装openresty\"><a class=\"anchor\" href=\"#安装openresty\">#</a> 安装 OpenResty</h1>\n<h1 id=\"1安装\"><a class=\"anchor\" href=\"#1安装\">#</a> 1. 安装</h1>\n<p>首先你的 Linux 虚拟机必须联网</p>\n<h2 id=\"1安装开发库\"><a class=\"anchor\" href=\"#1安装开发库\">#</a> <strong>1）安装开发库</strong></h2>\n<p>首先要安装 OpenResty 的依赖开发库，执行命令：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> pcre-devel openssl-devel gcc --skip-broken</pre></td></tr></table></figure><h2 id=\"2安装openresty仓库\"><a class=\"anchor\" href=\"#2安装openresty仓库\">#</a> <strong>2）安装 OpenResty 仓库</strong></h2>\n<p>你可以在你的 CentOS 系统中添加  <code>openresty</code>  仓库，这样就可以便于未来安装或更新我们的软件包（通过  <code>yum check-update</code>  命令）。运行下面的命令就可以添加我们的仓库：</p>\n<pre><code>yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo\n</code></pre>\n<p>如果提示说命令不存在，则运行：</p>\n<pre><code>yum install -y yum-utils \n</code></pre>\n<p>然后再重复上面的命令</p>\n<h2 id=\"3安装openresty\"><a class=\"anchor\" href=\"#3安装openresty\">#</a> <strong>3）安装 OpenResty</strong></h2>\n<p>然后就可以像下面这样安装软件包，比如  <code>openresty</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openresty</pre></td></tr></table></figure><h2 id=\"4安装opm工具\"><a class=\"anchor\" href=\"#4安装opm工具\">#</a> <strong>4）安装 opm 工具</strong></h2>\n<p>opm 是 OpenResty 的一个管理工具，可以帮助我们安装一个第三方的 Lua 模块。</p>\n<p>如果你想安装命令行工具  <code>opm</code> ，那么可以像下面这样安装  <code>openresty-opm</code>  包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> openresty-opm</pre></td></tr></table></figure><h2 id=\"5目录结构\"><a class=\"anchor\" href=\"#5目录结构\">#</a> <strong>5）目录结构</strong></h2>\n<p>默认情况下，OpenResty 安装的目录是：/usr/local/openresty</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200901485.png\" alt=\"image-20200310225539214\" /></p>\n<p>看到里面的 nginx 目录了吗，OpenResty 就是在 Nginx 基础上集成了一些 Lua 模块。</p>\n<h2 id=\"6配置nginx的环境变量\"><a class=\"anchor\" href=\"#6配置nginx的环境变量\">#</a> <strong>6）配置 nginx 的环境变量</strong></h2>\n<p>打开配置文件：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> /etc/profile</pre></td></tr></table></figure><p>在最下面加入两行：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NGINX_HOME</span><span class=\"token operator\">=</span>/usr/local/openresty/nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;NGINX_HOME&#125;</span>/sbin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure><p>NGINX_HOME：后面是 OpenResty 安装目录下的 nginx 的目录</p>\n<p>然后让配置生效：</p>\n<pre><code>source /etc/profile\n</code></pre>\n<h1 id=\"2启动和运行\"><a class=\"anchor\" href=\"#2启动和运行\">#</a> 2. 启动和运行</h1>\n<p>OpenResty 底层是基于 Nginx 的，查看 OpenResty 目录的 nginx 目录，结构与 windows 中安装的 nginx 基本一致：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200901105.png\" alt=\"image-20210811100653291\" /></p>\n<p>所以运行方式与 nginx 基本一致：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 nginx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nginx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 重新加载配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nginx <span class=\"token parameter variable\">-s</span> reload</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 停止</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nginx <span class=\"token parameter variable\">-s</span> stop</pre></td></tr></table></figure><p>nginx 的默认配置文件注释太多，影响后续我们的编辑，这里将 nginx.conf 中的注释部分删除，保留有效部分。</p>\n<p>修改 <code>/usr/local/openresty/nginx/conf/nginx.conf</code>  文件，内容如下：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#user  nobody;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">error_log</span>  logs/error.log</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span>  <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">include</span>       mime.types</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">default_type</span>  application/octet-stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">sendfile</span>        <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">keepalive_timeout</span>  <span class=\"token number\">65</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">8081</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 Linux 的控制台输入命令以启动 nginx：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx</pre></td></tr></table></figure><p>然后访问页面：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMTUwLjEwMTo4MDgx\">http://192.168.150.101:8081</span>，注意 ip 地址替换为你自己的虚拟机 IP：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200910980.png\" alt=\"image-20231020091008283\" /></p>\n<h1 id=\"3备注\"><a class=\"anchor\" href=\"#3备注\">#</a> 3. 备注</h1>\n<p>加载 OpenResty 的 lua 模块：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#lua 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">lua_package_path</span> <span class=\"token string\">\"/usr/local/openresty/lualib/?.lua;;\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#c 模块     </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">lua_package_cpath</span> <span class=\"token string\">\"/usr/local/openresty/lualib/?.so;;\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>监听浏览器请求</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">8081</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /api/item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token comment\"># 默认的响应类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token directive\"><span class=\"token keyword\">default_type</span> application/json</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token comment\"># 响应结果由 lua/item.lua 下的文件决定</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/item.lua</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>common.lua</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 封装函数，发送 http 请求，并解析响应</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> resp <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        method <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>HTTP_GET<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        args <span class=\"token operator\">=</span> params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">-- 记录错误信息，返回 404</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http not found, path: \"</span><span class=\"token punctuation\">,</span> path <span class=\"token punctuation\">,</span> <span class=\"token string\">\", args: \"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">.</span>body</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 将方法导出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">local</span> _M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    read_http <span class=\"token operator\">=</span> read_http</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">return</span> _M</pre></td></tr></table></figure><p>释放 Redis 连接 API：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 关闭 redis 连接的工具方法，其实是放入连接池</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">close_redis</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> pool_max_idle_time <span class=\"token operator\">=</span> <span class=\"token number\">10000</span> <span class=\"token comment\">-- 连接的空闲时间，单位是毫秒</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> pool_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">-- 连接池大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">set_keepalive</span><span class=\"token punctuation\">(</span>pool_max_idle_time<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"放入redis连接池失败: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>读取 Redis 数据的 API：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查询 redis 的方法 ip 和 port 是 redis 地址，key 是查询的 key</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_redis</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">-- 获取一个连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"连接redis失败 : \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">-- 查询 redis</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">local</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">-- 查询失败处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询Redis失败: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\", key = \"</span> <span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">-- 得到的数据为空处理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> resp <span class=\"token operator\">==</span> ngx<span class=\"token punctuation\">.</span>null <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        resp <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询Redis数据为空, key = \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">close_redis</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> resp</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>开启共享词典：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 共享字典，也就是本地缓存，名称叫做：item_cache，大小 150m</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">lua_shared_dict</span> item_cache <span class=\"token number\">150m</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "springcloud-高级",
                "OpenResty",
                "计算机学科",
                "springcloud",
                "OpenResty"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/springcloud-%E9%AB%98%E7%BA%A7/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%AB%98%E7%BA%A7%E7%AF%87/",
            "title": "SpringCloud高级篇",
            "date_published": "2024-01-06T02:42:53.168Z",
            "content_html": "<h1 id=\"一-微服务保护\"><a class=\"anchor\" href=\"#一-微服务保护\">#</a> 一、微服务保护🎄</h1>\n<ul>\n<li>Sentinel</li>\n</ul>\n<p>学习内容：</p>\n<ul>\n<li>初始 Sentinel</li>\n<li>流量控制</li>\n<li>隔离和降级</li>\n<li>授权规则</li>\n<li>规则持久化</li>\n</ul>\n<h2 id=\"11-初始sentinel\"><a class=\"anchor\" href=\"#11-初始sentinel\">#</a> 1.1、初始 Sentinel🌳</h2>\n<ul>\n<li>雪崩问题及解决方案</li>\n<li>服务保护技术对比</li>\n<li>Sentinel 介绍和安装</li>\n<li>微服务整合 Sentinel</li>\n</ul>\n<h3 id=\"111-雪崩问题\"><a class=\"anchor\" href=\"#111-雪崩问题\">#</a> 1.1.1、雪崩问题🌲</h3>\n<p>微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用，这就是雪崩。</p>\n<p><strong>场景</strong>：</p>\n<p>比方说在服务 A 内部依赖于服务 B，而服务 A 内部可能还有一些其它的业务比如说它依赖于服务 C 或者是依赖于服务 D</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161531964.png\" alt=\"image-20231016153100257\" /></p>\n<p>现在假设说服务 D 出现了故障，那服务 A 内部依赖与服务 D 的业务请求就不能正常访问了</p>\n<p>因为服务 A 访问服务 D 就必然要等待服务 D 的响应结果，而因为服务 D 出现了故障不可能返回结果它会阻塞，那就导致了服务 A 内部业务也会阻塞，阻塞 它就不会释放 tomcat 的链接。当然其它业务请求不受影响还可以正常工作。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161532119.png\" alt=\"image-20231016153207881\" /></p>\n<p>但是既然有第一个依赖于服务 D 这样的请求，那一定还会有第二个甚至第三个。这样依赖于服务 D 的业务请求越来越多，而它们都不会释放连接，那么时久一定会把服务 A 内部所有的链接都给占用了</p>\n<p>也就是说 tomcat 资源耗尽了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161537530.png\" alt=\"image-20231016153714784\" /></p>\n<p>此时再有服务进来哪怕不是依赖于服务 D 的而是服务 B 的，是不是也进不来了。那就可以认为服务 A 也出现了故障</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161539417.png\" alt=\"image-20231016153923278\" /></p>\n<p>这就造成了一个服务的故障导致了依赖于它的服务最终也出现了故障。在微服务里这种调用关系可不止这么简单</p>\n<p>那么服务 A 依赖于服务 D 导致最后给服务 D 拖垮了，那肯定还会有其它的服务也依赖于服务 D，最终也会被拖垮，将来其它依赖于服务 A 的也会出现故障，最终故障的服务越来越多那么整个微服务群就不可用了。</p>\n<p>这不就是雪崩了吗！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161541181.png\" alt=\"image-20231016154142767\" /></p>\n<h3 id=\"112-解决雪崩问题\"><a class=\"anchor\" href=\"#112-解决雪崩问题\">#</a> 1.1.2、解决雪崩问题🌲</h3>\n<p><strong>解决雪崩问题的常见方式有四种</strong>：</p>\n<p>1、<mark>超时处理</mark>：设定超时时间，请求超过一定时间没有响应结果就返回错误信息，不会无休止等待</p>\n<p>会在调用业务时加上一个超时时间比如说 1 秒钟，当服务 A 依赖于服务 C 时请求最多等待 1 秒钟，如果请求超过 1 秒钟就会立即结束这个请求，不再等待，返回给用户提示信息 (不好意思失败了)</p>\n<p>缺点：只能起到缓解作用，不能解决根本问题，因为请求速度大于等待时间就会出现问题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161546216.png\" alt=\"image-20231016154632246\" /></p>\n<p>2、<mark>舱壁模式</mark>：限定每个业务能使用的线程数，避免耗尽整个 tomcat 的资源，因此也叫线程隔离。</p>\n<p>舱壁模式是来自于现实生活中的船舱的设计，一些大型的轮船它都会把船体利用隔板分隔成独立的小的空间这样的隔板就叫做舱壁。因为这些空间之间是相互隔离的，假设说船体的某个部位撞上了冰山漏水了。那么最多只是把部分船舱填满水，因为是隔离的所以其它船舱不受影响。这样就提高了整艘船的容灾能力</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161550959.png\" alt=\"image-20231016155024959\" /></p>\n<p>这种模式延续到程序设计里边是怎么做的呢？</p>\n<p>这是服务 A 里面的资源也就是 tomcat 就可以看做成整艘船。我们可以把 tomcat 里面的资源 (线程) 划分成一个一个独立的线程池。给每个业务分配一个线程池。现在业务 1 进来后它依赖于服务 B，它最多使用十个限制，访问业务 2 比方说它依赖于服务 C，它也最多使用十线程。</p>\n<p>现在假设说服务 C 出现故障了，这个业务 2 就会阻塞占用线程，但是它最多占用十个，这时它能够使用 tomcat 的资源是有限的，这样就把故障隔离到十个线程内了，因此也叫线程隔离。因此就避免了整个 tomcat 被耗尽的情况</p>\n<p>缺点：资源有一定的浪费，比如说服务 C 真的宕机了，现在每次请求来还让它尝试着去访问一下服务 C 还要占用十个线程也是一种浪费</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161558553.png\" alt=\"image-20231016155848381\" /></p>\n<p>3、<mark>熔断降级</mark>：由<mark>断路器</mark>统计业务执行的异常比例，如果超出阈值则会<mark>熔断</mark>该业务，拦截访问该业务的一切请求。</p>\n<p>统计服务 A 里面的业务，比方说服务 A 里第一次业务访问是正常的，结果后面两次都出现了故障。这时断路器就会统计比例，三个请求一个正常两个故障，故障比例高达 60%。假设说阈值是 50% 超出了阈值，此时就会出现熔断。</p>\n<p>一旦被熔断如果在服务 A 内部还想要访问服务 D 的业务就无法再去访问服务 D 了，只要是访问服务 D 的业务就会被拦截</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161606208.png\" alt=\"image-20231016160627109\" /></p>\n<p>4、<mark>流量控制</mark>：限制业务访问 QPS，避免服务因流量的突增而故障。</p>\n<p>QPS：每秒钟处理的请求数量</p>\n<p>比方说有一个微服务，它能承受的最大 QPS 为 2，也就是每秒钟最多处理两个请求。</p>\n<p>但是现在有无数个请求涌过来，就会出现故障，一旦这个服务出现故障，而依赖于这个服务的其它服务也就跟着出现故障就会出现雪崩问题</p>\n<p>所以我们要避免服务因为流量过高而引起故障，这时就需要用到 Sentinel 了</p>\n<p>现在假设说有无数个请求过来而 Sentinel 可以按照这个服务所能够承受的频率去释放请求，这时微服务就能从容应对这些请求了就避免了出现故障</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161613445.png\" alt=\"image-20231016161314587\" /></p>\n<p>流量控制是预防雪崩，前面三种是已经有服务故障了我怎么样去避免这个故障传递给其它服务</p>\n<p>但是也不能说，那我就只用 流量控制呗，其它的我就不用了，这样显然是不对的。</p>\n<p>因为高并发引起的服务故障只是故障的原因之一，往往服务还会因为其它问题而出现故障。比方说网络问题或者说 fgc 引起的假死问题，这时我们就需要用到其它的解决方案了</p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>什么是雪崩问题？</p>\n<ul>\n<li>微服务之间相互调用，因为调用链中一个服务故障，引起整个链路都无法访问的情况</li>\n</ul>\n<p>如何避免因瞬间高并发流量而导致服务故障？</p>\n<ul>\n<li>流量控制</li>\n</ul>\n<p>如何避免因服务故障引起的雪崩问题？</p>\n<ul>\n<li>超时处理</li>\n<li>线程隔离</li>\n<li>降级熔断</li>\n</ul>\n</blockquote>\n<h3 id=\"113-服务保护技术对比\"><a class=\"anchor\" href=\"#113-服务保护技术对比\">#</a> 1.1.3、服务保护技术对比🌲</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sentinel</th>\n<th>Hystrix</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>隔离策略</td>\n<td>信号量隔离</td>\n<td>线程池隔离 / 信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于慢调用比例或异常比例</td>\n<td>基于失败比例</td>\n</tr>\n<tr>\n<td>实时指标实现</td>\n<td>滑动窗口</td>\n<td>滑动窗口 (基于 RxJava)</td>\n</tr>\n<tr>\n<td>规则配置</td>\n<td>支持多种数据源</td>\n<td>支持多种数据源</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于 QPS，支持基于调用关系的限流</td>\n<td>有限的支持</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持慢启动，匀速排队模式</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>系统自适应保护</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>开箱即用，可配置规则，查看秒级监控，机器发现等</td>\n<td>不完善</td>\n</tr>\n<tr>\n<td>常见框架的适配</td>\n<td>Servlet，Spring Cloud，Dubbo，gRPC 等</td>\n<td>Servlet，Spring Cloud Netflix</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"12-认识sentinel\"><a class=\"anchor\" href=\"#12-认识sentinel\">#</a> 1.2、认识 Sentinel🌳</h2>\n<p>Sentinel 是阿里巴巴开源的一款微服务流量控制组件。官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuLw==\">https://sentinelguard.io/zh-cn/</span></p>\n<p><strong>Sentinel 具有以下特征</strong>：</p>\n<p>1、<mark>丰富的应用场景</mark>：Sentinel 承接了阿里巴巴进 10 年的双十一大促流量的核心场景，例如秒杀 (即突发流量控制在系统容量可以承受的范围)，消息削峰添谷，集群流量控制，实时熔断下游不可用应用等。</p>\n<p>2、<mark>完备的实时监控</mark>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台集群秒级数据，甚至 500 台以下规模的集群的汇总运行情况</p>\n<p>3、<mark>广泛的开源生态</mark>：Sentinel 提供开箱即用的与其它开源框架 / 库的整合模块，例如与 Spring cloud，Dubbo，gRPC 的整合。您只需要引入相应的依赖并运行简单的配置即可快速的接入 Sentinel</p>\n<p>4、<mark>完善的 SPI 扩展点</mark>：Sentinel 提供简单易用，完善的 SPI 扩展接口。您可以通过实现扩展接口来快速的定制逻辑。例如定制规则管理，适配动态数据源等。</p>\n<h3 id=\"121-安装sentinel控制台\"><a class=\"anchor\" href=\"#121-安装sentinel控制台\">#</a> 1.2.1、安装 Sentinel 控制台🌲</h3>\n<p>sentinel 官方提供了 UI 控制台，方便我们对系统做限流设置。大家可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWw=\"> Github</span> 下载。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161747500.png\" alt=\"image-20231016174714403\" /></p>\n<p>1、将其拷贝到一个非中文目录，然后运行命令</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> sentinel-dashboard-1.8.6.jar</pre></td></tr></table></figure><p>2、然后访问：localhost:8080 即可看到控制台页面，默认的账号和密码都是 sentinel</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161747766.png\" alt=\"image-20231016174746831\" /></p>\n<h2 id=\"13-安装sentinel控制台\"><a class=\"anchor\" href=\"#13-安装sentinel控制台\">#</a> 1.3、安装 Sentinel 控制台🌳</h2>\n<p>如果要修改 Sentinel 的默认端口，账号，密码，可以通过下列配置：</p>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>server.port</td>\n<td>8080</td>\n<td>服务端口</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.auth.username</td>\n<td>sentinel</td>\n<td>默认用户名</td>\n</tr>\n<tr>\n<td>sentinel.dashboard.auth.password</td>\n<td>sentinel</td>\n<td>默认密码</td>\n</tr>\n</tbody>\n</table>\n<p>但是它已经是一个 jar 包了怎么改它的配置文件呢？</p>\n<p>修改配置方式：</p>\n<blockquote>\n<p>举例说明：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sentinel-dashboard-1.8.6.jar <span class=\"token parameter variable\">-Dserver.port</span><span class=\"token operator\">=</span><span class=\"token number\">8090</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"14-微服务与sentinel整合\"><a class=\"anchor\" href=\"#14-微服务与sentinel整合\">#</a> 1.4、微服务与 Sentinel 整合🌳</h2>\n<h3 id=\"141-引入cloud-demo\"><a class=\"anchor\" href=\"#141-引入cloud-demo\">#</a> 1.4.1、引入 cloud-demo🌲</h3>\n<p>要使用 Sentinel 肯定要结合微服务，这里我们使用 SpringCloud 工程，项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZG91a2FpeGluL3R5cG9yYS5naXQ=\">https://gitee.com/doukaixin/typora.git</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161754232.png\" alt=\"image-20231016175423216\" /></p>\n<p>项目结构如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161755797.png\" alt=\"image-20231016175537988\" /></p>\n<p>启动项目进行测试看看是否还可以正常使用：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161939226.png\" alt=\"image-20231016193950393\" /></p>\n<p>访问页面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161939102.png\" alt=\"image-20231016193935669\" /></p>\n<p>一切正常后我们就开始整合</p>\n<h3 id=\"142-微服务整合sentinel\"><a class=\"anchor\" href=\"#142-微服务整合sentinel\">#</a> 1.4.2、微服务整合 Sentinel🌲</h3>\n<p>我们在 order-service 中整合 Sentinel，并且链接 Sentinel 的控制台，步骤如下：</p>\n<p>1、引入 Sentinel 依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-sentinel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2、配置控制台地址</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">sentinel</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">transport</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">dashboard</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr></table></figure><p>3、访问微服务的任意端点，触发 Sentinel 监控</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310161955434.png\" alt=\"image-20231016195535390\" /></p>\n<h2 id=\"15-限流规则\"><a class=\"anchor\" href=\"#15-限流规则\">#</a> 1.5、限流规则🌳</h2>\n<ul>\n<li>快速入门</li>\n<li>流控模式</li>\n<li>流控效果</li>\n<li>热点参数限流</li>\n</ul>\n<h3 id=\"151-蔟点链路\"><a class=\"anchor\" href=\"#151-蔟点链路\">#</a> 1.5.1、蔟点链路🌲</h3>\n<p>蔟点链路：就是项目内的调用链路，链路中<mark>被监控</mark>的每个接口就是一个资源。默认情况下 Sentinel 会监控 SpringMVC 的每一个端点 (Endpoint)，因此 SpringMVC 的每一个端点 (Endpoint)，就是调用链路中的一个资源。</p>\n<p>流控，熔断等都是<mark>针对蔟点链路中的资源</mark>来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162003730.png\" alt=\"image-20231016200306361\" /></p>\n<p>点击资源 /order/{orderId} 后面的流控按钮，就可以弹出表单。表单中可以添加流控规则，如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162009637.png\" alt=\"image-20231016200951539\" /></p>\n<p>其含义是限制 /order/{orderId} 这个资源的单击 QPS 为 1，即每秒只允许 1 次请求，超出的请求会被拦截并报错。</p>\n<p>针对来源中 defalt 表示一切请求都限流</p>\n<h4 id=\"1511-案例流控规则入门案例\"><a class=\"anchor\" href=\"#1511-案例流控规则入门案例\">#</a> 1.5.1.1、案例，流控规则入门案例🌴</h4>\n<p><strong>需求</strong>：给 /order/{orderId} 这个资源设置流控规则，QPS 不能超过 5。然后利用 jmeter 测试。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162014028.png\" alt=\"image-20231016201450102\" /></p>\n<p>这里使用 jemeter 进行并发的测试工具安装文章：<a href=\"../Jmeter/Jmeter%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.md\">jmeter 安装及使用</a>.</p>\n<p>测试文件文章地址：<a href=\"../%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/sentinel%E6%B5%8B%E8%AF%95.jmx\">sentinel 测试.jmx</a>.</p>\n<p>导入到 jmeter 中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162035976.png\" alt=\"image-20231016203528848\" /></p>\n<p>如果点击没有反应就直接将 jmx 文件拖到蓝瓶子里面就算导入了</p>\n<p>右键，流控入门，点击启动，之后可以点击查看结果树来查看请求的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162036099.png\" alt=\"image-20231016203617798\" /></p>\n<p>这是设置 QPS 后的请求情况，没有限流的时候全是通过的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162037652.png\" alt=\"image-20231016203706692\" /></p>\n<p>查看控制台的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162032402.png\" alt=\"image-20231016203257242\" /></p>\n<h3 id=\"152-流控模式\"><a class=\"anchor\" href=\"#152-流控模式\">#</a> 1.5.2、流控模式🌲</h3>\n<p>在添加限流规则时，点击高级选项，可以选择三种流控模式：</p>\n<ul>\n<li>\n<p>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</p>\n</li>\n<li>\n<p>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p>\n<p>两个资源，A 触发了阈值，但我却对 B 做了限流</p>\n</li>\n<li>\n<p>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162041214.png\" alt=\"image-20231016204109075\" /></p>\n<h4 id=\"1521-流控模式-关联\"><a class=\"anchor\" href=\"#1521-流控模式-关联\">#</a> 1.5.2.1、流控模式 - 关联🌴</h4>\n<ul>\n<li>关联模式：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li>\n<li>使用场景：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是有限支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162047957.png\" alt=\"image-20231016204748747\" /></p>\n<p>当 /write 资源访问量触发阈值时，就会对 /read 资源限流，避免影响 /write 资源。</p>\n<h5 id=\"15211-案例流控模式-关联\"><a class=\"anchor\" href=\"#15211-案例流控模式-关联\">#</a> 1.5.2.1.1、案例，流控模式 - 关联🎋</h5>\n<p>需求：</p>\n<ul>\n<li>在 OrderController 新建两个端点：/order/query 和 /order/update，无需实现业务</li>\n<li>配置流控规则，当 /order/update 资源被访问的 QPS 超过 5 个时，对 /order/query 请求限流</li>\n</ul>\n<p>重启服务后蔟点链路里面就会被清空了，我们需要重新去请求一下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162054136.png\" alt=\"image-20231016205436554\" /></p>\n<p>分别请求一下 query 和 update 的接口</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162055490.png\" alt=\"image-20231016205532378\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162055118.png\" alt=\"image-20231016205543133\" /></p>\n<p>再去查看蔟点链路就可以看到有信息了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162056790.png\" alt=\"image-20231016205631141\" /></p>\n<p>配置流控规则，当 /order/update 资源被访问的 QPS 超过 5 个时，对 /order/query 请求限流。</p>\n<p>我们要对谁进行限流就对谁进行流控规则</p>\n<p>点击 query 的流控</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162058104.png\" alt=\"image-20231016205856014\" /></p>\n<p>通过 jmeter 进行测试：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162101233.png\" alt=\"image-20231016210113073\" /></p>\n<p>请求的地址就是 /order/update</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162101101.png\" alt=\"image-20231016210145527\" /></p>\n<p>可以看到这个请求不会受到任何影响</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162102511.png\" alt=\"image-20231016210228553\" /></p>\n<p>但，当访问 /order/query 时</p>\n<p>就发生了异常，update 触发阈值时对 query 限流就实现了这样一种关联模式了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162103557.png\" alt=\"image-20231016210318424\" /></p>\n<blockquote>\n<p><strong>小结</strong>：</p>\n<p>满足下面条件可以使用关联模式：</p>\n<ul>\n<li>两个有竞争关系的资源</li>\n<li>一个优先级较高，一个优先级较低</li>\n</ul>\n</blockquote>\n<h4 id=\"1523-流控模式-链路\"><a class=\"anchor\" href=\"#1523-流控模式-链路\">#</a> 1.5.2.3、流控模式 - 链路🌴</h4>\n<p>链路模式：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p>\n<p>例如：有两条请求链路一个是从 test1 访问 common 资源另一个是从 test2 访问 common 资源：</p>\n<ul>\n<li>/test1 -&gt; /common</li>\n<li>/test2 -&gt; /common</li>\n</ul>\n<p>如果希望统计从 /test2 进入到 /common 的请求，则可以这样配置：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162107107.png\" alt=\"image-20231016210716025\" /></p>\n<p>这个配置的意思：</p>\n<p>在做限流统计时，只统计从 test2 进入 common 的请求，test1 进来的不管。所以这种统计是对请求来源的一种统计</p>\n<p>什么情况下我们会用到这样的模式呢？通过如下案例了解</p>\n<h5 id=\"15231-案例流控模式-链路\"><a class=\"anchor\" href=\"#15231-案例流控模式-链路\">#</a> 1.5.2.3.1、案例，流控模式 - 链路🎋</h5>\n<p>需求：有查询订单和创建订单业务，两者需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p>\n<p>步骤：</p>\n<p>1、在 OrderService 中添加一个 queryGoods 方法，不用实现业务</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goods\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">queryGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询商品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2、在 OrderController 中，改造 /order/query 端点，调用 OrderService 中的 queryGoods 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"query\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">queryOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 查询商品</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   orderService<span class=\"token punctuation\">.</span><span class=\"token function\">queryGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 查询订单</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询订单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"查询订单成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3、在 OrderController 中添加一个 /order/save 的端点，调用 OrderService 的 queryGoods 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">saveOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   orderService<span class=\"token punctuation\">.</span><span class=\"token function\">queryGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"新增订单\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">\"新增订单成功\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、给 queryGoods 设置限流规则，从 /order/query 进入 queryGoods 的方法限制 QPS 必须小于 2</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170741307.png\" alt=\"image-20231017074152072\" /></p>\n<ul>\n<li>\n<p>Sentinel 默认只标记 Controller 中的方法为资源，如果要标记其它方法，需要利用 @SentinelResource 注解，示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goods\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">queryGoods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询商品\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Sentinel 默认会将 Controller 方法做 context 整合，导致链路模式的流控失败，需要修改 application.yml，添加配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">sentinel</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">transport</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">dashboard</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">web-context-unify</span><span class=\"token punctuation\">:</span> false // 关闭context整合</pre></td></tr></table></figure></li>\n</ul>\n<p>访问 order/query 和 order/save</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162148402.png\" alt=\"image-20231016214825324\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162148432.png\" alt=\"image-20231016214834464\" /></p>\n<p>查看 sentinel 的蔟点链路信息</p>\n<p>可以看到 /order/query 与 /order/save 变成了两个独立的链路了，在之前没有关闭 context 整合时它俩是同一个跟链路下的子链路</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310162149544.png\" alt=\"image-20231016214905203\" /></p>\n<p>现在我们就可以对 goods 添加流控规则了，也就是上面的第 4 步</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170741307.png\" alt=\"\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170755887.png\" alt=\"image-20231017075526647\" /></p>\n<p>使用 jmeter 进行测试</p>\n<p>发起 200 个请求每秒发起 4 个 ，而且同时发起两个请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170802306.png\" alt=\"image-20231017080217215\" /></p>\n<p>可以看到请求 save 没问题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170806261.png\" alt=\"image-20231017080631501\" /></p>\n<p>可以看到请求 query 时是两个两个的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170806763.png\" alt=\"image-20231017080641204\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>流控模式有哪些？</p>\n<ul>\n<li>直接：对当前资源限流</li>\n<li>关联：高优先级资源触发阈值，对低优先级资源限流</li>\n<li>链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</li>\n</ul>\n</blockquote>\n<h4 id=\"1524-流控效果\"><a class=\"anchor\" href=\"#1524-流控效果\">#</a> 1.5.2.4、流控效果🌲</h4>\n<p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p>\n<ul>\n<li>快速失败：达到阈值后，新的请求会被立即拒绝并抛出 FlowException 异常。是默认的处理方式。</li>\n<li>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值</li>\n<li>排队等待：让所有的请求按照先后次序排队执行，两个请求的剪个不能小于指定时长</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170813160.png\" alt=\"image-20231017081328807\" /></p>\n<h5 id=\"15241-流控效果-warm-up\"><a class=\"anchor\" href=\"#15241-流控效果-warm-up\">#</a> 1.5.2.4.1、流控效果 - warm up🌴</h5>\n<p>warm up 也叫预热模式，是应对服务冷启动的一种方案。请求阈值初始值是 threshold 除以 coldFactor，持续指定时长后，逐渐提高到 threshold 值。而 clodFactor 的默认值是 3.</p>\n<p>例如，我设置 QPS 的 threshold 为 10，预热时间为 5 秒，那么初始阈值就是 10 / 3，也就是 3，然后在 5 秒后逐渐增长到 10</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170818338.png\" alt=\"image-20231017081845114\" /></p>\n<h6 id=\"152411-案例流控效果-warm-up\"><a class=\"anchor\" href=\"#152411-案例流控效果-warm-up\">#</a> 1.5.2.4.1.1、案例，流控效果 - warm up🎋</h6>\n<p>需求：给 /order/{orderId} 这个资源设置限流，最大 QPS 为 10，利用 warm up 效果，预热时长为 5 秒</p>\n<p>请求一下通过 id 查询的 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDg4L29yZGVyLzEwMQ==\">http://localhost:8088/order/101</span></p>\n<p>然后回到 Sentinel 刷新页面，就可以看到 orderId 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170823021.png\" alt=\"image-20231017082330841\" /></p>\n<p>给 orderId 添加一个流控规则</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170827278.png\" alt=\"image-20231017082705193\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170827270.png\" alt=\"image-20231017082714223\" /></p>\n<p>使用 jmeter 进行测试：</p>\n<p>可以看到通过的 QPS 越来越多</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170829082.png\" alt=\"image-20231017082949095\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170830693.png\" alt=\"image-20231017083005138\" /></p>\n<h5 id=\"15242-流控效果-排队等待\"><a class=\"anchor\" href=\"#15242-流控效果-排队等待\">#</a> 1.5.2.4.2、流控效果 - 排队等待🌴</h5>\n<p>当请求超过 QPS 阈值时，快速失败和 warm up 会拒绝新的请求并抛出异常。而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成。如果请求预期的等待时间超出最大时长，则会被拒绝。</p>\n<p>例如：QPS=5，意味着每 200ms 处理一个队列中的请求；timeout=2000，意味着预期等待超过 2000ms 的请求会被拒绝并抛出异常</p>\n<p>比如下面的时间线，有无数个请求要进入队列执行，那第一个进入队列的请求它的等待时间一定是 0ms。但是同一时刻又来了一个请求那么第二个请求它一定要等待至少 200ms，所以它的预期等待时间就是 2 秒，后面的请求以此类推。直到等到时间最多为 2000ms 时，再来一个请求它的等待时间就是超出这 2000ms 的时间了，而超出的请求就会被拒绝</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170838123.png\" alt=\"image-20231017083846925\" /></p>\n<p>好处：假设说请求 QPS 是波动型的，比如说第一秒钟一个请求也没来，这时队列是空的。结果第二秒一下来了 10 个请求，放到队列里然后每 200ms 放行一个换算成 QPS 就是 5，所以不管进入的 QPS 是怎样波动的出去的 QPS 一定是稳定的按照 200ms 一个的速度去放。所以就起到了流量整形的作用</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170854889.png\" alt=\"image-20231017085359679\" /></p>\n<h6 id=\"152421-案例流控效果-排队等待\"><a class=\"anchor\" href=\"#152421-案例流控效果-排队等待\">#</a> 1.5.2.4.2.1、案例，流控效果 - 排队等待🎋</h6>\n<p>需求：给 /order/{orderId} 这个资源设置限流，最大 QPS 为 10，利用排队的流控效果，超时时长设置为 5ss</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170859614.png\" alt=\"image-20231017085932633\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170901195.png\" alt=\"image-20231017090152352\" /></p>\n<p>使用 jmeter 进行测试：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170908478.png\" alt=\"image-20231017090853567\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170909192.png\" alt=\"image-20231017090906285\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>流控效果有哪些？</p>\n<ul>\n<li>快速失败：QPS 超过阈值时，拒绝新的请求</li>\n<li>warm up：QPS 超过阈值时，拒绝新的请求；QPS 阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。</li>\n<li>排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝</li>\n</ul>\n</blockquote>\n<h3 id=\"153-热点参数限流\"><a class=\"anchor\" href=\"#153-热点参数限流\">#</a> 1.5.3、热点参数限流🌲</h3>\n<p>之前的限流是统计访问某个资源的所有请求，判断是否超过 QPS 阈值。而热点参数限流是分别统计<mark>参数值相同</mark>的请求，判读是否超过 QPS 阈值。</p>\n<p>比如说：有一个资源是根据 id 查询商品，共有 4 个请求。如果按照原来的统计方式那 QPS 就是 4。而按照热点参数它会根据参数值来判断，前三个请求传递的 id 为 1，而最后一个传递的 id 为 2。所以 QPS 统计就会分开统计了，id 为 1 的统计为 3 个 QPS 就为 3，id 为 2 的统计为 1 个 QPS 就为 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170919488.png\" alt=\"image-20231017091910421\" /></p>\n<h4 id=\"1531-配置热点限流\"><a class=\"anchor\" href=\"#1531-配置热点限流\">#</a> 1.5.3.1、配置热点限流🌴</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170920122.png\" alt=\"image-20231017092015196\" /></p>\n<p>参数索引：代表当前列表中索引为 0 的参数也就是第一个</p>\n<p>单机阈值 + 统计窗口时长 = n 秒钟最多处理 5 个请求</p>\n<p>代表的含义是：对 hot 这个资源的 0 号参数 (第一个参数) 做统计，每 1 秒<strong>相同参数值</strong>的请求数不能超过 5</p>\n<h4 id=\"1532-配置热点限流高级项\"><a class=\"anchor\" href=\"#1532-配置热点限流高级项\">#</a> 1.5.3.2、配置热点限流高级项🌴</h4>\n<p>在热点参数限流的高级选项中，可以对部分参数设置例外配置：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310170924654.png\" alt=\"image-20231017092441509\" /></p>\n<p>结合上一个配置，这里的含义是对 0 号的 long 类型参数限流，每 1 秒相同参数的 QPS 不能超过 5，有两个例外：</p>\n<p>1、如果参数值是 100，则每 1 秒允许的 QPS 为 10</p>\n<p>2、如果参数值是 101，则每 1 秒允许的 QPS 为 15</p>\n<h4 id=\"1533-案例热点参数限流\"><a class=\"anchor\" href=\"#1533-案例热点参数限流\">#</a> 1.5.3.3、案例，热点参数限流🌴</h4>\n<p>给 /order/{orderId} 这个资源添加热点参数限流，规则如下：</p>\n<ul>\n<li>默认的热点参数规则是每 1 秒请求量不超过 2</li>\n<li>给 102 这个参数设置例外：每 1 秒请求量不超过 4</li>\n<li>给 103 这个参数设置例外：每 1 秒请求量不超过 10</li>\n</ul>\n<blockquote>\n<p>&lt;font color='red'&gt; 注意 &lt;/font&gt;：</p>\n<p>热点参数限流对默认的 SpringMVC 资源无效</p>\n</blockquote>\n<p>步骤：</p>\n<p>1、热点参数限流对默认的 SpringMVC 资源无效，我们 order/{orderId} 这个资源恰好就是 Sentinel 默认对 SpringMVC 监控的一个资源，所以即便配置了热点参数也不会生效，只有通过 @SentinelResource 去声明的资源才可以配置热点参数限流</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hot\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;orderId&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Order</span> <span class=\"token function\">queryOrderByUserId</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> orderId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 根据 id 查询订单并返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> orderService<span class=\"token punctuation\">.</span><span class=\"token function\">queryOrderById</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时资源就同时具备了两个名称了，一个是 order/{orderId} 这是默认的 SpringMVC 资源名称。</p>\n<p>另外一个就是我们自己起的 hot</p>\n<p>重启 orderService 服务后访问页面 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDg4L29yZGVyLzEwMQ==\">http://localhost:8088/order/101</span></p>\n<p>这样就可以看到蔟点链路了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171009407.png\" alt=\"image-20231017100944355\" /></p>\n<p>2、配置热点限流，不要点击树形列表中的热点这个表单里面没有高级配置</p>\n<p>我们点击左边的选项栏中的热点规则，进行配置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171011792.png\" alt=\"image-20231017101141197\" /></p>\n<p>点击新增热点限流规则就会弹出一个表单进行配置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171015751.png\" alt=\"image-20231017101511501\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171017813.gif\" alt=\"test\" /></p>\n<p>使用 jmeter 进行测试：</p>\n<p>order/101 的请求结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171021326.png\" alt=\"image-20231017102157624\" /></p>\n<p>order/102 请求的结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171022007.png\" alt=\"image-20231017102216489\" /></p>\n<p>order/103 请求结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171022759.png\" alt=\"image-20231017102239351\" /></p>\n<p>Sentinel 的控制台情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171022389.png\" alt=\"image-20231017102256408\" /></p>\n<h2 id=\"16-隔离和降级\"><a class=\"anchor\" href=\"#16-隔离和降级\">#</a> 1.6、隔离和降级🌳</h2>\n<ul>\n<li>FeignClient 整合 Sentinel</li>\n<li>线程隔离 (舱壁模式)</li>\n<li>熔断降级</li>\n</ul>\n<p><strong>回顾，隔离和降级的原理</strong></p>\n<p>虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。而要将这些故障控制在一定范围，避免雪崩，就要靠线程隔离 (舱壁模式) 和熔断降级手段了。</p>\n<p>给每个业务划分线程池，当有请求访问业务 1 时最多使用十个线程，虽然服务 C 故障了请求过程中会阻塞但是最多只占用 10 个线程资源</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171031862.png\" alt=\"image-20231017103151291\" /></p>\n<p>熔断降级会统计故障服务的比例，比如说服务 A 访问服务 D 成功的只有一个，故障的有两个这时的比例就是 60%。此时 断路器就会熔断业务，再有要请求服务 D 的业务就会快速失败</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171033093.png\" alt=\"image-20231017103347716\" /></p>\n<p>不管是线程隔离还是熔断降级，都是对 &lt;font color='red'&gt; 客户端 (调用方) &lt;/font&gt;. 的保护</p>\n<h3 id=\"161-feign整合sentinel\"><a class=\"anchor\" href=\"#161-feign整合sentinel\">#</a> 1.6.1、Feign 整合 Sentinel🌲</h3>\n<p>SpringCloud 中，微服务调用都是通过 Feign 来实现的，因此做客户端保护必须整合 Feign 和 Sentinel</p>\n<p>1、修改 OrderService 的 applicaiton.yml 文件，开启 Feign 的 Sentinel 功能</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">sentinel</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启 feign 对 sentinel 的支持</span></pre></td></tr></table></figure><p>2、给 FeignClient 编写失败后的降级逻辑</p>\n<p>2.1、方式一：FallbackClass，无法对远程调用的异常做处理</p>\n<p>2.2、方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</p>\n<p>2.2.1、在 feign-api 项目中定义类，实现 FallbackFactory：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserClientFallbackFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FallbackFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserClient</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserClient</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建 UserClient 接口实现类，实现其中的方法，编写失败降级的处理逻辑</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询用户异常\"</span><span class=\"token punctuation\">,</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 根据业务需求返回默认的数据，这里是空用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2.2.2、在 feign-api 项目中的 DefaultFeignConfigration 类中将 UserClientFallbackFactory 注册为一个 Bean：</p>\n<p>声明 Bean 很简单，定义函数返回 new 出来的对象并注册 Bean 就行了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">UserClientFallbackFactory</span> <span class=\"token function\">userClientFallbackFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserClientFallbackFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2.2.3、在 feign-api 项目中的 UserClient 接口中使用 UserClientFallbackFactory：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"userservice\"</span><span class=\"token punctuation\">,</span> fallbackFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">UserClientFallbackFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3、重启 orderService 服务</p>\n<p>重复完成后查看 Sentinel 的蔟点链路情况，下面的情况说明完成了 Feign 与 Sentinel 的整合了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171304966.png\" alt=\"image-20231017130442973\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>Sentinel 支持的雪崩解决方案：</p>\n<ul>\n<li>线程隔离 (仓壁模式)</li>\n<li>降级熔断</li>\n</ul>\n<p>Feign 整合 Sentinel 的步骤：</p>\n<ol>\n<li>在 application.yml 中配置：feign.sentinel.enable = true</li>\n<li>给 FeignClient 编写 FallbackFactory 并注册为 Bean</li>\n<li>将 FallbackFactory 配置到 FeignClient</li>\n</ol>\n</blockquote>\n<h3 id=\"162-线程隔离\"><a class=\"anchor\" href=\"#162-线程隔离\">#</a> 1.6.2、线程隔离🌲</h3>\n<p>线程隔离有两种方式实现：</p>\n<ul>\n<li>线程池隔离</li>\n<li>信号量隔离 (Sentinel 默认采用)</li>\n</ul>\n<p>通过案例来查看两个线程隔离的差别：</p>\n<p>假设说有四个服务 i，a，b，c 。服务 i 里面的业务依赖于服务 a，b，c。比方说来了一个请求，它的业务依赖于服务 a，b。如果说我们现在用的是线程池隔离那么它就会给这个业务所依赖的每个服务都创建线程池，请求来了以后不会使用请求本身的线程，而是去创建的线程池中分别取一个线程而用这个线程去调用 Feign 的客户端，发起远程调用。这样呢就把两个服务隔离了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171315936.png\" alt=\"image-20231017131457045\" /></p>\n<p>而如果采用的是信号量的模式就简单多了。比如说来了一个请求，要访问服务 c。它会使用请求本身的线程直接去调用 Feign 的客户端去调用服务 c。那它怎么做隔离呢？它会在请求进入时做一个判断，维持了一个计数器。判断现在计数器还有没有。比如说计数器总数为 10 每进入一个请求计数器就会减 1，然后就可以去访问服务 c 了。当来了十个请求计数器被取完后再来新请求就会被拒绝。这样就等于利用计数器限制了最终线程的数量了。如果处理完请求计数器还是要还回去的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171319389.png\" alt=\"image-20231017131940276\" /></p>\n<h4 id=\"1621-两者的优缺点\"><a class=\"anchor\" href=\"#1621-两者的优缺点\">#</a> 1.6.2.1、两者的优缺点：</h4>\n<h5 id=\"线程池隔离\"><a class=\"anchor\" href=\"#线程池隔离\">#</a> 线程池隔离</h5>\n<p><strong>优点</strong>：</p>\n<p>1、支持主动超时</p>\n<p>如果发现请求有点久了可以手动的终止线程</p>\n<p>2、支持异步调用</p>\n<p>每一次请求都是一个独立的线程而不是 tomcat 请求的线程</p>\n<p><strong>缺点</strong>：</p>\n<p>1、线程的额外开销比较大</p>\n<p>场景：</p>\n<p>1、低扇出</p>\n<p>扇出：比方说请求到我这个服务，而我这个服务依赖于其它的 n 个服务。就是从我这来了，来了一个而后我扇出了好几个。如果依赖的服务越多，那扇出也就越高，而扇出越高调用的越多我需要开启的线程也越多，消耗也就越大。所以它不适用于高扇出的场景！</p>\n<h5 id=\"信号量隔离\"><a class=\"anchor\" href=\"#信号量隔离\">#</a> 信号量隔离</h5>\n<p><strong>优点</strong>：</p>\n<p>1、轻量级，无额外开销</p>\n<p><strong>缺点</strong>：</p>\n<p>1、不支持主动超时</p>\n<p>2、不支持异步调用</p>\n<p>场景：</p>\n<p>1、高频调用</p>\n<p>2、高扇出</p>\n<h4 id=\"1622-线程隔离-舱壁模式\"><a class=\"anchor\" href=\"#1622-线程隔离-舱壁模式\">#</a> 1.6.2.2、线程隔离 (舱壁模式)🌴</h4>\n<p>在添加限流规则时，可以选择两种阈值类型：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171332558.png\" alt=\"image-20231017133257502\" /></p>\n<ul>\n<li>QPS：就是每秒的请求数，在快速入门中已经演示过</li>\n<li>线程数：是该资源能使用的 tomcat 线程数的最大值。也就是通过限制线程数量，实现 &lt;font color='red'&gt; 舱壁模式 &lt;/font&gt;.</li>\n</ul>\n<h5 id=\"16221-案例线程隔离-舱壁模式\"><a class=\"anchor\" href=\"#16221-案例线程隔离-舱壁模式\">#</a> 1.6.2.2.1、案例，线程隔离 (舱壁模式)🎋</h5>\n<p>需求：给 UserClient 的查询用户接口设置流控规则，线程数不能超过 2。然后利用 jmeter 测试。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171336102.png\" alt=\"image-20231017133620881\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171336135.png\" alt=\"image-20231017133657213\" /></p>\n<p>配置完成！使用 jmeter 进行高并发测试：</p>\n<p>其中的线程数为 10，时间为 0。表示一瞬间发 10 个线程请求。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171337544.png\" alt=\"image-20231017133755763\" /></p>\n<p>测试结果：</p>\n<p>但是怎么没有看到被拒绝的请求呢？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171341275.png\" alt=\"image-20231017134110845\" /></p>\n<p>其实我们做了降级策略了</p>\n<p>在 FeignClient 注解中加了 fallbackFactory</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"userservice\"</span><span class=\"token punctuation\">,</span> fallbackFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">UserClientFallbackFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">User</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以当线程隔离被降级以后它不是报错，而是会走这个降级逻辑返回一个空对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserClientFallbackFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FallbackFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserClient</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserClient</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建 UserClient 接口实现类，实现其中的方法，编写失败降级的处理逻辑</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 记录异常信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查询用户异常\"</span><span class=\"token punctuation\">,</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 根据业务需求返回默认的数据，这里是空用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是在 idea 的控制台会打印异常的信息</p>\n<pre><code>10-17 13:40:38:046 ERROR 1804 --- [nio-8088-exec-3] c.i.f.c.f.UserClientFallbackFactory : 查询用户异常\n</code></pre>\n<p>我们在回到 jmeter 点击请求查看详细情况，有的获取的数据是空的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171347804.png\" alt=\"image-20231017134731646\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>线程隔离的两种手段是？</p>\n<ul>\n<li>信号隔离</li>\n<li>线程池隔离</li>\n</ul>\n<p>信号量隔离的特点是？</p>\n<ul>\n<li>基于计数器模式，简单，开销小</li>\n</ul>\n<p>线程池隔离的特点是？</p>\n<ul>\n<li>基于线程池模式，有额外开销，但隔离控制更强</li>\n</ul>\n</blockquote>\n<h3 id=\"163-熔断降级\"><a class=\"anchor\" href=\"#163-熔断降级\">#</a> 1.6.3、熔断降级🌲</h3>\n<p>熔断降级是解决雪崩问题的重要手段。其思路是由 &lt;font color='red'&gt; 断路器 &lt;/font &gt; 统计服务调用的异常比例，慢请求比例，如果超出阈值则会 &lt; font color='red'&gt; 熔断 &lt;/font &gt; 该服务。即拦截访问该服务的一切请求；而当请求恢复时，断路器会放行访问该服务的请求。</p>\n<p>断路器内部由一个状态机来实现的，这个状态机包含三种状态，分别是：closed，open，Half-Open</p>\n<p>closed 状态下，断路器不会拦截任何请求。不管请求是正常的还是异常的都可以访问，它会去统计调用异常的比例，如果统计过程中发现异常比例过高达到了阈值就会从 closed 状态切换到 open 状态、这时就会拦截进入该服务的一些请求了也就相当于是熔断了。熔断有一个持续的时间，当熔断时间结束就会从 open 状态切换到 half-open 状态 (半开状态)。half-open 状态会放行一次请求，然后根据这次请求的结果来判断下一步。</p>\n<p>比如说放行一次请求发现这个请求依赖是失败的那么就会再次进入 open 状态</p>\n<p>如果放行一次请求执行完了发现是成功的那么就会从 half-open 切换到 closed 状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171422210.png\" alt=\"image-20231017142215093\" /></p>\n<p>我们知道断路器要想从 closed 状态进入到 open 状态需要判断服务有没有触发熔断的条件。而熔断判断的条件就是依据熔断策略来完成的，而在 Sentinel 里熔断的策略有三种：慢调用，异常比例，异常数</p>\n<h4 id=\"1631-熔断策略-慢调用\"><a class=\"anchor\" href=\"#1631-熔断策略-慢调用\">#</a> 1.6.3.1、熔断策略 - 慢调用🌴</h4>\n<p><mark>慢调用</mark>：业务的响应时长 (RT) 大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。例如：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171428040.png\" alt=\"image-20231017142805647\" /></p>\n<p><strong>解读</strong>：RT 超过 500ms 的调用是慢调用，统计最近 10000ms 内的请求，如果请求量超过 10 次，并且慢调用比例不低于 0.5，则触发熔断，熔断时长为 5 秒。然后进入 half-open 状态，放行一次请求做测试。</p>\n<h5 id=\"16311-案例熔断策略-慢调用\"><a class=\"anchor\" href=\"#16311-案例熔断策略-慢调用\">#</a> 1.6.3.1.1、案例，熔断策略 - 慢调用🎋</h5>\n<p>需求：给 UserClient 的查询用户接口设置降级规则，慢调用的 RT 阈值为 50ms，统计时间为 1 秒， 最小请求数量为 5，失败阈值比例为 0.4，熔断时长为 5</p>\n<p>问题：本地调用时间不可能那么长所以为了能够触发慢调用需要修改一下业务代码让其超过响应时间</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestHeader</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Truth\"</span><span class=\"token punctuation\">,</span> required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> truth<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 休眠，触发熔断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"truth: \"</span> <span class=\"token operator\">+</span> truth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重启 userService 服务</p>\n<p>访问 order/101 时就会去请求 userId 为 1 的用户</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171439770.png\" alt=\"image-20231017143949635\" /></p>\n<p>order/102</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171441135.png\" alt=\"image-20231017144136736\" /></p>\n<p>order/101</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171441279.png\" alt=\"image-20231017144150302\" /></p>\n<p>可以看到 102 请求时长基本不超过 10 毫秒，而 101 请求时长基本不下 70 毫秒。这样就能满足我们触发阈值的情况了</p>\n<p>然后就可以去配置熔断降级策略了，去 Sentinel 控制台中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171445150.png\" alt=\"image-20231017144506913\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171445998.png\" alt=\"image-20231017144515744\" /></p>\n<p>然后我们就可以去进行测试了：</p>\n<p>这次的测试可以不用 jmeter 了，因为需要一秒内 5 次请求，有 2 次触发就行了很容易可以去刷新 order/{orderId} 的请求页面</p>\n<p>现在访问 order/102，是正常可以访问的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171448397.png\" alt=\"image-20231017144804306\" /></p>\n<p>连续请求 5 次 order/101，也就是刷新 5 次页面</p>\n<p>再去访问 order/102 就会发现 user 中没有数据了，当 order 去查 user 的那一刻直接被熔断了，压根没有去查直接走降级逻辑返回 null 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171449564.png\" alt=\"image-20231017144859133\" /></p>\n<p>等待 5 秒后再去刷新一个 order/102 页面，熔断就取消了可以请求到 user 的数据了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171451453.png\" alt=\"image-20231017145103496\" /></p>\n<h4 id=\"1632-熔断策略-异常比例异常数\"><a class=\"anchor\" href=\"#1632-熔断策略-异常比例异常数\">#</a> 1.6.3.2、熔断策略 - 异常比例，异常数🌴</h4>\n<ul>\n<li><mark>异常比例或异常数</mark>：统计指定时间内的 调用，如果调用次数超过指定的请求数，并且出现异常的比例达到设定的比例阈值 (或超过指定异常数) ，则触发熔断。例如：</li>\n</ul>\n<p>按照异常的比例熔断</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171454750.png\" alt=\"image-20231017145414614\" /></p>\n<p>达到异常数量熔断</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171456985.png\" alt=\"image-20231017145619743\" /></p>\n<p><strong>解读</strong>：统计最近 1000ms 内的请求，如果请求量超过 10 次，并且异常比例不低于 0.5，则触发熔断，熔断时长为 5 秒。然后进入 half-open 状态，放行一次请求做测试。</p>\n<h5 id=\"16321-案例熔断策略-异常比例\"><a class=\"anchor\" href=\"#16321-案例熔断策略-异常比例\">#</a> 1.6.3.2.1、案例，熔断策略 - 异常比例🎋</h5>\n<p><strong>需求</strong>：给 UserClient 的查询用户接口设置降级规则，统计时间为 1 秒，最小请求数量为 5，失败阈值比例为 0.4，熔断时长为 5</p>\n<p>&lt;font color='red'&gt; 提示 &lt;/font&gt;：为了触发异常统计，我们需要修改 UserService 中的业务，抛出异常如下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestHeader</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"Truth\"</span><span class=\"token punctuation\">,</span> required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> truth<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"故意抛出异常，触发异常比例熔断\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"truth: \"</span> <span class=\"token operator\">+</span> truth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">queryById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>给 UserClient 查询用户接口设置降级规则</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171511550.png\" alt=\"image-20231017151144666\" /></p>\n<p>访问 order/102</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171512960.png\" alt=\"image-20231017151235103\" /></p>\n<p>然后连续访问 n 次 order/101</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171516133.png\" alt=\"image-20231017151605944\" /></p>\n<p>在访问 order/102 就发现被熔断了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171515798.png\" alt=\"image-20231017151556049\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>Sentinel 熔断降级的策略有哪些？</p>\n<p>1、慢调用比例：超过指定时长的调用为慢调用，统计单位时长内慢调用的比例，超过阈值则熔断</p>\n<p>2、异常比例：统计单位时长内异常调用的比例，超过阈值则熔断</p>\n<p>3、异常数：统计单位时长内异常调用的次数，超过阈值则熔断</p>\n</blockquote>\n<h2 id=\"17-授权规则\"><a class=\"anchor\" href=\"#17-授权规则\">#</a> 1.7、授权规则🌳</h2>\n<ul>\n<li>授权规则</li>\n<li>自定义异常结果</li>\n</ul>\n<h3 id=\"171-授权规则\"><a class=\"anchor\" href=\"#171-授权规则\">#</a> 1.7.1、授权规则🌲</h3>\n<p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p>\n<blockquote>\n<p>我们学习网关的时候讲过，gateway 它不就是把门的吗。所有请求都要经过网关去做身份的认证，怎么到这儿又要整一个呢？</p>\n<p>万一公司出了一个内鬼，它把微服务地址泄露给了外边哪些不怀好意的人，那这些哥们就可以绕过网关直接访问微服务了。那网关里做的再严密也都没用了，所以 Sentinel 授权规则可以解决这个问题。授权规则会去验证你请求从哪来的。如果说你是从网关过来的那就放行，如果说你从别的地方来的就拦截</p>\n</blockquote>\n<ul>\n<li>白名单：来源 (origin) 在白名单内的调用者允许访问</li>\n<li>黑名单：来源 (origin) 在黑名单内的调用者不允许访问</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171530129.png\" alt=\"image-20231017153026632\" /></p>\n<p>例如，我们限定只允许从网关来的请求访问 order-service，那么流控应用中就填写网关的名称</p>\n<p>那么这时</p>\n<p orderId=\"\">资源名填的就是：order-service 里面的受保护资源，比方说 order/</p>\n<p>流控应用填的就是：允许的调用者的名字 origin，请求来源名称，那么请求来源名称是怎么得到的呢？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171531533.png\" alt=\"image-20231017153153844\" /></p>\n<p>Sentinel 是通过 RequestOriginParser 这个接口的 parseOrigin 来获取请求的来源的。</p>\n<p>但是这个方法的返回结果只能是 default，也就是说无论是从网关过来还是浏览器过来它的来源名称都叫 default</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RequestOriginParser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   * 从请求 request 对象中获取 origin，获取方式自定义</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">String</span> <span class=\"token function\">parseOrigin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以我们必须自己想办法实现这个接口编写它的业务逻辑，让从网关过来的请求和从浏览器过来的请求返回不同的结果，这样来源名称不同就可以编写授权规则了</p>\n<p>例如，我们尝试从 reqeust 中获取一个名为 origin 的请求头，作为 origin 的值：</p>\n<p>这里 gateway 访问消费者也就是 orderservice 服务所以下面业务代码是写到 order 服务中的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeaderOriginParser</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RequestOriginParser</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">parseOrigin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 1. 获取请求头</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> header <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"origin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 2. 非空判断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            header <span class=\"token operator\">=</span> <span class=\"token string\">\"blank\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> header<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们还需要在 gateway 服务中，利用网关的过滤器添加名为 gateway 的 origin 头</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">default-filters</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">-</span> AddRequestHeader=origin<span class=\"token punctuation\">,</span>gateway <span class=\"token comment\"># 添加名为 origin 的请求头，值为 gateway</span></pre></td></tr></table></figure><p>重启 orderservice 服务和 gateway 服务</p>\n<p>随便访问一个 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDg4L29yZGVyLzEwMQ==\">http://localhost:8088/order/101</span></p>\n<p>然后查看 Sentinel 控制台中的蔟点链路</p>\n<p>然后我们就可以给 /order/{orderId} 配置授权规则：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171605527.png\" alt=\"image-20231017160506456\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171605725.png\" alt=\"image-20231017160532751\" /></p>\n<p>此时我们再去访问 order/101 服务</p>\n<p>注意：这里 order/101 是绕过了网关的</p>\n<p>访问是不成功的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171605535.png\" alt=\"image-20231017160543084\" /></p>\n<p>那我们使用网关进行访问的</p>\n<p>可以正常访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171606887.png\" alt=\"image-20231017160611726\" /></p>\n<p>但是由于上面直接跳过网关访问 order/101 的时候就会报错，页面的报错提示如下：</p>\n<p>说是限流异常这就不合理了，明明是授权异常怎么就限流异常了呢</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171609433.png\" alt=\"image-20231017160543084\" /></p>\n<p>所以我们可以对其进行自定义异常：</p>\n<h3 id=\"172-自定义异常结果\"><a class=\"anchor\" href=\"#172-自定义异常结果\">#</a> 1.7.2、自定义异常结果🌲</h3>\n<p>默认情况下，发生限流，降级，授权拦截时，都会抛出异常到调用方。如果要自定义异常时的返回结果，需要实现 BlockExceptionHanlder 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BlockExcpetionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   * 处理请求被限流，降级，授权拦截时抛出的异常：BlockException</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlockExcpetion</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而 BlockException 包含很多个子类，分别对应不同的场景：</p>\n<table>\n<thead>\n<tr>\n<th>异常</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FlowException</td>\n<td>限流异常</td>\n</tr>\n<tr>\n<td>ParamFlowException</td>\n<td>热点参数限流的异常</td>\n</tr>\n<tr>\n<td>DegradeException</td>\n<td>降级异常</td>\n</tr>\n<tr>\n<td>AuthorityException</td>\n<td>授权规则异常</td>\n</tr>\n<tr>\n<td>SystemBlockException</td>\n<td>系统规则异常</td>\n</tr>\n</tbody>\n</table>\n<p>我们在 order-service 中定义类，实现 BlockExceptionHandler 接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SentinelBlockHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> httpServletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"未知异常\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> status <span class=\"token operator\">=</span> <span class=\"token number\">429</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FlowException</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请求被限流了 !\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DegradeException</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请求被降级了 !\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ParamFlowException</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"热点参数限流 !\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AuthorityException</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请求没有权限 !\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            status <span class=\"token operator\">=</span> <span class=\"token number\">401</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;\\\"message\\\": \\\"\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\",\\\"status\\\": \"</span> <span class=\"token operator\">+</span> status <span class=\"token operator\">+</span> <span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重启 orderservice 服务，然后访问一下 order/101。再去 Sentinel 控制台查看蔟点链路并添加授权规则：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171629649.png\" alt=\"image-20231017162948414\" /></p>\n<p>然后再对 order/101 进行直接访问</p>\n<p>可以看到自定义异常成功了！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171630717.png\" alt=\"image-20231017163007309\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>获取请求来源的接口是什么？</p>\n<ul>\n<li>RequestOriginParser</li>\n</ul>\n<p>处理 BlockException 的接口是什么</p>\n<ul>\n<li>BlockExcpetionHandler</li>\n</ul>\n</blockquote>\n<h2 id=\"18-规则持久化\"><a class=\"anchor\" href=\"#18-规则持久化\">#</a> 1.8、规则持久化🌳</h2>\n<ul>\n<li>规则管理模式</li>\n<li>实现 push 模式</li>\n</ul>\n<p>Sentinel 的控制台规则管理有三种模式：</p>\n<ul>\n<li>原始模式：Sentinel 的默认模式，将规则保存在内存，重启服务会丢失。</li>\n<li>pull 模式</li>\n<li>push 模式</li>\n</ul>\n<h3 id=\"181-规则管理模式-pull模式\"><a class=\"anchor\" href=\"#181-规则管理模式-pull模式\">#</a> 1.8.1、规则管理模式 - pull 模式🌲</h3>\n<p>pull 模式：控制台将配置的规则推送到 Sentinel 客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171635037.png\" alt=\"image-20231017163548813\" /></p>\n<p>缺点：存在时效性问题，从而导致数据的不一致问题</p>\n<h3 id=\"182-规则管理模式-push模式\"><a class=\"anchor\" href=\"#182-规则管理模式-push模式\">#</a> 1.8.2、规则管理模式 - push 模式🌲</h3>\n<p>push 模式：控制台将配置规则推送到远程配置中心，例如 Nacos。Sentinel 客户端监听 Nacos，获取配置变更的推送消息，完成本地配置更新</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171639844.png\" alt=\"image-20231017163912849\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>Sentinel 的三种配置管理模式是什么？</p>\n<ul>\n<li>\n<p>原始模式：保存在内存</p>\n<p>不支持持久化</p>\n</li>\n<li>\n<p>pull 模式：保存在本地文件或数据库，定时去读取</p>\n<p>定时轮询存在时效性问题，导致数据不一致</p>\n</li>\n<li>\n<p>push 模式：保存在 Nacos，监听变更实时更新</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"183-实现push模式\"><a class=\"anchor\" href=\"#183-实现push模式\">#</a> 1.8.3、实现 push 模式🌲</h3>\n<p>push 模式实现最为复杂，依赖于 Nacos，并且需要修改 Sentinel 控制台源码。</p>\n<p>详细步骤可以参考文章<a href=\"../sentinel%E6%8C%81%E4%B9%85%E5%8C%96/sentinel%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96.md\"> sentinel 规则持久化</a>.</p>\n<h1 id=\"二-分布式事务\"><a class=\"anchor\" href=\"#二-分布式事务\">#</a> 二、分布式事务🎄</h1>\n<ul>\n<li>seata</li>\n</ul>\n<p><strong>事务的 ACID 原则</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171718973.png\" alt=\"image-20231017171810630\" /></p>\n<h2 id=\"21-分布式服务案例\"><a class=\"anchor\" href=\"#21-分布式服务案例\">#</a> 2.1、分布式服务案例🌳</h2>\n<p>微服务下单业务，在下单时会调用订单服务，创建订单并写入数据库。然后订单服务调用账户服务和库存服务：</p>\n<ul>\n<li>账户服务负责扣减用户余额</li>\n<li>库存服务负责扣减商品库存</li>\n</ul>\n<p>比方说以下微服务：里面包含三个服务 订单服务，账户服务，库存服务。现在有一个用户下单的业务，用户下单时我希望订单服务去创建订单并且写入数据库，而后它再去调用账户服务和库存服务。账户服务去扣减用户的余额，而库存服务则去扣减商品库存。里面就包含了三个不同的微服务调用，而每个微服务都有自己独立的数据库，也就是独立的事务。最终希望的肯定是下单业务一旦执行每一个服务都要成功，如果失败都失败。但是能不能达到这样的结果呢下面进行验证</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171720793.png\" alt=\"image-20231017172030706\" /></p>\n<h2 id=\"22-演示分布式事务问题\"><a class=\"anchor\" href=\"#22-演示分布式事务问题\">#</a> 2.2、演示分布式事务问题 🌳</h2>\n<p>在分布式系统下，一个业务跨越多个服务或数据源，每个服务都是一个分支事务，要保证所有分支事务最终状态一致这样的事务就是 &lt;font color='red'&gt; 分布式事务 &lt;/font&gt;.</p>\n<p>1、导入微服务项目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZG91a2FpeGluL3R5cG9yYS5naXQ=\">https://gitee.com/doukaixin/typora.git</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171737590.png\" alt=\"image-20231017173700559\" /></p>\n<p>2、创建数据库，名为 seata_demo，然后导入 SQL 文件，改 SQL 文件在 seata-demo 项目中的 SQL 文件夹中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171737039.png\" alt=\"image-20231017173733114\" /></p>\n<p>3、启动 nacos，所有微服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171955624.png\" alt=\"image-20231017195536248\" /></p>\n<p>4、测试下单功能，发送 Post 请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171956965.png\" alt=\"image-20231017195605740\" /></p>\n<p>发送请求后查看数据库</p>\n<p>账户表</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171956775.png\" alt=\"image-20231017195643886\" /></p>\n<p>库存表</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171957799.png\" alt=\"image-20231017195701407\" /></p>\n<p>可以发现，账户余额扣了 200 变成了 800，而库存扣了 2 变成了 8</p>\n<p>那么我们让扣除库存的时候报错看看会发生什么情况。</p>\n<p>现在库存不够 10 个了我请求扣 10 个就会发生报错。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171958176.png\" alt=\"image-20231017195804119\" /></p>\n<p>可以看到响应结果 500 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171958776.png\" alt=\"image-20231017195845362\" /></p>\n<p>此时我们再查看数据库的情况</p>\n<p>账户表</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171959625.png\" alt=\"image-20231017195918162\" /></p>\n<p>库存表</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310171959448.png\" alt=\"image-20231017195930412\" /></p>\n<p>账户表的余额被扣了 200，但是库存表的数量却没有发生变化，这样显然是不合理的。</p>\n<p>下面我们来分析下这件事儿。</p>\n<p>在上面的业务中，订单服务去创建了订单然后去调用了账户服务和库存服务完成余额扣减和库存扣减，其中订单服务和账户服务都创建成功了。而库存服务在执行的时候却因为库存不足而失败了。那按照理论上讲这里报错前面都应该跟着回滚</p>\n<p>原因：</p>\n<p>1、每个服务都是独立的库存服务抛出异常其它服务也不知道</p>\n<p>2、每个服务都是独立的所以它们的事务也是独立的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172023838.png\" alt=\"image-20231017202319388\" /></p>\n<p>如果要解决分布式事务的问题，首先要考虑四点：</p>\n<p>首先第一点：分布式事务产生的原因，这个上述分析过了。</p>\n<p>第二点：理解理论基础</p>\n<p>第三点：弄清 seata 原理</p>\n<p>第四点：利用 seata 手动实践，解决分布式事务问题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172032081.png\" alt=\"image-20231017203228913\" /></p>\n<p>学习内容：</p>\n<ul>\n<li>理论基础</li>\n<li>初始 Seata</li>\n<li>手动实践</li>\n<li>高可用</li>\n</ul>\n<h2 id=\"23-理论基础\"><a class=\"anchor\" href=\"#23-理论基础\">#</a> 2.3、理论基础🌳</h2>\n<ul>\n<li>CAP 定理</li>\n<li>BASE 理论</li>\n</ul>\n<h3 id=\"231-cap定理\"><a class=\"anchor\" href=\"#231-cap定理\">#</a> 2.3.1、CAP 定理🌲</h3>\n<p>1998 年，加州大学的计算机科学 Eric Brewer 提出，分布式系统有三个指标：</p>\n<p>1、Consistency (一致性)</p>\n<p>2、Availability (可用性)</p>\n<p>3、Partition tolerance (分区容错性)</p>\n<p>Eric Brewer 说，分布式系统无法同时满足这三个指标。</p>\n<p>这个结论就叫做 CAP 定理。</p>\n<p>三个圆不会同时重叠，最多两两重叠，也就是说同时满足两个</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172037268.png\" alt=\"image-20231017203753986\" /></p>\n<h4 id=\"2311-cap定理-consistency\"><a class=\"anchor\" href=\"#2311-cap定理-consistency\">#</a> 2.3.1.1、CAP 定理 - Consistency🌴</h4>\n<p>Consistency (一致性) ：用户访问分布式系统中的任意节点，得到的数据必须一致</p>\n<p>比方说有两个节点，第一个节点上有个数据叫 data 值为 0，第二个节点也是如此。现在用户不管是访问哪个节点，结果都是一样的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172043065.png\" alt=\"image-20231017204312228\" /></p>\n<p>但是，如果我对节点 node1 的数据进行了修改，这时两个节点的数据就不一样了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172044702.png\" alt=\"image-20231017204437374\" /></p>\n<p>为了满足一致性就一定要把 node1 的数据同步到 node2 中，一旦数据同步完成，数据就再此一致了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172044179.png\" alt=\"image-20231017204454104\" /></p>\n<p>所以，作为一个分布式系统在做数据备份的时候一定要及时完成数据同步这样才能满足一致性</p>\n<h4 id=\"2312-cap定理-availability\"><a class=\"anchor\" href=\"#2312-cap定理-availability\">#</a> 2.3.1.2、CAP 定理 - Availability🌴</h4>\n<p>Availability (可用性) ：用户访问集群中的任意健康节点，必须能得到响应，而不是超时或拒绝</p>\n<p>比如说 node3 的请求被阻塞或者拒绝了，那所有的请求进来无法访问了，这时 node3 就是不可用了</p>\n<p>所以可用性是指这个节点能不能被正常的访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172048465.png\" alt=\"image-20231017204818409\" /></p>\n<h4 id=\"2313-cap定理-partition-tolerance\"><a class=\"anchor\" href=\"#2313-cap定理-partition-tolerance\">#</a> 2.3.1.3、CAP 定理 - Partition tolerance🌴</h4>\n<p>Partition (分区) ：因为网络故障或其它原因导致分布式系统中的部分节点与其它节点失去连接，形成独立分区。</p>\n<p>Tolerance (容错) ：在集群出现分区时，整个系统也要持续对外提供服务</p>\n<p>比如说 node3 因为网络故障与 node1 与 node2 断开了连接。node1 与 node2 之间正常访问。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172052718.png\" alt=\"image-20231017205201677\" /></p>\n<p>此时整个集群就会被划分成两个区了。node1 和 node2 它俩是一个区，node3 自己是一个区，这时如果有用户向 node2 写入了一个数据，node2 可以把数据同步给 node1 的但是 node3 上不能同步到数据，因此这两个区的数据就不一致了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172055775.png\" alt=\"image-20231017205544452\" /></p>\n<p>那如果我一定要满足数据的一致性呢，那我是不是可以让 node3 等待 node2 网络的恢复和数据的同步，在恢复之前所有来访问我的请求我都阻塞在这里。如果这么做可能会满足数据的一致性，但是 node3 明明是一个健康的节点结果进来的请求你都卡在这里不让人家访问，那 node3 不就是不可用了吗，所以它就不满足 可用性了。</p>\n<p>我要想满足可用性，我就没办法保证一致性。</p>\n<p>我要保证数据一致性，我就没办法让 node3 是可用性的</p>\n<p>当网络出现分区时，可用性和一致性没有办法同时满足。但是网络分区也是不可避免的。</p>\n<p>当 p 一定要实现，那么这时 c 和 a 之间就要做出抉择了。要么 c 要么 a 没有办法同时满足。这就是 CAP 定理了的原因了</p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>简述 CAP 定理内容？</p>\n<ul>\n<li>分布式系统节点通过网络连接，一定会出现分区问题 (P)</li>\n<li>当分区出现时，系统的一致性 (C) 和可用性 (A) 就无法同时满足</li>\n</ul>\n<p>思考：elasticsearch 集群是 CP 还是 AP？</p>\n<p>答：ES 集群当网络出现故障时，有节点与其它节点断开连接的时候。es 集群处于一个警告状态，出现故障的节点过了一段时间后就会从集群中剔除，而这个节点上原来的数据分片。会分散到其它健康的节点上，而故障节点从集群中剔除用户无法访问了因此就牺牲了 可用性了。而数据会负责其它节点数据同步可以正常进行保证了数据的一致性。</p>\n<p>因此 es 集群显然是一个 CP。满足高一致性低可用性</p>\n</blockquote>\n<p>我们知道在分布式系统下网络分区是不可避免的，所以不得不在一致性和可用性之间做出一个选择。</p>\n<p>但是这两个特性都很重要我一个都不想放弃我该怎么办呢？Base 理论正好可以解决这个问题</p>\n<h3 id=\"232-base理论\"><a class=\"anchor\" href=\"#232-base理论\">#</a> 2.3.2、BASE 理论🌲</h3>\n<p>BASE 理论是对 CAP 的一种解决思路，包含三个思想：</p>\n<ul>\n<li>Basically Available (基本可用)：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li>\n<li>Soft State (软状态)：在一定时间内，允许出现中间状态，比如临时的不一致状态。</li>\n<li>Eventually Consistent (最终一致性)：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。</li>\n</ul>\n<p>而分布式事务最大的问题是各个子事务的一致性问题，因此可以借签 CAP 定理的 BASE 理论：</p>\n<ul>\n<li>AP 模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现 &lt;font color='red'&gt; 最终一致 &lt;/font&gt;.</li>\n<li>CP 模式：各个子事务执行后互相等待，同时提交，同时回滚，达成 &lt;font color='red'&gt; 强一致 &lt;/font&gt;。但事务等待过程中，处于弱可用状态。</li>\n</ul>\n<h4 id=\"2321-分布式事务模型\"><a class=\"anchor\" href=\"#2321-分布式事务模型\">#</a> 2.3.2.1、分布式事务模型🌴</h4>\n<p>解决分布式事务，各个子系统之间必须能感知到彼此的事务状态，才能保证状态一致，因此需要一个事务协调者来协调每一个事务的参与者 (子系统事务)。</p>\n<p>用户下单调用订单服务，然后去调用账户服务和库存服务。那这个地方我们就需要一个事务的协调者了，每个微服务都跟事务协调者保持联系，如果你现在要做强一致。订单服务执行的时候不要提交，扣款服务，扣库存服务，但是库存服务执行完后发现失败了。怎么知道的。它们要把自己的执行结果告知给协调者，然后协调者一看有人失败了将来再通知其它服务让它们做回滚，这样大家就能保持一致了</p>\n<p>每一个事务的参与者 (子系统事务)。</p>\n<p>这里的子系统事务，称为 &lt;font color='red'&gt; 分支事务 &lt;/font&gt;.；有关联的各个分支事务 在一起称为 &lt;font color='red'&gt; 全局事务 &lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310172141933.png\" alt=\"image-20231017214146879\" /></p>\n<p>所以事务协调者，就是去协调各个分支事物的状态让它们达成一致</p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>简述 BASE 理论三个思想：</p>\n<ol>\n<li>基本可用</li>\n<li>软状态</li>\n<li>最终一致</li>\n</ol>\n<p>解决分布式事务的思想和模型：</p>\n<ol>\n<li>全局事务：整个分布式事务</li>\n<li>分支事务：分布式事务中包含的每个子系统的事务</li>\n<li>最终一致思想：各分支事务分别执行并提交，如果有不一致的情况，再想办法恢复数据</li>\n<li>强一致思想：各分支事务执行完业务不要提交，等待彼此结果。而后统一提交或回滚</li>\n</ol>\n</blockquote>\n<h2 id=\"24-初始seata\"><a class=\"anchor\" href=\"#24-初始seata\">#</a> 2.4、初始 Seata🌳</h2>\n<ul>\n<li>Seata 的架构</li>\n<li>部署 TC 服务</li>\n<li>微服务集成 Seata</li>\n</ul>\n<p>Seata 是 2019 年 1 月份蚂蚁金服和阿里巴巴共同开源的分布式事务解决方案。致力于提供高性能和简单易用的分布式事务服务，为用户打造一站式的分布式解决方案。</p>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWF0YS5pby96aC1jbi8=\">https://seata.io/zh-cn/</span></p>\n<p><strong>Seata 事务管理中有三个重要的角色</strong>：</p>\n<p>1、TC (Transaction Coordinator) - 事务协调者：维护全局和分布式事务的状态，协调全局事务提交和回滚。</p>\n<p>2、TM (Transaction Manager) - 事务管理器：定义全局事务的范围，开始全局事务，提交或回滚全局事务。</p>\n<p>3、RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与 TC 交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310180745437.png\" alt=\"image-20231018074554248\" /></p>\n<p>Seata 根据要做强一致还是最终一致又延伸出了好几种不同的解决方案：</p>\n<p><strong>Seata 提供了四个不同的分布式解决方案</strong>：</p>\n<p>1、XA 模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入</p>\n<p>2、TCC 模式：最终一致的分阶段事务模式，有业务侵入</p>\n<p>3、AT 模式：最终一致的分阶段事务模式，无业务侵入，也是 Seata 的默认模式</p>\n<p>4、SAGA 模式：长事务模式，有业务侵入</p>\n<h3 id=\"241-部署tc服务\"><a class=\"anchor\" href=\"#241-部署tc服务\">#</a> 2.4.1、部署 TC 服务🌲</h3>\n<p>参考文章：<a href=\"../Seata/seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90.md\">seata 的部署和集成</a>.</p>\n<h3 id=\"242-手动实践\"><a class=\"anchor\" href=\"#242-手动实践\">#</a> 2.4.2、手动实践🌲</h3>\n<ul>\n<li>XA 模式</li>\n<li>AT 模式</li>\n<li>TCC 模式</li>\n<li>SAGA 模式</li>\n</ul>\n<h4 id=\"2421-xa模式原理\"><a class=\"anchor\" href=\"#2421-xa模式原理\">#</a> 2.4.2.1、XA 模式原理🌴</h4>\n<p>XA 规则 是 X/Open 组织定义的分布式事务处理 (DTP，Distributed Transaction Processing) 标准，XA 规范 描述了全局的 TM 与局部的 RM 之间的接口，几乎所有主流的数据库都对 XA 规范 提供了支持。</p>\n<p>这种模式，它把分布式事务定义成了两个阶段。第一阶段为 “准备阶段” 在此阶段中实物协调者会向事务参与者 (RM) 去发起一个准备的请求，在上面讲述中 RM 是资源管理器，但是在 XA 标准中这个 RM 其实都是由数据区实现的。也就是说数据库本身实现了 RM 功能。事务协调者通知这些数据库去执行自己的业务，但是执行完不要提交，然后把执行结果告知事务协调者</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181016731.png\" alt=\"Snipaste_2023-10-18_10-16-42\" /></p>\n<p>然后进行 “第二阶段” 事务协调者通知 RM 可以提交了。事务结束</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181017816.png\" alt=\"image-20231018101741714\" /></p>\n<p>如果 第一阶段 有任意一个服务失败了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181018842.png\" alt=\"image-20231018101839751\" /></p>\n<p>那么第二阶段，事务协调者就会通知所有的 RM 进行回滚</p>\n<p>XA 模式，其实就是基于数据库本身的特性去实现的一种分布式事务</p>\n<h4 id=\"2422-seata的xa模式\"><a class=\"anchor\" href=\"#2422-seata的xa模式\">#</a> 2.4.2.2、seata 的 XA 模式🌴</h4>\n<p>seata 的 XA 模式做了一些调整，但大体相似：</p>\n<p>TM 注册全局事务，TM 作为分布式入口自然去调用微服务，调用微服务里面的 RM 拦截请求，seata 里面也实现了 RM，数据库也有 RM，在这个情况下 seata 的 RM 仅仅是代理你的请求。然后做一下分支事务的注册，接下来的事就是直接调用数据库了执行业务 SQL，但是执行完不提交，去报告一下事务的状态到 TC 就行了。所以 TC 此时就冲当了事务协调的作用了</p>\n<p>至此，第一阶段结束</p>\n<p>第二阶段 TM 发现业务结束了就去通知 TC，然后 TC 去检查事务的状态，都成功就成功。有一个失败就要回滚</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181126968.png\" alt=\"image-20231018112632854\" /></p>\n<p>如果我们只看核心部分就和 XA 没有什么太大的区别了</p>\n<p><strong>RM 一阶段的工作</strong>：</p>\n<p>1、注册分支实物到 TC</p>\n<p>2、执行分支业务 sql 但不提交</p>\n<p>3、报告执行状态到 TC</p>\n<p><strong>TC 二阶段的工作</strong>：</p>\n<ul>\n<li>TC 检测各分支事务执行状态\n<ul>\n<li>如果都成功，通过所有 RM 提交事务</li>\n<li>如果有失败，通过所有 RM 回滚事务</li>\n</ul>\n</li>\n</ul>\n<p><strong>RM 二阶段的工作</strong>：</p>\n<ul>\n<li>接收 TC 指令，提交或回滚事务</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181128704.png\" alt=\"image-20231018112758938\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>XA 模式的优点是什么？</p>\n<ul>\n<li>事务的强一致性，满足 ACID 原则</li>\n<li>常用数据库都支持，实现简单，并且没有代码侵入</li>\n</ul>\n<p>XA 模式的缺点是什么？</p>\n<ul>\n<li>因为一阶段需要锁定数据库资源，等待二阶段结束才释放，性能较差</li>\n<li>依赖关系型数据库实现事务</li>\n</ul>\n</blockquote>\n<h4 id=\"2423-实现xa模式\"><a class=\"anchor\" href=\"#2423-实现xa模式\">#</a> 2.4.2.3、实现 XA 模式🌴</h4>\n<p>Seata 的 starter 已经完成了 XA 模式的自动装配，实现非常简单，步骤如下：</p>\n<p>1、修改 application.yml 文件 (每个参与事务的微服务)，开启 XA 模式</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data-source-proxy-mode</span><span class=\"token punctuation\">:</span> XA <span class=\"token comment\"># 开启数据源代理的 XA 模式</span></pre></td></tr></table></figure><p>2、给发起全局事务的入口方法添加 @GlobalTransactional 注解，本例中是 OrderServiceImpl 中的 create 方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@GlobalTransactional</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 创建订单</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   orderMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 扣用户余额</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      accountClient<span class=\"token punctuation\">.</span><span class=\"token function\">deduct</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 扣库存</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">deduct</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getCommodityCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FeignException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"下单失败，原因:&#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">contentUTF8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">contentUTF8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">return</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3、重启服务并测试</p>\n<p>目前的 account_tbl 表单信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181144973.png\" alt=\"image-20231018114458627\" /></p>\n<p>目前 storage_tbl 表单信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181145948.png\" alt=\"image-20231018114522634\" /></p>\n<p>使用 postman 进行发送请求测试</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181146511.png\" alt=\"image-20231018114629170\" /></p>\n<p>测试后 account_tbl 表单信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181146234.png\" alt=\"image-20231018114658167\" /></p>\n<p>测试后 storage_tbl 表单信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181147047.png\" alt=\"image-20231018114715998\" /></p>\n<p>可以看到没有问题，下面测试 异常 的情况</p>\n<p>postman 测试如下：</p>\n<p>将存库数量改为 10，当前的库存数据是不足 10 个的因此执行就会出问题可以看到状态码 500 已经异常了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181148645.png\" alt=\"image-20231018114814272\" /></p>\n<p>我们看下数据库有没有回滚啊</p>\n<p>测试后 account_tbl 表单信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181149371.png\" alt=\"image-20231018114937327\" /></p>\n<p>测试后 storage_tbl 表单信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181149916.png\" alt=\"image-20231018114955744\" /></p>\n<p>可以看到没有任何变化</p>\n<p>看下 idea 的控制台的打印信息：</p>\n<p>accountApplication 打印出了事务回滚的信息，其它的是报错的信息，因为报错本身就没有执行成功</p>\n<pre><code>10-18 11:48:06:076  INFO 18016 --- [h_RMROLE_1_2_16] i.s.c.r.p.c.RmBranchRollbackProcessor    : rm handle branch rollback process:xid=192.168.45.1:8091:4251845158843265029,branchId=4251845158843265031,branchType=XA,resourceId=jdbc:mysql:///seata_demo,applicationData=null\n10-18 11:48:06:080  INFO 18016 --- [h_RMROLE_1_2_16] io.seata.rm.AbstractRMHandler            : Branch Rollbacking: 192.168.45.1:8091:4251845158843265029 4251845158843265031 jdbc:mysql:///seata_demo\n10-18 11:48:06:083  INFO 18016 --- [h_RMROLE_1_2_16] i.s.rm.datasource.xa.ResourceManagerXA   : 192.168.45.1:8091:4251845158843265029-4251845158843265031 was rollbacked\n10-18 11:48:06:084  INFO 18016 --- [h_RMROLE_1_2_16] io.seata.rm.AbstractRMHandler            : Branch Rollbacked result: PhaseTwo_Rollbacked\n</code></pre>\n<h4 id=\"2424-at模式原理\"><a class=\"anchor\" href=\"#2424-at模式原理\">#</a> 2.4.2.4、AT 模式原理🌴</h4>\n<p>AT 模式同样是分阶段提交的事务模型，不过却弥补了 XA 模型中资源锁定周期过长的缺陷。</p>\n<p>AT 模式执行完业务 sql 后会直接提交事务，而不是等待对方的执行。在执行业务 sql 的时候由 RM 拦截这次的执行并且给数据形成一个快照，快照名为：undo log，如果失败了就可以根据快照进行恢复了。在第一阶段就已经提交了，第二阶段将 log 给删除</p>\n<p>阶段一 RM 的工作：</p>\n<p>1、注册分支事务</p>\n<p>2、&lt;font color='red'&gt; 记录 undo-log (数据快照)&lt;/font&gt;.</p>\n<p>3、执行业务 sql 并 &lt;font color='red'&gt; 提交 &lt;/font&gt;.</p>\n<p>4、报告事务状态</p>\n<p>阶段二提交时 RM 的工作：</p>\n<p>1、删除 undo-log 即可</p>\n<p>阶段二回滚时 RM 的工作：</p>\n<p>1、根据 undo-log 恢复数据到更新前</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181329271.png\" alt=\"image-20231018132921268\" /></p>\n<p>下面通过一个例子来进行比喻：</p>\n<p>例如，一个分支业务的 SQL 是这样的：update tb_account set money = money - 10 where id = 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181333976.png\" alt=\"image-20231018133322819\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>简述 AT 模式与 XA 模式最大的区别是什么？</p>\n<ul>\n<li>XA 模式一阶段不提交事务，锁定资源；AT 模式一阶段直接提交，不锁定资源</li>\n<li>XA 模式依赖数据库机制实现回滚；AT 模式利用数据快照实现数据回滚</li>\n<li>XA 模式强一致；AT 模式最终一致</li>\n</ul>\n</blockquote>\n<h5 id=\"24241-at模式的脏写问题\"><a class=\"anchor\" href=\"#24241-at模式的脏写问题\">#</a> 2.4.2.4.1、AT 模式的脏写问题🎋</h5>\n<p>上述得知，AT 模式相对于 XA 模式来讲，性能得到了一些提升，因为 AT 模式在第一阶段的时候执行事务会直接提交。而不是等待各个分支一起执行完，因此资源锁定周期短 性能就比较好了。但是也正是因为它提前释放了资源没有去做锁，这就导致了在并发访问情况下会存在一些安全问题。</p>\n<p>比如说有个 account 表，业务是修改 money 字段让其减 10，那么有一个线程开启了这个样事务。事务开启第一件事就是获取数据库锁，并生成一个快照。然后执行 sql 从 100 改为 90，然后提交事务，事务一旦提交锁就释放了，数据也就改了。第一阶段完成就轮到第二阶段，但同一时刻因为是并发现在有另外一个线程也开启了事务执行这个业务。事务 2 等待事务 1 释放锁了，然后拿到锁才能去保存快照并执行业务 sql 将 90 改 为 80，然后提交事务并释放锁。</p>\n<p>如果这时事务 1 拿到锁后它要做回滚，因为事务 1 的第二阶段还没做完，这时事务 1 的快照数据为 money=100 这是回滚就出问题了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181351685.png\" alt=\"image-20231018135124412\" /></p>\n<p>为了解决这个问题 AT 模式引入了一个叫 “全局锁” 的东西</p>\n<p><mark>全局锁</mark>：由 TC 记录当前正在操作某行数据的事务，改事务持有全局锁，具备执行权。</p>\n<p>TC 通过一张表来进行记录，分别记录：当前由哪个事务在操作，操作的哪张表，主键 操作这张表的哪一行数据。通过记录查看这个表的这行数据就只能被这个事务进行操作，其它事务不能操作。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181402045.png\" alt=\"image-20231018140242928\" /></p>\n<p>尽管如此，事务 1 在操作 money 字段的时候也可能会有一个没有被 seata 管理的业务来操作 money 字段此时就会产生脏写的问题了。分布式事务我们应该尽量的避免两个操作同一个字段。但是再怎么避免也不是不可能的情况</p>\n<p>AT 模式也对这种方式做了一些处理。</p>\n<p>当事务 1 第二阶段进行回滚时，会拿到 更新前的快照和更新后的快照。然后用更新后的快照数据去对当前的数据库数据做对比，判断是否一致，如果不一致就会记录异常，发送警告，人工介入</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181414617.png\" alt=\"image-20231018141424667\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>AT 模式的优点：</p>\n<ul>\n<li>一阶段完成直接提交事务，释放数据库资源，性能比较好</li>\n<li>利用全局锁实现读写隔离</li>\n<li>没有代码侵入，框架自动完成回滚和提交</li>\n</ul>\n<p>AT 模式的缺点：</p>\n<ul>\n<li>两阶段之间属于软状态，属于最终一致</li>\n<li>框架的快照功能会影响性能，但比 XA 模式好很多</li>\n</ul>\n</blockquote>\n<h4 id=\"2425-实现at模式\"><a class=\"anchor\" href=\"#2425-实现at模式\">#</a> 2.4.2.5、实现 AT 模式🌴</h4>\n<p>AT 模式中的快照生成，回滚等动作都是由框架自动完成，没有任何代码侵入，因此实现非常简单。</p>\n<p>1、导入 SQL 文件：seata-at.sql。打开 sql 文件其中 lock_table 导入到 TC 服务关联的数据库，undo_log 表导入到微服务管理的数据库：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181426661.png\" alt=\"image-20231018142639716\" /></p>\n<p>2、修改 application.yml 文件，将事务模式修改为 AT 模式即可：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data-source-proxy-mode</span><span class=\"token punctuation\">:</span> AT <span class=\"token comment\"># 开启数据源代理的 AT 模式</span></pre></td></tr></table></figure><p>3、重启服务并测试</p>\n<p>目前的数据库数据</p>\n<p>account_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181429533.png\" alt=\"image-20231018142929459\" /></p>\n<p>storage_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181429518.png\" alt=\"image-20231018142946308\" /></p>\n<p>使用 postman 进行测试</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181430146.png\" alt=\"image-20231018143051522\" /></p>\n<p>测试后的 account_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181431746.png\" alt=\"image-20231018143114523\" /></p>\n<p>测试后的 storage_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181431267.png\" alt=\"image-20231018143133064\" /></p>\n<p>使用 postman 进行一次失败的测试：</p>\n<p>库存数据现在不够 10 个我们扣减 10 个此时就会产生异常</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181432899.png\" alt=\"image-20231018143222278\" /></p>\n<p>测试后的 account_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181432696.png\" alt=\"image-20231018143252735\" /></p>\n<p>测试后的 storage_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181433130.png\" alt=\"image-20231018143302062\" /></p>\n<p>可以发现没有发生任何的变化啊。说明事务生效了，整个分布式事务都回滚了</p>\n<p>accountApplication 服务在 idea 控制台中打印的信息如下：</p>\n<p>可以看到最终删除了一个叫 undo_log 的表的数据也就是快照数据</p>\n<pre><code>10-18 14:32:15:309  INFO 19080 --- [h_RMROLE_1_2_16] i.s.c.r.p.c.RmBranchRollbackProcessor    : rm handle branch rollback process:xid=192.168.45.1:8091:4251845158843265037,branchId=4251845158843265039,branchType=AT,resourceId=jdbc:mysql:///seata_demo,applicationData=null\n10-18 14:32:15:310  INFO 19080 --- [h_RMROLE_1_2_16] io.seata.rm.AbstractRMHandler            : Branch Rollbacking: 192.168.45.1:8091:4251845158843265037 4251845158843265039 jdbc:mysql:///seata_demo\n10-18 14:32:15:347  INFO 19080 --- [h_RMROLE_1_2_16] i.s.r.d.undo.AbstractUndoLogManager      : xid 192.168.45.1:8091:4251845158843265037 branch 4251845158843265039, undo_log deleted with GlobalFinished\n10-18 14:32:15:348  INFO 19080 --- [h_RMROLE_1_2_16] io.seata.rm.AbstractRMHandler            : Branch Rollbacked result: PhaseTwo_Rollbacked\n</code></pre>\n<h4 id=\"2426-tcc模式原理\"><a class=\"anchor\" href=\"#2426-tcc模式原理\">#</a> 2.4.2.6、TCC 模式原理🌴</h4>\n<p>TCC 模式与 AT 模式非常相似，每阶段都是独立事务，不同的是 TCC 通过人工编码来实现数据恢复。需要实现三个方法：</p>\n<p>1、Try：资源的检测和预留</p>\n<p>2、Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功</p>\n<p>3、Cancel：预留资源释放，可以理解为 try 的反向操作</p>\n<p>举例，一个扣减用户余额的业务。假设账户 A 原来余额是 100，需要余额扣减 30 元</p>\n<ul>\n<li>\n<p>阶段一 (Try)：检查余额是否充足，如果充足则冻结金额增加 30 元，可用余额扣除 30</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181448987.png\" alt=\"image-20231018144806649\" /></p>\n</li>\n<li>\n<p>阶段二 (Confirm)：假如要提交，则冻结金额扣减 30</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181448879.png\" alt=\"image-20231018144815748\" /></p>\n</li>\n<li>\n<p>阶段二 (Cancel)：如果要回滚，则冻结金额扣减 30，可用余额增加 30</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181448428.png\" alt=\"image-20231018144824406\" /></p>\n</li>\n</ul>\n<p>TCC 的工作模型图：</p>\n<p>由 TM 开启并注册全局事务到 TC 上，然后 TM 通知每一个分支事务去执行，分支事务被 RM 做拦截，RM 先去注册一下分支事务。然后再执行操作，第一阶段进行 Try。Try 是一个独立的资源会直接提交，提交后报告事务的状态。二阶段：TM 通知 TC 事务结束了，然后 TC 做事务状态的判断，看看分支资源够不够。如果够直接 Confirm 提交，如果不够就执行 Cancel 逻辑进行回滚。</p>\n<p>而这三个 Try，Confirm，Cancel 都是需要人工编写的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181456139.png\" alt=\"image-20231018145621001\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>TCC 模式的每个阶段是做什么的？</p>\n<ul>\n<li>Try：资源检查和预留</li>\n<li>Confirm：业务执行和提交</li>\n<li>Cancel：预留资源的释放</li>\n</ul>\n<p>TCC 的优点是什么？</p>\n<ul>\n<li>一阶段完成直接提交事务，释放数据库资源，性能好</li>\n<li>相比 AT 模型，无需生成快照，无需使用全局锁，性能最强</li>\n<li>不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库比如：redis</li>\n</ul>\n<p>TCC 的缺点是什么？</p>\n<ul>\n<li>有代码侵入，需要认为编写 Try，Confirm 和 Cancel 接口，太麻烦</li>\n<li>软状态，事务是最终一致</li>\n<li>需要考虑 Confirm 和 Cancel 的失败情况，做好幂等处理</li>\n</ul>\n</blockquote>\n<h5 id=\"24261-案例改造account-service服务利用tcc实现分布式事务\"><a class=\"anchor\" href=\"#24261-案例改造account-service服务利用tcc实现分布式事务\">#</a> 2.4.2.6.1、案例，改造 account-service 服务，利用 TCC 实现分布式事务🎋</h5>\n<p>需求如下：</p>\n<p>1、修改 acoount-service，编写 Try，Confirm，Cancel 逻辑</p>\n<p>2、Try 业务：添加冻结金额，扣减可用金额</p>\n<p>3、Confirm 业务：删除冻结金额</p>\n<p>4、Cancel 业务：删除冻结金额，恢复可用金额</p>\n<p>5、保证 Confirm，Cancel 接口的 &lt;font color='red'&gt; 幂等性 &lt;/font&gt;.</p>\n<p>6、允许 &lt;font color='red'&gt; 空回滚 &lt;/font&gt;.</p>\n<p>7、拒绝 &lt;font color='red'&gt; 业务悬挂 &lt;/font&gt;.</p>\n<h5 id=\"24262-tcc的空回滚和业务悬挂\"><a class=\"anchor\" href=\"#24262-tcc的空回滚和业务悬挂\">#</a> 2.4.2.6.2、TCC 的空回滚和业务悬挂🎋</h5>\n<blockquote>\n<p>当某分支事务的 try 阶段阻塞时，可能导致全局事务超时而触发二阶段的 cancel 操作。在未执行 try 操作时先执行了 cancel 操作，这时 cancel 不能做回滚，就是 &lt;font color='red'&gt; 空回滚 &lt;/font&gt;.</p>\n<p>因此也不能报错。报错就会重试就会陷入一个死循环中。</p>\n<p>对于已经空回滚的业务，如果以后继续执行 try，就永远不可能 Confirm 或 Cancel，这就是 &lt;font color='red'&gt; 业务悬挂 &lt;/font&gt;。应当阻止执行空回滚后的 try 操作，避免悬挂</p>\n</blockquote>\n<p>当第二个事务去执行的时候就会被阻塞，阻塞后得不到执行 TM 就会卡在这里，等待超时后就会报一个错误给 TC 了，TC 此时就会返回一个回滚的通知于是 RM 就会执行 Cancel 的逻辑了。</p>\n<p>第一个分支执行 Cancel 没问题因为它已经 Try 了，但是第二个分支就出问题了 还没冻结金额就去恢复金额去了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181514887.png\" alt=\"image-20231018151440530\" /></p>\n<p>​</p>\n<p><strong>业务分析</strong></p>\n<p>为了实现空回滚，防止业务悬挂，以及幂等性要求。我们必须在数据库记录冻结金额的同时，记录当前事务 id 和执行状态，为此我们设计了一张表 (account_freeze_tbl 这个表在项目中 sql 文件夹已经提供了)：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181702525.png\" alt=\"image-20231018170230443\" /></p>\n<p>有了表后我们还需要创建实体类和 mapper</p>\n<p>实体类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account_freeze_tbl\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountFreeze</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INPUT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> xid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> freezeMoney<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TRY</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CONFIRM</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANCEL</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>mapper</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountFreezeMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AccountFreeze</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"24263-声明tcc接口\"><a class=\"anchor\" href=\"#24263-声明tcc接口\">#</a> 2.4.2.6.3、声明 TCC 接口：</h5>\n<p>TCC 的 Try，Confirm，Cancel 方法都需要在接口中基于注解来声明，语法如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@LocalTCC</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountTCCService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// Try 逻辑，@TwoPhaseBusinessAction 中的 name 属性要与当前方法名一致，用于指定 Try 逻辑对应方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TwoPhaseBusinessAction</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"deduct\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            commitMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"confirm\"</span><span class=\"token punctuation\">,</span> rollbackMethod <span class=\"token operator\">=</span> <span class=\"token string\">\"cancel\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">deduct</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@BusinessActionContextParameter</span><span class=\"token punctuation\">(</span>paramName <span class=\"token operator\">=</span> <span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token annotation punctuation\">@BusinessActionContextParameter</span><span class=\"token punctuation\">(</span>paramName <span class=\"token operator\">=</span> <span class=\"token string\">\"money\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 二阶段 confirm 确认方法，可以另命名，但要保证与 commitMethod 一致</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// @Param context 上下文，可以传递 Try 方法的参数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// @return boolean 执行是否成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">boolean</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessActionContext</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 二阶段回滚方法，要保证与 rollbackMethod 一致</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessActionContext</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountTccServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountTCCService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountMapper</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountFreezeMapper</span> freezeMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AccountTccServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountMapper</span> mapper<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                 <span class=\"token class-name\">AccountFreezeMapper</span> freezeMapper<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mapper <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>freezeMapper <span class=\"token operator\">=</span> freezeMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deduct</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 1. 获取事务 id</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> xid <span class=\"token operator\">=</span> <span class=\"token class-name\">RootContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">getXID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 1.1. 判断 freeze 中是否有冻结记录，如果有，一定是 CANCEL 执行过，要拒绝业务</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">AccountFreeze</span> freeze1 <span class=\"token operator\">=</span> freezeMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>freeze1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// CANCEL 执行过，要拒绝业务</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 2. 扣减可用余额</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        mapper<span class=\"token punctuation\">.</span><span class=\"token function\">deduct</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 3. 记录冻结金额，事务状态</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">AccountFreeze</span> freeze <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountFreeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setFreezeMoney</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountFreeze<span class=\"token punctuation\">.</span>State</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setXid</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        freezeMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessActionContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 1. 获取事务 id</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">String</span> xid <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 2. 根据 id 删除冻结记录</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> freezeMapper<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BusinessActionContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 1. 从上下文中获取 用户的 id 和余额</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">String</span> xid <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getXid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">String</span> userId <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getActionContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">AccountFreeze</span> freeze <span class=\"token operator\">=</span> freezeMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectById</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 1.1. 空回滚的判断，判断 freeze 是否为 null，为 null 证明 try 没有执行，需要空回滚</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>freeze <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 证明 try 没有执行，需要回滚</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            freeze <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountFreeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setFreezeMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountFreeze<span class=\"token punctuation\">.</span>State</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CANCEL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setXid</span><span class=\"token punctuation\">(</span>xid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            freezeMapper<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 1.2. 幂等判断</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">AccountFreeze<span class=\"token punctuation\">.</span>State</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CANCEL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 已经处理过一次 CANCEL 了，无需重复处理</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 2. 恢复可用余额</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        mapper<span class=\"token punctuation\">.</span><span class=\"token function\">refund</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> freeze<span class=\"token punctuation\">.</span><span class=\"token function\">getFreezeMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 3. 将冻结金额清零，状态改为 CANCEL</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setFreezeMoney</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        freeze<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountFreeze<span class=\"token punctuation\">.</span>State</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CANCEL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> freezeMapper<span class=\"token punctuation\">.</span><span class=\"token function\">updateById</span><span class=\"token punctuation\">(</span>freeze<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">return</span> count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>目前的数据库数据</p>\n<p>account_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181752228.png\" alt=\"image-20231018175239070\" /></p>\n<p>storage_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181752894.png\" alt=\"image-20231018175252816\" /></p>\n<p>使用 postman 进行测试</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181753247.png\" alt=\"image-20231018175315999\" /></p>\n<p>请求完后查看数据库的数据</p>\n<p>account_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181753982.png\" alt=\"image-20231018175345921\" /></p>\n<p>storage_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181754323.png\" alt=\"image-20231018175359525\" /></p>\n<p>测试失败的 postman 请求</p>\n<p>因为此时库存的数量不够 10 个，我们减去 10 个就会产生异常</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181754231.png\" alt=\"image-20231018175428861\" /></p>\n<p>查看数据库的数据情况</p>\n<p>测试后的 account_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181932222.png\" alt=\"image-20231018193221241\" /></p>\n<p>测试后的 storage_tbl 表的数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181932553.png\" alt=\"image-20231018193242522\" /></p>\n<p>可以看到完成了数据的回滚</p>\n<h4 id=\"2427-saga模式\"><a class=\"anchor\" href=\"#2427-saga模式\">#</a> 2.4.2.7、Saga 模式🌴</h4>\n<p>Saga 模式是 SEATA 提供的长事务解决方案。也分为两个阶段：</p>\n<ul>\n<li>一阶段：直接提交本地事务</li>\n<li>二阶段：成功则什么都不做，失败则通过编写补偿业务来回滚</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310181938269.png\" alt=\"image-20231018193808535\" /></p>\n<p>Saga 模式优点：</p>\n<p>1、事务参与者可以基于事务驱动实现异步调用，吞吐高</p>\n<p>2、一阶段直接提交事务，无锁，性能好</p>\n<p>3、不用编写 TCC 中的三个阶段，实现简单</p>\n<p>缺点：</p>\n<p>1、软状态支持时间不确定，时效性差</p>\n<p>2、没有锁，没有事务隔离，会有脏写</p>\n<h4 id=\"2428-四种模式对比\"><a class=\"anchor\" href=\"#2428-四种模式对比\">#</a> 2.4.2.8、四种模式对比🌴</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>XA</th>\n<th>AT</th>\n<th>TCC</th>\n<th>SAGA</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>一致性</td>\n<td>强一致</td>\n<td>弱一致</td>\n<td>弱一致</td>\n<td>最终一致</td>\n</tr>\n<tr>\n<td>隔离性</td>\n<td>完全隔离</td>\n<td>基于全局锁隔离</td>\n<td>基于资源预留隔离</td>\n<td>无隔离</td>\n</tr>\n<tr>\n<td>代码侵入</td>\n<td>无</td>\n<td>无</td>\n<td>有，要编写三个接口</td>\n<td>有，要编写状态机和补偿业务</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>差</td>\n<td>好</td>\n<td>非常好</td>\n<td>非常好</td>\n</tr>\n<tr>\n<td>场景</td>\n<td>对一致性，隔离性有高要求的业务</td>\n<td>基于关系型数据库的大多数分布式场景都可以</td>\n<td>对性能要求较高的事务 &lt;br /&gt; 有非关系型数据库要参与的事务</td>\n<td>业务流程长，业务流程多 &lt;br /&gt; 参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"三-高可用\"><a class=\"anchor\" href=\"#三-高可用\">#</a> 三、高可用🎄</h1>\n<ul>\n<li>高可用集群结构</li>\n<li>实现高可用集群</li>\n</ul>\n<p><strong>TC 的异地多机房容灾架构</strong></p>\n<p>TC 服务作为 Seata 的核心服务，一定要保证<mark>高可用</mark>和<mark>异地容灾</mark>.</p>\n<p>具体实现查看文章：<a href=\"../Seata/seata%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90.md\">seata 的部署和集成.md</a>.</p>\n<h1 id=\"四多级缓存\"><a class=\"anchor\" href=\"#四多级缓存\">#</a> 四，多级缓存🎄</h1>\n<p>亿级流量的缓存方案</p>\n<h2 id=\"41-传统缓存的问题\"><a class=\"anchor\" href=\"#41-传统缓存的问题\">#</a> 4.1、传统缓存的问题🌳</h2>\n<p>传统的缓存策略一般是请求到达 Tomcat 后，先查询 redis，如果未命中则查询数据库，存在下面的问题：</p>\n<p>1、请求要经过 Tomcat 处理，Tomcat 的性能成为整个系统的瓶颈</p>\n<p>2、Redis 缓存失效时，会对数据库产生冲击</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191526124.png\" alt=\"image-20231019152653849\" /></p>\n<h2 id=\"42-多级缓存方案\"><a class=\"anchor\" href=\"#42-多级缓存方案\">#</a> 4.2、多级缓存方案🌳</h2>\n<p>多级缓存就是充分利用请求处理的每个环节，分别添加缓存，减轻 Tomcat 压力，提升服务性能：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191532661.png\" alt=\"image-20231019153224519\" /></p>\n<p>用作缓存的 Nginx 是业务 Nginx，需要部署为集群，再有专门的 Nginx 用来做反向代理：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191534434.png\" alt=\"image-20231019153411071\" /></p>\n<h2 id=\"43-jvm进程缓存\"><a class=\"anchor\" href=\"#43-jvm进程缓存\">#</a> 4.3、JVM 进程缓存🌳</h2>\n<ul>\n<li>导入商品案例</li>\n<li>初始 Caffeine</li>\n<li>实现进程缓存</li>\n</ul>\n<h3 id=\"431-导入商品案例\"><a class=\"anchor\" href=\"#431-导入商品案例\">#</a> 4.3.1、导入商品案例🌲</h3>\n<p>查看文章：<a href=\"./%E6%A1%88%E4%BE%8B%E5%AF%BC%E5%85%A5%E8%AF%B4%E6%98%8E/%E6%A1%88%E4%BE%8B%E5%AF%BC%E5%85%A5%E8%AF%B4%E6%98%8E.md\">案例导入说明</a>.</p>\n<h3 id=\"432-初始caffeine\"><a class=\"anchor\" href=\"#432-初始caffeine\">#</a> 4.3.2、初始 Caffeine🌲</h3>\n<h4 id=\"4321-本地进程缓存\"><a class=\"anchor\" href=\"#4321-本地进程缓存\">#</a> 4.3.2.1、本地进程缓存🌴</h4>\n<p>缓存在日常开发中起到至关重要的作用。由于是存储在内存中，数据的读取速度是非常快的，能大量减少对数据库的访问，减少数据库的压力。我们吧缓存分为两类：</p>\n<p>1、分布式缓存，例如 Redis：</p>\n<ul>\n<li>优点：存储容量更大，可靠性更好，可以在集群间共享</li>\n<li>缺点：访问缓存有网络开销</li>\n<li>场景：缓存数据量较大，可靠性要求较高，需要在集群间共享</li>\n</ul>\n<p>2、进程本地缓存，例如 HashMap，GuavaCache：</p>\n<ul>\n<li>优点：读取本地内存，没有网络开销，速度更快</li>\n<li>缺点：存储容量有限，可靠性较低，无法共享</li>\n<li>场景：性能要求较高，缓存数据量较小</li>\n</ul>\n<p>Caffeine 是一个基于 java8 开发的，提供了近乎最佳命中率的高性能的本地缓存库。目前 Spring 内部的缓存使用的就是 Caffeine。Github 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jlbi1tYW5lcy9jYWZmZWluZQ==\">https://github.com/ben-manes/caffeine</span></p>\n<h5 id=\"43211-caffeine示例\"><a class=\"anchor\" href=\"#43211-caffeine示例\">#</a> 4.3.2.1.1、Caffeine 示例🎋</h5>\n<p>可以通过 item-service 项目中的单元测试来学习 Caffeine 的使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testBasicOpsTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 构建 cache 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token class-name\">Caffeine</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 2. 存数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 3. 取数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">String</span> gf <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf = \"</span> <span class=\"token operator\">+</span> gf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 4. 取数据，如果未命中，则查询数据库</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token class-name\">String</span> defaultGF <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defaultGF\"</span><span class=\"token punctuation\">,</span> key <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 4.1. 根据 key 去查询数据库</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"是个傻子\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defaultGF = \"</span> <span class=\"token operator\">+</span> defaultGF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//------------------ 执行结果 ------------------</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>gf <span class=\"token operator\">=</span> 郭明然</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>defaultGF <span class=\"token operator\">=</span> 是个傻子</pre></td></tr></table></figure><p>Caffeine 提供了三种缓存驱逐策略：</p>\n<p>1、基于容量：设置缓存的数量上限</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testBasicOpsTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 构建 cache 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token class-name\">Caffeine</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">maximumSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存大小上限为 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 2. 存数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">//        try &#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">//            // 延迟 10ms，给清理线程一点时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">//            Thread.sleep(100);</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">//        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">//            throw new RuntimeException(e);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 3. 取数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//---------------- 打印结果 ----------------</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>郭明然</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>郭明然<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>郭明然<span class=\"token number\">2</span></pre></td></tr></table></figure><p>使用线程睡眠让其等待 10ms 给清理线程一点时间</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testBasicOpsTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 构建 cache 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token class-name\">Caffeine</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">maximumSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存大小上限为 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 2. 存数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// 延迟 10ms，给清理线程一点时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10l</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 3. 取数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//---------------- 打印结果 ----------------</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>郭明然<span class=\"token number\">2</span></pre></td></tr></table></figure><p>2、基于时间：设置缓存的有效时间</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testBasicOpsTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 构建 cache 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token class-name\">Caffeine</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">expireAfterWrite</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存有效期为 10 秒，从最后一次写入开始计时</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 2. 存数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"郭明然2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 3. 取数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 延迟 10ms，给清理线程一点时间</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">11000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">getIfPresent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gf2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//------------------- 打印结果 -------------------</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>郭明然</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">null</span></pre></td></tr></table></figure><p>3、基于引用：设置缓存为软引用或弱引用，利用 GC 来回收缓存数据。性能较差，不建议使用。</p>\n<p><mark>软引用</mark>：内存不足时才会回收；       <mark>弱引用</mark>：就算内存充足时也会回收；</p>\n<p>在默认情况下，当一个缓存元素过期的时候，Caffeine 不会自动立即将其清理和驱逐。而是在一次读或写操作后，或者在空闲时间完成对失效数据的驱逐。</p>\n<h3 id=\"433-实现进程缓存\"><a class=\"anchor\" href=\"#433-实现进程缓存\">#</a> 4.3.3、实现进程缓存🌲</h3>\n<h4 id=\"4331-案例实现商品的查询的本地进程缓存\"><a class=\"anchor\" href=\"#4331-案例实现商品的查询的本地进程缓存\">#</a> 4.3.3.1、案例，实现商品的查询的本地进程缓存🌴</h4>\n<p>利用 Caffeine 实现下列需求：</p>\n<p>1、给根据 id 查询商品的业务添加缓存，缓存未命中时查询数据库</p>\n<p>2、给根据 id 查询商品存库的业务添加缓存，缓存未命中时查询数据库</p>\n<p>3、缓存初始大小为 100</p>\n<p>4、缓存上限为 10000</p>\n<p>步骤：</p>\n<p>1、给根据 id 查询商品的业务添加缓存，缓存未命中时查询数据库</p>\n<p>2、给根据 id 查询商品存库的业务添加缓存，缓存未命中时查询数据库</p>\n<p>3、缓存初始大小为 100</p>\n<p>4、缓存上限为 10000</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CaffeineConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">itemCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Caffeine</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">initialCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存初始化大小</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">maximumSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10_000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存最大上限值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ItemStock</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">itemStockCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Caffeine</span><span class=\"token punctuation\">.</span><span class=\"token function\">newBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">initialCapacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存初始化大小</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">maximumSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">10_000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置缓存最大上限值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>5、在 controller 层进行两个缓存对象的自动装配</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> itemCache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ItemStock</span><span class=\"token punctuation\">></span></span> itemStockCache<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>6、编写缓存代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 优先根据缓存查，如果未命中则查询数据库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> itemCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> key <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> itemService<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">ne</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/stock/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ItemStock</span> <span class=\"token function\">findStockById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">return</span> itemStockCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> key <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> stockService<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>请求接口进行测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxL2l0ZW0vMTAwMDE=\">http://localhost:8081/item/10001</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191732546.png\" alt=\"image-20231019173236082\" /></p>\n<p>第一次请求我们可以在 idea 控制台中看到打印了一段执行 SQL 的日志，说明查了一下数据库</p>\n<pre><code>17:31:53:355 DEBUG 5692 --- [nio-8081-exec-1] c.h.item.mapper.ItemMapper.selectOne     : ==&gt;  Preparing: SELECT id,name,title,price,image,category,brand,spec,status,create_time,update_time FROM tb_item WHERE (status &lt;&gt; ? AND id = ?)\n17:31:53:383 DEBUG 5692 --- [nio-8081-exec-1] c.h.item.mapper.ItemMapper.selectOne     : ==&gt; Parameters: 3(Integer), 10001(Long)\n17:31:53:405 DEBUG 5692 --- [nio-8081-exec-1] c.h.item.mapper.ItemMapper.selectOne     : &lt;==      Total: 1\n</code></pre>\n<p>清空 idea 控制台再对该页面进行一次访问，因为缓存一开始就是空的</p>\n<p>当我们执行过一次后数据就会被缓存起来，第二次执行就直接拿缓存的数据了可以看到控制台很干净没有一点打印信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191733727.png\" alt=\"image-20231019173347678\" /></p>\n<p>当然库存也是一样的道理</p>\n<p>访问 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgxL2l0ZW0vc3RvY2svMTAwMDE=\">http://localhost:8081/item/stock/10001</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191735447.png\" alt=\"image-20231019173509976\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191734949.png\" alt=\"image-20231019173456734\" /></p>\n<p>清空控制台信息进行第二次访问，此时数据已经被缓存起来了。</p>\n<p>二次依旧很干净</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191735198.png\" alt=\"image-20231019173553835\" /></p>\n<h1 id=\"五-lua语言入门\"><a class=\"anchor\" href=\"#五-lua语言入门\">#</a> 五、Lua 语言入门🎄</h1>\n<p>因为 Nginx 开发需要使用 Lua 语言来进行编程，所以我们就需要学习 Lua 语言</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191745432.png\" alt=\"image-20231019174517515\" /></p>\n<p>学习内容：</p>\n<ul>\n<li>初始 Lua</li>\n<li>变量和循环</li>\n<li>条件控制，函数</li>\n</ul>\n<h2 id=\"51-初始lua\"><a class=\"anchor\" href=\"#51-初始lua\">#</a> 5.1、初始 Lua🌳</h2>\n<p>Lua 是一种轻量级小巧的脚本语言，用标准 C 语言编写并以源代码形式开放，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。官网：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5sdWEub3JnLw==\">http://www.lua.org/</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310191751131.png\" alt=\"image-20231019175148607\" /></p>\n<h3 id=\"511-helloworld\"><a class=\"anchor\" href=\"#511-helloworld\">#</a> 5.1.1、HelloWorld🌲</h3>\n<p>1、在 Linux 虚拟机的任意目录下，新建一个 hello.lua 文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hello.lua</span></pre></td></tr></table></figure><p>2、添加下面的内容</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>print<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3、运行</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lua hello.lua</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello World<span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><h3 id=\"512-数据类型\"><a class=\"anchor\" href=\"#512-数据类型\">#</a> 5.1.2、数据类型🌲</h3>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nil</td>\n<td>这个最简单，只有值 nil 属于该类，表示一个无效值 (在条件表达式中相当于 false)</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>包含两个值：false 和 true</td>\n</tr>\n<tr>\n<td>number</td>\n<td>表示双精度类型的实浮点数</td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串由一对双引号或单引号来表示</td>\n</tr>\n<tr>\n<td>function</td>\n<td>由 C 或 Lua 编写的函数</td>\n</tr>\n<tr>\n<td>table</td>\n<td>Lua 中的表 (table) 其实是一个 “关联数组” (associative arrays)，数组的索引可以是数字，字符串或表类型。在 Lua 里，table 的创建是通过 “构造表达式” 来完成，最简单构造表达式是 { }，用来创建一个空表。</td>\n</tr>\n</tbody>\n</table>\n<p>可以利用 type 函数测试给定变量或者值的类型</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hello.lua</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lua hello.lua</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat hello.lua</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>print<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hello.lua</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># lua hello.lua</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>number</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat hello.lua</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>print<span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">(</span><span class=\"token number\">10.4</span> * <span class=\"token number\">3</span><span class=\"token punctuation\">))</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><h3 id=\"513-变量\"><a class=\"anchor\" href=\"#513-变量\">#</a> 5.1.3、变量🌲</h3>\n<p>Lua 声明变量的时候，并不需要指定数据类型：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 声明字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 声明数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> num <span class=\"token operator\">=</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 声明布尔类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">local</span> flag <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 声明数组 key 为索引的 table </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">local</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lua'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 声明 table ，类似 java 的 map</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">local</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问 table：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 访问数组，lua 数组的角标从 1 开始</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 访问 table</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>字符串拼接使用  <code>..</code></p>\n<h3 id=\"514-循环\"><a class=\"anchor\" href=\"#514-循环\">#</a> 5.1.4、循环🌲</h3>\n<p>数组，table 都可以利用 for 循环来遍历</p>\n<ul>\n<li>遍历数组：</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 声明数组 key 为索引的 table</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'java'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lua'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 遍历数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><ul>\n<li>遍历 table</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 声明 map，也就是 table</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 遍历 table</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> <span class=\"token function\">pairs</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3 id=\"515-函数\"><a class=\"anchor\" href=\"#515-函数\">#</a> 5.1.5、函数🌲</h3>\n<p>定义函数的语法：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> 函数名<span class=\"token punctuation\">(</span> argument1<span class=\"token punctuation\">,</span> argument2<span class=\"token punctuation\">,</span> argument3 <span class=\"token punctuation\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">-- 函数体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> 返回值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>例如，定义一个函数，用来打印数组：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printArr</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> value <span class=\"token keyword\">in</span> <span class=\"token function\">ipairs</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h3 id=\"516-条件控制\"><a class=\"anchor\" href=\"#516-条件控制\">#</a> 5.1.6、条件控制🌲</h3>\n<p>类似 Java 的条件控制，例如 if , else 语法：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">-- [布尔表达式为 true 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">-- [布尔表达式为 false 时执行该语句块 --]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>与 java 不同，布尔表达式中的逻辑运算是基于英文单词：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>逻辑与操作符。若 A 为 false，则返回 A，否则返回 B</td>\n<td>(A and B) 为 false</td>\n</tr>\n<tr>\n<td>or</td>\n<td>逻辑或操作符。若 A 为 true，则返回 A，否则返回 B</td>\n<td>(A or B) 为 true</td>\n</tr>\n<tr>\n<td>not</td>\n<td>逻辑非操作符。与逻辑运算结果相反，如果条件为 true，逻辑非为 false</td>\n<td>not (A and B) 为 true</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"六-多级缓存\"><a class=\"anchor\" href=\"#六-多级缓存\">#</a> 六、多级缓存🎄</h1>\n<ul>\n<li>安装 OpenResty</li>\n<li>OpenResty 快速入门</li>\n<li>请求参数处理</li>\n<li>查询 Tomcat</li>\n<li>Redis 缓存预热</li>\n<li>查询 Redis 缓存</li>\n<li>Nginx 本地缓存</li>\n</ul>\n<h2 id=\"61-初始openresty\"><a class=\"anchor\" href=\"#61-初始openresty\">#</a> 6.1、初始 OpenResty🌳</h2>\n<p>OpenResty 是一个基于 Nginx 的高性能 Web 平台，用于方便地搭建能够处理高并发，扩展性极高的动态 Web 应用，Web 服务和动态网关。具备下列特点：</p>\n<ul>\n<li>具备 Nginx 的完整功能</li>\n<li>基于 Lua 语言进行扩展，集成了大量精良的 Lua 库，第三方模块</li>\n<li>允许使用 Lua 自定义业务逻辑，自定义库</li>\n</ul>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVucmVzdHkub3JnL2NuLw==\">https://openresty.org/cn/</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200852606.png\" alt=\"image-20231020085036341\" /></p>\n<h3 id=\"611-openresty安装\"><a class=\"anchor\" href=\"#611-openresty安装\">#</a> 6.1.1、OpenResty 安装🌲</h3>\n<p>查看文章：<a href=\"./OpenResty%E5%AE%89%E8%A3%85/%E5%AE%89%E8%A3%85OpenResty.md\">安装 OpenResty</a>.</p>\n<h3 id=\"612-案例openresty快速入门实现商品详情页数据查询\"><a class=\"anchor\" href=\"#612-案例openresty快速入门实现商品详情页数据查询\">#</a> 6.1.2、案例，OpenResty 快速入门，实现商品详情页数据查询🌲</h3>\n<p>商品详情页目前展示的是假数据，在浏览器的控制台可以看到查询商品信息的请求：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200915073.png\" alt=\"image-20231020091453815\" /></p>\n<p>而这个请求最终被反向代理到虚拟机的 OpenResty 集群：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200915958.png\" alt=\"image-20231020091503555\" /></p>\n<p>需求：在 OpenResty 中接收这个请求，并返回一段商品的假数据。</p>\n<p>步骤：一。</p>\n<p>1、在 nginx.conf 的 http 下面，添加对 OpenResty 的 Lua 模块的加载</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># lua 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lua_package_path <span class=\"token string\">\"/usr/local/openresty/lualib/?.lua;;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># c 模块     </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lua_package_cpath <span class=\"token string\">\"/usr/local/openresty/lualib/?.so;;\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、在 nginx.conf 的 server 下面，添加对 /api/item 这个路径的监听</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这里可以理解为就是 SpringMVC 中的 Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>location /api/item <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 默认的响应类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>default_type application/json<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 这里可以理解为就是 Service 业务逻辑层</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 响应结果由 lua/item.lua 下的文件决定</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>content_by_lua_file lua/item.lua<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>步骤：二。</p>\n<p>1、在 nginx 目录创建文件夹：lua</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir lua</span></pre></td></tr></table></figure><p>2、在 lua 文件夹下，新建文件：item.lua</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># touch lua/item.lua</span></pre></td></tr></table></figure><p>3、内容如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--  返回假数据，这里的 ngx.say () 函数，就是写数据到 Response 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"id\":10001, \"name\":\"SALSA AIR\"&#125;'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里面的假数据去 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDElRTQlQjglQUQlRTYlODklOTMlRTUlQkMlODAlRTYlOEUlQTclRTUlODglQjYlRTUlOEYlQjAlRTklODAlODklRTYlOEIlQTl2dWUlRTclODQlQjYlRTUlOTAlOEUlRTglQjUlOEIlRTUlODAlQkNJdGVtJUU0JUI5JTlGJUU1JUIwJUIxJUU2JTk4JUFGT2JqZWN0JUU1JUFGJUI5JUU4JUIxJUExJUVGJUJDJThDJUU1JUIwJTg2JUU5JTg3JThDJUU5JTlEJUEyJUU3JTlBJTg0JUU2JTk1JUIwJUU2JThEJUFFJUU0JUJEJTlDJUU0JUI4JUJBJUU1JTgxJTg3JUU2JTk1JUIwJUU2JThEJUFFJUU0JUJEJUJGJUU3JTk0JUE4\">http://localhost/item.html?id=10001 中打开控制台选择 vue 然后赋值 Item 也就是 Object 对象，将里面的数据作为假数据使用</span></p>\n<p>这个页面是从 nginx 代理里面访问过来的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200940251.png\" alt=\"image-20231020094054757\" /></p>\n<p>将假数据拷贝到 ngx.say (‘’) 里面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200942719.png\" alt=\"image-20231020094215395\" /></p>\n<p>为了能区分一下是否成功，我们将里面的一些数据进行一下修改</p>\n<p>此处只是修改了尺寸和价格</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"id\":10001,\"name\":\"SALSA AIR\",\"title\":\"RIMOWA 31寸托运箱拉杆箱 SALSA AIR系列果绿色 820.70.36.4\",\"price\":27900,\"image\":\"https://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webp\",\"category\":\"拉杆箱\",\"brand\":\"RIMOWA\",\"spec\":\"\",\"status\":1,\"createTime\":\"2019-04-30T16:00:00.000+00:00\",\"updateTime\":\"2019-04-30T16:00:00.000+00:00\",\"stock\":2999,\"sold\":31290&#125;'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>完整的 nginx.conf 配置内容：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#user  nobody;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">worker_processes</span>  <span class=\"token number\">1</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">error_log</span>  logs/error.log</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">events</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">worker_connections</span>  <span class=\"token number\">1024</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">include</span>       mime.types</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">default_type</span>  application/octet-stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">sendfile</span>        <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">keepalive_timeout</span>  <span class=\"token number\">65</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># lua 模块</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">lua_package_path</span> <span class=\"token string\">\"/usr/local/openresty/lualib/?.lua;;\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># c 模块     </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">lua_package_cpath</span> <span class=\"token string\">\"/usr/local/openresty/lualib/?.so;;\"</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">8081</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /api/item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token comment\"># 默认的响应类型</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token directive\"><span class=\"token keyword\">default_type</span> application/json</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token comment\"># 响应结果由 lua/item.lua 下的文件决定</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/item.lua</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、重新加载配置</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx <span class=\"token parameter variable\">-s</span> reload</pre></td></tr></table></figure><p>查看商品页面，没有刷新前</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200946010.png\" alt=\"image-20231020094617482\" /></p>\n<p>刷新后</p>\n<p>可以看到尺寸和价格被修改了但是中文也乱码了。。。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200951850.png\" alt=\"image-20231020095132419\" /></p>\n<h2 id=\"62-openresty获取请求参数\"><a class=\"anchor\" href=\"#62-openresty获取请求参数\">#</a> 6.2、OpenResty 获取请求参数🌳</h2>\n<p>OpenResty 提供了各种 API 用来获取不同类型的请求参数：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310200958589.png\" alt=\"image-20231020095810221\" /></p>\n<h3 id=\"621-案例获取请求路径中的商品id信息拼接到json结果中返回\"><a class=\"anchor\" href=\"#621-案例获取请求路径中的商品id信息拼接到json结果中返回\">#</a> 6.2.1、案例，获取请求路径中的商品 id 信息，拼接到 json 结果中返回🌲</h3>\n<p>在查询商品信息的请求中，通过路径占位符的方式，传递了商品 id 到后台：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201002974.png\" alt=\"image-20231020100241654\" /></p>\n<p>需求：在 OpenResty 中接收这个请求，并获取路径中的 id 信息，拼接到结果的 json 字符串中返回</p>\n<p>OpenResty 中接受请求</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">location</span> ~ /api/item(\\d+)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\"># 默认的响应类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">default_type</span> application/json</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\"># 响应结果由 lua/item.lua 下的文件决定</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/item.lua</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>并获取路径中的 id 信息，拼接到结果的 json 字符串中返回</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 获取路径参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> id <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 返回结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&#123;\"id\":'</span> <span class=\"token operator\">..</span> id <span class=\"token operator\">..</span> <span class=\"token string\">',\"name\":\"SALSA AIR\",\"title\":\"RIMOWA 31寸托运箱拉杆箱 SALSA AIR系列果绿色 820.70.36.4\",\"price\":27900,\"image\":\"https://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webp\",\"category\":\"拉杆箱\",\"brand\":\"RIMOWA\",\"spec\":\"\",\"status\":1,\"createTime\":\"2019-04-30T16:00:00.000+00:00\",\"updateTime\":\"2019-04-30T16:00:00.000+00:00\",\"stock\":2999,\"sold\":31290&#125;'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>重启 Linux 中的 nginx 服务器</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nginx <span class=\"token parameter variable\">-s</span> reload</pre></td></tr></table></figure><p>访问页面进行测试：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDE=\">http://localhost/item.html?id=10001</span></p>\n<p>请求结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201022922.png\" alt=\"image-20231020102241989\" /></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDI=\">http://localhost/item.html?id=10002</span></p>\n<p>请求结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201023953.png\" alt=\"image-20231020102259850\" /></p>\n<p>可以看到 id 就不再是写死的了，而是可以事实变化的</p>\n<h2 id=\"63-查询tomcat\"><a class=\"anchor\" href=\"#63-查询tomcat\">#</a> 6.3、查询 Tomcat🌳</h2>\n<p>先看下多级缓存的架构。目前已经准备好了 nginx 反向代理服务器，它去接受前端的请求并且转到 OpenResty，服务端也编写好了进程缓存 OpenResty 也搭好了，但是 OpenResty 接收到请求后要查询数据。我们先实现从 Tomcat 去查然后再存储到缓存中。</p>\n<p>需要注册 OPenResty 在虚拟机上，而 Tomcat 在本机上，ip 地址不同</p>\n<p>两个 ip 地址访问的便捷方式：不管虚拟机的 ip 地址是什么只要官前三位就行了，然后把最后一位替换成 1 一定得到的就是 windows 电脑的位置。前提是需要关闭防火墙</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201030614.png\" alt=\"image-20231020103028998\" /></p>\n<h3 id=\"631-案例获取请求路径中的商品id信息根据id向tomcat查询商品信息\"><a class=\"anchor\" href=\"#631-案例获取请求路径中的商品id信息根据id向tomcat查询商品信息\">#</a> 6.3.1、案例，获取请求路径中的商品 id 信息，根据 id 向 Tomcat 查询商品信息🌲</h3>\n<p>这里要修改 item.lua，满足下面的需求：</p>\n<p>1、获取请求参数中的 id</p>\n<p>2、根据 id 向 Tomcat 服务发送请求，查询商品信息</p>\n<p>3、根据 id 向 Tomcat 服务发送请求，查询库存信息</p>\n<p>4、组装商品信息，库存信息，序列化为 Json 格式并返回</p>\n<p>步骤：</p>\n<p>一，nginx 内部发送 Http 请求</p>\n<p>nginx 提供了内部 API 用以发送 http 请求：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 注意：这里的 path 是路径，并不包含 ip 和端口。这个请求会被 nginx 内部的 server 监听并处理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 这肯定不行，因为我们希望可以发送给 Tomcat 所以就要指定 Tomcat 的 ip 和端口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">local</span> resp = ngx.location.capture(<span class=\"token string\">\"/path\"</span>,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   \t<span class=\"token directive\"><span class=\"token keyword\">method</span> = ngx.HTTP_GET, -- 请求方式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      args =</span> <span class=\"token punctuation\">&#123;</span>a = 1, b = 2<span class=\"token punctuation\">&#125;</span>, -- get方式传参数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      body = \"c=3&amp;d=4\" -- post方式传参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>)</pre></td></tr></table></figure><p>返回的响应内容包括：</p>\n<ul>\n<li>resp.status：响应状态码</li>\n<li>resp.header：响应头，是一个 table</li>\n<li>resp.body：响应体，就是响应数据</li>\n</ul>\n<p>我们希望这个请求发送到 Tomcat 服务器，所以还需要编写一个 server 来对这个路径做反向代理：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">location</span> /path</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\"># 这里是 windows 电脑的 ip 和 Java 服务端口，需要确保 windows 防火墙处于关闭状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://192.168.137.169:8081</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写代码：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">8081</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">location</span> /item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://192.168.137.1:8081</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">location</span> ~ /api/item/(\\d+)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\"># 默认的响应类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token directive\"><span class=\"token keyword\">default_type</span> application/json</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\"># 响应结果由 lua/item.lua 下的文件决定</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/item.lua</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Tomcat 的反向代理搞定了，以后只要调用 capture API 请求是 item 开头就一定能达到 Tomcat。所以以后就可以放心的使用这套 API 了，那么既然这个 API 经常要使用。那我们可以将发请求的代码封装成一个函数</p>\n<h4 id=\"6311-封装http查询的函数\"><a class=\"anchor\" href=\"#6311-封装http查询的函数\">#</a> 6.3.1.1、封装 HTTP 查询的函数🌴</h4>\n<p>我们可以吧 http 查询的请求封装为一个函数，放到 OPenResty 函数库中，方便后期使用。</p>\n<p>1、在 /usr/local/openresty/lualib 目录下创建 common.lua 文件：</p>\n<p>为什么是这个位置？ 因为在上述配置 nginx 加载模块中指定的路径就是加载这个位置的任何.lua 文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /usr/local/openresty/lualib/common.lua</pre></td></tr></table></figure><p>2、在 common.lua 中封装 http 查询的函数</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 封装函数，发送 http 请求，并解析响应</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> resp <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        method <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>HTTP_GET<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        args <span class=\"token operator\">=</span> params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">-- 记录错误信息，返回 404</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http not found, path: \"</span><span class=\"token punctuation\">,</span> path <span class=\"token punctuation\">,</span> <span class=\"token string\">\", args: \"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">.</span>body</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 将方法导出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">local</span> _M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    read_http <span class=\"token operator\">=</span> read_http</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">return</span> _M</pre></td></tr></table></figure><p>在 item.lua 文件中编写代码如下：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 导入 common 函数库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'common'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> read_http <span class=\"token operator\">=</span> common<span class=\"token punctuation\">.</span>read_http</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 获取路径参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">local</span> id <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 查询商品信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> itemJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/item/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 查询库存信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">local</span> stockJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/item/stock\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 返回结果</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>itemJSON<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>访问 uri 进行一下请求测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDM=\">http://localhost/item.html?id=10003</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201318784.png\" alt=\"image-20231020131800919\" /></p>\n<p>返回的数据</p>\n<pre><code>&#123;\n    &quot;id&quot;: 10003,\n    &quot;name&quot;: &quot;韩版牛仔裤&quot;,\n    &quot;title&quot;: &quot;唐狮新品牛仔裤女学生韩版宽松裤子 A款/中牛仔蓝（无绒款） 26&quot;,\n    &quot;price&quot;: 84600,\n    &quot;image&quot;: &quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t26989/116/124520860/644643/173643ea/5b860864N6bfd95db.jpg!q70.jpg.webp&quot;,\n    &quot;category&quot;: &quot;牛仔裤&quot;,\n    &quot;brand&quot;: &quot;唐狮&quot;,\n    &quot;spec&quot;: &quot;&#123;\\&quot;颜色\\&quot;: \\&quot;蓝色\\&quot;, \\&quot;尺码\\&quot;: \\&quot;26\\&quot;&#125;&quot;,\n    &quot;status&quot;: 1,\n    &quot;createTime&quot;: &quot;2019-05-01T00:00:00.000+00:00&quot;,\n    &quot;updateTime&quot;: &quot;2019-05-01T00:00:00.000+00:00&quot;,\n    &quot;stock&quot;: null,\n    &quot;sold&quot;: null\n&#125;\n</code></pre>\n<p>现在所有的商品都能正常查询了，但是！</p>\n<p>里面的，销量和存库的数据还没有。</p>\n<p>但是如果要是有 3 张表，4 张表，5 张表都需要把它们拼接起来，所以最终需要的是完整的数据</p>\n<p>但是 itemJSON 得到的数据是一个 Json 数据，我们需要转换为 Lua 里面的对象，使用 table 这个数据类型来进行存储</p>\n<p>如下就是将 JSON 反序列化为 Lua 对象的方式：</p>\n<h4 id=\"6312-json结果处理\"><a class=\"anchor\" href=\"#6312-json结果处理\">#</a> 6.3.1.2、JSON 结果处理🌴</h4>\n<p>OPenResty 提供了一个 cjson 的模块用来处理 JSON 的序列化和反序列化。</p>\n<p>官方地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5yZXN0eS9sdWEtY2pzb24v\">https://github.com/openresty/lua-cjson/</span></p>\n<p>该模块的目录位置如下：/usr/local/openresty/lualib/</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201330405.png\" alt=\"image-20231020133045031\" /></p>\n<p><strong>使用</strong>：</p>\n<p>1、导入 cjson 模块：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cjson'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>2、序列化：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   name <span class=\"token operator\">=</span> <span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   age <span class=\"token operator\">=</span> <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3、反序列化</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> json <span class=\"token operator\">=</span> <span class=\"token string\">'&#123;\"name\": \"jack\", \"age\": 21&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 反序列化</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> obj <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>继续下面的代码步骤：</p>\n<p>1、将请求到的 json 数据序列化为 lua 中的 table 数据</p>\n<p>2、再将序列化的数据进行调用拼接</p>\n<p>3、拼接完毕后再将 lua 中 table 数据序列化为 json 响应到前端</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 导入 common 函数库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'common'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> read_http <span class=\"token operator\">=</span> common<span class=\"token punctuation\">.</span>read_http</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 导入 cjson 库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cjson'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 获取路径参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> id <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 查询商品信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">local</span> itemJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/item/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 查询库存信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">local</span> stockJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/item/stock/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">-- JSON 转化为 lua 的 table</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">local</span> item <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>itemJSON<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">local</span> sto <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>stockJSON<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 组合数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>item<span class=\"token punctuation\">.</span>stock <span class=\"token operator\">=</span> sto<span class=\"token punctuation\">.</span>stock</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>item<span class=\"token punctuation\">.</span>sold <span class=\"token operator\">=</span> sto<span class=\"token punctuation\">.</span>sold</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">-- 把 item 序列化为 json 返回结果</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>请求 uri 进行测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDQ=\">http://localhost/item.html?id=10004</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201343013.png\" alt=\"image-20231020134303536\" /></p>\n<p>请求到的数据</p>\n<pre><code>&#123;\n    &quot;spec&quot;: &quot;&#123;\\&quot;颜色\\&quot;: \\&quot;白色\\&quot;, \\&quot;尺码\\&quot;: \\&quot;36\\&quot;&#125;&quot;,\n    &quot;sold&quot;: 974,\n    &quot;status&quot;: 1,\n    &quot;updateTime&quot;: &quot;2019-05-01T00:00:00.000+00:00&quot;,\n    &quot;title&quot;: &quot;森马(senma)休闲鞋女2019春季新款韩版系带板鞋学生百搭平底女鞋 黄色 36&quot;,\n    &quot;stock&quot;: 99999,\n    &quot;price&quot;: 10400,\n    &quot;image&quot;: &quot;https://m.360buyimg.com/mobilecms/s720x720_jfs/t1/29976/8/2947/65074/5c22dad6Ef54f0505/0b5fe8c5d9bf6c47.jpg!q70.jpg.webp&quot;,\n    &quot;createTime&quot;: &quot;2019-05-01T00:00:00.000+00:00&quot;,\n    &quot;category&quot;: &quot;休闲鞋&quot;,\n    &quot;name&quot;: &quot;休闲板鞋&quot;,\n    &quot;brand&quot;: &quot;森马&quot;,\n    &quot;id&quot;: 10004\n&#125;\n</code></pre>\n<p>可以看到有库存和销量的数据了</p>\n<h3 id=\"632-tomcat集群的负载均衡\"><a class=\"anchor\" href=\"#632-tomcat集群的负载均衡\">#</a> 6.3.2、Tomcat 集群的负载均衡🌲</h3>\n<p>我们已经实现了，从 OPenResty 向 tomcat 发送一个 http 请求去查询商品信息返回页面，完成渲染。但是在上述实现案例中 Tomcat 只有一台</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201346554.png\" alt=\"image-20231020134614455\" /></p>\n<p>在实际生产中 Tomcat 一定是一个集群。所以 OPenResty 再发送请求时必须得对多台 Tomcat 实现一个负载均衡</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201349192.png\" alt=\"image-20231020134913570\" /></p>\n<p>比方说 负载均衡挑选了 8081，然后请求就会到达 8081 然后去查询数据库。</p>\n<p>查询完数据库后会形成一个 jvm 进程缓存，保存在 8081 这台服务器上，缓存有了以后下次可以直接读取缓存就不用查询数据库了性能就非常好了。但是非常可惜的是进程缓存是不能共享的 8081 有这个缓存，8082 并没有，而负载均衡的规则是 轮询。如果这样访问缓存就会在多台 Tomcat 去冗余的保存。第一个占用额外空间，第二是缓存的命中率也有点惨</p>\n<p>如果说我想要商品 10001 第一次查询完以后永远都有缓存。那么我必须让 item/10001 这个请求每次都指向同一个服务器，这样才能保证这个缓存一直生效。假如说又来一个 item/10002 那我就让它指向下一个服务器。</p>\n<p>不同商品永远访问不同服务器，相同商品永远访问同一个服务器，这样就能保证缓存永远命中。</p>\n<p>这样 jvm 进程缓存才有意义。但是现在是轮询肯定做不到这一点，所以我们需要修改 nginx 负载均衡的算法了。</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># tomcat 集群配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">upstream</span> tomcat-cluster</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\"># 根据请求过来的路径来计算 hash 值然后决定访问哪个服务器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token directive\"><span class=\"token keyword\">hash</span> <span class=\"token variable\">$request_uri</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">server</span> 192.168.249.128:8081</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">server</span> 192.168.249.128:8082</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码演示如下：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">include</span>       mime.types</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">default_type</span>  application/octet-stream</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">sendfile</span>        <span class=\"token boolean\">on</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">keepalive_timeout</span>  <span class=\"token number\">65</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># lua 模块</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">lua_package_path</span> <span class=\"token string\">\"/usr/local/openresty/lualib/?.lua;;\"</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># c 模块     </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">lua_package_cpath</span> <span class=\"token string\">\"/usr/local/openresty/lualib/?.so;;\"</span></span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">upstream</span> tomcat-cluster</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">hash</span> <span class=\"token variable\">$request_uri</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">server</span> 192.168.249.128:8081</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">server</span> 192.168.249.128:8082</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">8081</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://tomcat-cluster</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> ~ /api/item/(\\d+)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\"># 默认的响应类型</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token directive\"><span class=\"token keyword\">default_type</span> application/json</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\"># 响应结果由 lua/item.lua 下的文件决定</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token directive\"><span class=\"token keyword\">content_by_lua_file</span> lua/item.lua</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">index</span>  index.html index.htm</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">error_page</span>   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">location</span> = /50x.html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token directive\"><span class=\"token keyword\">root</span>   html</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 idea 中开启 8082 端口的服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201435034.png\" alt=\"image-20231020143541296\" /></p>\n<p>启动</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201436217.png\" alt=\"image-20231020143629316\" /></p>\n<p>访问 uri 进行测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDE=\">http://localhost/item.html?id=10001</span></p>\n<p>这个 uri 访问请求到的 Tomcat 服务为如下：</p>\n<p>idea 控制台中打印信息：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201441979.png\" alt=\"image-20231020144146827\" /></p>\n<p>访问 uri 进行测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDI=\">http://localhost/item.html?id=10002</span></p>\n<p>这个 uri 访问请求到的 Tomcat 服务为如下：</p>\n<p>idea 控制台中打印信息：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201442866.png\" alt=\"image-20231020144213109\" /></p>\n<p>将连个服务的控制台打印的信息都清空然后再去访问一下 10001 和 10002</p>\n<p>控制台都没有打印任何的信息说明缓存起作用了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201443037.png\" alt=\"image-20231020144338972\" /></p>\n<h2 id=\"64-添加redis缓存的需求\"><a class=\"anchor\" href=\"#64-添加redis缓存的需求\">#</a> 6.4、添加 Redis 缓存的需求🌳</h2>\n<p>请求成功后不应该直接查询 jvm 进程缓存而是应该先到 redis 中看看有没有缓存再去看 jvm 进程缓存</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201447926.png\" alt=\"image-20231020144727615\" /></p>\n<h3 id=\"641-添加redis缓存要面临的问题\"><a class=\"anchor\" href=\"#641-添加redis缓存要面临的问题\">#</a> 6.4.1、添加 Redis 缓存要面临的问题🌲</h3>\n<h4 id=\"6411-冷启动与缓存预热\"><a class=\"anchor\" href=\"#6411-冷启动与缓存预热\">#</a> 6.4.1.1、冷启动与缓存预热🌴</h4>\n<p><mark>冷启动</mark>：服务刚刚启动时，Redis 中并没有缓存，如果所有商品数据都在第一次查询是添加缓存，可能会给数据库带来较大压力</p>\n<p><mark>缓存预热</mark>：在实际开发中，我们可以利用大数据统计用户访问的热点数据，在项目启动时将这些热点数据提前查询并保存到 Redis 中</p>\n<p>我们数据流量较少，可以在启动时将所有数据都存入缓存中。</p>\n<h4 id=\"6412-缓存预热\"><a class=\"anchor\" href=\"#6412-缓存预热\">#</a> 6.4.1.2、缓存预热🌴</h4>\n<p>步骤：</p>\n<p>1、利用 Docker 安装 Redis</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker run --name redis -p 6379:6379 -d redis redis-server --appendonly yes</span></pre></td></tr></table></figure><p>2、在 item-service 服务中引入 redis 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>3、配置 Redis 地址</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.249.128</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr></table></figure><p>4、编写初始化类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ItemService</span> itemService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">IItemStockService</span> stockService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> <span class=\"token constant\">MAPPER</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 初始化缓存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 1. 查询商品信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> itemService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 2. 放入缓存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 2.1. 序列化为 json</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">MAPPER</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 2.2. 存入 redis</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:id:\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 1. 查询库存信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ItemStock</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> stockService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 2. 放入缓存</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ItemStock</span> itemStock <span class=\"token operator\">:</span> list1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 2.1. 序列化为 json</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">MAPPER</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>itemStock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 2.2. 存入 redis</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:stock:id:\"</span> <span class=\"token operator\">+</span> itemStock<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重启或启动 8081 和 8082 两个服务器</p>\n<p>可以看到启动时 redis 初始化缓存去查询了数据库此时可以看下 redis 中的数据情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201513672.png\" alt=\"image-20231020151344361\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it redis redis-cli</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:id:10004\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:stock:id:10004\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:id:10002\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:stock:id:10005\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:id:10001\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:stock:id:10001\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:stock:id:10003\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:id:10003\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:stock:id:10002\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item:id:10005\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span></pre></td></tr></table></figure><h2 id=\"65-查询redis缓存\"><a class=\"anchor\" href=\"#65-查询redis缓存\">#</a> 6.5、查询 Redis 缓存🌳</h2>\n<h3 id=\"651-openresty的redis模块\"><a class=\"anchor\" href=\"#651-openresty的redis模块\">#</a> 6.5.1、OpenResty 的 Redis 模块🌲</h3>\n<p>OPenResty 提供了操作 Redis 的模块，我们只要引入该模块就能直接使用：</p>\n<p>在 common.lua 文件中进行编写</p>\n<ul>\n<li>引入 Redis 模块，并初始化 Redis 对象</li>\n</ul>\n<p>为什么引入模块中文件名中间需要一个 . ？</p>\n<p>解释：因为我们上述文章中都是引入的 lualib 目录下的模块因为直接在 lua 目录所以可以直接写文件名就行了。但是这个 redis 可不再 lualib 根目录中而是在 resty 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201533407.png\" alt=\"image-20231020153335950\" /></p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 引入 redis 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resty.redis'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 初始化 redis 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> red <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 设置 redis 超时时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>red<span class=\"token punctuation\">:</span><span class=\"token function\">set_timeouts</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>封装函数，用来释放 Redis 链接，其实是放入连接池</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 关闭 redis 连接的工具方法，其实是放入连接池</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">close_redis</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">local</span> pool_max_idle_time <span class=\"token operator\">=</span> <span class=\"token number\">10000</span> <span class=\"token comment\">-- 连接的空闲时间，单位是毫秒</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> pool_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">-- 连接池大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">set_keepalive</span><span class=\"token punctuation\">(</span>pool_max_idle_time<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"放入redis连接池失败: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>OPenResty 提供了操作 Redis 的模块，我们只要引入该模块就能直接使用：</p>\n<ul>\n<li>封装函数，从 Redis 读数据并返回：</li>\n</ul>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查询 redis 的方法 ip 和 port 是 redis 地址，key 是查询的 key</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_redis</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">-- 获取一个连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"连接redis失败 : \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">-- 查询 redis</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">local</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">-- 查询失败处理</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询Redis失败: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\", key = \"</span> <span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">-- 得到的数据为空处理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> resp <span class=\"token operator\">==</span> ngx<span class=\"token punctuation\">.</span>null <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        resp <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询Redis数据为空, key = \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">close_redis</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> resp</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>完整的代码编写：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 引入 redis 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resty.redis'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 初始化 redis 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> red <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">:</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 设置 redis 超时时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>red<span class=\"token punctuation\">:</span><span class=\"token function\">set_timeouts</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 关闭 redis 连接的工具方法，其实是放入连接池</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">close_redis</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">local</span> pool_max_idle_time <span class=\"token operator\">=</span> <span class=\"token number\">10000</span> <span class=\"token comment\">-- 连接的空闲时间，单位是毫秒</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">local</span> pool_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">-- 连接池大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">set_keepalive</span><span class=\"token punctuation\">(</span>pool_max_idle_time<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"放入redis连接池失败: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">-- 查询 redis 的方法 ip 和 port 是 redis 地址，key 是查询的 key</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_redis</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">-- 获取一个连接</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">local</span> ok<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> ok <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"连接redis失败 : \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">-- 查询 redis</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">local</span> resp<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> red<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">-- 查询失败处理</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询Redis失败: \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span> <span class=\"token string\">\", key = \"</span> <span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">-- 得到的数据为空处理</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> resp <span class=\"token operator\">==</span> ngx<span class=\"token punctuation\">.</span>null <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        resp <span class=\"token operator\">=</span> <span class=\"token keyword\">nil</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"查询Redis数据为空, key = \"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">close_redis</span><span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> resp</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">-- 封装函数，发送 http 请求，并解析响应</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">local</span> resp <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">capture</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        method <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>HTTP_GET<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        args <span class=\"token operator\">=</span> params<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">-- 记录错误信息，返回 404</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ngx<span class=\"token punctuation\">.</span>ERR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http 查询失败了~, path: \"</span><span class=\"token punctuation\">,</span> path <span class=\"token punctuation\">,</span> <span class=\"token string\">\", args: \"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        ngx<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">.</span>body</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">-- 将方法导出</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">local</span> _M <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    read_http <span class=\"token operator\">=</span> read_http<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    read_redis <span class=\"token operator\">=</span> read_redis</pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">return</span> _M</pre></td></tr></table></figure><p>在 item.lua 文件中进行导入 redis 工具函数</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> read_redis <span class=\"token operator\">=</span> common<span class=\"token punctuation\">.</span>read_redis</pre></td></tr></table></figure><p>由于添加了 redis 缓存那么之前的查询商品信息和库存的函数就需要修改了。</p>\n<p>但是需要修改两个太麻烦了所以对其进行封装函数：</p>\n<p>需求：</p>\n<p>1、修改 item.lua，封装一个函数 read_data，实现先查询 redis，如果未命中，再查询 tomcat</p>\n<p>2、修改 item.lua，查询商品和库存时都调用 read_data 这个函数</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 封装查询函数，先查询 redis，如果未命中再查询 tomcat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">-- 查询 redis</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">local</span> resp <span class=\"token operator\">=</span> <span class=\"token function\">read_redis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.249.128\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">-- 判断 redis 是否命中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">-- redis 查询失败，再查询 tomcat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    resp <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> resp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>编写完封装函数后将原来的请求函数进行替换</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查询商品信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> itemJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:id:\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/item/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 查询库存信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> stockJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:stock:id:\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/item/stock/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>item.lua 文件的完整代码：</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 导入 common 函数库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'common'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">local</span> read_http <span class=\"token operator\">=</span> common<span class=\"token punctuation\">.</span>read_http</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">local</span> read_redis <span class=\"token operator\">=</span> common<span class=\"token punctuation\">.</span>read_redis</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 导入 cjson 库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">local</span> cjson <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cjson'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 封装查询函数，先查询 redis，如果未命中再查询 tomcat</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">local</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">-- 查询 redis</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">local</span> resp <span class=\"token operator\">=</span> <span class=\"token function\">read_redis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.249.128\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">-- 判断 redis 是否命中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> resp <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">-- redis 查询失败，再查询 tomcat</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ngx<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis查询失败,尝试查询http, key :\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    resp <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> resp</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">-- 获取路径参数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">local</span> id <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">-- 查询商品信息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">local</span> itemJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:id:\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/item/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">-- 查询库存信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">local</span> stockJSON <span class=\"token operator\">=</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:stock:id:\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/item/stock/\"</span> <span class=\"token operator\">..</span> id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">-- JSON 转化为 lua 的 table</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">local</span> item <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>itemJSON<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">local</span> sto <span class=\"token operator\">=</span> cjson<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>stockJSON<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">-- 组合数据</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>item<span class=\"token punctuation\">.</span>stock <span class=\"token operator\">=</span> sto<span class=\"token punctuation\">.</span>stock</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>item<span class=\"token punctuation\">.</span>sold <span class=\"token operator\">=</span> sto<span class=\"token punctuation\">.</span>sold</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">-- 把 item 序列化为 json 返回结果</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>ngx<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span>cjson<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>重启虚拟机中的 nginx</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># nginx -s reload</span></pre></td></tr></table></figure><p>访问 uri 进行测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDI=\">http://localhost/item.html?id=10002</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201603830.png\" alt=\"image-20231020160328617\" /></p>\n<p>查看 idea 控制台</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201603637.png\" alt=\"image-20231020160349587\" /></p>\n<p>将控制台信息清空后再次访问 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDI=\">http://localhost/item.html?id=10002</span></p>\n<p>控制台情况</p>\n<p>说明数据已经被缓存了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201604800.png\" alt=\"image-20231020160432732\" /></p>\n<p>我们把两个服务器全关了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201605790.png\" alt=\"image-20231020160510420\" /></p>\n<p>再访问一下 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDI=\">http://localhost/item.html?id=10002</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310201634990.png\" alt=\"image-20231020163445555\" /></p>\n<p>可以看到如果没有启动 Tomcat 也没事儿因为先去看了下 Redis 发现有相关数据直接拿来就不找服务器了。</p>\n<h2 id=\"66-nginx本地缓存\"><a class=\"anchor\" href=\"#66-nginx本地缓存\">#</a> 6.6、Nginx 本地缓存🌳</h2>\n<p>OPenResty 为 Nginx 提供了 shard dict 的功能，可以在 Nginx 的多个 worker 之间共享数据，实现缓存功能。</p>\n<p>1、开启共享字典，在 nginx.conf 的 http 下添加配置</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 共享字典，也就是本地缓存，名称叫做：item_cache，大小 150m</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">lua_shared_dict</span> item_cache <span class=\"token number\">150m</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、操作共享字典</p>\n<p>在 item.lua 文件中导入</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 导入共享词典，本地缓存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">local</span> item_cache <span class=\"token operator\">=</span> ngx<span class=\"token punctuation\">.</span>shared<span class=\"token punctuation\">.</span>item_cache</pre></td></tr></table></figure><h3 id=\"661-案例在查询商品时优先查询openresty的本地缓存\"><a class=\"anchor\" href=\"#661-案例在查询商品时优先查询openresty的本地缓存\">#</a> 6.6.1、案例，在查询商品时，优先查询 OPenResty 的本地缓存🌲</h3>\n<p>需求：</p>\n<p>1、修改 item.lua 中的 read_data 函数，优先查询本地缓存，未命中时在查询 Redis，Tomcat</p>\n<p>2、查询 Redis 或 Tomcat 成功后，将数据写入本地缓存，并设置有效期</p>\n<p>3、商品基本信息，有效期 30 分钟</p>\n<p>4、库存信息，有效期 1 分钟</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 封装查询函数，先查询 redis，如果未命中再查询 tomcat</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">read_data</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> expire<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">-- 查询本地缓存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">local</span> val <span class=\"token operator\">=</span> item_cache<span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> val <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">-- 查询 redis</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    val <span class=\"token operator\">=</span> <span class=\"token function\">read_redis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.249.128\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">-- 判断查询结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> val <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">-- redis 查询失败，查询 tomcat</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        val <span class=\"token operator\">=</span> <span class=\"token function\">read_http</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">-- 查询成功，把数据写入本地缓存</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  item_cache<span class=\"token punctuation\">:</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> expire<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">-- 返回数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><p>测试</p>\n<p>切换到 nginx 目录下来监控 error.log 文件的打印情况</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># nginx -s reload</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># pwd</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/usr/local/openresty/nginx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -f logs/error.log</span></pre></td></tr></table></figure><h1 id=\"七-缓存同步\"><a class=\"anchor\" href=\"#七-缓存同步\">#</a> 七、缓存同步🎄</h1>\n<ul>\n<li>数据同步策略</li>\n<li>安装 Canal</li>\n<li>监听 Canal</li>\n</ul>\n<h2 id=\"71-数据同步策略\"><a class=\"anchor\" href=\"#71-数据同步策略\">#</a> 7.1、数据同步策略🌳</h2>\n<p>缓存数据同步的常见方式有三种：</p>\n<p><mark>1、设置有效期</mark>：给缓存设置有效期，到期后自动删除。再次查询时更新</p>\n<p>1.1、优势：简单，方便</p>\n<p>1.2、缺点：时效性差，缓存过期之前可能不一致</p>\n<p>1.3、场景：更新频率较低，时效性要求低的业务</p>\n<p><mark>2、同步双写</mark>：在修改数据库的同时，直接修改缓存</p>\n<p>2.1、优势：时效性强，缓存与数据库强一致</p>\n<p>2.2、缺点：有代码侵入，耦合度高</p>\n<p>2.3、场景：对一致性，时效性要求较高的缓存数据</p>\n<p><mark>3、异步通知</mark>：修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据</p>\n<p>3.1、优势：低耦合，可以同时通知多个缓存服务</p>\n<p>3.2、缺点：时效性一般，可能存在终极爱你不一致状态</p>\n<p>3.3、场景：时效性要求一般，有多个服务需要同步</p>\n<h3 id=\"711-缓存同步策略\"><a class=\"anchor\" href=\"#711-缓存同步策略\">#</a> 7.1.1、缓存同步策略🌲</h3>\n<p>异步通知可以使用基于 MQ 的异步通知</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310210915149.png\" alt=\"image-20231021091552370\" /></p>\n<p>但是基于 MQ 还是要修改里面的代码发送消息，而下面要讲的是基于 Canal 的异步通知</p>\n<p>基于 Canal 的异步通知</p>\n<p>canal 可以去监听数据库的变化</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310210917386.png\" alt=\"image-20231021091750935\" /></p>\n<h3 id=\"712-初始canal\"><a class=\"anchor\" href=\"#712-初始canal\">#</a> 7.1.2、初始 Canal🌲</h3>\n<p>Canal 意译为 水道 / 管道 / 沟渠，Canal 是阿里巴巴旗下的一款开源项目，基于 Java 开发。基于数据库增量日志解析，提供增量数据订阅 &amp; 消费。GiHub 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvY2FuYWw=\">https://github.com/alibaba/canal</span></p>\n<p>Canal 是基于 mysql 的主从同步来实现的，MySQL 主从同步的原理如下：</p>\n<p>master 就是 mysql 的主节点，slave 就是 mysql 的从节点。主从数据是要做同步的，那它怎么做到的呢？首先 mysql 的主节点在做增删改查时就回去记录日志到 binary.log 文件中这个文件称为二进制日志文件。其中记录的就是 binary log events，里面记录的就是业务 sql。slave 会开启一个线程不断的来读取这个日志文件把这个文件读过来放到一个 relay log 文件中。这样主节点做了哪些 sql 从节点 也做哪些 sql</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310210922728.png\" alt=\"image-20231021092228657\" /></p>\n<p>而 Canal 就是把自己伪装成 MySQL 的一个 Slave 节点，从而监听 master 的 binary log 变化。再把得到的变化信息通知给 Canal 的客户端，进而完成对其它数据库的同步。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310210929872.png\" alt=\"image-20231021092859461\" /></p>\n<h3 id=\"713-canal安装\"><a class=\"anchor\" href=\"#713-canal安装\">#</a> 7.1.3、Canal 安装🌲</h3>\n<p>查看文章：<a href=\"./Canal/%E5%AE%89%E8%A3%85Canal.md\">安装 Canal</a>.</p>\n<h3 id=\"714-canal客户端\"><a class=\"anchor\" href=\"#714-canal客户端\">#</a> 7.1.4、Canal 客户端🌲</h3>\n<p>Canal 提供了各种语言的客户端，当 Canal 监听到 binlog 变化时，会通知 Canal 的客户端。不过这里我们会使用 Github 上的第三方开源的 canal-stater。地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05vcm1hbkd5bGxlbmhhYWwvY2FuYWwtY2xpZW50\">https://github.com/NormanGyllenhaal/canal-client</span></p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>top.javatool<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>canal-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.1-RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>编写配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">canal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> dkx1 <span class=\"token comment\"># canal 实例名称，要跟 canal-server 运行时设置的 destiation 一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> 192.168.249.128<span class=\"token punctuation\">:</span><span class=\"token number\">11111</span> <span class=\"token comment\"># canal 地址</span></pre></td></tr></table></figure><p>编写监听器，监听 Canal 消息：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 指定要监听的表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@CanalTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_item\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>                                    <span class=\"token comment\">// 指定表关联的实体类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EntryHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 下面三个重写方法是，监听到数据库的增删改的消息的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 写数据到 redis</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 写数据到 jvm 进程缓存</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">EntryHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> before<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Item</span> after<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 写数据到 redis</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 写数据到 jvm 进程缓存</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">EntryHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 写数据到 redis</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 写数据到 jvm 进程缓存</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">EntryHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Canal 推送给 canal-client 的是被修改的这一行数据 (row) ，而我们引入的 canal-client 则会帮我们把行数据封装到 item 实体类中。这个过程中需要知道数据库与实体的映射关系，要用到 JPA 的几个注解：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@TableName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_item\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableId</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">IdType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">AUTO</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 标记表中的 id 字段</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">// 商品 id</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> 其它字段 省略</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> updateTime<span class=\"token punctuation\">;</span><span class=\"token comment\">// 更新时间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// @Transient 标记不属于表中的字段  忽略</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transient</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> stock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@TableField</span><span class=\"token punctuation\">(</span>exist <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transient</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> sold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写 redis 的缓存类 ，添加两个函数，一个新增或更新，一个是删除</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveItem</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">MAPPER</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:id:\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteItemById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item:id:\"</span> <span class=\"token operator\">+</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义完 redis 的缓存类里面的函数后再回到编写监听器的类里面编写代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@CanalTable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tb_item\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">EntryHandler</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisHandler</span> redisHandler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Cache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> cache<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 写数据到 jvm 进程缓存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 写数据到 redis</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        redisHandler<span class=\"token punctuation\">.</span><span class=\"token function\">saveItem</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> before<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Item</span> after<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 写数据到 jvm 进程缓存</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>after<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 写数据到 redis</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        redisHandler<span class=\"token punctuation\">.</span><span class=\"token function\">saveItem</span><span class=\"token punctuation\">(</span>after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">EntryHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 写数据到 jvm 进程缓存</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        cache<span class=\"token punctuation\">.</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 写数据到 redis</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        redisHandler<span class=\"token punctuation\">.</span><span class=\"token function\">deleteItemById</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">EntryHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动服务查看 idea 打印信息：</p>\n<pre><code>meters: 10005(Long)\n14:50:32:387 DEBUG 4956 --- [nio-8081-exec-7] c.h.i.mapper.ItemStockMapper.selectById  : &lt;==      Total: 1\n14:50:32:472  INFO 4956 --- [l-client-thread] t.j.c.client.client.AbstractCanalClient  : 获取消息 Message[id=-1,entries=[],raw=false,rawEntries=[]]\n14:50:34:474  INFO 4956 --- [l-client-thread] t.j.c.client.client.AbstractCanalClient  : 获取消息 Message[id=-1,entries=[],raw=false,rawEntries=[]]\n14:50:36:477  INFO 4956 --- [l-client-thread] t.j.c.client.client.AbstractCanalClient  : 获取消息 Message[id=-1,entries=[],raw=false,rawEntries=[]]\n14:50:38:478  INFO 4956 --- [l-client-thread] t.j.c.client.client.AbstractCanalClient  : 获取消息 Message[id=-1,entries=[],raw=false,rawEntries=[]]\n14:50:40:472  INFO 4956 --- [l-client-thread] t.j.c.client.client.AbstractCanalClient  : 获取消息 Message[id=-1,entries=[],raw=false,rawEntries=[]]\n</code></pre>\n<p>表示 canal 与 java 成功的连接到了</p>\n<p>那么测试一下数据同步打开 8081 端口的页面</p>\n<p>比如说修改 10001 这个商品的数据：</p>\n<p>原来的数据如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211452116.png\" alt=\"image-20231021145237319\" /></p>\n<p>修改后的数据如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211453292.png\" alt=\"image-20231021145302067\" /></p>\n<p>点击确定</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211453164.png\" alt=\"image-20231021145357351\" /></p>\n<p>再查看 idea 的控制台信息：</p>\n<p>可以看到打印了一堆日志信息</p>\n<pre><code>  version: 1\n  logfileName: &quot;mysql-bin.000006&quot;\n  logfileOffset: 1173\n  serverId: 1000\n  serverenCode: &quot;UTF-8&quot;\n  executeTime: 1697871191000\n  sourceType: MYSQL\n  schemaName: &quot;&quot;\n  tableName: &quot;&quot;\n  eventLength: 91\n&#125;\nentryType: TRANSACTIONBEGIN\nstoreValue: &quot; H&quot;\n, header &#123;\n  version: 1\n  logfileName: &quot;mysql-bin.000006&quot;\n  logfileOffset: 1344\n  serverId: 1000\n  serverenCode: &quot;UTF-8&quot;\n  executeTime: 1697871191000\n  sourceType: MYSQL\n  schemaName: &quot;dkx&quot;\n  tableName: &quot;tb_item&quot;\n  eventLength: 620\n  eventType: UPDATE\n  props &#123;\n    key: &quot;rowsCount&quot;\n    value: &quot;1&quot;\n  &#125;\n&#125;\nentryType: ROWDATA\nstoreValue: &quot;\\b_\\020\\002P\\000b\\324\\n\\n&amp;\\b\\000\\020\\373\\377\\377\\377\\377\\377\\377\\377\\377\\001\\032\\002id \\001(\\0000\\000B\\00510001R\\006bigint\\nd\\b\\001\\020\\f\\032\\005title \\000(\\0000\\000BCRIMOWA 21\\345\\257\\270\\346\\211\\230\\350\\277\\220\\347\\256\\261\\346\\213\\211\\346\\235\\206\\347\\256\\261 SALSA AIR\\347\\263\\273\\345\\210\\227\\346\\236\\234\\347\\273\\277\\350\\211\\262 820.70.36.4R\\fvarchar(264)\\n)\\b\\002\\020\\f\\032\\004name \\000(\\0000\\000B\\tSALSA AIRR\\fvarchar(128)\\n)\\b\\003\\020\\373\\377\\377\\377\\377\\377\\377\\377\\377\\001\\032\\005price \\000(\\0000\\000B\\00516900R\\006bigint\\n\\226\\001\\b\\004\\020\\f\\032\\005image \\000(\\0000\\000Buhttps://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webpR\\fvarchar(200)\\n-\\b\\005\\020\\f\\032\\bcategory \\000(\\0000\\000B\\t\\346\\213\\211\\346\\235\\206\\347\\256\\261R\\fvarchar(200)\\n\\'\\b\\006\\020\\f\\032\\005brand \\000(\\0000\\000B\\006RIMOWAR\\fvarchar(100)\\nG\\b\\a\\020\\f\\032\\004spec \\000(\\0000\\000B\\'&#123;\\&quot;\\351\\242\\234\\350\\211\\262\\&quot;: \\&quot;\\347\\272\\242\\350\\211\\262\\&quot;, \\&quot;\\345\\260\\272\\347\\240\\201\\&quot;: \\&quot;26\\345\\257\\270\\&quot;&#125;R\\fvarchar(200)\\n\\032\\b\\b\\020\\004\\032\\006status \\000(\\0000\\000B\\0011R\\003int\\n6\\b\\t\\020]\\032\\vcreate_time \\000(\\0000\\000B\\0232019-05-01 00:00:00R\\bdatetime\\n6\\b\\n\\020]\\032\\vupdate_time \\000(\\0000\\000B\\0232019-05-01 00:00:00R\\bdatetime\\022&amp;\\b\\000\\020\\373\\377\\377\\377\\377\\377\\377\\377\\377\\001\\032\\002id \\001(\\0000\\000B\\00510001R\\006bigint\\022d\\b\\001\\020\\f\\032\\005title \\000(\\0000\\000BCRIMOWA 21\\345\\257\\270\\346\\211\\230\\350\\277\\220\\347\\256\\261\\346\\213\\211\\346\\235\\206\\347\\256\\261 SALSA AIR\\347\\263\\273\\345\\210\\227\\346\\236\\234\\347\\273\\277\\350\\211\\262 820.70.36.4R\\fvarchar(264)\\022)\\b\\002\\020\\f\\032\\004name \\000(\\0000\\000B\\tSALSA AIRR\\fvarchar(128)\\022)\\b\\003\\020\\373\\377\\377\\377\\377\\377\\377\\377\\377\\001\\032\\005price \\000(\\0010\\000B\\00528900R\\006bigint\\022\\226\\001\\b\\004\\020\\f\\032\\005image \\000(\\0000\\000Buhttps://m.360buyimg.com/mobilecms/s720x720_jfs/t6934/364/1195375010/84676/e9f2c55f/597ece38N0ddcbc77.jpg!q70.jpg.webpR\\fvarchar(200)\\022-\\b\\005\\020\\f\\032\\bcategory \\000(\\0000\\000B\\t\\346\\213\\211\\346\\235\\206\\347\\256\\261R\\fvarchar(200)\\022\\'\\b\\006\\020\\f\\032\\005brand \\000(\\0000\\000B\\006RIMOWAR\\fvarchar(100)\\022G\\b\\a\\020\\f\\032\\004spec \\000(\\0010\\000B\\'&#123;\\&quot;\\351\\242\\234\\350\\211\\262\\&quot;: \\&quot;\\347\\272\\242\\350\\211\\262\\&quot;, \\&quot;\\345\\260\\272\\347\\240\\201\\&quot;: \\&quot;33\\345\\257\\270\\&quot;&#125;R\\fvarchar(200)\\022\\032\\b\\b\\020\\004\\032\\006status \\000(\\0000\\000B\\0011R\\003int\\0226\\b\\t\\020]\\032\\vcreate_time \\000(\\0000\\000B\\0232019-05-01 00:00:00R\\bdatetime\\0226\\b\\n\\020]\\032\\vupdate_time \\000(\\0000\\000B\\0232019-05-01 00:00:00R\\bdatetime&quot;\n],raw=false,rawEntries=[]]\n</code></pre>\n<p>我们再去访问商品数据的展示页面查看数据是否被修改了</p>\n<p>访问 uri：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9pdGVtLmh0bWw/aWQ9MTAwMDEjaW5kZXg=\">http://localhost/item.html?id=10001#index</span></p>\n<p>可以看到这个页面的数据也被修改了说明缓存同步成功了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211504526.png\" alt=\"image-20231021150447258\" /></p>\n<h1 id=\"八-总结多级缓存架构\"><a class=\"anchor\" href=\"#八-总结多级缓存架构\">#</a> 八、总结多级缓存架构🎄</h1>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211510207.png\" alt=\"image-20231021151019996\" /></p>\n<p>有一个页面叫 item.html 放到了 windows 的 nginx 服务器上。它的 主要作用就是一个静态资源服务器和反向代理服务器。当用户通过浏览器来请求它时它就可以把页面返回给用户而浏览器在渲染时发现缺少数据就会发送 ajax 请求来查询数据。查询地址就是 item/10001 这时的 nginx 反向代理服务器不回去处理业务，只是做反向代理，所以它会把请求代理给 OPenResty 集群，想要去查询数据又有先去本地如果有则直接返回，本地共享词典数据只能在当前 nginx 中使用。如果我们部署成 OPenResty 集群它们之间的内存是不共享的，所以这里也可以采用通过 id 计算 hash 来路由指定集群服务器的方式这样就会保证 OPenResty 缓存一直生效。本地缓存如果未命中则去查询 redis 缓存，命中则返回，未命中则查询 tomcat。查询 tomcat 也是集群也做了 jvm 进程缓存，tomcat 服务器之间是不共享内存的所以还需要使用通过 id 计算 hash 值的方式来路由指定 tomcat 服务器</p>\n<p>那么多级缓存完成后就会面临一个问题就是数据同步的问题。</p>\n<p>mysql 的数据进行了修改 redis 和 tomcat 进程缓存和 nginx 缓存都需要做同步</p>\n<p>在 OPenResty 中使用的超时同步，设置过期时间过期自动删除就变成新数据了，这种方式适合于更新频率较低的数据</p>\n<p>而 redis 与 mysql 之间的数据同步采用了 canal 监听 mysql 的方式</p>\n<h1 id=\"九-服务异步通讯\"><a class=\"anchor\" href=\"#九-服务异步通讯\">#</a> 九、服务异步通讯🎄</h1>\n<p>高级篇 - rabbitmq 的高级特性</p>\n<p>我们已经学习过它的基本用法了，学习了如何利用 springamqp 收和发消息，但是收和发消息只是 mq 的最基本的功能。因为在收和发消息的过程当中还有很多问题需要思考需要去解决这时就需要使用 mq 的高级特性去解决了</p>\n<p>MQ 的一些常见问题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211532979.png\" alt=\"image-20231021153238893\" /></p>\n<p>学习内容：</p>\n<ul>\n<li>消息可靠性</li>\n<li>死信交换机</li>\n<li>惰性队列</li>\n<li>MQ 集群</li>\n</ul>\n<h2 id=\"91-消息可靠性问题\"><a class=\"anchor\" href=\"#91-消息可靠性问题\">#</a> 9.1、消息可靠性问题🌳</h2>\n<p>消息从生产者发送到 exchange，再到 queue，再到消费者，有哪些导致消息丢失的可能性？</p>\n<p>先来温习一下 mq 的整个流程</p>\n<p>消息的发送者称为 publisher，它把消息投递给交换机 exchange，而交换机会根据 routingkey 将消息路由到队列 queue 中，而队列再把消息投递给消费者 consumer</p>\n<p>在整个这样的流程当中消息可能会发生丢失</p>\n<ul>\n<li>发送时丢失：\n<ul>\n<li>生产者发送的消息未送达 exchange</li>\n<li>消息到达 exchange 后未达到 queue</li>\n</ul>\n</li>\n<li>MQ 宕机，queue 将消息丢失</li>\n<li>consumer 接收到消息后未消息就宕机</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211536652.png\" alt=\"image-20231021153606449\" /></p>\n<p>针对上述问题我们来学习如下内容：</p>\n<ul>\n<li>生产者消息确认</li>\n<li>消息持久化</li>\n<li>消费者消息确认</li>\n<li>消费失败重试机制</li>\n</ul>\n<h3 id=\"911-生产者确认机制\"><a class=\"anchor\" href=\"#911-生产者确认机制\">#</a> 9.1.1、生产者确认机制🌲</h3>\n<p>RabbitMQ 提供了 publisher confirm 机制来避免消息发送到 MQ 过程中丢失。消息发送到 MQ 以后，会返回一个结果给发送者，表示消息是否处理成功。结果有两种请求：</p>\n<ul>\n<li>publisher-confirm，发送者确认\n<ul>\n<li>消息成功投递到交换机，返回 ack</li>\n<li>消息未投递到交换机，返回 nack</li>\n</ul>\n</li>\n<li>publisher-return，发送者回执\n<ul>\n<li>消息投递到交换机了，但是没有路由到队列。返回 ACK，及路由失败原因。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211546864.png\" alt=\"image-20231021154614145\" /></p>\n<blockquote>\n<p>&lt;font color='red'&gt; 注意 &lt;/font&gt;：</p>\n<p>确认机制发送消息时，需要给每个消息设置一个全局唯一 id，以区分不同消息，避免 ack 冲突</p>\n</blockquote>\n<p>引入 demo 工程</p>\n<p>首先，需要引入项目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZG91a2FpeGluL3R5cG9yYS5naXQ=\">https://gitee.com/doukaixin/typora.git</span></p>\n<p>拉取分支：mq-advanced-demo 代码演示</p>\n<h2 id=\"92-springamqp实现生产者确认\"><a class=\"anchor\" href=\"#92-springamqp实现生产者确认\">#</a> 9.2、SpringAMQP 实现生产者确认🌳</h2>\n<p>1、在 publisher 这个微服务的 applicaiton.yml 中添加配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.249.128 <span class=\"token comment\"># rabbitMQ 的 ip 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span> <span class=\"token comment\"># 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">#------------------------------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">publisher-confirm-type</span><span class=\"token punctuation\">:</span> correlated</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">publisher-returns</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">mandatory</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>配置说明：</p>\n<ul>\n<li>publishe-confirm-type：开启 publisher-confirm，这里支持两种类型：\n<ul>\n<li>simple：同步等待 confirm 结果，直到超时</li>\n<li>correlated：异步回调，定义 ConfirmCallback，MQ 返回结果时会回调这个 ConfirmCallback</li>\n</ul>\n</li>\n<li>publish-returns：开启 publish-return 功能，同样是基于 callback 机制，不过是定义 ReturnCallback</li>\n<li>template.mandatory：定义消息路由失败时的策略。true，则调用 ReturnCallback; false：则直接丢弃消息</li>\n</ul>\n<p>2、每个 RabbitTemplate 只能配置一个 ReturnCallback，因此需要在项目启动过程中配置：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//                         实现 Spring 工厂的通知</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 重写 Bean 工厂准备好后调用的函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 取出 RabbitTempalte 的 Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RabbitTemplate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 配置 ReturnCallback</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setReturnCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 记录日志 &#123;&#125; 为占位符</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送到队列失败，响应码：&#123;&#125;，失败原因：&#123;&#125;，\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token string\">\"交换机：&#123;&#125;，路由key：&#123;&#125;，消息：&#123;&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 如果有需要的话，重发消息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>returncallback 是 exchange 路由不到 queue 时，才触发的回调</p>\n<p>confirmcallback 是在消息达不到交换机时，才回调</p>\n<p>3、发送消息，指定消息 ID，消息 ConfirmCallback</p>\n<p>先使用 test 代码进行一下测试</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211718275.png\" alt=\"image-20231021171827222\" /></p>\n<p>发送消息的代码中，有 交换机，但是 Routingkey 不存在，所以我们需要去创建一下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211719943.png\" alt=\"image-20231021171807188\" /></p>\n<p>点击 bind</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211719018.png\" alt=\"image-20231021171942977\" /></p>\n<p>但是！在发送消息的测试代码中以前是那样写的，但是现在要做消息确认机制所以就要多传递一个参数了</p>\n<p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringAmqpTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSendMessage2SimpleQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.test\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 1. 准备消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, spring amqp!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 1.1. 准备 CorrelationData</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 1.2. 消息 ID</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">CorrelationData</span> correlationData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorrelationData</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 1.3. 准备 ConfirmCallback</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 成功的回调函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        correlationData<span class=\"token punctuation\">.</span><span class=\"token function\">getFuture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addCallback</span><span class=\"token punctuation\">(</span>confirm <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 判断结果</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>confirm<span class=\"token punctuation\">.</span><span class=\"token function\">isAck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// ACK</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息成功投递到交换机 ！消息ID: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> correlationData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// NACK</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息投递到交换机失败了 ！ 消息ID: &#123;&#125;\"</span><span class=\"token punctuation\">,</span> correlationData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 重发消息</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 失败的回调函数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> throwable <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 记录日志</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送失败 ! \"</span><span class=\"token punctuation\">,</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 重发消息</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"amq.topic\"</span><span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span>correlationData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行这个测试代码</p>\n<p>idea 控制台打印信息如下：</p>\n<pre><code>消息成功投递到交换机 ！消息ID: a4abf2f4-85f5-4fdc-bb73-7be9ab91b6bd\n</code></pre>\n<p>查看消息队列是否接受到了一个消息并查看内容</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211737447.png\" alt=\"image-20231021173713091\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211737796.png\" alt=\"image-20231021173730615\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>SpringAMQP 中处理消息确认的几种情况：</p>\n<ul>\n<li>publisher-confirm\n<ul>\n<li>消息成功发送到 exchange，返回 ack</li>\n<li>消息发送失败，没有到达交换机，返回 nack</li>\n<li>消息发送过程中出现异常，没有收到回执</li>\n</ul>\n</li>\n<li>消息成功发送到 exchange，但没有路由到 queue\n<ul>\n<li>调用 ReturnCallback</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>以上就是生产确认的机制了。通过这些机制就能够确认消息 能够到达消息队列</p>\n<h2 id=\"93-消息持久化\"><a class=\"anchor\" href=\"#93-消息持久化\">#</a> 9.3、消息持久化🌳</h2>\n<p>由于 RabbitMQ 默认是内存存储，如果此时 mq 发生了宕机，消息也是有可能丢失的。要想让消息真正安全，我们必须确保这个消息能够做到持久化。也就是把它写入到磁盘中</p>\n<p>在消费者的 config 类中进行配置</p>\n<p>1、交换机持久化：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectExchange</span> <span class=\"token function\">simpleExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 三个参数：交换机名称，是否持久化，当没有 queue 与其绑定时是否自动删除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple.direct\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2、队列持久化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">simpleQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 使用 QueueBuilder 构建队列，durable 就是持久化的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token class-name\">QueueBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">durable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动服务进行测试，结果如下：</p>\n<p>队列</p>\n<p>其中的 D 就是 durable 就是持久化的意思</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211756121.png\" alt=\"image-20231021175655932\" /></p>\n<p>交换机</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211759449.png\" alt=\"image-20231021175939976\" /></p>\n<p>关闭所有服务器</p>\n<p>发送一下消息进行测试一下消息是否也能持久化</p>\n<p>我们向 simple.queue 中发送一条消息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211831349.png\" alt=\"image-20231021183122204\" /></p>\n<p>此时队列中就会存留一条消息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211833155.png\" alt=\"image-20231021183339726\" /></p>\n<p>那么现在我们队列里面有消息了，并且队列已经持久化了，我们再去重启 mq 来测试一下</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker restart mq</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mq</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>回到页面中进行查看</p>\n<p>可以看到消息 没了！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211835842.png\" alt=\"image-20231021183522398\" /></p>\n<p>这就证明消息没有持久化，那我们的目的是让消息也能持久啊，那怎么办？</p>\n<p>3、消息持久化，SpringAMQP 中的消息默认是持久的，可以通过 MessageProperties 中的 DeliveryMode 来指定：</p>\n<p>在测试代码中进行编写：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDurableMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 准备消息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, spring\"</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                             <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 消息体</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setDeliveryMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDeliveryMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 持久化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动成功后查看队列情况：</p>\n<p>可以看到队列中就有了一条消息了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211842026.png\" alt=\"image-20231021184255870\" /></p>\n<p>在队列的详情页面里面的 get message 中可以看到 delivery_mode：2 表示消息持久化</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211844251.png\" alt=\"image-20231021184420061\" /></p>\n<p>重启 mq 测试消息是否真的就是持久化了：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker restart mq</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mq</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost nginx<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>访问 mq 队里情况：</p>\n<p>可以看到这条消息还存在着</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310211845144.png\" alt=\"image-20231021184553048\" /></p>\n<h2 id=\"94-消费者确认\"><a class=\"anchor\" href=\"#94-消费者确认\">#</a> 9.4、消费者确认🌳</h2>\n<p>RabbitMQ 支持消费者确认机制，即：消费者处理消息后可以向 MQ 发送 ack 回执，MQ 收到 ack 回执后才会删除消息。而 SpringAMQP 则允许配置三种确认模式：</p>\n<ul>\n<li>manual：手动 ack，需要在业务代码结束后，调用 api 发送 ack</li>\n<li>auto：自动 ack，由 Spring 检测 listener 代码是否出现异常，没有异常则返回 ack；抛出异常则返回 nack</li>\n<li>none：关闭 ack，MQ 假定消费者获取消息后会成功处理，因此消息投递后立即被删除</li>\n</ul>\n<p>配置方式是修改 application.yml 文件，添加下面配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.249.128 <span class=\"token comment\"># rabbitMQ 的 ip 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span> <span class=\"token comment\"># 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">prefetch</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">acknowledge-mode</span><span class=\"token punctuation\">:</span> auto <span class=\"token comment\"># 自动 ack</span></pre></td></tr></table></figure><p>先看下 mq 的队列情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310212025971.png\" alt=\"image-20231021202521333\" /></p>\n<p>队列中有一条消息</p>\n<p>我们在 consumer 的消费代码编写一个异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringRabbitListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"simple.queue\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenSimpleQueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">*</span>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到simple.queue的消息：【\"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者处理消息成功 ！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置完成后启动 consumer 服务进行测试</p>\n<p>此时程序走到 debug 处，没有执行完毕我们看下现在的队列情况</p>\n<p>可以看到它没有删除这条消息而是标记为了 Unacked</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310212027453.png\" alt=\"image-20231021202727506\" /></p>\n<p>如果程序不进行一直等待则会变回原来的状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310212029138.png\" alt=\"image-20231021202909987\" /></p>\n<p>java 代码程序往下走就会抛出异常，但是它会进行重新投递</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310212048599.gif\" alt=\"test\" /></p>\n<p>但是我们并不希望它就这样失败了就无脑重试那怎么办呢？看下面的内容。</p>\n<h2 id=\"95-失败重试机制\"><a class=\"anchor\" href=\"#95-失败重试机制\">#</a> 9.5、失败重试机制🌳</h2>\n<p>当消费者出现异常后，消费会不断 requue (重新入队) 到队列，再重新发送给消费者，然后再次异常，再次 requeue，无限循环，导致 mq 的消息处理飙升，带来不必要的压力：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310212051338.png\" alt=\"image-20231021205137135\" /></p>\n<p>我们可以利用 Spring 的 retry 机制，在消费者出现异常时利用本地重试，而不是无限制的 requeue 到 mq 队列。</p>\n<p>当然本地重试也不是无限让它一直重试</p>\n<p>在消费者服务中进行配置：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.249.128 <span class=\"token comment\"># rabbitMQ 的 ip 地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span> <span class=\"token comment\"># 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">prefetch</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">acknowledge-mode</span><span class=\"token punctuation\">:</span> auto</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">retry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 开启消费者失败重试</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token key atrule\">initial-interval</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span> <span class=\"token comment\"># 初始的失败等待时长为 1 秒</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token key atrule\">multiplier</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 下次失败的等待时长倍数，下次等待时长 = multiplier *last-interval</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token comment\"># 最大重试次数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token key atrule\">stateless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># true 无状态；false 有状态。如果业务中包含事务，这里改为 false</span></pre></td></tr></table></figure><p>启动消费者服务后进行测试 idea 控制台打印如下：</p>\n<p>报了一个异常，说重试次数耗尽了</p>\n<pre><code>mqp.rabbit.support.ListenerExecutionFailedException: Retry Policy Exhausted\n\tat org.springframework.amqp.rabbit.retry.RejectAndDontRequeueRecoverer.recover(RejectAndDontRequeueRecoverer.java:45) ~[spring-rabbit-2.2.15.RELEASE.jar:2.2.15.RELEASE]\n\tat org.springframework.amqp.rabbit.config.StatelessRetryOperationsInterceptorFactoryBean.lambda$createRecoverer$0(StatelessRetryOperationsInterceptorFactoryBean.java:74) ~[spring-rabbit-2.2.15.RELEASE.jar:2.2.15.RELEASE]\n\tat org.springframework.retry.interceptor.RetryOperationsInterceptor$ItemRecovererCallback.recover(RetryOperationsInterceptor.java:141) ~[spring-retry-1.2.5.RELEASE.jar:na]\n\tat org.springframework.retry.support.RetryTemplate.handleRetryExhausted(RetryTemplate.java:512) ~[spring-retry-1.2.5.RELEASE.jar:na]\n</code></pre>\n<p>这条消息就会被丢弃掉</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310220940740.png\" alt=\"image-20231022094032330\" /></p>\n<h3 id=\"951-消费者失败消息处理策略\"><a class=\"anchor\" href=\"#951-消费者失败消息处理策略\">#</a> 9.5.1、消费者失败消息处理策略🌲</h3>\n<p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有 MessageRecoverer 接口来处理，它包含三种不同的实现：</p>\n<p>1、RejectAndDontRequeueRecoverer：重试耗尽后，直接 reject，丢弃消息。默认就是这种方式</p>\n<p>2、ImmediateRequeueMessageRecoverer：重试耗尽后，返回 nack，消息重新入队</p>\n<p>3、RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221014285.png\" alt=\"image-20231022101421805\" /></p>\n<p>测试下 RepublishMessageRcoverer 处理模式：</p>\n<p>1、首先，定义接收失败消息的交换机，队列及其绑定关系：</p>\n<p>2、然后定义 RepublishMessageRecoverer：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ErrorMessageConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectExchange</span> <span class=\"token function\">errorMessageExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error.direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">errorQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error.queue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">errorMessageBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">errorQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">errorMessageExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MessageRecoverer</span> <span class=\"token function\">republishMessageRecoverer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RepublishMessageRecoverer</span><span class=\"token punctuation\">(</span>rabbitTemplate<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error.direct\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动消费者服务查看 mq 的交换机和队列情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221027869.png\" alt=\"image-20231022102732042\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221027294.png\" alt=\"image-20231022102744943\" /></p>\n<p>发送一条消息进行测试，找到 simple.queue 进行发送消息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221030573.png\" alt=\"image-20231022103002600\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221032487.png\" alt=\"image-20231022103250120\" /></p>\n<p>idea 控制台打印情况</p>\n<pre><code>消费者接收到simple.queue的消息：【hello spring !】\n消费者接收到simple.queue的消息：【hello spring !】\n消费者接收到simple.queue的消息：【hello spring !】\n10:30:18:538  WARN 6996 --- [ntContainer#0-1] o.s.a.r.retry.RepublishMessageRecoverer  : Republishing failed message to exchange 'error.direct' with routing key error\n</code></pre>\n<p>然后再查看队列情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221031933.png\" alt=\"image-20231022103105401\" /></p>\n<p>在 error.queue 队列的详细消息中可以看到报错的信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221032636.png\" alt=\"image-20231022103202192\" /></p>\n<blockquote>\n<p><strong>总结</strong>:</p>\n<p>如何确保 RabbitMQ 消息的可靠性？</p>\n<ol>\n<li>开启生产者确认机制，确保生产者的消息能到达队列</li>\n<li>开启持久化功能，确保消息未消费前在队列中不会丢失</li>\n<li>开启消费者确认机制为 auto，由 spring 确认消息处理成功后完成 ack</li>\n<li>开启消费者失败重试机制，并设置 MessageRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li>\n</ol>\n</blockquote>\n<h1 id=\"十-死信交换机\"><a class=\"anchor\" href=\"#十-死信交换机\">#</a> 十、死信交换机🎄</h1>\n<ul>\n<li>初识死信交换机</li>\n<li>TTL</li>\n<li>延迟队列</li>\n</ul>\n<h2 id=\"101-初识死信交换机\"><a class=\"anchor\" href=\"#101-初识死信交换机\">#</a> 10.1、初识死信交换机🌳</h2>\n<p>当一个队列中的消息满足下列情况之一时，可以称为 &lt;font color='red'&gt; 死信 (dead letter)&lt;/font&gt;：</p>\n<p>1、消费者使用 basic.reject 或 basic.nack 声明消费失败，并且消息的 requeue 参数设置为 false</p>\n<p>2、消息是一个过期消息，超时无人消费</p>\n<p>3、要投递的队列消息堆积满了，最早的消息可能成为死信</p>\n<p>如果该队列配置了 dead-letter-exchange 属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为 &lt;font color='red'&gt; 死信交换机 &lt;/font&gt;. (Dead Letter Exchange ， 简称 DLX)。</p>\n<p>如果有一个消息发送到了消费者，假设消费者采用默认的重试机制不断重试直到次数耗尽就会将消息拒绝，而消息一旦被拒绝默认情况下就会被丢弃了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221043785.png\" alt=\"image-20231022104354267\" /></p>\n<p>如果说不想丢失就必须给 simple.queue 这个队列绑定死信交换机，这时消息就不会被丢弃了而是变成一个死信再回到队列，队列再投递到死信交换机。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221046386.png\" alt=\"image-20231022104628552\" /></p>\n<p>交换机不能存储消息那么为了保证消息不丢失，还需要绑定一个队列，这个消息就会到达 dl.queue 队列中称为死信队列</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221049450.png\" alt=\"image-20231022104901077\" /></p>\n<p>这里与上述的 消费者失败消息处理策略 一样，但是还是有差异的，就是在上述方式中，所有的失败消息都是有消费者来做投递的。而在现在的方式中是由队列做投递的</p>\n<p>如果只是做消息的兜底处理建议使用上述方式，如果是做消息兜底处理以及额外的功能建议使用当前方式</p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>什么样的消息会成为死信？</p>\n<p>1、消息被消费者 reject 或者返回 nack</p>\n<p>2、消息超时未消费</p>\n<p>3、队列满了</p>\n<p>如何给队列绑定死信交换机？</p>\n<p>1、给队列设置 dead-letter-exchange 属性，指定一个交换机</p>\n<p>2、给队列设置 dead-letter-routing-key 属性，设置死信交换机与死信队列的 RoutingKey</p>\n</blockquote>\n<h2 id=\"102-ttl\"><a class=\"anchor\" href=\"#102-ttl\">#</a> 10.2、TTL🌳</h2>\n<p>TTL，也就是 Time-To-Live。如果一个队列中的消息 TTL 结束仍未消费，则会变为死信，TTL 超时分为两种情况：</p>\n<p>1、消息所在的队列设置了存活时间</p>\n<p>2、消息本身设置了存活时间</p>\n<p>假如一个消息自己设置了时间为 5000 毫秒到消息发出去，到达了队列的时候就会开始计时，计时结束后这个消息就会成为死信，从而投递到死信交换机 最终到达了死信队列。这时如果恰好有一个消费者在监听死信队列它就会收到这个死信消息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221102065.gif\" alt=\"test\" /></p>\n<p>我们声明一组死信交换机和队列，基于注解方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"dl.queue\"</span><span class=\"token punctuation\">,</span> durable <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"dl.direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   key <span class=\"token operator\">=</span> <span class=\"token string\">\"dl\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenDlQueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到了dl.queue的延迟消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>要给队列设置超时时间，需要在声明队列的类中编写如下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TTLMessageConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectExchange</span> <span class=\"token function\">ttlDirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.direct\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">ttlQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">QueueBuilder</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">durable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.queue\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定队列名称，并持久化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">ttl</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置队列的超时时间，10 秒</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">deadLetterExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dl.direct\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定死信交换机</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">deadLetterRoutingKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dl\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定死信 RoutingKey</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">ttlBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">ttlQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">ttlDirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写发布者代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTTLMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 准备消息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, ttl message\"</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                             <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setDeliveryMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDeliveryMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.direct\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ttl\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 3. 记录日志</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息已经成功发送了 ！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动服务进行测试：</p>\n<p>消息发布者发送出去的时间为：46</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221122622.png\" alt=\"image-20231022112215176\" /></p>\n<p>消息接收者接收到消息时间为：56</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221122464.png\" alt=\"image-20231022112249139\" /></p>\n<p>延迟了 10 秒钟的时间，这样延迟消息就实现了</p>\n<p>上述是基于队列实现的延迟消息，下面来学习给消息设置延迟时间</p>\n<p>发送消息时，给消息本身设置超时时间：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testTTLMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 1. 准备消息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, ttl message\"</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                             <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setDeliveryMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDeliveryMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5000\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置消息的延迟时间为 5 秒</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.direct\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ttl\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 3. 记录日志</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息已经成功发送了 ！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>启动服务器测试查看消息延迟多久时间：</p>\n<p>发送者发送消息时间为：16</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221127666.png\" alt=\"image-20231022112741830\" /></p>\n<p>接受者收到消息时间为：21</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221128275.png\" alt=\"image-20231022112808892\" /></p>\n<p>消息延迟了 5 秒的时间，<mark>当队列与消息本身都设置了延迟时间时，以最短的时间为准</mark>。</p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>消息超时的两种方式是？</p>\n<p>1、给队列设置 ttl 属性，进入队列后超过 ttl 时间的消息变为死信</p>\n<p>2、给消息设置 ttl 属性，队列接收到消息超过 ttl 时间后变为死信</p>\n<p>3、两者共存时，以时间短的 ttl 为准</p>\n<p>如何实现发送一个消息 20 秒后消费者才收到消息？</p>\n<p>1、给消息的目标队列指定死信交换机</p>\n<p>2、消费者监听与死信交换机绑定的队列</p>\n<p>3、发送消息时给消息设置 tll 为 20 秒</p>\n</blockquote>\n<p>下面学习延迟队列的插件来实现延迟消息</p>\n<h2 id=\"103-延迟队列\"><a class=\"anchor\" href=\"#103-延迟队列\">#</a> 10.3、延迟队列🌳</h2>\n<p>利用 TTL 结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为 &lt;font color='red'&gt; 延迟队列 (Delay Queue) 模式 &lt;/font&gt;.</p>\n<p>延迟队列的使用场景包括：</p>\n<p>1、延迟发送短信</p>\n<p>2、用户下单，如果用户在 15 分钟内未支付，则自动取消</p>\n<p>3、预约工作会议，20 分钟后自动通知所有参会人员</p>\n<h3 id=\"1031-延迟队列插件\"><a class=\"anchor\" href=\"#1031-延迟队列插件\">#</a> 10.3.1、延迟队列插件🌲</h3>\n<p>因为延迟队列的需求非常多，所以 RabbitMQ 的官方也推出了一个插件，原生支持延迟队列效果。</p>\n<p>详细安装查看文章：<a href=\"../RabbitMQ/%E9%AB%98%E7%BA%A7%E7%AF%87/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.md\">RabbitMQ 部署指南</a>.</p>\n<h3 id=\"1032-springamqp使用延迟队列插件\"><a class=\"anchor\" href=\"#1032-springamqp使用延迟队列插件\">#</a> 10.3.2、SpringAMQP 使用延迟队列插件🌲</h3>\n<p>DelayExchange 的本质还是官方的三种交换机，只是添加了延迟功能。因此使用时只需要声明一个交换机，交换机的类型可以是任意类型，然后设定 delayed 属性为 true 即可</p>\n<p>基于注解方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"delay.queue\"</span><span class=\"token punctuation\">,</span> durable <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"delay.direct\"</span><span class=\"token punctuation\">,</span> delayed <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   key <span class=\"token operator\">=</span> <span class=\"token string\">\"delay\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenDelayExchange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者接收到了delay.queue的延迟消息 , &#123;&#125;\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先启动消费者服务让它先等着</p>\n<p>查看 mq 的交换机情况：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221614876.png\" alt=\"image-20231022161400235\" /></p>\n<p>然后我们向这个 delay 为 true 的交换机中发送消息，一定要给消息添加一个 header: x-delay，值为延迟的时间，单位为毫秒：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSndDelayMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, ttl message\"</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                             <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setDeliveryMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDeliveryMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-delay\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置消息的延迟时间为 5 秒</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 1.1. 准备 CorrelationData</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 1.2. 消息 ID</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">CorrelationData</span> correlationData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorrelationData</span><span class=\"token punctuation\">(</span><span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delay.direct\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"delay\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span>correlationData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再启动发布者测试代码进行发布：</p>\n<p>发布后测试代码会提示一个错误但是这个错误是没有问题的，因为延迟它会误以为需要重试，就会触发重发机制。但是我们不需要对延迟消息进行重试，所以我们需要对其做一下判断</p>\n<pre><code>ERROR 17588 --- [nectionFactory1] cn.itcast.mq.config.CommonConfig         : 消息发送到队列失败，响应码：312，失败原因：NO_ROUTE，交换机：delay.direct，路由key：delay，消息：(Body:'[B@71c09e9d(byte[18])' MessageProperties [headers=&#123;spring_returned_message_correlation=b85f2836-22b6-406e-9e49-d5f44a07af32&#125;, contentType=application/octet-stream, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, receivedDelay=5000, deliveryTag=0])\n</code></pre>\n<p>对 receivedDelay 进行判断是否存在值</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//                         实现 Spring 工厂的通知</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 重写 Bean 工厂准备好后调用的函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 取出 RabbitTempalte 的 Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RabbitTemplate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 配置 ReturnCallback</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setReturnCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 判断是否是延迟消息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getReceivedDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 是一个延迟消息，忽略这个错误提示</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 记录日志 &#123;&#125; 为占位符</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送到队列失败，响应码：&#123;&#125;，失败原因：&#123;&#125;，\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token string\">\"交换机：&#123;&#125;，路由key：&#123;&#125;，消息：&#123;&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    i<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 如果有需要的话，重发消息</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在运行发布者测试代码后打印如下：</p>\n<p>可以看到就没有错误提示了，也就解决了明明没有错误却重试的问题了</p>\n<pre><code>16:22:35:703  INFO 2568 --- [           main] cn.itcast.mq.spring.SpringAmqpTest       : 消息发送成功\n</code></pre>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>延迟队列插件的使用步骤包括哪些？</p>\n<p>1、声明一个交换机，添加 delayed 属性为 true</p>\n<p>2、发送消息时，添加 x-delay 头，值为超时时间</p>\n</blockquote>\n<h1 id=\"十一-惰性队列\"><a class=\"anchor\" href=\"#十一-惰性队列\">#</a> 十一、惰性队列🎄</h1>\n<ul>\n<li>消息堆积问题</li>\n<li>惰性队列</li>\n</ul>\n<h2 id=\"111-消息堆积问题\"><a class=\"anchor\" href=\"#111-消息堆积问题\">#</a> 11.1、消息堆积问题🌳</h2>\n<p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。最早接收到的消息，可能就会成为死信，会被丢弃，这就是 &lt;font color='red'&gt; 消息堆积 &lt;/font &gt; 问题。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221629911.gif\" alt=\"test\" /></p>\n<p><strong>解决消息堆积有三种思路</strong>：</p>\n<p>1、增加更多消费者，提高消费速度</p>\n<p>2、在消费者内开启线程池加快消息处理速度</p>\n<p>3、扩大队列容积，提高堆积上限</p>\n<h2 id=\"112-惰性队列\"><a class=\"anchor\" href=\"#112-惰性队列\">#</a> 11.2、惰性队列🌳</h2>\n<p>从 RabbitMQ 的 3.6.0 版本开始，就增加了 Lazy Queues 的概念，也就是 &lt;font color='red'&gt; 惰性队列 &lt;/font&gt;.</p>\n<p>惰性队列的特征如下：</p>\n<p>1、接受到消息后直接存入磁盘而非内存</p>\n<p>2、消费者要消费时才会从磁盘中读取并加载到内存</p>\n<p>3、支持数百万条的消息存储</p>\n<p>而要设置一个队列为惰性队列，只需要在声明队列时，指定 x-queue-mode 属性为 lazy 即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl set_policy <span class=\"token class-name\">Lazy</span> <span class=\"token string\">\"^lazy-queue$\"</span> '<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"queue-mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lazy\"</span><span class=\"token punctuation\">&#125;</span>' <span class=\"token operator\">--</span>apply<span class=\"token operator\">-</span><span class=\"token keyword\">to</span> <span class=\"token namespace\">queues</span></pre></td></tr></table></figure><p>用 SpringAMQP 声明惰性队列分两种方式：</p>\n<p>@Bean 方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">lazyQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">QueueBuilder</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">durable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lazy.queue\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 开启 x-queue-mode 为 lazy</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注解方式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queuesToDeclare <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"lazy.queue\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   durable <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"arguments\"</span> <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Argument</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"x-queue-mode\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"lazy\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listenLazyQueue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到 lazy.queue的消息: &#123;&#125;\"</span> <span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编写测试代码进行百万消息测试：</p>\n<p>先对 delay.direct 消息队列进行百万消息的测试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLazyQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 1. 准备消息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, ttl message\"</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                                <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">setDeliveryMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDeliveryMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_PERSISTENT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delay.direct\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到它没有存储磁盘而却呢爆红了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221657687.png\" alt=\"image-20231022165706663\" /></p>\n<p>下面测试惰性队列的情况：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testLazyQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 1. 准备消息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">Message</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, ttl message\"</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                                <span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">setDeliveryMode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageDeliveryMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NON_PERSISTENT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 2. 发送消息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lazy.queue\"</span><span class=\"token punctuation\">,</span>  message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到消息都存储到了磁盘中，这样性能就会比较好</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221702921.png\" alt=\"image-20231022170213243\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>消息堆积问题的解决方案？</p>\n<p>1、队列上绑定多个消费者，提高消费速度</p>\n<p>2、给消费者开启线程池，提高消费速度</p>\n<p>3、使用惰性队列，可以再 mq 中保存更多消息</p>\n<p>惰性队列的优点有哪些？</p>\n<p>1、基于磁盘存储，消息上限高</p>\n<p>2、没有间歇性的 page-out，性能比较稳定</p>\n<p>惰性队列的缺点有哪些？</p>\n<p>1、基于磁盘存储，消息时效性会降低</p>\n<p>2、性能受限于磁盘的 IO</p>\n</blockquote>\n<h1 id=\"十二-mq集群\"><a class=\"anchor\" href=\"#十二-mq集群\">#</a> 十二、MQ 集群🎄</h1>\n<ul>\n<li>集群分类</li>\n<li>普通集群</li>\n<li>镜像集群</li>\n<li>仲载队列</li>\n</ul>\n<h2 id=\"121-集群分类\"><a class=\"anchor\" href=\"#121-集群分类\">#</a> 12.1、集群分类🌳</h2>\n<p>RabbitMQ 是基于 Erlang 语言编写，而 Erlang 又是一个面向并发的语言，天然支持集群模式，搭建比较简单。RabbitMQ 的集群有两种模式：</p>\n<p>1、<mark>普通集群</mark>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p>\n<p>2、<mark>镜像集群</mark>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p>\n<p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在 RabbitMQ 的 3.8 版本以后，推出了新的功能：<mark>仲载队列</mark> 来代替镜像集群，底层采用 Raft 协议确保主从的数据一致性。</p>\n<h3 id=\"1211-普通集群\"><a class=\"anchor\" href=\"#1211-普通集群\">#</a> 12.1.1、普通集群🌲</h3>\n<p>普通集群，或者叫标准集群 (classic cluster) ，具备下列特征：</p>\n<ul>\n<li>会在集群的各个节点间共享部分数据， 包括：交换机，队列元信息。不包含队列中的消息。</li>\n</ul>\n<p>比如说有三台 RabbitMQ，然后创建一个交换机</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221716648.png\" alt=\"image-20231022171634984\" /></p>\n<p>由于交换机可以在各个节点间共享，所以将来这三个节点都能看到</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221717792.png\" alt=\"image-20231022171726859\" /></p>\n<p>但是，现在要创建一个队列这个队列叫 queue1 它是在第一个交换机上声明的，此时队列是不共享的。但是有队列元信息，比如说 queue1 它会有其它节点上有 queue1 的名字，位置等信息。相当于是一个引用</p>\n<ul>\n<li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li>\n</ul>\n<p>比如说现在有一个消费者绑定到了 queue1 但是在访问的时候不小心访问到了第三个节点。这个节点上没有 queue1 但是有 queue1 的元信息，当获取数据的时候就会根据第三节点有 queue1 的位置信息来找到 queue1 然后拿到数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221722945.png\" alt=\"image-20231022172221484\" /></p>\n<ul>\n<li>队列所在节点宕机，队列中的消息就会丢失</li>\n</ul>\n<p>比如说 queue1 挂了，因为第三节点和 queue1 是引用关系再来取数据的时候就取不到了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221723703.png\" alt=\"image-20231022172351386\" /></p>\n<h4 id=\"12111-搭建普通集群\"><a class=\"anchor\" href=\"#12111-搭建普通集群\">#</a> 12.1.1.1、搭建普通集群🌴</h4>\n<p>搭建普通集群可以参考文章：<a href=\"../RabbitMQ/%E9%AB%98%E7%BA%A7%E7%AF%87/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.md\">RabbitMQ 部署指南</a>.</p>\n<h3 id=\"1212-镜像集群\"><a class=\"anchor\" href=\"#1212-镜像集群\">#</a> 12.1.2、镜像集群🌲</h3>\n<p>比方说，三个节点，交换机都能看到。那队列呢这时就要看你是不是镜像了。比方说在 queue1 这个节点上创建了一个队列。因为是在节点 1 上创建的 queue1 队列所以节点 1 就是 queue1 的主节点，然后我们还可以挑出一个镜像节点。比如说在节点二上做一个镜像，那么节点二就会找节点一去同步 queue1 的所有数据。这样它俩的数据就共享了。</p>\n<p>而主节点和镜像节点是可以互相备份的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221753072.png\" alt=\"image-20231022175329422\" /></p>\n<p>镜像集群：本质是主从模式，具备下面的特征：</p>\n<p>1、交换机，队列，队列中的消息会在各个 mq 的镜像节点之间同步备份。</p>\n<p>2、创建队列的节点被称为该队列的<strong>主节点</strong>，备份到的其它节点叫做该队列的<strong>镜像</strong>节点。</p>\n<p>3、一个队列的主节点可能是另一个队列的镜像节点</p>\n<p>4、所有操作都是主节点完成，然后同步给镜像节点</p>\n<p>5、主宕机后，镜像节点会替代成新的主</p>\n<p>比方说 queue1 它的镜像节点是在 queue2 上，queue2 这个队列是在节点 2 上的，但是它可以再节点 3 上备份，而 queue3 是在节点 3 上，而它的镜像节点是在节点 1 上。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221942543.png\" alt=\"image-20231022194205210\" /></p>\n<h4 id=\"12121-搭建镜像集群\"><a class=\"anchor\" href=\"#12121-搭建镜像集群\">#</a> 12.1.2.1、搭建镜像集群🌴</h4>\n<p>搭建镜像集群可以参考文章：<a href=\"../RabbitMQ/%E9%AB%98%E7%BA%A7%E7%AF%87/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.md\">RabbitMQ 部署指南</a>.</p>\n<h3 id=\"1213-仲载队列\"><a class=\"anchor\" href=\"#1213-仲载队列\">#</a> 12.1.3、仲载队列🌲</h3>\n<p>仲载队列：仲载队列是在 3.8 版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p>\n<p>1、与镜像队列一样，都是主从模式，支持主从数据同步</p>\n<p>2、使用非常简单，没有复杂的配置</p>\n<p>3、主从同步基于 Raft 协议，强一致</p>\n<h4 id=\"12131-仲载队列搭建\"><a class=\"anchor\" href=\"#12131-仲载队列搭建\">#</a> 12.1.3.1、仲载队列搭建🌴</h4>\n<p>仲载队列搭建可以参考文章：<a href=\"../RabbitMQ/%E9%AB%98%E7%BA%A7%E7%AF%87/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.md\">RabbitMQ 部署指南</a>.</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "springcloud-高级",
                "计算机学科",
                "springcloud"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/RabbitMQ/%E9%AB%98%E7%BA%A7/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/RabbitMQ/%E9%AB%98%E7%BA%A7/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/",
            "title": "RabbitMQ部署指南-集群部署",
            "date_published": "2024-01-06T02:39:34.999Z",
            "content_html": "<h1 id=\"rabbitmq部署指南\"><a class=\"anchor\" href=\"#rabbitmq部署指南\">#</a> RabbitMQ 部署指南</h1>\n<h1 id=\"1单机部署\"><a class=\"anchor\" href=\"#1单机部署\">#</a> 1. 单机部署</h1>\n<p>我们在 Centos7 虚拟机中使用 Docker 来安装。</p>\n<h2 id=\"11下载镜像\"><a class=\"anchor\" href=\"#11下载镜像\">#</a> 1.1. 下载镜像</h2>\n<p>方式一：在线拉取</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull rabbitmq:3.8-management</pre></td></tr></table></figure><p>方式二：从本地加载</p>\n<p>在课前资料已经提供了镜像包：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221138546.png\" alt=\"image-20210423191210349\" /></p>\n<p>上传到虚拟机中后，使用命令加载镜像即可：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> load <span class=\"token parameter variable\">-i</span> mq.tar</pre></td></tr></table></figure><h2 id=\"12安装mq\"><a class=\"anchor\" href=\"#12安装mq\">#</a> 1.2. 安装 MQ</h2>\n<p>执行下面的命令来运行 MQ 容器：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>itcast <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">123321</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token parameter variable\">-v</span> mq-plugins:/plugins <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token parameter variable\">--name</span> mq <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token parameter variable\">--hostname</span> mq1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">15672</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">5672</span>:5672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> rabbitmq:3.8-management</pre></td></tr></table></figure><h1 id=\"2安装delayexchange插件\"><a class=\"anchor\" href=\"#2安装delayexchange插件\">#</a> 2. 安装 DelayExchange 插件</h1>\n<p>我们要使用的是延迟队列但是名字却是延迟交换机，为什么叫这个名字呢简单说下它的原理：</p>\n<p>我们在使用这个插件的时候它不是基于队列去做的而是交换机。我们发消息到交换机，而交换机会帮你延迟的投递到队列里</p>\n<p>官方的安装指南地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnJhYmJpdG1xLmNvbS9wb3N0cy8yMDE1LzA0L3NjaGVkdWxpbmctbWVzc2FnZXMtd2l0aC1yYWJiaXRtcQ==\">https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq</span></p>\n<p>上述文档是基于 linux 原生安装 RabbitMQ，然后安装插件。</p>\n<p>因为我们之前是基于 Docker 安装 RabbitMQ，所以下面我们会讲解基于 Docker 来安装 RabbitMQ 插件。</p>\n<h2 id=\"21下载插件\"><a class=\"anchor\" href=\"#21下载插件\">#</a> 2.1. 下载插件</h2>\n<p>RabbitMQ 有一个官方的插件社区，地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbW11bml0eS1wbHVnaW5zLmh0bWw=\">https://www.rabbitmq.com/community-plugins.html</span></p>\n<p>其中包含各种各样的插件，包括我们要使用的 DelayExchange 插件：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139975.png\" alt=\"image-20210713104511055\" /></p>\n<p>大家可以去对应的 GitHub 页面下载 3.8.9 版本的插件，地址为 https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/tag/3.8.9 这个对应 RabbitMQ 的 3.8.5 以上版本。</p>\n<p>课前资料也提供了下载好的插件：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139733.png\" alt=\"image-20210713104808909\" /></p>\n<h2 id=\"22上传插件\"><a class=\"anchor\" href=\"#22上传插件\">#</a> 2.2. 上传插件</h2>\n<p>因为我们是基于 Docker 安装，所以需要先查看 RabbitMQ 的插件目录对应的数据卷。如果不是基于 Docker 的同学，请参考第一章部分，重新创建 Docker 容器。</p>\n<p>我们之前设定的 RabbitMQ 的数据卷名称为 <code>mq-plugins</code> ，所以我们使用下面命令查看数据卷：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> volume inspect mq-plugins</pre></td></tr></table></figure><p>可以得到下面结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139695.png\" alt=\"image-20210713105135701\" /></p>\n<p>接下来，将插件上传到这个目录即可：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139638.png\" alt=\"image-20210713105339785\" /></p>\n<h2 id=\"23安装插件\"><a class=\"anchor\" href=\"#23安装插件\">#</a> 2.3. 安装插件</h2>\n<p>最后就是安装了，需要进入 MQ 容器内部来执行安装。我的容器名为 <code>mq</code> ，所以执行下面命令：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mq <span class=\"token function\">bash</span></pre></td></tr></table></figure><p>执行时，请将其中的  <code>-it</code>  后面的 <code>mq</code>  替换为你自己的容器名.</p>\n<p>进入容器内部后，执行下面命令开启插件：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmq-plugins <span class=\"token builtin class-name\">enable</span> rabbitmq_delayed_message_exchange</pre></td></tr></table></figure><p>结果如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139444.png\" alt=\"image-20210713105829435\" /></p>\n<p>访问 mq 前端声明一个交换机进行测试：</p>\n<p>DelayExchange 插件的原理是对官方原生的 Exchange 做了功能的升级：</p>\n<p>1、将 DelayExchange 接受的消息暂存在内存中 (官方的 Exchange 是无法存储消息的)</p>\n<p>2、在 DelayExchange 中计时，超时后才投递消息到队列中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221553081.png\" alt=\"image-20231022155351657\" /></p>\n<p>发送这个消息的时候延迟多久需要在发送消息的时候设置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221557138.png\" alt=\"image-20231022155755822\" /></p>\n<h1 id=\"3集群部署\"><a class=\"anchor\" href=\"#3集群部署\">#</a> 3. 集群部署</h1>\n<p>接下来，我们看看如何安装 RabbitMQ 的集群。</p>\n<h2 id=\"21集群分类\"><a class=\"anchor\" href=\"#21集群分类\">#</a> 2.1. 集群分类</h2>\n<p>在 RabbitMQ 的官方文档中，讲述了两种集群的配置方式：</p>\n<ul>\n<li>普通模式：普通模式集群不进行数据同步，每个 MQ 都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有 2 个 MQ：mq1，和 mq2，如果你的消息在 mq1，而你连接到了 mq2，那么 mq2 会去 mq1 拉取消息，然后返回给你。如果 mq1 宕机，消息就会丢失。</li>\n<li>镜像模式：与普通模式不同，队列会在各个 mq 的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li>\n</ul>\n<p>我们先来看普通模式集群，我们的计划部署 3 节点的 mq 集群：</p>\n<table>\n<thead>\n<tr>\n<th>主机名</th>\n<th>控制台端口</th>\n<th>amqp 通信端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mq1</td>\n<td>8081 ---&gt; 15672</td>\n<td>8071 ---&gt; 5672</td>\n</tr>\n<tr>\n<td>mq2</td>\n<td>8082 ---&gt; 15672</td>\n<td>8072 ---&gt; 5672</td>\n</tr>\n<tr>\n<td>mq3</td>\n<td>8083 ---&gt; 15672</td>\n<td>8073  ---&gt; 5672</td>\n</tr>\n</tbody>\n</table>\n<p>集群中的节点标示默认都是： <code>rabbit@[hostname]</code> ，因此以上三个节点的名称分别为：</p>\n<ul>\n<li>rabbit@mq1</li>\n<li>rabbit@mq2</li>\n<li>rabbit@mq3</li>\n</ul>\n<h2 id=\"22获取cookie\"><a class=\"anchor\" href=\"#22获取cookie\">#</a> 2.2. 获取 cookie</h2>\n<p>RabbitMQ 底层依赖于 Erlang，而 Erlang 虚拟机就是一个面向分布式的语言，默认就支持集群模式。集群模式中的每个 RabbitMQ 节点使用 cookie 来确定它们是否被允许相互通信。</p>\n<p>要使两个节点能够通信，它们必须具有相同的共享秘密，称为<strong> Erlang cookie</strong>。cookie 只是一串最多 255 个字符的字母数字字符。</p>\n<p>每个集群节点必须具有<strong>相同的 cookie</strong>。实例之间也需要它来相互通信。</p>\n<p>我们先在之前启动的 mq 容器中获取一个 cookie 值，作为集群的 cookie。执行下面的命令：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mq <span class=\"token function\">cat</span> /var/lib/rabbitmq/.erlang.cookie</pre></td></tr></table></figure><p>可以看到 cookie 值如下：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>DVNQQPDKLNCMEPRBYEHX</pre></td></tr></table></figure><p>接下来，停止并删除当前的 mq 容器，我们重新搭建集群。</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> mq</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139218.png\" alt=\"image-20210717212345165\" /></p>\n<h2 id=\"23准备集群配置\"><a class=\"anchor\" href=\"#23准备集群配置\">#</a> 2.3. 准备集群配置</h2>\n<p>在 /tmp 目录新建一个配置文件 rabbitmq.conf：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /tmp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 创建文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">touch</span> rabbitmq.conf</pre></td></tr></table></figure><p>文件内容如下：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loopback_users.guest = false</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>listeners.tcp.default = 5672</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cluster_formation.peer_discovery_backend = rabbit_peer_discovery_classic_config</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cluster_formation.classic_config.nodes.1 = rabbit@mq1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cluster_formation.classic_config.nodes.2 = rabbit@mq2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cluster_formation.classic_config.nodes.3 = rabbit@mq3</pre></td></tr></table></figure><p>再创建一个文件，记录 cookie</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /tmp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 创建 cookie 文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">touch</span> .erlang.cookie</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 写入 cookie</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"FXZMCVGLBIXZCDEMMVZQ\"</span> <span class=\"token operator\">></span> .erlang.cookie</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 修改 cookie 文件的权限</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> .erlang.cookie</pre></td></tr></table></figure><p>准备三个目录，mq1、mq2、mq3：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /tmp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 创建目录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> mq1 mq2 mq3</pre></td></tr></table></figure><p>然后拷贝 rabbitmq.conf、cookie 文件到 mq1、mq2、mq3：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入 /tmp</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /tmp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 拷贝</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cp</span> rabbitmq.conf mq1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cp</span> rabbitmq.conf mq2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cp</span> rabbitmq.conf mq3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cp</span> .erlang.cookie mq1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cp</span> .erlang.cookie mq2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">cp</span> .erlang.cookie mq3</pre></td></tr></table></figure><h2 id=\"24启动集群\"><a class=\"anchor\" href=\"#24启动集群\">#</a> 2.4. 启动集群</h2>\n<p>创建一个网络：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network create mq-net</pre></td></tr></table></figure><p>运行命令</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--net</span> mq-net <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/mq1/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>itcast <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">123321</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">--name</span> mq1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">--hostname</span> mq1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8071</span>:5672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rabbitmq:3.8-management</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--net</span> mq-net <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/mq2/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>itcast <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">123321</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">--name</span> mq2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">--hostname</span> mq2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8072</span>:5672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8082</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rabbitmq:3.8-management</pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--net</span> mq-net <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/mq3/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>itcast <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">123321</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">--name</span> mq3 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">--hostname</span> mq3 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8073</span>:5672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8083</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rabbitmq:3.8-management</pre></td></tr></table></figure><h2 id=\"25测试\"><a class=\"anchor\" href=\"#25测试\">#</a> 2.5. 测试</h2>\n<p>在 mq1 这个节点上添加一个队列：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139410.png\" alt=\"image-20210717222833196\" /></p>\n<p>如图，在 mq2 和 mq3 两个控制台也都能看到：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139214.png\" alt=\"image-20210717223057902\" /></p>\n<h3 id=\"251数据共享测试\"><a class=\"anchor\" href=\"#251数据共享测试\">#</a> 2.5.1. 数据共享测试</h3>\n<p>点击这个队列，进入管理页面：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221139412.png\" alt=\"image-20210717223421750\" /></p>\n<p>然后利用控制台发送一条消息到这个队列：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140585.png\" alt=\"image-20210717223320238\" /></p>\n<p>结果在 mq2、mq3 上都能看到这条消息：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140067.png\" alt=\"image-20210717223603628\" /></p>\n<h3 id=\"252可用性测试\"><a class=\"anchor\" href=\"#252可用性测试\">#</a> 2.5.2. 可用性测试</h3>\n<p>我们让其中一台节点 mq1 宕机：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stop mq1</pre></td></tr></table></figure><p>然后登录 mq2 或 mq3 的控制台，发现 simple.queue 也不可用了：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140781.png\" alt=\"image-20210717223800203\" /></p>\n<p>说明数据并没有拷贝到 mq2 和 mq3。</p>\n<h1 id=\"4镜像模式\"><a class=\"anchor\" href=\"#4镜像模式\">#</a> 4. 镜像模式</h1>\n<p>在刚刚的案例中，一旦创建队列的主机宕机，队列就会不可用。不具备高可用能力。如果要解决这个问题，必须使用官方提供的镜像集群方案。</p>\n<p>官方文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2hhLmh0bWw=\">https://www.rabbitmq.com/ha.html</span></p>\n<h2 id=\"41镜像模式的特征\"><a class=\"anchor\" href=\"#41镜像模式的特征\">#</a> 4.1. 镜像模式的特征</h2>\n<p>默认情况下，队列只保存在创建该队列的节点上。而镜像模式下，创建队列的节点被称为该队列的<strong>主节点</strong>，队列还会拷贝到集群中的其它节点，也叫做该队列的<strong>镜像</strong>节点。</p>\n<p>但是，不同队列可以在集群中的任意节点上创建，因此不同队列的主节点可以不同。甚至，<strong>一个队列的主节点可能是另一个队列的镜像节点</strong>。</p>\n<p>用户发送给队列的一切请求，例如发送消息、消息回执默认都会在主节点完成，如果是从节点接收到请求，也会路由到主节点去完成。<strong>镜像节点仅仅起到备份数据作用</strong>。</p>\n<p>当主节点接收到消费者的 ACK 时，所有镜像都会删除节点中的数据。</p>\n<p>总结如下：</p>\n<ul>\n<li>镜像队列结构是一主多从（从就是镜像）</li>\n<li>所有操作都是主节点完成，然后同步给镜像节点</li>\n<li>主宕机后，镜像节点会替代成新的主（如果在主从同步完成前，主就已经宕机，可能出现数据丢失）</li>\n<li>不具备负载均衡功能，因为所有操作都会有主节点完成（但是不同队列，其主节点可以不同，可以利用这个提高吞吐量）</li>\n</ul>\n<h2 id=\"42镜像模式的配置\"><a class=\"anchor\" href=\"#42镜像模式的配置\">#</a> 4.2. 镜像模式的配置</h2>\n<p>镜像模式的配置有 3 种模式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">ha-mode</th>\n<th style=\"text-align:left\">ha-params</th>\n<th style=\"text-align:left\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">准确模式 exactly</td>\n<td style=\"text-align:left\">队列的副本量 count</td>\n<td style=\"text-align:left\">集群中队列副本（主服务器和镜像服务器之和）的数量。count 如果为 1 意味着单个副本：即队列主节点。count 值为 2 表示 2 个副本：1 个队列主和 1 个队列镜像。换句话说：count = 镜像数量 + 1。如果群集中的节点数少于 count，则该队列将镜像到所有节点。如果有集群总数大于 count+1，并且包含镜像的节点出现故障，则将在另一个节点上创建一个新的镜像。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">all</td>\n<td style=\"text-align:left\">(none)</td>\n<td style=\"text-align:left\">队列在群集中的所有节点之间进行镜像。队列将镜像到任何新加入的节点。镜像到所有节点将对所有群集节点施加额外的压力，包括网络 I / O，磁盘 I / O 和磁盘空间使用情况。推荐使用 exactly，设置副本数为（N / 2 +1）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nodes</td>\n<td style=\"text-align:left\"><em>node names</em></td>\n<td style=\"text-align:left\">指定队列创建到哪些节点，如果指定的节点全部不存在，则会出现异常。如果指定的节点在集群中存在，但是暂时不可用，会创建节点到当前客户端连接到的节点。</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们以 rabbitmqctl 命令作为案例来讲解配置语法。</p>\n<p>语法示例：</p>\n<h3 id=\"421exactly模式\"><a class=\"anchor\" href=\"#421exactly模式\">#</a> 4.2.1.exactly 模式</h3>\n<pre><code>rabbitmqctl set_policy ha-two &quot;^two\\.&quot; '&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;'\n</code></pre>\n<ul>\n<li><code>rabbitmqctl set_policy</code> ：固定写法</li>\n<li><code>ha-two</code> ：策略名称，自定义</li>\n<li><code>&quot;^two\\.&quot;</code> ：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以 <code>two.</code>  开头的队列名称</li>\n<li><code>'&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;'</code> : 策略内容\n<ul>\n<li><code>&quot;ha-mode&quot;:&quot;exactly&quot;</code> ：策略模式，此处是 exactly 模式，指定副本数量</li>\n<li><code>&quot;ha-params&quot;:2</code> ：策略参数，这里是 2，就是副本数量为 2，1 主 1 镜像</li>\n<li><code>&quot;ha-sync-mode&quot;:&quot;automatic&quot;</code> ：同步策略，默认是 manual，即新加入的镜像节点不会同步旧的消息。如果设置为 automatic，则新加入的镜像节点会把主节点中所有消息都同步，会带来额外的网络开销</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"422all模式\"><a class=\"anchor\" href=\"#422all模式\">#</a> 4.2.2.all 模式</h3>\n<pre><code>rabbitmqctl set_policy ha-all &quot;^all\\.&quot; '&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;'\n</code></pre>\n<ul>\n<li><code>ha-all</code> ：策略名称，自定义</li>\n<li><code>&quot;^all\\.&quot;</code> ：匹配所有以 <code>all.</code>  开头的队列名</li>\n<li><code>'&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;'</code> ：策略内容\n<ul>\n<li><code>&quot;ha-mode&quot;:&quot;all&quot;</code> ：策略模式，此处是 all 模式，即所有节点都会称为镜像节点</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"423nodes模式\"><a class=\"anchor\" href=\"#423nodes模式\">#</a> 4.2.3.nodes 模式</h3>\n<pre><code>rabbitmqctl set_policy ha-nodes &quot;^nodes\\.&quot; '&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;'\n</code></pre>\n<ul>\n<li><code>rabbitmqctl set_policy</code> ：固定写法</li>\n<li><code>ha-nodes</code> ：策略名称，自定义</li>\n<li><code>&quot;^nodes\\.&quot;</code> ：匹配队列的正则表达式，符合命名规则的队列才生效，这里是任何以 <code>nodes.</code>  开头的队列名称</li>\n<li><code>'&#123;&quot;ha-mode&quot;:&quot;nodes&quot;,&quot;ha-params&quot;:[&quot;rabbit@nodeA&quot;, &quot;rabbit@nodeB&quot;]&#125;'</code> : 策略内容\n<ul>\n<li><code>&quot;ha-mode&quot;:&quot;nodes&quot;</code> ：策略模式，此处是 nodes 模式</li>\n<li><code>&quot;ha-params&quot;:[&quot;rabbit@mq1&quot;, &quot;rabbit@mq2&quot;]</code> ：策略参数，这里指定副本所在节点名称</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"43测试\"><a class=\"anchor\" href=\"#43测试\">#</a> 4.3. 测试</h2>\n<p>我们使用 exactly 模式的镜像，因为集群节点数量为 3，因此镜像数量就设置为 2.</p>\n<p>运行下面的命令：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mq1 rabbitmqctl set_policy ha-two <span class=\"token string\">\"^two\\.\"</span> <span class=\"token string\">'&#123;\"ha-mode\":\"exactly\",\"ha-params\":2,\"ha-sync-mode\":\"automatic\"&#125;'</span></pre></td></tr></table></figure><p>下面，我们创建一个新的队列：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140154.png\" alt=\"image-20210717231751411\" /></p>\n<p>在任意一个 mq 控制台查看队列：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140517.png\" alt=\"image-20210717231829505\" /></p>\n<h3 id=\"431测试数据共享\"><a class=\"anchor\" href=\"#431测试数据共享\">#</a> 4.3.1. 测试数据共享</h3>\n<p>给 two.queue 发送一条消息：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140429.png\" alt=\"image-20210717231958996\" /></p>\n<p>然后在 mq1、mq2、mq3 的任意控制台查看消息：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140006.png\" alt=\"image-20210717232108584\" /></p>\n<h3 id=\"432测试高可用\"><a class=\"anchor\" href=\"#432测试高可用\">#</a> 4.3.2. 测试高可用</h3>\n<p>现在，我们让 two.queue 的主节点 mq1 宕机：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stop mq1</pre></td></tr></table></figure><p>查看集群状态：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140157.png\" alt=\"image-20210717232257420\" /></p>\n<p>查看队列状态：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140733.png\" alt=\"image-20210717232322646\" /></p>\n<p>发现依然是健康的！并且其主节点切换到了 rabbit@mq2 上</p>\n<h1 id=\"5仲裁队列\"><a class=\"anchor\" href=\"#5仲裁队列\">#</a> 5. 仲裁队列</h1>\n<p>从 RabbitMQ 3.8 版本开始，引入了新的仲裁队列，他具备与镜像队里类似的功能，但使用更加方便。</p>\n<h2 id=\"51添加仲裁队列\"><a class=\"anchor\" href=\"#51添加仲裁队列\">#</a> 5.1. 添加仲裁队列</h2>\n<p>在任意控制台添加一个队列，一定要选择队列类型为 Quorum 类型。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140068.png\" alt=\"image-20210717234329640\" /></p>\n<p>在任意控制台查看队列：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140859.png\" alt=\"image-20210717234426209\" /></p>\n<p>可以看到，仲裁队列的 + 2 字样。代表这个队列有 2 个镜像节点。</p>\n<p>因为仲裁队列默认的镜像数为 5。如果你的集群有 7 个节点，那么镜像数肯定是 5；而我们集群只有 3 个节点，因此镜像数量就是 3.</p>\n<h2 id=\"52springamqp创建仲载队列\"><a class=\"anchor\" href=\"#52springamqp创建仲载队列\">#</a> 5.2.SpringAMQP 创建仲载队列</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuorumConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">quorumQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">QueueBuilder</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">durable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"quorum.queue2\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 持久化</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">quorum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 仲载队列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>SpringAMQP 链接集群，只需要在 yml 中配置即可：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">addresses</span><span class=\"token punctuation\">:</span> 192.168.249.128<span class=\"token punctuation\">:</span><span class=\"token number\">8071</span><span class=\"token punctuation\">,</span> 192.168.249.128<span class=\"token punctuation\">:</span><span class=\"token number\">8072</span><span class=\"token punctuation\">,</span> 192.168.249.128<span class=\"token punctuation\">:</span><span class=\"token number\">8073</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># port: 5672 # 端口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> itcast</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123321</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr></table></figure><h2 id=\"53测试\"><a class=\"anchor\" href=\"#53测试\">#</a> 5.3. 测试</h2>\n<p>可以参考对镜像集群的测试，效果是一样的。</p>\n<h2 id=\"53集群扩容\"><a class=\"anchor\" href=\"#53集群扩容\">#</a> 5.3. 集群扩容</h2>\n<h3 id=\"531加入集群\"><a class=\"anchor\" href=\"#531加入集群\">#</a> 5.3.1. 加入集群</h3>\n<p>1）启动一个新的 MQ 容器：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--net</span> mq-net <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-v</span> <span class=\"token variable\">$&#123;<span class=\"token environment constant\">PWD</span>&#125;</span>/.erlang.cookie:/var/lib/rabbitmq/.erlang.cookie <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>itcast <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">123321</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">--name</span> mq4 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">--hostname</span> mq5 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8074</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8084</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>rabbitmq:3.8-management</pre></td></tr></table></figure><p>2）进入容器控制台：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mq4 <span class=\"token function\">bash</span></pre></td></tr></table></figure><p>3）停止 mq 进程</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl stop_app</pre></td></tr></table></figure><p>4）重置 RabbitMQ 中的数据：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl reset</pre></td></tr></table></figure><p>5）加入 mq1：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl join_cluster rabbit@mq1</pre></td></tr></table></figure><p>6）再次启动 mq 进程</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl start_app</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140463.png\" alt=\"image-20210718001909492\" /></p>\n<h3 id=\"532增加仲裁队列副本\"><a class=\"anchor\" href=\"#532增加仲裁队列副本\">#</a> 5.3.2. 增加仲裁队列副本</h3>\n<p>我们先查看下 quorum.queue 这个队列目前的副本情况，进入 mq1 容器：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mq1 <span class=\"token function\">bash</span></pre></td></tr></table></figure><p>执行命令：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmq-queues quorum_status <span class=\"token string\">\"quorum.queue\"</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140047.png\" alt=\"image-20210718002118357\" /></p>\n<p>现在，我们让 mq4 也加入进来：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmq-queues add_member <span class=\"token string\">\"quorum.queue\"</span> <span class=\"token string\">\"rabbit@mq4\"</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140584.png\" alt=\"image-20210718002253226\" /></p>\n<p>再次查看：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmq-queues quorum_status <span class=\"token string\">\"quorum.queue\"</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140083.png\" alt=\"image-20210718002342603\" /></p>\n<p>查看控制台，发现 quorum.queue 的镜像数量也从原来的 +2 变成了 +3：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310221140839.png\" alt=\"image-20210718002422365\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "RabbitMQ",
                "高级",
                "计算机学科",
                "集群",
                "springcloud",
                "RabbitMQ",
                "部署"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/RabbitMQ/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/RabbitMQ/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/",
            "title": "RabbitMQ部署指南-单击部署",
            "date_published": "2024-01-06T02:37:51.674Z",
            "content_html": "<h1 id=\"rabbitmq部署指南\"><a class=\"anchor\" href=\"#rabbitmq部署指南\">#</a> RabbitMQ 部署指南</h1>\n<h1 id=\"1单机部署\"><a class=\"anchor\" href=\"#1单机部署\">#</a> 1. 单机部署</h1>\n<p>我们在 Centos7 虚拟机中使用 Docker 来安装。</p>\n<h2 id=\"11下载镜像\"><a class=\"anchor\" href=\"#11下载镜像\">#</a> 1.1. 下载镜像</h2>\n<p>方式一：在线拉取</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull rabbitmq:3-management</pre></td></tr></table></figure><p>方式二：从本地加载</p>\n<p>在课前资料已经提供了镜像包：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310101608790.png\" alt=\"image-20210423191210349\" /></p>\n<p>上传到虚拟机中后，使用命令加载镜像即可：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> load <span class=\"token parameter variable\">-i</span> mq.tar</pre></td></tr></table></figure><p>使用命令来查看一下</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker images</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>REPOSITORY                   TAG       IMAGE ID       CREATED         SIZE</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rabbitmq                     latest    24cc95a2cb57   <span class=\"token number\">6</span> days ago      217MB</pre></td></tr></table></figure><h2 id=\"12安装mq\"><a class=\"anchor\" href=\"#12安装mq\">#</a> 1.2. 安装 MQ</h2>\n<p>执行下面的命令来运行 MQ 容器：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>itcast <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span><span class=\"token number\">123321</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token parameter variable\">--name</span> mq <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token parameter variable\">--hostname</span> mq1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\"># ui 管理平台的端口号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">15672</span>:15672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\"># 消息通信的端口号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">5672</span>:5672 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> rabbitmq:3-management</pre></td></tr></table></figure><p>查看启动状态</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID   IMAGE                   COMMAND                  CREATED         STATUS         PORTS                                                                                                                                                 NAMES</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>5ca16a608743   rabbitmq:3-management   <span class=\"token string\">\"docker-entrypoint.s…\"</span>   <span class=\"token number\">2</span> minutes ago   Up <span class=\"token number\">2</span> minutes   <span class=\"token number\">4369</span>/tcp, <span class=\"token number\">5671</span>/tcp, <span class=\"token number\">0.0</span>.0.0:5672-<span class=\"token operator\">></span><span class=\"token number\">5672</span>/tcp, :::5672-<span class=\"token operator\">></span><span class=\"token number\">5672</span>/tcp, <span class=\"token number\">15671</span>/tcp, <span class=\"token number\">15691</span>-15692/tcp, <span class=\"token number\">25672</span>/tcp, <span class=\"token number\">0.0</span>.0.0:15672-<span class=\"token operator\">></span><span class=\"token number\">15672</span>/tcp, :::15672-<span class=\"token operator\">></span><span class=\"token number\">15672</span>/tcp   mq</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>控制台打印了端口为：15671，在启动容器时配置了账号为：itcast，密码为：123321</p>\n<p>访问 uri：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMjQ5LjEyODoxNTY3Mg==\">http://192.168.249.128:15672</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310101627722.png\" alt=\"image-20231010162721293\" /></p>\n<p><strong>页面功能介绍</strong>：</p>\n<blockquote>\n<p>Overview：总览</p>\n<p>作用：查看节点的一些详细信息</p>\n</blockquote>\n<blockquote>\n<p>Connections：连接</p>\n<p>无论是消息发布者还是消息消费者都应该跟 mq 建立连接</p>\n</blockquote>\n<blockquote>\n<p>Channels：通道</p>\n<p>建立连接后一定要创建一个通道，完后生产者 或者是消费者才能基于 Channel 完成消息的发送和接收</p>\n</blockquote>\n<blockquote>\n<p>Exchanges：交换机</p>\n<p>是消息的路由</p>\n</blockquote>\n<blockquote>\n<p>Queues：队列</p>\n</blockquote>\n<blockquote>\n<p>Admin：用户管理</p>\n<ul>\n<li>Virtual Host：虚拟机可以对每个用户进行一个隔离防止操作冲突</li>\n</ul>\n</blockquote>\n<h1 id=\"2集群部署\"><a class=\"anchor\" href=\"#2集群部署\">#</a> 2. 集群部署</h1>\n<p>接下来，我们看看如何安装 RabbitMQ 的集群。</p>\n<h2 id=\"21集群分类\"><a class=\"anchor\" href=\"#21集群分类\">#</a> 2.1. 集群分类</h2>\n<p>在 RabbitMQ 的官方文档中，讲述了两种集群的配置方式：</p>\n<ul>\n<li>普通模式：普通模式集群不进行数据同步，每个 MQ 都有自己的队列、数据信息（其它元数据信息如交换机等会同步）。例如我们有 2 个 MQ：mq1，和 mq2，如果你的消息在 mq1，而你连接到了 mq2，那么 mq2 会去 mq1 拉取消息，然后返回给你。如果 mq1 宕机，消息就会丢失。</li>\n<li>镜像模式：与普通模式不同，队列会在各个 mq 的镜像节点之间同步，因此你连接到任何一个镜像节点，均可获取到消息。而且如果一个节点宕机，并不会导致数据丢失。不过，这种方式增加了数据同步的带宽消耗。</li>\n</ul>\n<p>我们先来看普通模式集群。</p>\n<h2 id=\"22设置网络\"><a class=\"anchor\" href=\"#22设置网络\">#</a> 2.2. 设置网络</h2>\n<p>首先，我们需要让 3 台 MQ 互相知道对方的存在。</p>\n<p>分别在 3 台机器中，设置 /etc/hosts 文件，添加如下内容：</p>\n<pre><code>192.168.150.101 mq1\n192.168.150.102 mq2\n192.168.150.103 mq3\n</code></pre>\n<p>并在每台机器上测试，是否可以 ping 通对方：</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "RabbitMQ",
                "计算机学科",
                "springcloud",
                "RabbitMQ",
                "部署"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/Nacos/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/Nacos/Nacos%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/",
            "title": "Nacos安装指南",
            "date_published": "2024-01-06T02:33:28.230Z",
            "content_html": "<h1 id=\"nacos安装指南\"><a class=\"anchor\" href=\"#nacos安装指南\">#</a> Nacos 安装指南</h1>\n<h1 id=\"1windows安装\"><a class=\"anchor\" href=\"#1windows安装\">#</a> 1.Windows 安装</h1>\n<p>开发阶段采用单机安装即可。</p>\n<h2 id=\"11下载安装包\"><a class=\"anchor\" href=\"#11下载安装包\">#</a> 1.1. 下载安装包</h2>\n<p>在 Nacos 的 GitHub 页面，提供有下载链接，可以下载编译好的 Nacos 服务端或者源代码：</p>\n<p>GitHub 主页：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3M=\">https://github.com/alibaba/nacos</span></p>\n<p>GitHub 的 Release 下载页：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=\">https://github.com/alibaba/nacos/releases</span></p>\n<p>如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218392.png\" alt=\"image-20210402161102887\" /></p>\n<p>本课程采用 1.4.1. 版本的 Nacos，课前资料已经准备了安装包：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218840.png\" alt=\"image-20210402161130261\" /></p>\n<p>windows 版本使用 <code>nacos-server-1.4.1.zip</code>  包即可。</p>\n<h2 id=\"12解压\"><a class=\"anchor\" href=\"#12解压\">#</a> 1.2. 解压</h2>\n<p>将这个包解压到任意非中文目录下，如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218669.png\" alt=\"image-20210402161843337\" /></p>\n<p>目录说明：</p>\n<ul>\n<li>bin：启动脚本</li>\n<li>conf：配置文件</li>\n</ul>\n<h2 id=\"13端口配置\"><a class=\"anchor\" href=\"#13端口配置\">#</a> 1.3. 端口配置</h2>\n<p>Nacos 的默认端口是 8848，如果你电脑上的其它进程占用了 8848 端口，请先尝试关闭该进程。</p>\n<p><strong>如果无法关闭占用 8848 端口的进程</strong>，也可以进入 nacos 的 conf 目录，修改配置文件中的端口：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218946.png\" alt=\"image-20210402162008280\" /></p>\n<p>修改其中的内容：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218758.png\" alt=\"image-20210402162251093\" /></p>\n<h2 id=\"14启动\"><a class=\"anchor\" href=\"#14启动\">#</a> 1.4. 启动</h2>\n<p>启动非常简单，进入 bin 目录，结构如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218561.png\" alt=\"image-20210402162350977\" /></p>\n<p>然后执行命令即可：</p>\n<ul>\n<li>\n<p>windows 命令：</p>\n<pre><code>startup.cmd -m standalone\n</code></pre>\n</li>\n</ul>\n<p>执行后的效果如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218179.png\" alt=\"image-20210402162526774\" /></p>\n<h2 id=\"15访问\"><a class=\"anchor\" href=\"#15访问\">#</a> 1.5. 访问</h2>\n<p>在浏览器输入地址：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4ODQ4L25hY29zJUU1JThEJUIzJUU1JThGJUFGJUVGJUJDJTlB\">http://127.0.0.1:8848/nacos 即可：</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218689.png\" alt=\"image-20210402162630427\" /></p>\n<p>默认的账号和密码都是 nacos，进入后：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218382.png\" alt=\"image-20210402162709515\" /></p>\n<h1 id=\"2linux安装\"><a class=\"anchor\" href=\"#2linux安装\">#</a> 2.Linux 安装</h1>\n<p>Linux 或者 Mac 安装方式与 Windows 类似。</p>\n<h2 id=\"21安装jdk\"><a class=\"anchor\" href=\"#21安装jdk\">#</a> 2.1. 安装 JDK</h2>\n<p>Nacos 依赖于 JDK 运行，所以 Linux 上也需要安装 JDK 才行。</p>\n<p>上传 jdk 安装包：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218243.png\" alt=\"image-20210402172334810\" /></p>\n<p>上传到某个目录，例如： <code>/usr/local/</code></p>\n<p>然后解压缩：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xvf</span> jdk-8u144-linux-x64.tar.gz</pre></td></tr></table></figure><p>然后重命名为 java</p>\n<p>配置环境变量：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/java</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin</pre></td></tr></table></figure><p>刷新环境变量：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><h2 id=\"22上传安装包\"><a class=\"anchor\" href=\"#22上传安装包\">#</a> 2.2. 上传安装包</h2>\n<p>如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218879.png\" alt=\"image-20210402161102887\" /></p>\n<p>也可以直接使用课前资料中的 tar.gz：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218287.png\" alt=\"image-20210402161130261\" /></p>\n<p>上传到 Linux 服务器的某个目录，例如 <code>/usr/local/src</code>  目录下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218025.png\" alt=\"image-20210402163715580\" /></p>\n<h2 id=\"23解压\"><a class=\"anchor\" href=\"#23解压\">#</a> 2.3. 解压</h2>\n<p>命令解压缩安装包：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xvf</span> nacos-server-1.4.1.tar.gz</pre></td></tr></table></figure><p>然后删除安装包：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> nacos-server-1.4.1.tar.gz</pre></td></tr></table></figure><p>目录中最终样式：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218677.png\" alt=\"image-20210402163858429\" /></p>\n<p>目录内部：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310051218771.png\" alt=\"image-20210402164414827\" /></p>\n<h2 id=\"24端口配置\"><a class=\"anchor\" href=\"#24端口配置\">#</a> 2.4. 端口配置</h2>\n<p>与 windows 中类似</p>\n<h2 id=\"25启动\"><a class=\"anchor\" href=\"#25启动\">#</a> 2.5. 启动</h2>\n<p>在 nacos/bin 目录中，输入命令启动 Nacos：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> startup.sh <span class=\"token parameter variable\">-m</span> standalone</pre></td></tr></table></figure><h1 id=\"3nacos的依赖\"><a class=\"anchor\" href=\"#3nacos的依赖\">#</a> 3.Nacos 的依赖</h1>\n<p>父工程：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.5.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>客户端：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- nacos 客户端依赖包 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "Nacos",
                "计算机学科",
                "基础",
                "springcloud",
                "Nacos"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/Nacos/nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/spring/springcloud/Nacos/nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/",
            "title": "Nacos集群搭建",
            "date_published": "2024-01-06T02:33:28.222Z",
            "content_html": "<h1 id=\"nacos集群搭建\"><a class=\"anchor\" href=\"#nacos集群搭建\">#</a> Nacos 集群搭建</h1>\n<p>1. 集群结构图</p>\n<p>官方给出的 Nacos 集群图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061439329.png\" alt=\"image-20210409210621117\" /></p>\n<p>其中包含 3 个 nacos 节点，然后一个负载均衡器代理 3 个 Nacos。这里负载均衡器可以使用 nginx。</p>\n<p>我们计划的集群结构：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061439932.png\" alt=\"image-20210409211355037\" /></p>\n<p>三个 nacos 节点的地址：</p>\n<table>\n<thead>\n<tr>\n<th>节点</th>\n<th>ip</th>\n<th>port</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nacos1</td>\n<td>192.168.150.1</td>\n<td>8845</td>\n</tr>\n<tr>\n<td>nacos2</td>\n<td>192.168.150.1</td>\n<td>8846</td>\n</tr>\n<tr>\n<td>nacos3</td>\n<td>192.168.150.1</td>\n<td>8847</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"2搭建集群\"><a class=\"anchor\" href=\"#2搭建集群\">#</a> 2. 搭建集群</h1>\n<p>搭建集群的基本步骤：</p>\n<ul>\n<li>搭建数据库，初始化数据库表结构</li>\n<li>下载 nacos 安装包</li>\n<li>配置 nacos</li>\n<li>启动 nacos 集群</li>\n<li>nginx 反向代理</li>\n</ul>\n<h2 id=\"21初始化数据库\"><a class=\"anchor\" href=\"#21初始化数据库\">#</a> 2.1. 初始化数据库</h2>\n<p>Nacos 默认数据存储在内嵌数据库 Derby 中，不属于生产可用的数据库。</p>\n<p>官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库可以参考<strong>传智教育</strong>的后续高手课程。</p>\n<p>这里我们以单点的数据库为例来讲解。</p>\n<p>首先新建一个数据库，命名为 nacos，而后导入下面的 SQL：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>config_info<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'data_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">longtext</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>md5<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'md5'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_user<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'source user'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_ip<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'source ip'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>app_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'租户字段'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>c_desc<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>c_use<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>effect<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>type<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>c_schema<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_configinfo_datagrouptenant<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'config_info'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*   表名称 = config_info_aggr   */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>config_info_aggr<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'data_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'group_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>datum_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'datum_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">longtext</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'内容'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>app_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'租户字段'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_configinfoaggr_datagrouptenantdatum<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>datum_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'增加租户字段'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">/*   表名称 = config_info_beta   */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>config_info_beta<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'data_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'group_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>app_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'app_name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">longtext</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>beta_ips<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'betaIps'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>md5<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'md5'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_user<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'source user'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_ip<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'source ip'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'租户字段'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_configinfobeta_datagrouptenant<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'config_info_beta'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">/*   表名称 = config_info_tag   */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>config_info_tag<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'data_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'group_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tenant_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tag_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tag_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>app_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'app_name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">longtext</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>md5<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'md5'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_user<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'source user'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_ip<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'source ip'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_configinfotag_datagrouptenanttag<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tag_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'config_info_tag'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">/*   表名称 = config_tags_relation   */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>config_tags_relation<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tag_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tag_name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tag_type<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tag_type'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'data_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'group_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tenant_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>nid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>nid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_configtagrelation_configidtag<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tag_name<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tag_type<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'config_tag_relation'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">/*   表名称 = group_capacity   */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_capacity<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'Group ID，空字符表示整个集群'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>quota<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'配额，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>usage<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'使用量'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_size<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'单个配置大小上限，单位为字节，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_aggr_count<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'聚合子配置最大个数，，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_aggr_size<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_history_count<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'最大变更历史数量'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_group_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'集群、各Group容量信息表'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\">/*   表名称 = his_config_info   */</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>his_config_info<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>nid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>app_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'app_name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">longtext</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>md5<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_user<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>src_ip<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>op_type<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'租户字段'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>nid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_did<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>data_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'多租户改造'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\">/*   数据库全名 = nacos_config   */</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\">/*   表名称 = tenant_capacity   */</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token comment\">/******************************************/</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_capacity<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'主键ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'Tenant ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>quota<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'配额，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>usage<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'使用量'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_size<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'单个配置大小上限，单位为字节，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_aggr_count<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'聚合子配置最大个数'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_aggr_size<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>max_history_count<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'最大变更历史数量'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'租户容量信息表'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_info<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>kp<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'kp'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tenant_id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_name<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tenant_name'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_desc<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'tenant_desc'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>create_source<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'create_source'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_tenant_info_kptenantid<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>kp<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_tenant_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>tenant_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8 <span class=\"token keyword\">COLLATE</span><span class=\"token operator\">=</span>utf8_bin <span class=\"token keyword\">COMMENT</span><span class=\"token operator\">=</span><span class=\"token string\">'tenant_info'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>users<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>password<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>enabled<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">boolean</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>roles<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t<span class=\"token identifier\"><span class=\"token punctuation\">`</span>role<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_user_role<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>role<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">ASC</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>permissions<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>role<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>resource<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>action<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>uk_role_permission<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>role<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>resource<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>action<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> users <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'nacos'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">TRUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> roles <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'nacos'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ROLE_ADMIN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"22下载nacos\"><a class=\"anchor\" href=\"#22下载nacos\">#</a> 2.2. 下载 nacos</h2>\n<p>nacos 在 GitHub 上有下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvdGFncyVFRiVCQyU4QyVFNSU4RiVBRiVFNCVCQiVBNSVFOSU4MCU4OSVFNiU4QiVBOSVFNCVCQiVCQiVFNiU4NCU4RiVFNyU4OSU4OCVFNiU5QyVBQyVFNCVCOCU4QiVFOCVCRCVCRCVFMyU4MCU4Mg==\">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</span></p>\n<p>本例中才用 1.4.1 版本：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061439539.png\" alt=\"image-20210409212119411\" /></p>\n<h2 id=\"23配置nacos\"><a class=\"anchor\" href=\"#23配置nacos\">#</a> 2.3. 配置 Nacos</h2>\n<p>将这个包解压到任意非中文目录下，如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061439220.png\" alt=\"image-20210402161843337\" /></p>\n<p>目录说明：</p>\n<ul>\n<li>bin：启动脚本</li>\n<li>conf：配置文件</li>\n</ul>\n<p>进入 nacos 的 conf 目录，修改配置文件 cluster.conf.example，重命名为 cluster.conf：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061440003.png\" alt=\"image-20210409212459292\" /></p>\n<p>然后添加内容：</p>\n<p>集群中每一个节点的信息</p>\n<p>如果是在生产环境下那下面三个都应该是真实机器的 ip 地址和端口号</p>\n<pre><code>127.0.0.1:8845\n127.0.0.1.8846\n127.0.0.1.8847\n</code></pre>\n<p>然后修改 application.properties 文件，添加数据库配置</p>\n<p>将配置文件中如下的配置的注释全部去掉也就是打开</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">spring.datasource.platform</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">mysql</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">db.num</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">db.url.0</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">db.user.0</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">db.password.0</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">123</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061439107.png\" alt=\"image-20231006143926134\" /></p>\n<h2 id=\"24启动\"><a class=\"anchor\" href=\"#24启动\">#</a> 2.4. 启动</h2>\n<p>将 nacos 文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061440201.png\" alt=\"image-20210409213335538\" /></p>\n<p>然后分别修改三个文件夹中的 application.properties，</p>\n<p>nacos1:</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8845</span></pre></td></tr></table></figure><p>nacos2:</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8846</span></pre></td></tr></table></figure><p>nacos3:</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8847</span></pre></td></tr></table></figure><p>然后分别启动三个 nacos 节点：</p>\n<p>&lt;font color='red'&gt; 注意 &lt;/font&gt;：此时启动不需要加参数了，直接启动即可。因为现在是集群启动 (默认)</p>\n<pre><code>startup.cmd\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061454156.png\" alt=\"image-20231006145123931\" /></p>\n<p>然后依次访问一下 url 看看是否正常启动了</p>\n<p>正常启动了！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061453370.png\" alt=\"image-20231006145253400\" /></p>\n<h2 id=\"25nginx反向代理\"><a class=\"anchor\" href=\"#25nginx反向代理\">#</a> 2.5.nginx 反向代理</h2>\n<p>找到课前资料提供的 nginx 安装包：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061440828.png\" alt=\"image-20210410103253355\" /></p>\n<p>解压到任意非中文目录下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061440364.png\" alt=\"image-20210410103322874\" /></p>\n<p>修改 conf/nginx.conf 文件，配置如下：</p>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">http</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token directive\"><span class=\"token keyword\">upstream</span> nacos-cluster</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token directive\"><span class=\"token keyword\">server</span> 127.0.0.1:8845</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token directive\"><span class=\"token keyword\">server</span> 127.0.0.1:8846</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token directive\"><span class=\"token keyword\">server</span> 127.0.0.1:8847</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token directive\"><span class=\"token keyword\">server</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token directive\"><span class=\"token keyword\">listen</span>       <span class=\"token number\">80</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    \t<span class=\"token directive\"><span class=\"token keyword\">server_name</span>  localhost</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token directive\"><span class=\"token keyword\">location</span> /nacos</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://nacos-cluster</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整的配置文件信息：</p>\n<pre><code>\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents &#123;\n    worker_connections  1024;\n&#125;\n\n\nhttp &#123;\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] &quot;$request&quot; '\n    #                  '$status $body_bytes_sent &quot;$http_referer&quot; '\n    #                  '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server &#123;\n        listen       88;\n        server_name  localhost;\n\n        location / &#123;\n            root   html;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n    &#125;\n\tupstream nacos-cluster &#123;\n    \t\tserver 127.0.0.1:8845;\n\t\tserver 127.0.0.1:8846;\n\t\tserver 127.0.0.1:8847;\n\t&#125;\n\n\tserver &#123;\n    \t\tlisten       80;\n    \t\tserver_name  localhost;\n\n    \t\tlocation /nacos &#123;\n        \t\tproxy_pass http://nacos-cluster;\n    \t\t&#125;\n\t&#125;\n&#125;\n</code></pre>\n<p>配置完成后启动 nginx，执行命令：start nginx.exe</p>\n<p>访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4OC8lRTYlOUYlQTUlRTclOUMlOEIlRTYlOTglQUYlRTUlOTAlQTYlRTglODMlQkQlRTYlQUQlQTMlRTUlQjglQjglRTglQUUlQkYlRTklOTclQUU=\">http://localhost:88 / 查看是否能正常访问</span></p>\n<p>nginx 启动成功！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061521543.png\" alt=\"image-20231006152139209\" /></p>\n<p>而后在浏览器访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdC9uYWNvcyVFNSU4RCVCMyVFNSU4RiVBRiVFMyU4MCU4Mg==\">http://localhost/nacos 即可。</span></p>\n<p>到这儿！集群搭建就成功了。看着像是访问的一个 nacos，事实上它会在三个 nacos 之间做一个负载均衡</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061522455.png\" alt=\"image-20231006152205310\" /></p>\n<p>问题来了，java 代码该如何配呢，在 java 的 yml 配置文件中将 nacos 的服务地址改为对应的端口也就是 80 端口</p>\n<p>代码中 bootstrap.yml 文件配置如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> userservice <span class=\"token comment\"># 服务名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">profiles</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">active</span><span class=\"token punctuation\">:</span> dev <span class=\"token comment\"># 环境</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">80</span> <span class=\"token comment\"># nacos 地址，这里找的是 nginx 反向代理的地址它会根据负载均衡来启动 nacos</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token key atrule\">file-extension</span><span class=\"token punctuation\">:</span> yaml <span class=\"token comment\"># 配置文件后缀名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 三要素：服务名称，环境，后缀名 而这三个决定了 DateId</span></pre></td></tr></table></figure><p>启动 user-service 服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061528874.png\" alt=\"image-20231006152811433\" /></p>\n<p>我们查看 nacos 控制台中的服务列表。</p>\n<p>可以看到成功的注册进来了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061528168.png\" alt=\"image-20231006152847028\" /></p>\n<p>我们创建一个配置文件，点击发布</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061544827.png\" alt=\"image-20231006154304156\" /></p>\n<p>发布后查看数据库中的 config_info 表里面的信息，就可以看到多了一条信息就是创建的环境配置文件的信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310061545446.png\" alt=\"image-20231006154339296\" /></p>\n<blockquote>\n<p><strong>总结</strong>：</p>\n<p>集群搭建步骤：</p>\n<ol>\n<li>搭建 MySQL 集群并初始化数据库表</li>\n<li>下载解压 nacos</li>\n<li>修改集群配置 (节点信息)，数据库配置</li>\n<li>分别启动多个 nacos 节点</li>\n<li>nginx 反向代理</li>\n</ol>\n</blockquote>\n<h2 id=\"26优化\"><a class=\"anchor\" href=\"#26优化\">#</a> 2.6. 优化</h2>\n<ul>\n<li>\n<p>实际部署时，需要给做反向代理的 nginx 服务器设置一个域名，这样后续如果有服务器迁移 nacos 的客户端也无需更改配置.</p>\n</li>\n<li>\n<p>Nacos 的各个节点应该部署到多个不同服务器，做好容灾和隔离</p>\n</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "java",
                "spring",
                "springcloud",
                "Nacos",
                "计算机学科",
                "集群",
                "springcloud",
                "Nacos"
            ]
        }
    ]
}