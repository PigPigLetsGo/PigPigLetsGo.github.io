{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dkx の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/JSON/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/JSON/",
            "title": "初始JSON",
            "date_published": "2024-01-08T07:37:07.753Z",
            "content_html": "<h1 id=\"初始json\"><a class=\"anchor\" href=\"#初始json\">#</a> 初始 JSON</h1>\n<h2 id=\"json是什么\"><a class=\"anchor\" href=\"#json是什么\">#</a> JSON 是什么</h2>\n<p>Ajax 发送和接收数据的一种格式</p>\n<p>JSON 全称是 JavaScript Object Notation</p>\n<h2 id=\"为什么需要json\"><a class=\"anchor\" href=\"#为什么需要json\">#</a> 为什么需要 JSON</h2>\n<p>JSON 有 3 种形式，每种形式的写法都和 JS 中的数据类型很像，可以很轻松的和 JS 中的数据类型互相转换。</p>\n<h2 id=\"json的3中形式\"><a class=\"anchor\" href=\"#json的3中形式\">#</a> JSON 的 3 中形式</h2>\n<h3 id=\"简单值形式\"><a class=\"anchor\" href=\"#简单值形式\">#</a> 简单值形式</h3>\n<p>JSON 的简单值形式就对应着 JS 中的基础数据类型</p>\n<p>数字，字符串，布尔值，null</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"username\"</span></pre></td></tr></table></figure><p>注意事项：</p>\n<ol>\n<li>JSON 中没有 undefined 值</li>\n<li>JSON 中的字符串必须使用双引号</li>\n<li>JSON 中是不能注释的</li>\n</ol>\n<h3 id=\"对象形式\"><a class=\"anchor\" href=\"#对象形式\">#</a> 对象形式</h3>\n<p>JSON 的对象形式就对应着 JS 中的对象</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t<span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   \t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"20\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意事项：</p>\n<p>JSON 中对象的属性名必须用双引号，属性值如果是字符串也必须用双引号。</p>\n<p>JSON 中只要涉及到字符串，就必须使用双引号。</p>\n<p>不支持 undefined</p>\n<h3 id=\"数组形式\"><a class=\"anchor\" href=\"#数组形式\">#</a> 数组形式</h3>\n<p>JSON 的数组形式就对应着 JS 中的数组</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"刘桑\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意事项：</p>\n<p>数组中的字符串必须使用双引号</p>\n<p>JSON 中只要涉及到字符串，就必须使用双引号</p>\n<p>不支持 undefined</p>\n<h2 id=\"json的常用方法\"><a class=\"anchor\" href=\"#json的常用方法\">#</a> JSON 的常用方法</h2>\n<h3 id=\"jsonparse\"><a class=\"anchor\" href=\"#jsonparse\">#</a> JSON.parse</h3>\n<p>JSON.parse 可以将 JSON 格式的字符串解析成 JS 中的对应值</p>\n<p>一定要是合法的 JSON 字符串，否则会报错</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jsonstringify\"><a class=\"anchor\" href=\"#jsonstringify\">#</a> JSON.stringify</h3>\n<p>JSON.stringify 可以将 JS 的基本数据类型，对象或者数组转换成 JSON</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"zuqi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bingbqiu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">userTo</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span><span class=\"token string\">\"sl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token literal-property property\">mother</span><span class=\"token operator\">:</span><span class=\"token string\">\"lidama\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用jsonparse和jsonstringify封装localstorage\"><a class=\"anchor\" href=\"#使用jsonparse和jsonstringify封装localstorage\">#</a> 使用 JSON.parse 和 JSON.stringify 封装 localStorage</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740061.png\" alt=\"image-20230530164849606\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740654.png\" alt=\"image-20230530164902425\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span>clear<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740615.png\" alt=\"image-20230530165013596\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740239.png\" alt=\"image-20230530165025302\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span>clear<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740337.png\" alt=\"image-20230530165051597\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740675.png\" alt=\"image-20230530165100768\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互",
                "数据格式"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/js/%E5%AD%98%E5%82%A8/localStorage/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/js/%E5%AD%98%E5%82%A8/localStorage/",
            "title": "初始localStorage",
            "date_published": "2024-01-08T07:35:16.977Z",
            "content_html": "<h1 id=\"初始localstorage\"><a class=\"anchor\" href=\"#初始localstorage\">#</a> 初始 localStorage</h1>\n<h2 id=\"localstorage是什么\"><a class=\"anchor\" href=\"#localstorage是什么\">#</a> localStorage 是什么</h2>\n<p>localStorage 也是一种浏览器存储数据的方式 (本地存储)，它只是存储在本地，不会发送到服务器端。</p>\n<p>单个域名下的 localStorage 总大小有限制。</p>\n<h2 id=\"在浏览器中操作localstorage\"><a class=\"anchor\" href=\"#在浏览器中操作localstorage\">#</a> 在浏览器中操作 localStorage</h2>\n<h3 id=\"localstorage的基本用法\"><a class=\"anchor\" href=\"#localstorage的基本用法\">#</a> localStorage 的基本用法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740380.png\" alt=\"image-20230529160720332\" /></p>\n<h3 id=\"向localstorage中添加数据\"><a class=\"anchor\" href=\"#向localstorage中添加数据\">#</a> 向 localStorage 中添加数据</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'lisk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741101.png\" alt=\"image-20230529160746545\" /></p>\n<h3 id=\"获取localstorage中的数据\"><a class=\"anchor\" href=\"#获取localstorage中的数据\">#</a> 获取 localStorage 中的数据</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取不存在的返回 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741897.png\" alt=\"image-20230529161039653\" /></p>\n<p>删除 localStorage 中的数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741739.png\" alt=\"image-20230529161250485\" /></p>\n<p>清空 localStorage 中所有数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741469.png\" alt=\"image-20230529161408488\" /></p>\n<h2 id=\"使用localstorage实现自动填充\"><a class=\"anchor\" href=\"#使用localstorage实现自动填充\">#</a> 使用 localStorage 实现自动填充</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nth<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>提交<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token comment\">// 通过 id 获取 form 标签</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token keyword\">let</span> loginForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token comment\">// 通过 id 获取按钮标签</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token keyword\">let</span> nth <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nth'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 从 localStorage 中获取 username 的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token comment\">// 判断是否为 null</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 不为 null 则赋值给 username 里</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> username</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token comment\">// 绑定点击事件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         nth<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 阻止默认的点击事件执行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将获取到 username 中的 value 添加到 localStorage 中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span>loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 执行提交事件</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040753445.png\" alt=\"image-20230529164617853\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040753926.png\" alt=\"image-20230529164606522\" /></p>\n<h2 id=\"localstorage的注意事项\"><a class=\"anchor\" href=\"#localstorage的注意事项\">#</a> localStorage 的注意事项</h2>\n<h3 id=\"localstorage的存储期限\"><a class=\"anchor\" href=\"#localstorage的存储期限\">#</a> localStorage 的存储期限</h3>\n<p>localStorage 是持久化的<mark>本地存储</mark>，除非<mark>手动清除</mark> (比如<mark>通过 js 删除</mark>，或者<mark>清除浏览器缓存</mark>)，否则数据是<mark>永远不会过期的</mark>。</p>\n<blockquote>\n<p>sessionStorage</p>\n<p>当会话结束 (比如关闭浏览器) 的时候，sessionStorage 中的数据会被清空</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"localstorage键和值的类型\"><a class=\"anchor\" href=\"#localstorage键和值的类型\">#</a> localStorage 键和值的类型</h3>\n<p>localStorage 存储的键和值 &lt;font color=red&gt;<strong> 只能是字符串类型</strong> &lt;/font&gt;.</p>\n<p>不是字符串类型，也会先转化为字符串类型再存进去</p>\n<h3 id=\"不同域名下能否共用localstorage\"><a class=\"anchor\" href=\"#不同域名下能否共用localstorage\">#</a> 不同域名下能否共用 localStorage</h3>\n<p>不同的域名是不能共用 localStorage 的</p>\n<h3 id=\"localstorage的兼容性\"><a class=\"anchor\" href=\"#localstorage的兼容性\">#</a> localStorage 的兼容性</h3>\n<p>查询网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8=\">https://caniuse.com/</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040744887.png\" alt=\"image-20230529170617884\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "js",
                "存储",
                "计算机学科",
                "web",
                "js",
                "存储"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/js/%E5%AD%98%E5%82%A8/Cookie/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/js/%E5%AD%98%E5%82%A8/Cookie/",
            "title": "初始Cookie",
            "date_published": "2024-01-08T07:35:07.913Z",
            "content_html": "<h1 id=\"初始cookie\"><a class=\"anchor\" href=\"#初始cookie\">#</a> 初始 Cookie</h1>\n<h2 id=\"cookie是什么\"><a class=\"anchor\" href=\"#cookie是什么\">#</a> Cookie 是什么</h2>\n<p>Cookie 全称 HTTP Cookie ，简称 Cookie，是浏览器存储数据的一种方式，因为存储在用户本地，而不是存储在服务器上，是本地存储。一般会自动随着浏览器每次请求发给送到服务器端。</p>\n<h2 id=\"cookie有什么用\"><a class=\"anchor\" href=\"#cookie有什么用\">#</a> Cookie 有什么用</h2>\n<p>利用 Cookie 跟踪统计用户访问该网站的习惯，比如什么时间访问，访问了哪些页面，在每个网页的停留时间等。</p>\n<h2 id=\"在浏览器中操作cookie\"><a class=\"anchor\" href=\"#在浏览器中操作cookie\">#</a> 在浏览器中操作 Cookie</h2>\n<p>先看下页面的请求头信息，里面并没有 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755678.png\" alt=\"image-20230529100840334\" /></p>\n<p>打开控制台找到 Cookies 在里面设置一个 Cookie 键值对</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756713.png\" alt=\"image-20230529100621798\" /></p>\n<p>设置完成后点击 NetWork，刷新下页面就会向服务器端发送一次 Cookie 请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756361.png\" alt=\"image-20230529100930844\" /></p>\n<p>控制台使用 js 代码来查看 Cookie，获取多个 Cookie 会以分号分隔。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756912.png\" alt=\"image-20230529101120541\" /></p>\n<p>Cookie 是明文显示的，不要使用 Cookie 存储敏感信息。</p>\n<h2 id=\"cookie的基本用法\"><a class=\"anchor\" href=\"#cookie的基本用法\">#</a> Cookie 的基本用法</h2>\n<h3 id=\"写入cookie\"><a class=\"anchor\" href=\"#写入cookie\">#</a> 写入 Cookie</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 写入 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username=刘桑'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'age=18'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 不能一起设置，只能一个一个设置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//document.cookie = 'username = 刘桑；age=18'</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756121.png\" alt=\"image-20230529102501653\" /></p>\n<h3 id=\"读取cookie\"><a class=\"anchor\" href=\"#读取cookie\">#</a> 读取 Cookie</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2. 读取 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 读取的是一个由键值对构成的字符串，每个键值对之间由 \";\" (一个分号和一个空格) 隔开</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756735.png\" alt=\"image-20230529102516584\" /></p>\n<h2 id=\"cookie的属性\"><a class=\"anchor\" href=\"#cookie的属性\">#</a> Cookie 的属性</h2>\n<h3 id=\"1cookie的键name和值value\"><a class=\"anchor\" href=\"#1cookie的键name和值value\">#</a> 1.Cookie 的键 (name) 和值 (value)</h3>\n<p>最重要的两个属性，创建 Cookie 时必须填写，其它属性可以使用默认值</p>\n<blockquote>\n<p>Cookie 的键值如果包含非英文字母，则写入时需要使用 encodeURIComponent () 编码，读取时使用 decodeURIComponent () 解码。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 一般键使用英文字母，不要用中文，值可以用中文，但是要编码 &lt;/font&gt;。</p>\n<h3 id=\"2失效到期时间\"><a class=\"anchor\" href=\"#2失效到期时间\">#</a> 2. 失效 (到期) 时间</h3>\n<p>对于失效的 Cookie，会被浏览器清除</p>\n<p>默认会话 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756419.png\" alt=\"image-20230529105442704\" /></p>\n<blockquote>\n<p>如果没有设置失效 (到期) 时间，这样的 Cookie 称为会话 Cookie，它存在内存中，当会话结束，也就是浏览器关闭时 (不是关闭当前页面)，Cookie 消失</p>\n</blockquote>\n<p>想让 Cookie 长时间存在，设置 Expires 或 Max-Age</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//expires</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 值为 Date 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username1=dkx; expires=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">'2100-1-01 00:00:00'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//max-age</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 值 为数字，表示当前时间 + 多少秒后过期，单位时秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token string\">'username=dkx1; max-age=5'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    设置 Cookie 存活时间为 30 天</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756190.png\" alt=\"image-20230529105522647\" /></p>\n<p>如果 max-age 的值是 0 或负数，则 Cookie 会被删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=0</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=-1</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756761.png\" alt=\"image-20230529105726676\" /></p>\n<h3 id=\"3domain域\"><a class=\"anchor\" href=\"#3domain域\">#</a> 3.Domain 域</h3>\n<p>Domain 限定了访问 Cookie 的范围</p>\n<p>使用 JS 只能读写当前域或父域的 Cookie，无法读写其它域的 Cookie</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username=dkx; domain=www.taobao.com'</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span>  <span class=\"exturl\" data-url=\"aHR0cDovL21haW4ubS50YW9iYW8uY29t\">main.m.taobao.com</span> 当前域</p>\n<p>父域：.taobao.com</p>\n<p>也就是需要在它们共同存在的域下设置的 Cookie 才能访问到</p>\n<p><strong>操作</strong>：</p>\n<p>PC 端淘宝：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756721.png\" alt=\"image-20230529111416183\" /></p>\n<p>查看 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757921.png\" alt=\"image-20230529111454087\" /></p>\n<p>查看：手机端的淘宝 <span class=\"exturl\" data-url=\"aHR0cDovL21haW4ubS50YW9iYW8uY29t\">main.m.taobao.com</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757707.png\" alt=\"image-20230529111528150\" /></p>\n<p>查看 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757623.png\" alt=\"image-20230529111537366\" /></p>\n<h3 id=\"4path路径\"><a class=\"anchor\" href=\"#4path路径\">#</a> 4.Path 路径</h3>\n<p>Path 限定了访问 Cookie 的范围 (同一个域名下)</p>\n<p>使用 JS 只能读写当前路径和上级路径的 Cookie，无法读写下级路径的 Cookie</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token string\">'username=dkx; path=\\路径'</span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 当 Name，Domain，Path 这 3 个字段都相同的时候，才是同一个 Cookie&lt;/font&gt;。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757848.png\" alt=\"image-20230529112550487\" /></p>\n<h3 id=\"5httponly\"><a class=\"anchor\" href=\"#5httponly\">#</a> 5.HttpOnly</h3>\n<p>设置了 HttpOnly 属性的 Cookie 不能通过 js 去访问</p>\n<blockquote>\n<p>前端不能通过 js 去设置一个 HttpOnly 类型的 Cookie，这种类型的 Cookie 只能是后端来设置</p>\n<p>只要是 HttpOnly 类型的，通过 document.cookie 是获取不到的，也不能进行修改</p>\n</blockquote>\n<h3 id=\"6secure安全标志\"><a class=\"anchor\" href=\"#6secure安全标志\">#</a> 6.Secure 安全标志</h3>\n<p>Secure 限定了只有在使用了 https 而不是 http 的情况下才可以发送给服务端</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;Domain，Path，Secure 都要满足条件，还不能过期的 Cookie 才能随着请求发送到服务器端 &lt;/font&gt;。</p>\n<h2 id=\"cookie的封装\"><a class=\"anchor\" href=\"#cookie的封装\">#</a> Cookie 的封装</h2>\n<h3 id=\"封装cookie\"><a class=\"anchor\" href=\"#封装cookie\">#</a> 封装 Cookie</h3>\n<p>创建 html 页面在 script 标签中导入封装的 js 文件和要使用的方法</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token comment\">// 导入 js 文件和对应要使用的方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/cookie.js'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 设置 cookie</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 删除 cookie</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token comment\">// 获取 cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建 js 文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 写入 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//  可选赋值参数           默认值 undefined 设置为空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>maxAge<span class=\"token punctuation\">,</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> cookieText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> maxAge <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; max-age=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>maxAge<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; domain=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>domain<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; path=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>path<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>secure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; secure</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> cookieText</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 通过 name 获取 cookie 值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">const</span> cookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> itme <span class=\"token keyword\">of</span> cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>cookieName<span class=\"token punctuation\">,</span>cookieValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> itme<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookieName <span class=\"token operator\">==</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token keyword\">return</span> cookieValue</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 根据 name,domain,path 删除 cookie</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 导出方法</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757775.png\" alt=\"image-20230529152224212\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757698.png\" alt=\"image-20230529152234954\" /></p>\n<h2 id=\"cookie的注意事项\"><a class=\"anchor\" href=\"#cookie的注意事项\">#</a> Cookie 的注意事项</h2>\n<h3 id=\"前后端都可以写入和获取cookie\"><a class=\"anchor\" href=\"#前后端都可以写入和获取cookie\">#</a> 前后端都可以写入和获取 Cookie</h3>\n<h3 id=\"cookie有数量-限制\"><a class=\"anchor\" href=\"#cookie有数量-限制\">#</a> Cookie 有数量 限制</h3>\n<p>每个域名下的 Cookie 数量有限</p>\n<p>当超过单个域名限制之后，再设置 Cookie，浏览器就会清除以前设置的 Cookie</p>\n<h3 id=\"cookie有大小-限制\"><a class=\"anchor\" href=\"#cookie有大小-限制\">#</a> Cookie 有大小 限制</h3>\n<p>每个 Cookie 的存储容量很小，最多只有 4KB 左右</p>\n",
            "tags": [
                "计算机学科",
                "web",
                "js",
                "存储",
                "计算机学科",
                "web",
                "js",
                "存储"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Fetch/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Fetch/",
            "title": "Fetch",
            "date_published": "2024-01-08T07:33:49.267Z",
            "content_html": "<h1 id=\"fetch\"><a class=\"anchor\" href=\"#fetch\">#</a> Fetch</h1>\n<h2 id=\"fetch是什么\"><a class=\"anchor\" href=\"#fetch是什么\">#</a> Fetch 是什么</h2>\n<p>Fetch 也是前后端通信的一种方式。</p>\n<p>Fetch 是 Ajax (XMLHttpRequest) 的一种替代方案，它是基于 Promise 的。</p>\n<p>Ajax 的兼容性比 Fetch 好。</p>\n<p>Fetch 中目前还没有 abort，timeout，这些想要使用还要我们去实现。</p>\n<h2 id=\"fetch的基本用法\"><a class=\"anchor\" href=\"#fetch的基本用法\">#</a> Fetch 的基本用法</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：在 js 中是有 fetch 这个东西的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734678.png\" alt=\"image-20230531201344579\" /></p>\n<ol>\n<li>\n<pre><code>Response &#123;type: 'cors', url: 'http://127.0.0.1:81/data', redirected: false, status: 200, ok: true, …&#125;\nbody: ReadableStream\nbodyUsed: false\nheaders: Headers &#123;&#125;\nok: true\nredirected: false\nstatus: 200\nstatusText: &quot;&quot;\ntype: &quot;cors&quot;\nurl: &quot;http://127.0.0.1:81/data&quot;\n[[Prototype]]: Response\n</code></pre>\n</li>\n<li>\n<p>body/bodyUsed：只能读一次，读过之后就不让再读了。</p>\n</li>\n<li>\n<p>OK：如果 OK 为 true，表示可以读取数据，不用再去判断 HTTP 状态码了。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：返回了一个 Promise 对象，我们需要将他返回出去才能看到数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735239.png\" alt=\"image-20230531202444465\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>报错了，翻译一下：</p>\n<p><img data-src=\"./images/image-20230531202627455.png\" alt=\"image-20230531202627455\" /></p>\n<pre><code>类型错误：无法在“响应”上执行“json”：正文流已读取\n取.html：16：29\n</code></pre>\n<p>原因是读取了两次，上面 body 明确不可以读取两次的只能读取一次</p>\n<p>将返回值上面的 console.log 读取数据的给注释掉</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// console.log(response.json())</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>数据就读取出来了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735394.png\" alt=\"image-20230531202830539\" /></p>\n<p>如果数据不是 JSON 格式的则使用 response.text () 来返回文本格式的数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// console.log(response.json())</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// return response.json()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735213.png\" alt=\"image-20230531203055670\" /></p>\n<h2 id=\"fetch第二个参数是对象用来配置fetch\"><a class=\"anchor\" href=\"#fetch第二个参数是对象用来配置fetch\">#</a> Fetch 第二个参数是对象，用来配置 Fetch。</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//boey 发送请求体数据，发送 json 使用 body 直接传会报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 直接传递对应的类型为 x-www-form-urlencoded</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// body:null,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">//body:'name = 张三 & amp;age=18',</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 不能直接传对象需要自己转</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 跨域资源共享，默认就是 cors</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 跨域请求是否携带 Cooki, 传入的不再是布尔值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span><span class=\"token string\">'include'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735416.png\" alt=\"image-20230531205447013\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Axios/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Axios/",
            "title": "Axios",
            "date_published": "2024-01-08T07:33:19.129Z",
            "content_html": "<h1 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> Axios</h1>\n<h2 id=\"axios是什么\"><a class=\"anchor\" href=\"#axios是什么\">#</a> Axios 是什么</h2>\n<p>Axios 是一个给予 Peromise 的 HTTP 库，可以用在浏览器和 node.js 中</p>\n<p>第三方 Ajax 库</p>\n<p>Axios 中文官方文档：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20v\">http://www.axios-js.com/</span></p>\n<p>或者电脑安装了 node.js 则可以使用 node.js 来进行下载 axios.js 到本地，这样可以提升访问的速度了。</p>\n<p><strong>步骤</strong>：</p>\n<p>1 执行命令：下载 axios 到本地</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios</pre></td></tr></table></figure><p>执行后下载到的地方一般在用户文件夹中的 node_modules 中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131717320.png\" alt=\"image-20230813171704981\" /></p>\n<p>2 也可以直接在项目中打开终端执行命令下载可以直接使用。然后将下载的 axios 文件夹 剪切到项目中</p>\n<blockquote>\n<p>注意：不要直接剪切走 node_modules 文件夹，这是在项目中执行命令生成的。</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131719218.png\" alt=\"image-20230813171832066\" /></p>\n<p>3 引入 axios 到 html 页面中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span>\"width<span class=\"token operator\">=</span>device<span class=\"token operator\">-</span>width<span class=\"token punctuation\">,</span> initial<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    minimun<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>maximun<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>user<span class=\"token operator\">-</span>scalable<span class=\"token operator\">=</span>no\"<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 引入 axios</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javaScript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./node_modules/axios/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印一下 axios 函数 看看是否引入成功了。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>结果</strong>： OK ! 可以使用了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131721605.png\" alt=\"image-20230813172101445\" /></p>\n<h2 id=\"axios的基本用法\"><a class=\"anchor\" href=\"#axios的基本用法\">#</a> Axios 的基本用法</h2>\n<p>引入 Axios 第三方库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/axios@1.4.0/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看是否引入成功</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732260.png\" alt=\"image-20230531191826664\" /></p>\n<p>使用 Axios 发送请求：</p>\n<p>使用结构：</p>\n<p>url：请求地址</p>\n<p>method：直接使用 axios 需要使用 method 指定请求方式如：post，get</p>\n<p>headers：指定请求头信息</p>\n<p>params：请求头携带的数据</p>\n<p>data：请求体携带的数据</p>\n<p>params 和 data 可以同时设置参数不会报错</p>\n<p>timeout：设置请求超时时间</p>\n<p>withCredentials：跨域请求是否携带 Cookie</p>\n<p>Axios 的超时报错效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732887.png\" alt=\"image-20230531195700272\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 请求时的头信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">heaers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 'Content-Type':'application/x-www-form-urlencoded'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 通过请求头携带的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 通过请求体携带的数据，传递 JSON 数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 传递 application/x-www-form-urlencoded 数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//data:'name = 张三李四 & amp;age=18'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 设置超时时间，超出时间后报错</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 跨域是否携带 Cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732256.png\" alt=\"image-20230531194731633\" /></p>\n<p>使用 Axios 调用 get，post 请求方式：</p>\n<p>可以不用写 headers</p>\n<p><mark>GET</mark></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url1 <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json-get'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732190.png\" alt=\"image-20230531195732003\" /></p>\n<p><mark>POST</mark></p>\n<p>还是同样的：'name = 张三 &amp; age=18' 对应数据格式为：application/x-www-form-urlencoded</p>\n<p>而 {name:' 张三 ',age:18} 对应数据格式为：appliction/json，如果后端需要 json 而传递了 x-www-form-urlencoded 则会报错 415</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'name=张三&amp;age=18'</span><span class=\"token comment\">/*&#123;name:' 张三 ',age:18&#125;*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"content-type与data-type的区别\"><a class=\"anchor\" href=\"#content-type与data-type的区别\">#</a> Content-Type 与 data-Type 的区别</h2>\n<p>content-Type：告诉服务器，我要发什么类型的数据。</p>\n<p>data-Type：告诉服务器，我想要什么类型的数据，如果没有指定，那么会自动推断是返回 XML，还是 JSON，还是 script，还是 String。</p>\n<h2 id=\"axios请求拦截器\"><a class=\"anchor\" href=\"#axios请求拦截器\">#</a> axios 请求拦截器</h2>\n<p>axios 请求拦截器：发起请求之前，触发的配置函数，对 &lt;font title=red&gt; 请求参数 &lt;/font &gt; 进行额外配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 做统一设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 统一携带 token 令牌字符串在请求头上 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 逻辑中断判断，如果有 token 则不进行设置，如果没有则进行设置 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   token <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>haeads<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>toke<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当我们在请求个人信息，所有频道，文章列表时都会先经过请求拦截器，然后访问服务器查看 token 是否合法，合法则返回数据到 axios 请求中 得到个人信息，所有频道数据，文章列表数据等。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151310161.png\" alt=\"image-20230813212511388\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是 axios 请求拦截器？\n<ul>\n<li>发起请求之前，调用一个 &lt;font title=red&gt; 函数 &lt;/font&gt;，对 &lt; font title=red &gt; 请求参数 &lt;/font &gt; 进行 &lt; font title=red &gt; 设置 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>axios 请求拦截器，什么时候使用？\n<ul>\n<li>有 &lt;font title=red&gt; 公共配置 &lt;/font &gt; 和设置时，<mark>统一</mark>设置在请求拦截器中</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132155054.png\" alt=\"image-20230813215516420\" /></p>\n<h2 id=\"axios与axiosget的区别\"><a class=\"anchor\" href=\"#axios与axiosget的区别\">#</a> axios () 与 axios.get () 的区别</h2>\n<p>&lt;span alt='solid'&gt; 拿一个接口来做对比演示 &lt;/span&gt;：</p>\n<p>后端接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加角色接口\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//  @RequestBody：不能使用 get 方式提交，传递 JSON 格式数据，把 json 格式数据封装到对象里面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SysRole</span> sys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> sysRoleService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"一使用axios进行发送请求\"><a class=\"anchor\" href=\"#一使用axios进行发送请求\">#</a> 一，使用 axios () 进行发送请求</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 接口路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 请求方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 请求参数，传递 JSON 格式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> sys</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061421525.png\" alt=\"image-20230906142119290\" /></p>\n<h5 id=\"二使用axiospost进行发送请求\"><a class=\"anchor\" href=\"#二使用axiospost进行发送请求\">#</a> 二，使用 axios.post () 进行发送请求</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 正确写法可以传递到后端接口值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">roleName</span><span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span>roleName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">roleCode</span><span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span>roleCode <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 错误写法不能传递到后端接口值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// request.post(`$&#123;url&#125;/save`, &#123; sys: sys &#125;)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061425789.png\" alt=\"image-20230906142507359\" /></p>\n<p>如果按照错误写法呢？ 结果如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 正确写法可以传递到后端接口值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token comment\">/* request.post(`$&#123;url&#125;/save`, &#123; roleName: sys.roleName, roleCode: sys.roleCode &#125;) */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 错误写法不能传递到后端接口值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">sys</span><span class=\"token operator\">:</span> sys <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：结果就是接收到了两个没有传递过来的值 null 了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061426213.png\" alt=\"image-20230906142656845\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/NodeJs%E4%B8%8EWebPack/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/NodeJs%E4%B8%8EWebPack/",
            "title": "NodeJs与WebPack",
            "date_published": "2024-01-08T07:26:30.329Z",
            "content_html": "<h4 id=\"什么是前端工程化\"><a class=\"anchor\" href=\"#什么是前端工程化\">#</a> 什么是前端工程化？</h4>\n<p><strong>前端工程化</strong>：开发项目直到上线，过程中集成的所有 &lt;font title=red&gt; 工具和技术 &lt;/font&gt;.</p>\n<p>Node.js 是前端工程化的基础 (因为 Nde.js 可以主动读取前端代码内容)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141436216.png\" alt=\"image-20230814084343685\" /></p>\n<ol>\n<li><strong>压缩工具</strong>：如果可以把代码中的回车，注释，换行，一些长的变量名 变成短的这些都是属于对前端代码进行压缩处理\n<ul>\n<li><strong>压缩目的</strong>：是为了让前端的项目体积更小，让项目更快的在用户电脑上被加载出来。</li>\n</ul>\n</li>\n<li><strong>格式化工具</strong>：多人协同同一个项目代码的时候代码风格要统一，那么可以集成格式化工具</li>\n<li><strong>转换工具</strong>：比如编写的是：less，sass 这种 CSS 预处理的语言那最终运行到浏览器上，中间需要一个转换过程将 less，sase 语法转成原生的 CSS，那么就可以集成相应的转换工具。而且也可以对高级的 JS 进行降级处理。</li>\n<li><strong>打包工具</strong>：比如 WebPack 就是一个静态模块的打包工具，它可以对前端代码进行转换，压缩以及整合等处理。</li>\n<li><strong>脚手架工具</strong>：vue，react 会用到脚手架工具，把开发项目时用到的所有的准备过程全都在这个工具里为我们准备好了。</li>\n<li>。。。。还有其它更多工具</li>\n</ol>\n<h1 id=\"nodejs\"><a class=\"anchor\" href=\"#nodejs\">#</a> Node.js</h1>\n<h2 id=\"fs模块-读写文件\"><a class=\"anchor\" href=\"#fs模块-读写文件\">#</a> fs 模块 - 读写文件</h2>\n<p><strong>模块</strong>：类似插件，封装了 &lt;font title=red&gt; 方法 / 属性 &lt;/font&gt;.</p>\n<p><strong>fs 模块</strong>：封装了本机文件系统进行交互的，方法 / 属性</p>\n<p><strong>语法</strong>：</p>\n<ol>\n<li>\n<p>&lt;font title=red&gt; 加载 &lt;/font&gt; fs 模块对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//fs 是模块标识符：模块的名字</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title=red&gt; 写入 &lt;/font &gt; 文件内容</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件路径'</span>，<span class=\"token string\">'写入内容'</span><span class=\"token parameter\">，err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>             <span class=\"token comment\">// 写入后的回调函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title=red&gt; 读取 &lt;/font &gt; 文件内容</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件路径'</span><span class=\"token function\">，</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err，data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 读取后的回调函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//data 是文件内容的 Buffer 数据流</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 fs 模块读写文件内容</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1. 加载 fs 模块对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 写入文件内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 3. 读取文件内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 加载 fs 模块对象，要引入的是 fs 模块所以直接写 fs 就行了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. 写入文件内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 参数 1：要写入到哪一个文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 参数 2：要写入到文件的内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 参数 3：回调函数 -> 参数：错误信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../text.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello,node.js'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 3. 读取文件内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 参数 1：指定要读取文件的地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 参数 2：回调函数 -> 参数 1：错误信息，参数 2：Buffer 数据流对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../text.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// console.log(data)//&lt;Buffer 68 65 6c 6c 6f 2c 6e 6f 64 65 2e 6a 73></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//hello,node.js 读取到的是十六进制 需要转换为十进制</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"path模块-路径处理\"><a class=\"anchor\" href=\"#path模块-路径处理\">#</a> path 模块 - 路径处理</h2>\n<p><strong>问题</strong>：Node.js 代码中，相对路径是根据 &lt;font title=red&gt; 终端所在路径 &lt;/font &gt; 来查找的，可能无法找到你想要的文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141436824.png\" alt=\"image-20230814092605129\" /></p>\n<p>终端起点路径是 <mark>03-Code</mark> 执行 <mark>03/index.js</mark> 文件里面读取文件形式为：<mark>../test.txt</mark> 上一级目录查找，那么就会从终端的起点目录 <mark>03-Code</mark> 的 上一级 <mark>03_Node.js 与 Webpack</mark> 这个目录中去找，那么就找不到了就会报错了。</p>\n<p>虽然执行的是 03 目录下的 index.js 但是终端的起始目录位置是 03-Code 目录 执行代码../ 以终端所在路径为主。</p>\n<p><strong>建议</strong>：在 Node.js 代码中，使用 &lt;font title=red&gt; 绝对路径 &lt;/font&gt;.</p>\n<p><strong>补充</strong>：&lt;font title=red&gt;_ _dirname&lt;/font&gt;<sup> 下划线之间没有空格，为了分辨才加的空格</sup>内置变量 (获取当前模块目录 - 绝对路径)</p>\n<ul>\n<li>windows： <code>D:\\备课代码\\3-B站课程\\03_Node.js与Webpack\\03-Code\\03</code></li>\n<li>mac： <code>/Users/xxx/Descktop/备课代码/3-B站课程/03Node.js与Webpack/03-Code/03</code></li>\n<li>它们之间的路径分隔符不同</li>\n</ul>\n<p><strong>注意</strong>： <code>path.join()</code>  会使用特定于平台的分隔符，作为定界符，将所有给定的路径片段链接在一起。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'03'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dist/js'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'index.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//windows: '03\\dist\\js\\index.js'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//mac: '03/dist/js/index.js'</span></pre></td></tr></table></figure><p><strong>语法</strong>：</p>\n<ol>\n<li>\n<p>加载 path 模块</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>path.join</code>  方法，拼接路径</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'路径1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'路径2'</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：在 Node.js 环境的代码中，应使用绝对路径</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 原因：代码的相对路径是以终端所在文件夹为起点，而不是 VsCode 资源管理器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 容易造成目标文件找不到错误</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 引入 path 模块对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. 调用 path.join () 配合__driname 组成目标文件的绝对路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 使用__dirname 无论你在终端的哪个目录下都不会影响我找我想要的文件去读取否则就报错</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token comment\">// E:\\ 前置课 \\NodeJs 与 Webpack\\js</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../text.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// hello,node.js</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"案例压缩前端-html-文件\"><a class=\"anchor\" href=\"#案例压缩前端-html-文件\">#</a> 案例 — 压缩前端 html 文件</h2>\n<p><strong>需求</strong>：把 回车符 (\\r) 和换行符 (\\n) 去掉后，写入到新 html 文件中</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>&lt;font title=red&gt; 读取 &lt;/font&gt; 源 html 文件内容</li>\n<li>正则 &lt;font title=red&gt; 替换 &lt;/font&gt; 字符串</li>\n<li>&lt;font title=red&gt; 写入 &lt;/font &gt; 到新 的 html 文件中</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：压缩 html 代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需求：把回车符 \\r , 换行符 \\n 去掉，写入到新 html 文件中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.1 读取源 html 文件内容</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.2 正则替换字符串</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 1.3 写入到新的 html 文件中</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//  1.1 读取源 html 文件内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 导入两个模块 文件，路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 读取文件 path.join (__dirname 绝对路径下的 html 文件)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'tudolist.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 1.2 正则替换字符串</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">const</span> htmlStr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\r\\n]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 1.3 写入到新的 html 文件中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'tudolist.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> htmlStr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html代码 压缩完毕 !!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141021437.png\" alt=\"image-20230814102152964\" /></p>\n<p>测试压缩后的代码能否正常使用。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141024425.gif\" alt=\"test\" /></p>\n<h2 id=\"url中的端口号\"><a class=\"anchor\" href=\"#url中的端口号\">#</a> URL 中的端口号</h2>\n<p>URL：<mark>统一资源定位符</mark>，简称 <mark>网址</mark>，用于访问服务器里的资源</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141025188.png\" alt=\"image-20230814102459698\" /></p>\n<h2 id=\"http模块-创建web服务\"><a class=\"anchor\" href=\"#http模块-创建web服务\">#</a> http 模块 - 创建 Web 服务</h2>\n<p><strong>需求</strong>：创建 Web 服务并响应内容给浏览器</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>加载 &lt;font title=red&gt;http 模块 &lt;/font&gt;，创建 Web 服务对象</li>\n<li>监听 &lt;font title=red&gt;request&lt;/font &gt; 请求事件，设置响应头和响应体</li>\n<li>配置 &lt;font title=red&gt; 端口号 &lt;/font &gt; 并 &lt; font title=red &gt; 启动 &lt;/font&gt;Web 服务</li>\n<li>浏览器请求 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAw\">http://localhost:3000</span> 测试</li>\n</ol>\n<p>(localhost: 固定代表本机的域名)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 http 模块创建 Web 服务程序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1. 加载 http 模块，创建 Web 服务器对象</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 监听 request 请求事件，设置响应头和响应体</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 3. 配置端口号并启动 web 服务</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 4. 浏览器请求 http://localhost:3000 测试</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1. 加载 http 模块，创建 Web 服务器对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 2. 监听 request 请求事件，设置响应头和响应体</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 设置响应头内容类型为 普通文本</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/plain;charset=utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 设置响应体内容，结束本次请求与响应</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'欢迎使用Node.js和http模块创建的Web服务程序'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 3. 配置端口号并启动 web 服务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Web服务启动成功了!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141048766.png\" alt=\"image-20230814104801413\" /></p>\n<h2 id=\"nodejs模块化\"><a class=\"anchor\" href=\"#nodejs模块化\">#</a> Node.js 模块化</h2>\n<p>什么是模块化？</p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 定义 &lt;/span&gt;：</p>\n<p>CommonJS 模块是为 Node.js 打包 JavaScript 代码的原始方式。Node.js 还支持浏览器和其他 JavaScript 运行时使用的 ECMAScript 模块标签。</p>\n<p>&lt;span alt=solid&gt; 在 Node.js 中，每个文件都被视为一个单独的模块 &lt;/span&gt;。</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141051486.png\" alt=\"image-20230814105115230\" /></p>\n<p>在前面编写 web 服务的时候 index.js 就是一个模块</p>\n<ol>\n<li>有读取文件需求时借助了：fs 模块</li>\n<li>拼接路径借助了：path 模块</li>\n<li>创建 Web 服务借助了：http 模块</li>\n<li>将查询字符串转换为查询对象借助了：querystring 模块</li>\n<li>不光可以引入 Node.js 自己内置的模块，我们自己也可以定义一些 js 的模块文件，然后引入到自己的代码中进行使用。</li>\n</ol>\n<p><strong>概念</strong>：&lt;span alt=wavy&gt; 项目是由很多个模块文件组成的 &lt;/span&gt;。</p>\n<p><strong>好处</strong>：提高代码复用性，按需加载，&lt;font title=red&gt; 独立作用域 &lt;/font&gt;.</p>\n<p><strong>使用</strong>：需要标准语法 &lt;font title=red&gt; 导出 &lt;/font &gt; 和 &lt; font title=red &gt; 导入 &lt;/font &gt; 进行使用</p>\n<h3 id=\"commonjs标准\"><a class=\"anchor\" href=\"#commonjs标准\">#</a> CommonJS 标准</h3>\n<p><strong>需求</strong>：定义 utils.js 模块，封装基地址 和 求数组总和的函数</p>\n<p><strong>使用</strong>：</p>\n<ol>\n<li>\n<p><strong>导出</strong>： <code>module.exports = &#123;&#125;</code></p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span>  <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum <span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> val <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   对外属性名<span class=\"token number\">1</span><span class=\"token operator\">:</span> baseURL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   对外属性名<span class=\"token number\">2</span><span class=\"token operator\">:</span> getArraySum</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>导入</strong>： <code>require('模块名或路径')</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模块名或路径'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//obj 就等于 module.exports 导出的对象</span></pre></td></tr></table></figure></li>\n</ol>\n<h5 id=\"模块名或路径\"><a class=\"anchor\" href=\"#模块名或路径\">#</a> 模块名或路径</h5>\n<ul>\n<li><strong>内置模块</strong>：直接写名字  (例如： <code>fs</code> , <code>path</code> , <code>http</code> )</li>\n<li><strong>自定义模块</strong>：需要写模块文件路径 (例如： <code>./utils.js</code> )</li>\n</ul>\n<p><strong>目录结构</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141119859.png\" alt=\"image-20230814111920506\" /></p>\n<p>utils.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 CommonJS 标准语法，封装属性和方法并导出</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> current</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pre <span class=\"token operator\">+</span> current<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 导出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> baseURL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">arraySum</span><span class=\"token operator\">:</span> getArraySum</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>01.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 CommonJS 标准语法，导入工具属性和方法使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 导入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 导入要么写模块名要么写路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 模块名 是内置的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 路径 是自定义的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> arrSum <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">arraySum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrSum<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141118433.png\" alt=\"image-20230814111845035\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>Node.js 中什么是模块化？\n<ul>\n<li>每个 &lt;font title=red&gt; 文件 &lt;/font &gt; 都是独立的模块</li>\n</ul>\n</li>\n<li>模块之间如何联系呢？\n<ul>\n<li>使用特定语法，&lt;font title=red&gt; 导出 &lt;/font &gt; 和 &lt; font title=red &gt; 导入 &lt;/font &gt; 使用</li>\n</ul>\n</li>\n<li>CommonJS 标准规定如何导出和导入模块呢？\n<ul>\n<li>导出： <code>module.exports = &#123;&#125;</code></li>\n<li>导入： <code>require('模块名或路径')</code></li>\n</ul>\n</li>\n<li>模块名 / 路径如何选择？\n<ul>\n<li>内置模块，直接写 &lt;font title=red&gt; 名字 &lt;/font&gt;。例如：fs，path，http 等</li>\n<li>自定义模块，写模块文件 &lt;font title=red&gt; 路径 &lt;/font&gt;。例如： <code>./utils.js</code></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<hr />\n<h4 id=\"ecmascript-标签-默认导出和导入\"><a class=\"anchor\" href=\"#ecmascript-标签-默认导出和导入\">#</a> ECMAScript 标签 - 默认导出和导入</h4>\n<p><strong>需求</strong>：封装并导出基地址和求数组元素和的函数</p>\n<h5 id=\"默认标准使用\"><a class=\"anchor\" href=\"#默认标准使用\">#</a> 默认标准使用：</h5>\n<ol>\n<li>\n<p>导出： <code>export default &#123;&#125;</code></p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span>  <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum <span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> val <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   对外属性名<span class=\"token number\">1</span><span class=\"token operator\">:</span> baseURL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   对外属性名<span class=\"token number\">2</span><span class=\"token operator\">:</span> getArraySum</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>导入： <code>import 变量名 from '模块名或路径'</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> obj <span class=\"token keyword\">from</span> <span class=\"token string\">'模块名或路径'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//obj 就等于 export default 导出的对象</span></pre></td></tr></table></figure></li>\n</ol>\n<p>&lt;blockquote alt=danger&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：Node.js 默认支持 CommonJS 标准语法 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt; 如需使用 ECMAScript 标准语法，在运行模块所在文件夹新建 package.json 文件 (项目的清单文件)，并设置 {&quot;type&quot;: &quot;module&quot;}&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt; 这样当我们在运行模块所在文件夹下用 Node 命令执行 js 文件时它就能够正确的识别 ECMAScript 标准的导出 / 导入语法了 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141130482.png\" alt=\"image-20230814113034848\" /></p>\n<p><strong>目录结构</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141153427.png\" alt=\"image-20230814115320121\" /></p>\n<p>utls1.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 ECMAScript 标准语法，封装属性和方法并 \"默认\" 导出</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> pre <span class=\"token operator\">+</span> cur</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 默认导出</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> baseURL<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">arrSum</span><span class=\"token operator\">:</span> getArraySum</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>02.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 ECMAScript 标准语法，\"默认\" 导入，工具属性和方法使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 默认导入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> obj <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils1.js'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token comment\">// &#123; url: 'http://hmajax.itheima.net', arrSum: [Function: getArraySum] &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> arrSum <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">arrSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrSum<span class=\"token punctuation\">)</span><span class=\"token comment\">// 10</span></pre></td></tr></table></figure><p>package.json</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>ECMASCript 标准规定如何 &lt;font title=red&gt; 默认 &lt;/font &gt; 导出和导入模块呢？\n<ul>\n<li>导出：&lt;span alt=solid&gt;export default { }&lt;/span&gt;</li>\n<li>导入：&lt;span alt=solid&gt;import 变量名 from ‘模块名或路径’&lt;/span&gt;</li>\n</ul>\n</li>\n<li>如何让 Node.js 切换模块标准为 ECMAScript?\n<ul>\n<li>运行模块所在文件夹，新建 package.json 并设置</li>\n<li><code>&#123;&quot;type&quot;: &quot;module&quot;&#125;</code></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<hr />\n<h4 id=\"ecmascript标准命名导出和导入\"><a class=\"anchor\" href=\"#ecmascript标准命名导出和导入\">#</a> ECMAScript 标准 — 命名导出和导入</h4>\n<p><strong>命名标准使用</strong>：</p>\n<ol>\n<li>\n<p>导出： <code>export修饰定义语句</code></p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pre <span class=\"token operator\">+</span> cur <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>导入： <code>import &#123;同名变量&#125; from '模块名或路径'</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>baseURL<span class=\"token punctuation\">,</span>getArraySum<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'模块名或路径'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//baseURL 和 getArraySum 是变量，值为模块内命名导出的同名变量的值</span></pre></td></tr></table></figure></li>\n</ol>\n<p>&lt;blockquote alt=danger&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：Node.js 默认支持 CommonJS 标准语法 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt; 如需使用 ECMAScript 标准语法，在运行模块所在文件夹新建 package.json 文件 (项目的清单文件)，并设置 {&quot;type&quot;: &quot;module&quot;}&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt; 这样当我们在运行模块所在文件夹下用 Node 命令执行 js 文件时它就能够正确的识别 ECMAScript 标准的导出 / 导入语法了 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;<br />\n<strong> 目录结构</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141330497.png\" alt=\"image-20230814133015038\" /></p>\n<p>utils.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 ECMAScript 标准语法，封装属性和方法并 \"命名\" 导出</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> pre <span class=\"token operator\">+</span> cur</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：基于 ECMAScript 标准语法 \"命名\" 导入，工具属性和方法使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>baseURL<span class=\"token punctuation\">,</span>getArraySum<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils.js'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baseURL<span class=\"token punctuation\">)</span><span class=\"token comment\">// http://hmajax.itheima.net</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArraySum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 20</span></pre></td></tr></table></figure><p>package.json</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;span alt=solid&gt; 注意 &lt;/span&gt;：⚠️</p>\n<p>导出和导入的变量命名要相同否则报错未知变量：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://hmajax.itheima.net'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> pre <span class=\"token operator\">+</span> cur</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>obj<span class=\"token punctuation\">,</span>getArraySum<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArraySum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141337607.png\" alt=\"image-20230814133742075\" /></p>\n<h4 id=\"默认导出和导入-标准命名导出和导入-如何选择\"><a class=\"anchor\" href=\"#默认导出和导入-标准命名导出和导入-如何选择\">#</a> 默认导出和导入 &amp; 标准命名导出和导入 如何选择</h4>\n<p>&lt;font title=red&gt; 按需 &lt;/font &gt; 加载，使用 &lt; font title=red &gt; 命名 &lt;/font &gt; 导出和导入</p>\n<p>&lt;font title=red&gt; 全部 &lt;/font &gt; 加载，使用 &lt; font title=red &gt; 默认 &lt;/font &gt; 导出和导入</p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>Node.js 支持哪 2 中模块化标准？\n<ul>\n<li>&lt;span alt=solid&gt;CommonJS 标准语法 (默认)&lt;/span&gt;.</li>\n<li>ECMAScript 标准语法</li>\n</ul>\n</li>\n<li>ECMAScript 标准，&lt;font title=red&gt; 命名 &lt;/font &gt; 导出和导入的语法？\n<ul>\n<li>导出：&lt;span alt=solid&gt;export 修饰定义的语句 &lt;/span&gt;.</li>\n<li>导入：&lt;span alt=solid&gt; <code>import &#123;同名变量&#125; from '模块名或路径'</code> &lt;/span&gt;.</li>\n</ul>\n</li>\n<li>ECMAScript 标准，&lt;font title=red&gt; 默认 &lt;/font &gt; 导出和导入的语法？\n<ul>\n<li>导出：&lt;span alt=solid&gt;export default { }&lt;/span&gt;</li>\n<li>导入：&lt;span alt=solid&gt; <code>import 变量名 from '模块名或路径'</code> &lt;/span&gt;.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"包的概念\"><a class=\"anchor\" href=\"#包的概念\">#</a> 包的概念</h2>\n<p><strong>包</strong>：将 &lt;font title=red&gt; 模块，代码，其它资料 &lt;/font &gt; 聚合成一个文件夹</p>\n<p><strong>包分类</strong>：</p>\n<ul>\n<li>项目包：主要用于编写项目和业务逻辑</li>\n<li>软件包：&lt;font title=red&gt; 封装工具和方法 &lt;/font &gt; 进行使用</li>\n</ul>\n<p><strong>要求</strong>：跟目录中，必须有 package.json 文件 (记录包的清单信息)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141442151.png\" alt=\"image-20230814144121175\" /></p>\n<p>package.json 对当前所在 utils 的一些描述信息</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141442509.png\" alt=\"image-20230814144111345\" /></p>\n<p>&lt;font title='red'&gt; 注意 &lt;/font&gt;：导入软件包时，引入的默认是  <code>index.js</code>  模块文件 /main 属性指定的模块文件</p>\n<p><strong>需求</strong>：封装数组求和函数的模块，判断用户名和密码长度函数的模块，形成一个 &lt;font title='red'&gt; 软件包 &lt;/font&gt;.</p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是包？\n<ul>\n<li>将模块，代码其它资料聚合成的 &lt;font title='red'&gt; 文件夹 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>包分为哪 2 类呢？\n<ul>\n<li>项目包：编写项目代码的文件夹</li>\n<li>&lt;font title='red'&gt; 软件包 &lt;/font&gt;：封装工具和方法供开发者使用</li>\n</ul>\n</li>\n<li>package.json 文件的作用？\n<ul>\n<li>记录 &lt;font title='red'&gt; 软件包的名字 &lt;/font&gt;，作者，&lt;font title='red'&gt; 入口 &lt;/font &gt; 文件等信息</li>\n</ul>\n</li>\n<li>导入一个包文件夹的时候，导入的是哪个文件？\n<ul>\n<li>&lt;font title='red'&gt; 默认 index.js 文件 &lt;/font&gt;，或者 main 属性指定的文件</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p><strong>目录结构</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141514842.png\" alt=\"image-20230814151449238\" /></p>\n<p>arr.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：封装数组常用的方法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数组求和函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function-variable function\">getArraySum</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pre<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pre <span class=\"token operator\">+</span> cur<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">arraySum</span><span class=\"token operator\">:</span> getArraySum</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>str.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：封装校验用户名和密码长度的函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 要求：用户名最少 8 位，密码最少为 6 位</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkUserName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">username</span> <span class=\"token operator\">=></span> username<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkPassword</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">password</span> <span class=\"token operator\">=></span> password<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> checkUserName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">pwd</span><span class=\"token operator\">:</span> checkPassword</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 本文件是，utils 工具包的唯一出口</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：把所有工具模块方法集中起来，统一向外暴漏</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> arraySum <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/arr.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 多个对象使用对象解构 比较方便</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> uname<span class=\"token punctuation\">,</span> pwd <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/str.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 统一导出所有函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    arraySum<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    uname<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    pwd</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>package.json</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cz_utils\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"数组求和与验证用户表单函数\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Dkx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>server.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：导入 utils 软件包，使用里面封装的工具函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">arraySum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">uname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shmishadmin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> pwd <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">pwd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12387976'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pwd<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141552111.png\" alt=\"image-20230814154949235\" /></p>\n<h2 id=\"npm软件包管理器\"><a class=\"anchor\" href=\"#npm软件包管理器\">#</a> npm— 软件包管理器</h2>\n<blockquote>\n<p>定义：</p>\n<p>&lt;span alt='solid'&gt;npm 简介 &lt;/span&gt;.</p>\n<p><code>npm</code>  是 Node.js 标准的 &lt;span alt='solid'&gt; 软件包管理器 &lt;/span&gt;。</p>\n<p>在 2017 年 1 月时，npm 仓库中就已有超过 350000 个软件包，这使其成为世界上最大的单一语言代码仓库，并且可以确定几乎有可用于一切的软件包。</p>\n<p>它起初是作为 &lt;span alt='solid'&gt; 下载和管理 Node.js&lt;/span &gt; 包依赖的方式，但其现在也成为前端 JavaScript 中使用的工具</p>\n</blockquote>\n<p>使用：</p>\n<ol>\n<li>初始化清单文件： <code>npm init -y</code>  (得到 package.json 文件，有则略过此命令)</li>\n<li>下载软件包： <code>npm i 软件包名称</code>  其中的 &lt;span alt='solid'&gt;  <code>i</code>  是 install 的简写 &lt;/span&gt;。</li>\n<li>使用软件包</li>\n</ol>\n<h5 id=\"用下面案例体验npm软件包管理器的使用\"><a class=\"anchor\" href=\"#用下面案例体验npm软件包管理器的使用\">#</a> 用下面案例体验 npm 软件包管理器的使用</h5>\n<p><strong>需求</strong>：使用 dayjs 软件包，来格式化日期时间</p>\n<p><strong>图解</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141619386.png\" alt=\"image-20230814161933879\" /></p>\n<p>1 创建一个目录来存放编写项目</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141633693.png\" alt=\"image-20230814163335174\" /></p>\n<p>2 右击这个目录打开集成终端因为执行命令生成的文件或软件是需要到这个目录中的。</p>\n<p>2.1 执行命令： <code>npm init -y</code>  初始化清单，会创建一个 package.json 文件如果自己创建过就不需要这一步了。npm 创建的 package.json 里面自己初始化好了的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141635471.png\" alt=\"image-20230814163557137\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141636375.png\" alt=\"image-20230814163649661\" /></p>\n<p>2.2 使用命令下载 dayjs 软件包： <code>npm i dayjs</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141638611.png\" alt=\"image-20230814163836786\" /></p>\n<p>下载完成后就会出现一个 package-local.json 文件是固定当前软件版本的清单文件，并且会多个一个 node_modules 里面就是我们下载的 dayjs 软件了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141641972.png\" alt=\"image-20230814164125589\" /></p>\n<p>3 使用下载好的软件包</p>\n<p>在 server.js 中导入软件包的名称然后使用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：使用 npm 下载 dayjs 软件包来格式化日期时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1.(可选) 初始化项目清单文件，命令：npm init -y 得到 package.json 文件 (自己创建了则不用执行这个命令了)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 下载软件包到当前项目，命令: npm i 软件包名称</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 3. 使用软件包</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> dayjs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dayjs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> nowDateStr <span class=\"token operator\">=</span> <span class=\"token function\">dayjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'YYYY-MM-DD'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nowDateStr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141640582.png\" alt=\"image-20230814164033005\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>npm 软件包管理器作用？\n<ul>\n<li>下载软件包以及管理版本</li>\n</ul>\n</li>\n<li>初始化项目清单文件 package.json 命令？\n<ul>\n<li>&lt;font title='red'&gt;npm init -y&lt;/font&gt;</li>\n</ul>\n</li>\n<li>下载软件包的命令？\n<ul>\n<li>&lt;font title='red'&gt;npm i 软件包名称 &lt;/font&gt; ，其中 i 是 install 的简写</li>\n</ul>\n</li>\n<li>下载的包存放在哪里？\n<ul>\n<li>当前项目下的 &lt;font title='red'&gt;node_modules&lt;/font &gt; 中，并记录在 package.json 中</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"npm-安装所有依赖\"><a class=\"anchor\" href=\"#npm-安装所有依赖\">#</a> npm - 安装所有依赖</h3>\n<p><strong>举个栗子</strong>：比如我从一个小伙伴哪里拿来了一个它的项目，这时会发现这个项目里有 package.json 还有他写完的业务逻辑代码 server.js 但是缺少了一个 node_modules 文件夹。而这个 node_modules 里面放的都是这个项目需要依赖的软件包，这个项目中 package.json 文件中记录了这个项目都下载过哪些软件包还有对应的版本号，还有 package-local.jsno 用来固定每一个软件包对应的版本的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141648908.png\" alt=\"image-20230814164818948\" /></p>\n<p>在它写的业务逻辑代码中导入了 dayjs，lodash 两个软件包 那么有个问题当我拿到这样的项目能正常的运行吗？</p>\n<p>答案肯定是不行的。</p>\n<p>为什么不能正常运行呢？</p>\n<p>它需要导入 dayjs ，lodash 但是我们项目中并没有这两个软件包对应的源码。所以他现在缺少的就是这两个需要导入的软件包</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141652858.png\" alt=\"image-20230814165240736\" /></p>\n<p>你肯定就会有一个小问题，那为什么他给我这个项目的时候不也直接把 node_modules 也给我呢？</p>\n<p><strong>原因</strong>：因为，自己用 npm 下载依赖比磁盘传递拷贝要快得多</p>\n<p><strong>解决</strong><sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>：项目终端输入命令： <code>npm i</code>  注意这里不能代码软件包的名称 ，因为里面的 package.jsno 记录了</p>\n<p>下载 package.json 中记录的所有的软件包</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141700492.png\" alt=\"image-20230814170030860\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>当项目中只有 package.json 没有 node_modules 怎么办？\n<ul>\n<li>当前项目下，执行  <code>npm i</code>  安装 package.json 中记录的所有依赖软件包</li>\n</ul>\n</li>\n<li>为什么 node_modules 不进行传递？\n<ul>\n<li>因为用 npm 下载比磁盘传递快</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"npm-全局软件包-nodemon\"><a class=\"anchor\" href=\"#npm-全局软件包-nodemon\">#</a> npm - 全局软件包 nodemon</h3>\n<p><strong>软件包区别</strong>：</p>\n<ul>\n<li>本地软件包：&lt;font title='red'&gt; 当前项目 &lt;/font &gt; 内使用，封装 &lt; font title='red'&gt; 属性和方法 &lt;/font&gt;，存在于 node_modules</li>\n<li>全局软件包：&lt;font title='red'&gt; 本机 &lt;/font &gt; 所有项目使用，封装 &lt; font title='red'&gt; 命令和工具 &lt;/font&gt;，存在于系统设置的位置</li>\n</ul>\n<p>&lt;span alt='solid'&gt;nodemon 作用 &lt;/span&gt;：替代 node 命令，检测代码更改，自动重启程序</p>\n<p><strong>使用</strong>：</p>\n<ol>\n<li><strong>安装</strong>： <code>npm i nodemon -g</code>  (-g 代表安装到全局环境中)</li>\n<li><strong>运行</strong>：ndemon 待执行的目标 js 文件</li>\n</ol>\n<p><strong>需求</strong>：启动准备好的项目，修改代码保存后，观察自动重启应用程序</p>\n<p>下载的是全局位置所以就不用考虑终端所在的文件夹位置了在哪里都可以。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141805466.png\" alt=\"image-20230814180544049\" /></p>\n<p>执行命令后下载到的位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141903082.png\" alt=\"image-20230814190347549\" /></p>\n<p>下载完成后我们就可以使用 nodemon 命令了，执行后启动了一个服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141908423.png\" alt=\"image-20230814190843481\" /></p>\n<p>当我们修改某处代码的时候服务就会自动重启</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141910300.png\" alt=\"image-20230814191051342\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>本地软件包和全局软件包区别？\n<ul>\n<li>本地软件包，作用在 &lt;font title='red'&gt; 当前项目，封装属性和方法 &lt;/font&gt;.</li>\n<li>全局软件包，&lt;font title='red'&gt; 本机 &lt;/font &gt; 所有项目使用，&lt;font title='red'&gt; 封装命令和工具 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>nodemon 作用？\n<ul>\n<li>替代 node 命令，检测代码更改，&lt;font title='red'&gt; 自动重启 &lt;/font &gt; 程序</li>\n</ul>\n</li>\n<li>nodemon 怎么用？\n<ul>\n<li>先确保安装 <code>npm i nodemon -g</code></li>\n<li>使用 &lt;font title='red'&gt;nodemon 执行目标 js 文件 &lt;/font&gt;.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"nodejs总结\"><a class=\"anchor\" href=\"#nodejs总结\">#</a> Node.js 总结：</h2>\n<h3 id=\"nodejs模块化-2\"><a class=\"anchor\" href=\"#nodejs模块化-2\">#</a> Node.js 模块化：</h3>\n<p>概念：每个文件当做一个模块，独立作用域，按需加载</p>\n<p>使用：采用特定的标准语法导出和导入进行使用</p>\n<p>&lt;center&gt;CommonJS 标准 &lt;/center&gt;</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>导出</th>\n<th>导入</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>语法</td>\n<td>module.exports = {}</td>\n<td>require (‘模块名或路径’)</td>\n</tr>\n</tbody>\n</table>\n<p>&lt;center&gt;ECMAScript 标准 &lt;/center&gt;</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>导出</th>\n<th>导入</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>默认</td>\n<td>export default{}</td>\n<td>import 变量名 from ‘模块名或路径’</td>\n</tr>\n<tr>\n<td>命名</td>\n<td>export 修饰定义语句</td>\n<td>import {同名变量} from ‘模块名或路径’</td>\n</tr>\n</tbody>\n</table>\n<p>CommonJS 标准：一般应用在 Node.js 项目环境中</p>\n<p>ECMAScript 标准：一般应用在前端工程化项目中</p>\n<h3 id=\"nodejs包\"><a class=\"anchor\" href=\"#nodejs包\">#</a> Node.js 包</h3>\n<p>概念：把模块文件，代码文件，其它资料聚合成一个文件夹</p>\n<p>项目包：编写项目需求和 &lt;font title='red'&gt; 业务逻辑 &lt;/font &gt; 的文件夹</p>\n<p>软件包：&lt;font title='red'&gt; 封装工具和方法 &lt;/font &gt; 进行使用的文件夹 (一般使用 npm 管理)</p>\n<ul>\n<li>本地软件包：作用在 &lt;font title='red'&gt; 当前 &lt;/font &gt; 项目，一般封装的 &lt; font title='red'&gt; 属性 / 方法 &lt;/font&gt;，供项目调用编写业务需求</li>\n<li>全局软件包：作用在 &lt;font title='red'&gt; 所有 &lt;/font &gt; 项目，一般封装的 &lt; font title='red'&gt; 命令 / 工具 &lt;/font&gt;，支撑项目运行</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141936232.png\" alt=\"image-20230814193605361\" /></p>\n<h3 id=\"nodejs常用命令\"><a class=\"anchor\" href=\"#nodejs常用命令\">#</a> Node.js 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>执行 JS 文件</td>\n<td>node xxx.js</td>\n</tr>\n<tr>\n<td>初始化 package.json</td>\n<td>npm init -y</td>\n</tr>\n<tr>\n<td>下载本地软件包</td>\n<td>npm i 软件包名称</td>\n</tr>\n<tr>\n<td>下载全局软件包</td>\n<td>npm i 软件包名称 -g</td>\n</tr>\n<tr>\n<td>删除软件包</td>\n<td>npm uni 软件包名称</td>\n</tr>\n<tr>\n<td>删除全局软件包</td>\n<td>npm uni 软件包名称 - g</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h1 id=\"webpack\"><a class=\"anchor\" href=\"#webpack\">#</a> Webpack</h1>\n<p>&lt;span alt='solid'&gt; 定义 &lt;/span&gt;：</p>\n<p>本质上，webpack 是一个用于现代 JavaScript 应用程序的 静态模块打包工具。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图 (dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundles ，它们均为静态资源，用于展示你的内容。</p>\n<p>&lt;span alt='solid'&gt; 静态模块 &lt;/span&gt;：指的是编写代码过程中的 html，css，js，img 等固定内容的文件</p>\n<p>&lt;font title='red'&gt; 打包 &lt;/font&gt;：把静态模块内容，压缩，整合，转译等 (前端工程化)</p>\n<ul>\n<li>把 less /sass 转成 css 代码</li>\n<li>把 ES6+ 降级成 ES5</li>\n<li>支持多种模块标准语法</li>\n</ul>\n<p><strong>问题</strong>：为何不学 vite?</p>\n<p><strong>因为</strong>：很多项目还是基于 webpack 构建，并为 vue ，react 脚手架使用做铺垫！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308141950849.png\" alt=\"image-20230814195038448\" /></p>\n<h2 id=\"使用webpack\"><a class=\"anchor\" href=\"#使用webpack\">#</a> 使用 Webpack</h2>\n<p><strong>需求</strong>：封装 util 包，校验手机号长度和验证码长度，在 &lt;font title='red'&gt;src /index.js&lt;/font&gt; 中使用并打包观察</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>新建并初始化项目，编写业务 &lt;font title='red'&gt; 源代码 &lt;/font&gt;.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm init <span class=\"token operator\">-</span>y</pre></td></tr></table></figure><ol>\n<li>创建文件夹 src /utils 里面创建 check.js</li>\n</ol>\n</li>\n<li>\n<p>下载 webpack webpack-cli 到当前项目中 (版本独立) ，并 &lt; font title='red'&gt; 配置 &lt;/font &gt; 局部自定义命令</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i webpack webpack<span class=\"token operator\">-</span>cli <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev</pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//key 为自定义命令，value 为运行自定义命令后真正要触发的命令，后面是固定的叫 webpack</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>运行 &lt;font title='red'&gt; 打包 &lt;/font &gt; 命令，自动产生 dist 分发文件夹 (压缩和优化后，用于最终运行的代码)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm run build</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142030731.png\" alt=\"image-20230814203041052\" /></p>\n<p>执行完 npm run build 命令后 在 src 同级目录中会出现一个 dist 目录里面一个 main.js 最终运行的代码</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142031380.png\" alt=\"image-20230814203137756\" /></p>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;span alt='solid'&gt; 注意 &lt;/span&gt;：src 目录中有 index.js 默认就会打包 ，如果没有执行 npm run build 就会报错，其它位置的 js 文件需要修改入口文件位置下一章有讲解 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142001753.png\" alt=\"Snipaste_2023-08-14_20-01-08\" /></p>\n<p>check.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 封装校验手机号长度和校验验证码长度的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">chekPhone</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">phone</span> <span class=\"token operator\">=></span> phone<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkCode</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">code</span> <span class=\"token operator\">=></span> code<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">6</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 1：体验 webpack 打包过程</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1.1 准备项目和源码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> checkPhone<span class=\"token punctuation\">,</span> checkCode <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils/check.js'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkPhone</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1230918203'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkCode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123098103'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1.2 准备 webpack 打包环境</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 执行命令：npm i webpack webpack-cli --save-dev</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//webpack 下载完毕后去 package.json 中的 scripts 中配置局部自定义命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//1.3 运行配置的局部自定义命令打包观察效果 执行命令: npm run 自定义命令 (build)</span></pre></td></tr></table></figure><p>打包后 main.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> e<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function-variable function\">d</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o<span class=\"token punctuation\">,</span>t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> r <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">o</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">o</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">get</span><span class=\"token operator\">:</span>t<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">o</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">,</span>o</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">r</span><span class=\"token operator\">:</span><span class=\"token parameter\">e</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"undefined\"</span><span class=\"token operator\">!=</span><span class=\"token keyword\">typeof</span> Symbol<span class=\"token operator\">&amp;&amp;</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token operator\">&amp;&amp;</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>Symbol<span class=\"token punctuation\">.</span>toStringTag<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token string\">\"Module\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span><span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>o<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">r</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token function-variable function\">P</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">t</span><span class=\"token operator\">=</span><span class=\"token parameter\">e</span><span class=\"token operator\">=></span><span class=\"token number\">6</span><span class=\"token operator\">===</span>e<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">.</span>checkPhone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1230918203\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123098103\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>webpack 默认打包入口是 index.js，默认出口是 main.js</p>\n</blockquote>\n<h2 id=\"修改webpack打包入口和出口\"><a class=\"anchor\" href=\"#修改webpack打包入口和出口\">#</a> 修改 webpack 打包入口和出口</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvY29uY2VwdHMvI2VudHJ5\">webpack 配置</span>：影响 webpack 打包过程和结果</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>项目根目录，新建 &lt;font title='red'&gt;webpack.config.js&lt;/font &gt; 配置文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142107448.png\" alt=\"image-20230814210705080\" /></p>\n</li>\n<li>\n<p>导出 &lt;font title='red'&gt; 配置对象 &lt;/font&gt;，配置入口，出口文件的路径</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 导出配置对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 设置入口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置出口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重新打包观察</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm run build</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142108510.png\" alt=\"image-20230814210854669\" /></p>\n<p>执行完成后查看目录结构。dist 目录中就生成了 login 文件夹里面有压缩打包后的最终执行 index.js 文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142110210.png\" alt=\"image-20230814211006996\" /></p>\n</li>\n</ol>\n<h6 id=\"webpack配置clean\"><a class=\"anchor\" href=\"#webpack配置clean\">#</a> webpack 配置 clean</h6>\n<p>而上次执行 webpack 打包的出口还存在下面加上一个配置就可以再打包时删除上一次打包的出口</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 设置入口</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置出口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 生成打包后内容之前，清空输出目录，此命令只在 5. 以上版本中适用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再次打包观察效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142113995.png\" alt=\"image-20230814211349425\" /></p>\n<p>查看目录的变化 之前的出口被删除掉了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142114088.png\" alt=\"image-20230814211415554\" /></p>\n<p>&lt;span alt='solid'&gt; 注意 &lt;/span&gt;：只有和入口产生直接 / 间接的引入关系，才会被打包</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308142057201.png\" alt=\"image-20230814205700730\" /></p>\n<h2 id=\"案例用户登录长度判读\"><a class=\"anchor\" href=\"#案例用户登录长度判读\">#</a> 案例 — 用户登录 — 长度判读</h2>\n<p><strong>需求</strong>：点击登录按钮，判断手机号和验证码长度</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>准备用户登录页面</li>\n<li>编写核心 JS 逻辑代码</li>\n<li>打包并手动复制网页到 dist 下，引入打包后的 js，运行</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151509187.png\" alt=\"image-20230815150927533\" /></p>\n<p>&lt;font title='red'&gt; 核心 &lt;/font&gt;：webpack 打包后的代码，作用在前端网页中使用</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151509692.png\" alt=\"image-20230815150905346\" /></p>\n<p>创建骨架</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151612448.png\" alt=\"image-20230815161203866\" /></p>\n<p>编写软件包 str.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkUserName</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">uname</span> <span class=\"token operator\">=></span> uname<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">checkPwd</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">pwd</span> <span class=\"token operator\">=></span> pwd<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">6</span></pre></td></tr></table></figure><p>编写用户表单验证的项目包 index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> checkUserName<span class=\"token punctuation\">,</span> checkPwd <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/str.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 目标：用户登录 - 长度判断案例</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 3.1 准备用户登录页面</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 3.2 编写核心 JS 逻辑代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 3.3 打包并手动复制网页到 dist 下，引入打包后的 js，运行</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 3.2 编写核心 JS 逻辑代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> phone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form [name=mobile]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form [name=code]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkUserName</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'手机号长度必须大于8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkPwd</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'验证码长度必须大于6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'提交到服务器登录...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>将项目的登录页面拷贝到 public 目录中将里面的 css，js 引入全部去掉</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>黑马头条-数据管理平台<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 警告框 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert info-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    操作结果</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 登录页面 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>黑马头条<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入手机号<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>13888888888<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>code<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>默认验证码246810<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>246810<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登 录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>执行命令： <code>npm i webpack webpack-cli --save-dev</code>  下载 webpack 进行打包</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151616852.png\" alt=\"image-20230815161647591\" /></p>\n<p>自定义打包命令：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>修改入口和出口</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行命令进行打包： <code>npm run build</code>  注意终端的所在目录需要到项目根目录执行否则报错</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151619083.png\" alt=\"image-20230815161937931\" /></p>\n<p>将 public/index.html 登录页面拷贝到 dist 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151621806.png\" alt=\"image-20230815162111843\" /></p>\n<p>在 dist 下的 index.html 页面代码中引入 dist/login/index.js 下的压缩打包后的 js 文件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./login/index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>打开 dist 下的登录页面进行测试 (简单测试，还待测试 其它判断条件)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151622400.png\" alt=\"image-20230815162257063\" /></p>\n<h2 id=\"自动生成html文件\"><a class=\"anchor\" href=\"#自动生成html文件\">#</a> 自动生成 HTML 文件</h2>\n<p>插件 html-webpack-plugin：在 webpack 打包时生成 html 文件</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvcGx1Z2lucy9odG1sLXdlYnBhY2stcGx1Z2luLw==\">查看文档</span></p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>下载 &lt;font title='red'&gt; html-webpack-plugin&lt;/font&gt; 本地软件包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i html-webpack-plugin --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有插件功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./public/login.html'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.html'</span> <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重新 &lt;font title='red'&gt; 打包 &lt;/font &gt; 观察效果</p>\n</li>\n</ol>\n<p>让 webpac 拥有更多功能三部曲：找包，下包，配置包</p>\n<p><strong>演示</strong>：</p>\n<p>1 下载软件包 <code>npm i html-webpack-plugin --save-dev</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151658121.png\" alt=\"image-20230815165802909\" /></p>\n<p>2 &lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有插件功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3 打包查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151659827.png\" alt=\"image-20230815165921526\" /></p>\n<p>查看打包后的 index.html 文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151700950.png\" alt=\"image-20230815170003695\" /></p>\n<p>测试功能</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151701941.gif\" alt=\"test\" /></p>\n<h2 id=\"打包css代码\"><a class=\"anchor\" href=\"#打包css代码\">#</a> 打包 CSS 代码</h2>\n<p><strong>记载器 css-loader</strong>：解析 css 代码</p>\n<p><strong>注意</strong>：&lt;span alt='solid'&gt;webpack 默认只能识别 js 代码，要想识别更多代码就需要添加另一个软件包 &lt;/span&gt;.</p>\n<p><strong>加载器 style-loader</strong>：把解析后的 css 代码插入到 DOM</p>\n<p>css 样式代码打包输出到 index.js 出口当中</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvbG9hZGVycy9jc3MtbG9hZGVyLw==\">查看文档</span></p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>准备 css 文件 &lt;font title='red'&gt; 代码 &lt;/font &gt; 引入到 src/login/index.js 中 (压缩转译处理等)</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 1.准备css代码，并引入到js中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import <span class=\"token string\">'./index.css'</span></pre></td></tr></table></figure><ol>\n<li>\n<p>如果项目中用到了 Bootstrap 则下载本地软件包并引入</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151736495.png\" alt=\"image-20230815173642332\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// <span class=\"token number\">1</span>.准备css代码，并引入到js中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// <span class=\"token number\">2</span>.页面用到了bootstrap则引入，先引入依赖的样式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> <span class=\"token string\">'../../node_modules/bootstrap/dist/css/bootstrap.min.css'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> <span class=\"token string\">'./index.css'</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>&lt;font title='red'&gt; 下载 &lt;/font&gt; css-loader 和 style-loader 本地软件包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i css-loader --save-dev</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> i style-loader --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有该加载器功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'style-loader'</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>打包后观察效果</p>\n</li>\n</ol>\n<p>1 引入 css 文件到打包入口</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 1.准备css代码，并引入到js中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>// 2.页面用到了bootstrap则引入，先引入依赖的样式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>import <span class=\"token string\">'../../node_modules/bootstrap/dist/css/bootstrap.min.css'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>import <span class=\"token string\">'./index.css'</span></pre></td></tr></table></figure><p>2 执行命令打包： <code>npm run build</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151732258.png\" alt=\"image-20230815173203005\" /></p>\n<p>3 打包后的目录结构</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151744373.png\" alt=\"image-20230815174430228\" /></p>\n<p>3.1 发现在 dist 中并没有找到打包后的 css 文件，因为 css 样式代码打包输出到 index.js 出口当中，查看 dist/login/index.js 的变化：</p>\n<p>3.2 可以看到 里面多了很多代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> r<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">666</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>t</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token function-variable function\">Z</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token constant\">D</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">81</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">645</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">667</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>d<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">770</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">711</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">199</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">931</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>g<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">486</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">609</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">469</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>u<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">991</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>h<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">144</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>w<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">221</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">956</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>k<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">460</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>z<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">321</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">281</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">R</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">254</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">B</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">647</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">A</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">692</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">G</span><span class=\"token operator\">=</span><span class=\"token function\">n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">L</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">M</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">U</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>$<span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">S</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">X</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Y</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">C</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">T</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">E</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">I</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Z</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">N</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">P</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">F</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">O</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">R</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>_<span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token constant\">H</span><span class=\"token operator\">=</span><span class=\"token function\">l</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token constant\">G</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>`@charset <span class=\"token string\">\"UTF-align:left!important&#125;.text-xl-end&#123;text-align:right!important&#125;.text-xl-center&#123;text-align:center!important&#125;&#125;@media (min-width:1400px)&#123;.float-xxl-start&#123;float:left!important&#125;.float-xxl-end&#123;float:right!important&#125;.float-xxl-none&#123;float:none!important&#125;.object-fit-xxl-contain&#123;-o-object-fit:contain!important;object-fit:contain!important&#125;.object-fit-xxl-cover&#123;-o-object-fit:cover!important;object-fit:cover!important&#125;.object-fit-xxl-fill&#123;-o-object-fit:fill!important;object-fit:fill!important&#125;.object-fit-xxl-scale&#123;-o-object-fit:scale-down!important;object-fit:scale-down!important&#125;.object-fit-xxl-none&#123;-o-object-fit:none!important;object-fit:none!important&#125;.d-xxl-inline&#123;display:inline!important&#125;.d-xxl-inline-block&#123;display:inline-block!important&#125;.d-xxl-block&#123;display:block!important&#125;.d-xxl-grid&#123;display:grid!important&#125;.d-xxl-inline-grid&#123;display:inline-grid!important&#125;.d-xxl-table&#123;display:table!important&#125;.d-xxl-table-row&#123;display:table-row!important&#125;.d-xxl-table-cell&#123;displayr=t(379),o=t.n(r),a=t(795),e=t.n(a),i=t(569),n=t.n(i),s=t(565),l=t.n(s),d=t(216),b=t.n(d),m=t(589),p=t.n(m),c=t(666),g=&#123;&#125;;g.styleTagTransform=p(),g.setAttributes=l(),g.insert=n().bind(null,\"</span>head<span class=\"token string\">\"),g.domAPI=e(),g.insertStyleElement=b(),o()(c.Z,g),c.Z&amp;&amp;c.Z.locals&amp;&amp;c.Z.locals;var f=t(386),v=&#123;&#125;;v.styleTagTransform=p(),v.setAttributes=l(),v.insert=n().bind(null,\"</span>head<span class=\"token string\">\"),v.domAPI=e(),v.insertStyleElement=b(),o()(f.Z,v),f.Z&amp;&amp;f.Z.locals&amp;&amp;f.Z.locals,document.querySelector(\"</span><span class=\"token punctuation\">.</span>btn<span class=\"token string\">\").addEventListener(\"</span>click<span class=\"token string\">\",(function()&#123;const r=document.querySelector(\"</span><span class=\"token punctuation\">.</span>login<span class=\"token operator\">-</span>form <span class=\"token punctuation\">[</span>name<span class=\"token operator\">=</span>mobile<span class=\"token punctuation\">]</span><span class=\"token string\">\").value,o=document.querySelector(\"</span><span class=\"token punctuation\">.</span>login<span class=\"token operator\">-</span>form <span class=\"token punctuation\">[</span>name<span class=\"token operator\">=</span>code<span class=\"token punctuation\">]</span><span class=\"token string\">\").value;r.length>=8?o.length>=6?console.log(\"</span>提交到服务器登录<span class=\"token operator\">...</span><span class=\"token string\">\"):console.log(\"</span>验证码长度必须大于<span class=\"token number\">6</span><span class=\"token string\">\"):console.log(\"</span>手机号长度必须大于<span class=\"token number\">8</span>\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4 查看页面效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151745252.png\" alt=\"image-20230815174502959\" /></p>\n<h2 id=\"优化-提取css代码\"><a class=\"anchor\" href=\"#优化-提取css代码\">#</a> 优化 - 提取 css 代码</h2>\n<p><strong>好处</strong>：css 文件可以被浏览器缓存，减少 js 文件体积</p>\n<p>&lt;span alt='solid'&gt; 插件 mini-css-extract-plugin&lt;/span&gt;：提取 css 代码</p>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：不要同时使用 style-loader 和 mini-css-extract-plugin。&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>&lt;font title='red'&gt; 下载 &lt;/font&gt; mini-css-extract-plugin 本地软件包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i mini-css-extract-plugin --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有该插件功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">//use: ['style-loader','css-loader'] 使用下面就不要使用这个</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span><span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 或者使用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">//new MiniCssExtractPlugin(&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">//\tfilename：指定提取出来的路径到 dist 目录下</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//&#125;)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>执行打包命令： <code>npm run build</code>  查看目录变化 多个一个 main.css 文件而且这个文件已经在 index.html 中被引入了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151906677.png\" alt=\"image-20230815190629194\" /></p>\n</li>\n</ol>\n<h2 id=\"优化-压缩过程在提取的前提下\"><a class=\"anchor\" href=\"#优化-压缩过程在提取的前提下\">#</a> 优化 - 压缩过程 (在提取的前提下)</h2>\n<p>在上一章，提取 css 压缩代码呢，我们自己写的一部分代码是没有被压缩的如下：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 提示框 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.alert</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">.show</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/* 登录 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token selector\">.login-wrap</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token selector\">.login-wrap .title</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 28px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fc6627<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token selector\">.login-wrap .login-form</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token selector\">input::-webkit-input-placeholder</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>#dcdfe6 <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token selector\">.login-form .btn</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #66b1ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #66b1ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token selector\">.login-form .item:nth-child(n + 1)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>问题</strong>：css 代码提取后没有压缩</p>\n<p><strong>解决</strong>：使用 css-minimizer-webpack-plugin 插件</p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>&lt;font title='red'&gt; 下载 &lt;/font&gt; css-minimizer-webpack-plugin 本地软件包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i css-minimizer-webpack-plugin --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有该功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> CssMinimizerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-minimizer-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 优化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token comment\">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer (即 `terser-webpack-plugin`) ，将下一行取消注释 (保证 JS 代码还能被压缩处理) 如果不用 `...` 则需要自己下载 terser-webpack-plugin 插件 require 导入然后 new 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token keyword\">new</span> <span class=\"token class-name\">CssMinimizerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重新打包观察效果</p>\n</li>\n</ol>\n<p><strong>演示</strong>：</p>\n<p>1 执行命令安装本地软件： <code>npm i css-minimizer-webpack-plugin --save-dev</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308152045530.png\" alt=\"image-20230815204547355\" /></p>\n<p>2 &lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有该功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> CssMinimizerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-minimizer-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 加载器 (让 webpack 识别更多模块内容)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// use: ['style-loader', 'css-loader']</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 优化</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 最小化</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer (即</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// `terser-webpack-plugin`) ，将下一行注释 如果不使用 `...` 则需要自动下载 terset-webpack-plugin 插件导入并实例化对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 保证 js 的代码还能压缩</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">CssMinimizerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3 执行命令打包观察效果： <code>npm run build</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308152047939.png\" alt=\"image-20230815204710801\" /></p>\n<p>4 查看优化 - 压缩后的 css 代码</p>\n<p><img data-src=\"./NodeJs%E4%B8%8EWebPack.assets/202308152047192.png\" alt=\"image-20230815204745065\" /></p>\n<p>后面的代码都被压缩了</p>\n<h2 id=\"打包less代码\"><a class=\"anchor\" href=\"#打包less代码\">#</a> 打包 less 代码</h2>\n<p>加载器 less-loader：把 less 代码编译为 css 代码</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>新建 less&lt;font title='red'&gt; 代码 &lt;/font&gt; (设置背景图) 并引入到 src/login/index.js 中</p>\n<ul>\n<li>&lt;span alt='solid'&gt; 注意 &lt;/span&gt;：引入的 less 文件不要和其它 css 文件同名否则打包后就会被替换掉的。</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 1.新建less代码 <span class=\"token punctuation\">(</span>设置背景图<span class=\"token punctuation\">)</span> 并引入到 src/login/index.js中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import <span class=\"token string\">'./indexTest.less'</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 下载 &lt;/font&gt; less 和 less-loader 本地软件包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i less-loader --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span><span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>演示</strong>：</p>\n<p>1 引入 less 文件到打包入口</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>// 1.新建less代码 <span class=\"token punctuation\">(</span>设置背景图<span class=\"token punctuation\">)</span> 并引入到 src/login/index.js中</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>import <span class=\"token string\">'./indexTest.less'</span></pre></td></tr></table></figure><p>2 执行命令安装本地软件包： <code>npm i less-loader --save-dev</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308152115393.png\" alt=\"image-20230815211518226\" /></p>\n<p>3 &lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加载器 (让 webpack 识别更多模块内容)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token comment\">// use: ['style-loader', 'css-loader']</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token comment\">//compiles Less to CSS</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               <span class=\"token comment\">//compiles Less to CSS</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            \t<span class=\"token comment\">//'style-loader', MiniCssExtractPlugin.loader 与该项不能混用如果上面用 MiniCssExtractPlugin.loader 则将其写在下面。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            \tMiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>               <span class=\"token string\">'less-loader'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>4 执行命令打包： <code>npm run build</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308152116347.png\" alt=\"image-20230815211644125\" /></p>\n<p>5 查看目录变化</p>\n<p><img data-src=\"./NodeJs%E4%B8%8EWebPack.assets/202308160857869.png\" alt=\"image-20230816085710401\" /></p>\n<p>6 打开压缩后的页面查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308160901522.png\" alt=\"image-20230816090133157\" /></p>\n<h2 id=\"打包图片\"><a class=\"anchor\" href=\"#打包图片\">#</a> 打包图片</h2>\n<p><strong>资源模块</strong>：Webpack5 内置资源模块 (字体，图片等) 打包，无需额外 loader</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmRvY3NjaGluYS5vcmcvZ3VpZGVzL2Fzc2V0LW1vZHVsZXMv\">查看文档</span></p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt; webpack.config.js 让 webpack 拥有打包图片功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|jpeg|gif)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>               <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'assets/[hash][ext][query]'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>占位符 [hash] 对模块内容做算法计算，得到映射的数字字母组合的字符串</li>\n<li>占位符 [ext] 使用当前模块原本的占位符，例如：.png/.jpg 第字符串</li>\n<li>占位符 [query] 保留引入文件时代码中查询参数 (只有 RUL 下生效)</li>\n</ul>\n</li>\n<li>\n<p>打包观察效果</p>\n</li>\n</ol>\n<p><strong>注意</strong>：判断临界值默认为 &lt;font title='red'&gt;8KB&lt;/font&gt;.</p>\n<ul>\n<li>大于 8KB 文件：发送一个单独的文件并导出 URL 地址</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308160916629.png\" alt=\"image-20230816091613254\" /></p>\n<ul>\n<li>小于 8KB 文件：导出一个 data URI (base64 字符串)</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308160917109.png\" alt=\"image-20230816091732872\" /></p>\n<p><strong>演示</strong>：</p>\n<p>1 编写入口文件 index.js 引入图片资源的地址，创建一个 img 标签将 src 属性设置为该图片然后追加到页面中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：打包资源模块 (图片处理)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1. 创建 img 标签并动态添加到页面，配置 webpack.config.js</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 打包后观察效果和区别</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 注意：js 中引入本地图片资源要用 import 方式 (如果是网络图片 http 地址，字符串可以直接写)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> imgObj <span class=\"token keyword\">from</span> <span class=\"token string\">'./assets/logo.png'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> theImg <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>theImg<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> imgObj</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-wrap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>theImg<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>2 配置 webpack.config.js 让 webpack  拥有该功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|jpeg|gif)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset/[hash][ext][query]'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3 打包查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308160935424.png\" alt=\"image-20230816093459035\" /></p>\n<p>页面效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308160935070.png\" alt=\"image-20230816093523711\" /></p>\n<h2 id=\"用户登录完成功能\"><a class=\"anchor\" href=\"#用户登录完成功能\">#</a> 用户登录 — 完成功能</h2>\n<p><strong>需求</strong>：完成登录功能的核心流程，以及 Alert 警告框使用</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>使用 npm 下载 axios (体验 npm 作用在前端项目中)</li>\n<li>准备并修改 utils 工具包 源代码 &lt;font title='red'&gt; 导出 &lt;/font&gt; 实现函数</li>\n<li>&lt;font title='red'&gt; 导入 &lt;/font &gt; 并编写逻辑代码，打包后运行观察效果</li>\n</ol>\n<p>&lt;center&gt; 核心思路流程图 &lt;/center&gt;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308160942898.png\" alt=\"image-20230816094207386\" /></p>\n<p><strong>演示</strong>：</p>\n<p>request.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 npm 安装到本地的 axios</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//import axios from 'axios' 两种方式可供使用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//axios 公共配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 基地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://geek.itheima.net'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 设置 axios 请求拦截器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    token <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>token<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 设置 axios 响应拦截器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token operator\">?.</span>response<span class=\"token operator\">?.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token过期，请重新登录'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'./login/index.html'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 默认导出 axios</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> axios</pre></td></tr></table></figure><p>alert.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 弹窗插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 需要先准备 alert 样式相关的 DOM</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * BS 的 Alert 警告框函数，2 秒后自动消失</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param &#123;*&#125; isSuccess 成功 true，失败 false</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param &#123;*&#125; msg 提示消息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 命名导出 函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isSuccess<span class=\"token punctuation\">,</span> msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> myAlert <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.alert'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> msg</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>index.js 入口 看不懂 str.js 往上面的案例看就能看到了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：完成登录功能</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1. 使用 npm 下载 axios (体验 npm 作用在前端项目中)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2. 准备并修改，utils 工具包资源代码导出实现函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 3. 导入并编写逻辑代码，打包后运行观察效果</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> checkUserName<span class=\"token punctuation\">,</span> checkPwd <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/str.js'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 3. 导入并编写逻辑代码，打包后运行观察效果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> myAxios <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/request.js'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> myAlert <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/alert.js'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> phone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form [name=mobile]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form [name=code]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkUserName</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'手机号长度必须大于8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'手机号长度必须大于8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkPwd</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'验证码长度必须大于6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'验证码长度必须大于6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/authorizations'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token literal-property property\">mobile</span><span class=\"token operator\">:</span> phone<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> code</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161022213.gif\" alt=\"test\" /></p>\n<p>使用 npm 下载的软件包最终是怎么用作在前端的项目里的？</p>\n<ol>\n<li>先用 import 导入最终用 webpack 打包输出</li>\n</ol>\n<h2 id=\"搭建开发环境\"><a class=\"anchor\" href=\"#搭建开发环境\">#</a> 搭建开发环境</h2>\n<p><strong>问题</strong>：之前改代码，需要重新打包才能运行查看最终效果，效率很低。</p>\n<p><strong>开发环境</strong>：配置 webpack-dev-server 快速开发应用程序</p>\n<p><strong>作用</strong>：启动 web 服务，&lt;font title='red'&gt; 自动 &lt;/font &gt; 检测代码变化，&lt;font title='red'&gt; 热更新 &lt;/font &gt; 到网页</p>\n<p>&lt;span alt='solid'&gt; 注意 &lt;/span&gt;：dist 目录和打包内容是在内存里 (更新快)</p>\n<p>&lt;span alt='solid'&gt; 注意 1&lt;/span&gt;：webpack-dev-server 借助 http 模块创建 8080 默认 web 服务</p>\n<p>&lt;span alt='solid'&gt; 注意 2&lt;/span&gt;：默认以 public 文件夹作为服务器目录</p>\n<p>&lt;span alt='solid'&gt; 注意 3&lt;/span&gt;：webpack-dev-server 根据配置，打包相关代码在内存当中，以 output.path 的值作为服务根目录 (所以可以直接自己拼接访问 dist 目录下内容) 但是注意，这里的 dist 是内存当中的跟项目结构里面的 dist 没有一分关系</p>\n<ul>\n<li>\n<p>根目录有两个</p>\n<p>1 默认的静态资源：public/login.html</p>\n<p>2 webpack 设置时的出口</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>所以相当于也可以访问 dist 下的目录页面 &lt;a href=&quot;# 演示第二种根目录方式&quot;&gt; 查看演示 &lt;/a&gt;</p>\n</li>\n</ul>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>&lt;font title='red'&gt; 下载 &lt;/font&gt; webpack-dev-server 软件包到当前项目</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i webpack-dev-server --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>设置模式为 &lt;font title='red'&gt; 开发模式 &lt;/font&gt;，并配置 &lt;font title='red'&gt; 自定义命令 &lt;/font&gt;.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"scripts\"</span>： <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack server --open\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 npm run dev 来启动开发服务器，试试热更新效果</p>\n<p><strong>演示</strong>：</p>\n<p>1 安装 &lt;font title='red'&gt; 软件包 &lt;/font &gt; 到本地执行命令： <code>npm i webpack-dev-server --save-dev</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161045824.png\" alt=\"image-20230816104513328\" /></p>\n<p>2 &lt;font title='red'&gt; 配置 &lt;/font &gt; 自定义命令</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --open\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>3 &lt;font title='red'&gt; 设置打包模式 &lt;/font &gt; 为开发者模式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> CssMinimizerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-minimizer-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 设置打包模式 (development 开发者模式 - 使用相关内置优化)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 加载器 (让 webpack 识别更多模块内容)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// use: ['style-loader', 'css-loader']</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">//compiles Less to CSS</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token string\">'less-loader'</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|jpeg|gif)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset/[hash][ext][query]'</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 优化</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 最小化</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer (即</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// `terser-webpack-plugin`) ，将下一行注释 如果不使用 `...` 则需要自动下载 terset-webpack-plugin 插件导入并实例化对象</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 保证 js 的代码还能压缩</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">CssMinimizerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>4 执行命令： <code>npm run dev</code>  启动开发服务器，尝试热更新效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161053988.png\" alt=\"image-20230816105321644\" /></p>\n<p>启动成功了，会自动跳转到一个页面 网址为：localhost:8080 的一个页面 效果如下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161054035.png\" alt=\"image-20230816105417430\" /></p>\n<p>为什么是这个页面呢 ， 首先看下目录结构：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161054221.png\" alt=\"image-20230816105448840\" /></p>\n<p>这个页面会自动查找 public 目录下的 index.html 文件，如果有则作为页面打开，如果没有则效果如下，比方说将 public 中的 index.html 改名为 login.html，并且记得改一下 webpack 的入口名。</p>\n<p>webpack.config.js 文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/login.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/login.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>刷新页面，正好也尝试了一下热更新，不用重新打包直接刷新页面很快 它的默认页面就改变了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161104539.png\" alt=\"image-20230816105904974\" /></p>\n<h6 id=\"演示第二种根目录方式\"><a class=\"anchor\" href=\"#演示第二种根目录方式\">#</a> 演示第二种根目录方式</h6>\n<p>演示第二种根目录的请求方式和效果</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 出口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>复制出口 filename 的目录：/login/index.js，到浏览器的地址栏框中粘贴进去回车访问，就可以访问到页面了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161123517.png\" alt=\"image-20230816112357119\" /></p>\n<h2 id=\"打包模式\"><a class=\"anchor\" href=\"#打包模式\">#</a> 打包模式</h2>\n<p><strong>打包模式</strong>：告知 webpack 使用相应模式的内置优化</p>\n<p><strong>分类</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>模式名称</th>\n<th>模式名字</th>\n<th>特点</th>\n<th>场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发模式</td>\n<td>development</td>\n<td>调试代码，实时加载，模块热替换等</td>\n<td>本地开发</td>\n</tr>\n<tr>\n<td>生产模式</td>\n<td>production</td>\n<td>压缩代码，资源优化，更轻量等</td>\n<td>打包上线</td>\n</tr>\n</tbody>\n</table>\n<p><strong>设置</strong>：</p>\n<p>&lt;span alt='solid'&gt; 方式 1&lt;/span&gt;：在 webpack.config.js 配置文件设置 mode 选项</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">// 设置打包模式 (development 开发者模式 - 使用相关内置优化)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在 package.json 中设置两种不同的打包模式的自定义命令的话这里就可以注释掉了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;span alt='solid'&gt; 方式 2&lt;/span&gt;：在 package.json 命令行设置 mode 参数</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode=production\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack serve --open --mode=development\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>&lt;font title='red'&gt; 注意 &lt;/font&gt;：命令行设置的优先级高于配置文件中的，推荐用命令行设置</p>\n<h3 id=\"打包模式的应用\"><a class=\"anchor\" href=\"#打包模式的应用\">#</a> 打包模式的应用</h3>\n<p>需求：在开发模式下用 style-loader 内嵌更快，在生产模式下提取 css 代码</p>\n<p>方案 1：webpack.config.js 配置导出函数，但是局限性大 (只接受 2 种模式)</p>\n<p>方案 2：借助 cross-env (跨平台通用) 包命令，设置参数区分环境</p>\n<p>&lt;span alt='solid'&gt; 方案 3&lt;/span&gt;：配置不同的 webpack.config.js (使用多种模式差异性较大情况)</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>&lt;font title='red'&gt; 下载 &lt;/font&gt; cross-env 软件包到当前项目</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i cross-env --save-dev</pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font &gt; 自定义命令，传入参数名和值  (会绑定到 &lt;font title='red'&gt;prcess.env&lt;/font&gt; 对象下)</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=production webpack --mode=production\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cross-env NODE_ENV=development webpack server --open --mode=development\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 webpack.config.js 区分不同环境 &lt;font title='red'&gt; 使用 &lt;/font&gt; 不同配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/login.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 加载器 (让 webpack 识别更多模块内容)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// use: ['style-loader', 'css-loader']</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// use: [MiniCssExtractPlugin.loader, 'css-loader']</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 对 css 文件处理的 loader 根据 package.json 中对 cross-env 设置的环境变量做一个区分</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 在 use: 配置中使用一个条件表达式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">//process.env 是 Node.js 环境中内置的一个环境变量调用在 package.json 中配置的属性</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 判断在执行命令的时候给 NODE_ENV 赋予了哪个模式 比如判断是否为 development 则运行 style-loader</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 如果是打包，上线的生产模式则 NODE_ENV 的值会被赋予 production 则会使用 提取 css 代码插件 和 css-loader</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'style-loader'</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                  MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader <span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">//compiles Less to CSS</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">//less 代码也会被转换为 css 代码所以也需要设置 process.env.NODE_ENV 的不同模式的打包配置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>               process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'style-loader'</span> <span class=\"token operator\">:</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>               <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>               <span class=\"token string\">'less-loader'</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>重新打包观察效果</p>\n</li>\n</ol>\n<p>执行命令：npm run dev</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161357558.png\" alt=\"image-20230816135748602\" /></p>\n<p>项目 dist 目录中不会产生提取出来的 css 文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161358831.png\" alt=\"image-20230816135826271\" /></p>\n<p>执行命令：npm run build</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161359807.png\" alt=\"image-20230816135912066\" /></p>\n<p>项目 dist 目录中会提取出 css 代码文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161359621.png\" alt=\"image-20230816135937211\" /></p>\n<h2 id=\"前端注入环境变量\"><a class=\"anchor\" href=\"#前端注入环境变量\">#</a> 前端 — 注入环境变量</h2>\n<p><strong>需求</strong>：&lt;font title='red'&gt; 前端 &lt;/font &gt; 项目中，开发模式下打印语句生效，生产模式下打印语句失效</p>\n<p><strong>问题</strong>：cross-env 设置的只在 Node.js 环境生效，前端代码无法访问 process.env.NODE_ENV</p>\n<p>&lt;span alt='solid'&gt; 解决 &lt;/span&gt;：使用 webpack 内置的 DefinePlugin 插件</p>\n<p><strong>作用</strong>：在编译时，将前端代码中匹配的变量名，替换为值或表达式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token comment\">//key 是注入到打包后的前端 JS 代码中作为全局变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token comment\">//value 是变量对应的值 (在 cross-env 注入在 node.js 中的环境变量字符串)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token string-property property\">'process.env.NODE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>index.js 入口 文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：前端 — 注入环境变量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需求：前端项目代码中，开发模式下打印语句生效，生产模式下打印语句失效</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">log</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'开发模式下生效，生产模式下失效'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行命令：npm run dev 开发模式下 效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161433974.png\" alt=\"image-20230816143347527\" /></p>\n<p>可以看到 console.log 正常打印了一段话</p>\n<hr />\n<p>执行命令：npm run build 生产模式下 效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161436583.png\" alt=\"image-20230816143600450\" /></p>\n<p>可以看到控制台中没有输出 那段话</p>\n<blockquote>\n<p>向前端注入环境变量，我们就可以让相同的一份代码，在不同的环境下来出现不同的效果。</p>\n</blockquote>\n<h2 id=\"开发环境调错source-map\"><a class=\"anchor\" href=\"#开发环境调错source-map\">#</a> 开发环境调错 —source map</h2>\n<p><strong>问题</strong>：代码被<mark>压缩</mark>和<mark>混淆</mark>，&lt;span alt='solid'&gt; 无法正确定位源代码位置 &lt;/span&gt; (行数和列数)</p>\n<p><strong>source map</strong>：可以准确追踪 &lt;span alt='solid'&gt;error&lt;/span&gt; 和 &lt;span alt='solid'&gt;warning&lt;/span&gt; 在<mark>原始代码的位置</mark>。</p>\n<p><strong>设置</strong>：webpack.config.js 配置 devtool 选项</p>\n<p><strong>演示问题</strong>：</p>\n<p>index.js 入口文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：source-map 调试代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 问题：error 和 warning 代码的位置和源代码对不上，不方便我们调试</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 解决：启动 webpack 的 source-map 资源地图功能</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1. 在 webpack.config.js 配置 devtool 选项和值开启功能 (注意：只在开发环境下使用)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 2. 代码中造成错误，并在开发服务器环境下查看效果</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在 consolee 中多打一个 e 让程序报错</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>consolee<span class=\"token punctuation\">.</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行命令：npm run dev 开发模式下启动</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161449850.png\" alt=\"image-20230816144923391\" /></p>\n<p>实际代码错误的位置：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161449528.png\" alt=\"image-20230816144954803\" /></p>\n<p>被压缩后的 js 报错后控制台打印出的错误位置不是原本的错误位置很难找到错误的代码对其修改</p>\n<p><strong>解决问题演示</strong>：</p>\n<p>配置 webpack.config.js</p>\n<p>资源地图只能在开发模式下使用 (development) 我们需要将 所有配置 提取到 config 变量 中存储，然后下面判断是否为发开模式 (development) 如果是则 调用 config 追加一个地图资源的配置项 (config.devtool = 'inline-source-map')</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> CssMinimizerPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css-minimizer-webpack-plugin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置打包模式 (development 开发者模式 - 使用相关内置优化)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 在 package.json 中设置两种不同的打包模式的自定义命令的话这里就可以注释掉了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// mode: 'development',</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 入口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 出口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./login/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/login.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 配置 webpack</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token string-property property\">'process.env.NDE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 加载器 (让 webpack 识别更多模块内容)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// use: ['style-loader', 'css-loader']</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token comment\">// use: [MiniCssExtractPlugin.loader, 'css-loader']</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 对 css 文件处理的 loader 根据 package.json 中对 cross-env 设置的环境变量做一个区分</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 在 use: 配置中使用一个条件表达式</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token comment\">//process.env 是 Node.js 环境中内置的一个环境变量调用在 package.json 中配置的属性</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token comment\">// 判断在执行命令的时候给 NODE_ENV 赋予了哪个模式 比如判断是否为 development 则运行 style-loader</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token comment\">// 如果是打包，上线的生产模式则 NODE_ENV 的值会被赋予 production 则会使用 提取 css 代码插件 和 css-loader</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'style-loader'</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                 MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader <span class=\"token punctuation\">,</span> <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token comment\">//compiles Less to CSS</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token comment\">//less 代码也会被转换为 css 代码所以也需要设置 process.env.NODE_ENV 的不同模式的打包配置</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'style-loader'</span> <span class=\"token operator\">:</span> MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token string\">'less-loader'</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|jpg|jpeg|gif)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'asset/[hash][ext][query]'</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// 优化</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 最小化</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 在 webpack@5 中，你可以使用 `...` 语法来扩展现有的 minimizer (即</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// `terser-webpack-plugin`) ，将下一行注释 如果不使用 `...` 则需要自动下载 terset-webpack-plugin 插件导入并实例化对象</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 保证 js 的代码还能压缩</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">CssMinimizerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// 开发环境下使用 source-map 选项</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 判断运行环境</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    config<span class=\"token punctuation\">.</span>devtool <span class=\"token operator\">=</span> <span class=\"token string\">'inline-source-map'</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config</pre></td></tr></table></figure><p>执行命令：npm run dev 查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161458587.png\" alt=\"image-20230816145805071\" /></p>\n<p>报错信息的最上面的不重要我们直接找 index.js 报错的信息 查看位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161458715.png\" alt=\"image-20230816145847231\" /></p>\n<p>如实际报错位置相同</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161459869.png\" alt=\"image-20230816145916952\" /></p>\n<h2 id=\"解析别名alias\"><a class=\"anchor\" href=\"#解析别名alias\">#</a> 解析别名 alias</h2>\n<p><strong>解析别名</strong>：配置模块如何解析，创建 import 引入路径的别名，来确保模块引入变得简单</p>\n<p><strong>例如</strong>：原来路径如图，比较长而且相对路径不安全</p>\n<p><strong>解决</strong>：在 webpack.config.js 中配置解析别名 @ 来代表 src 绝对路径</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>导入时</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161519277.png\" alt=\"image-20230816150515867\" /></p>\n<p>1 配置 webpack.config.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 解析</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 别名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2 编写 index.js 入口 记得将上面的输出报错给注释了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标：路径解析别名 设置</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：让我们前端代码引入路径更简单 (而且使用绝对路径)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1. 在 webpack.config.js 中配置 resolve.alias 选项</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 2. 在代码中尝试并在开发环境和生产环境测试效果</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> youAxios <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/request.js'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>youAxios<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3 执行命令：npm run dev 查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161521155.png\" alt=\"image-20230816152126847\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161521615.png\" alt=\"image-20230816152153753\" /></p>\n<h2 id=\"优化cdn使用\"><a class=\"anchor\" href=\"#优化cdn使用\">#</a> 优化 —CDN 使用</h2>\n<p><strong>CDN 定义</strong>：内容分发网络，指的是一组分布在各个地区的服务器</p>\n<p><strong>作用</strong>：把静态资源文件 / 第三方库放在 CDN 网络中各个服务器中，供用户就近请求获取</p>\n<p><strong>好处</strong>：减轻自己服务器请求压力，就近请求物理延迟低，配套缓存策略。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161525497.png\" alt=\"image-20230816152546133\" /></p>\n<p><strong>需求</strong>：&lt;font title='red'&gt; 开发模式 &lt;/font &gt; 使用 &lt; font title='red'&gt; 本地 &lt;/font &gt; 第三方库，&lt;font title='red'&gt; 生产模式 &lt;/font &gt; 下使用 &lt; font title='red'&gt;CDN 加载 &lt;/font &gt; 引入</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161528215.png\" alt=\"image-20230816152842336\" /></p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>在 html 中引入第三方库的 CDN 地址并用模版语法判断</p>\n<pre><code class=\"language-jsp\">&lt;% if(htmlWebpackPlugin.options.useCdn) &#123; %&gt;\n\t&lt;link href=&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;% &#125; %&gt;\n</code></pre>\n</li>\n<li>\n<p>配置 webpack.config.js 中 extrnals 外部扩展选项 (防止某些 import 的包被打包)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生产模式下 - 使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   config<span class=\"token punctuation\">.</span>externals <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">//key : 代码中 import from 后面的模块标识字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">//value ：替换在原地的变量名 (要和 cdn 暴漏在全局的变量名一致)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">'axios'</span><span class=\"token operator\">:</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token comment\">// 自定义属性，在 html 模版中 &lt;%=htmlWebpackPlugin.options.useCdn%> 访问使用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token literal-property property\">useCdn</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>两种模式下打包观察效果</p>\n</li>\n</ol>\n<p>演示代码：</p>\n<p>login.html</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>黑马头条-数据管理平台<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  &lt;% if(htmlWebpackPlugin.options.useCnd)&#123; %></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.2.3/css/bootstrap.min.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &lt;% &#125; %></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 警告框 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert info-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    操作结果</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 登录页面 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>黑马头条<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login-form<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mobile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>请输入手机号<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>13888888888<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>form-control<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>code<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>默认验证码246810<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>246810<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn btn-primary btn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>登 录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  &lt;% if(htmlWebpackPlugin.options.useCnd)&#123; %></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.6/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &lt;% &#125; %></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>webpack.config.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/login.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">useCnd</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span> <span class=\"token comment\">// 生产模式下使用 cdn 引入的地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 生产环境下使用相关配置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 外部扩展 (让 webpack 防止 import 的包被打包进来)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    config<span class=\"token punctuation\">.</span>externals <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//key: import from 语句后面的字符串</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//value: 留在原地的全局变量 (最好和 cdn 在全局暴漏的变量一致)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string-property property\">'bootstrap/dist/css/bootstrap.min.css'</span><span class=\"token operator\">:</span> <span class=\"token string\">'bootstrap'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string-property property\">'axios'</span><span class=\"token operator\">:</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看两种模式下的效果</p>\n<p>执行命令：npm run dev 开发模式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161703091.png\" alt=\"image-20230816170354276\" /></p>\n<p>找不到我们在 login.html 页面中引入的 bootstrap 和 axios 的 cdn 标签</p>\n<p>执行命令：npm run build 生产模式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161705202.png\" alt=\"image-20230816170501879\" /></p>\n<p>可以找到我们在 login.html 中引入的 cdn 标签了。</p>\n<p>在 index.js 出口文件中的 axios 只有一个引入了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161711537.png\" alt=\"image-20230816171143155\" /></p>\n<h2 id=\"多页面打包\"><a class=\"anchor\" href=\"#多页面打包\">#</a> 多页面打包</h2>\n<p><strong>单页面</strong>：&lt;font title='red'&gt; 单个 &lt;/font&gt; html 文件，切换 DOM 的方式实现不同业务逻辑展示，后续 vue /react 会学到</p>\n<p><strong>多页面</strong>：&lt;font title='red'&gt; 多个 &lt;/font&gt; html 文件，切换页面实现不同业务逻辑展示</p>\n<p><strong>需求</strong>：把黑马头条 — 数据管理平台 — 内容页面一起引入打包使用</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>准备 &lt;font title='red'&gt; 源码 &lt;/font&gt; (html，css，js) 放入相应的位置，并改用模块化语法 导出</li>\n<li>下载 form-serialize 包并 &lt;font title='red'&gt; 导入 &lt;/font &gt; 到核心代码中使用</li>\n<li>配置 webpack.config.js &lt;font title='red'&gt; 多入口 &lt;/font &gt; 和 &lt; font title='red'&gt; 多页面 &lt;/font &gt; 的设置</li>\n</ol>\n<p>基本结构：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token string-property property\">'模块名1'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'src/入口1.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string-property property\">'模块名2'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'src/入口2.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./[name]/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">htmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./public/页面1.html'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./路径/index.html'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'模块名1'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">htmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./public/页面2.html'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./路径/index.html'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'模块名2'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>代码演示</strong>：</p>\n<p>1 准备 &lt;font title='red'&gt; 源码 &lt;/font&gt; (html，css，js) 放入相应的位置，并改用模块化语法 导出</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161943164.png\" alt=\"image-20230816194258773\" /></p>\n<p>将内容页面与它的 css，js 代码放入到 content 目录中，配置 webpack.config.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 设置打包模式 (development 开发者模式 - 使用相关内置优化)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在 package.json 中设置两种不同的打包模式的自定义命令的话这里就可以注释掉了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// mode: 'development',</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 入口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// entry: path.join(__dirname, 'src/login/index.js'),</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 配置多个入口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string-property property\">'login'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string-property property\">'content'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'src/content/index.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 出口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// [name] 根据不同的模块名生成不同的位置 (模块名占位符)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./[name]/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/login.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token literal-property property\">useCnd</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生产模式下使用 cdn 引入的地址</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 引入哪些打包后的模块 (和 entry 和 key 一致)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/content.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/content/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token literal-property property\">useCnd</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生产模式下使用 cdn 引入的地址</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">//[name] 占位符，根据不同的模块名生成不同的目录名</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./[name]/index.css'</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 配置 webpack</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token string-property property\">'process.env.NDE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>在内容页面文件中使用 &lt;% %&gt; 语法引入 cdn 第三方库</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;% if(htmlWebpackPlugin.options.useCdn) &#123; %></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdn.bootcdn.net/ajax/libs/axios/1.3.4/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  &lt;% &#125; %></pre></td></tr></table></figure><p>在 inde.js 文件中，是内容页面文件的 js 文件。里面引入相应的代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'@/utils/auth.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/request.js'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'./index.css'</span></pre></td></tr></table></figure><p>执行命令：npm run build 生产模式 在 dist 中的 content 目录中会生成如下的出口文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161947330.png\" alt=\"image-20230816194732999\" /></p>\n<p>查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308161959518.png\" alt=\"image-20230816195903027\" /></p>\n<p>执行命令：npm run dev 查看效果</p>\n<p><img data-src=\"./NodeJs%E4%B8%8EWebPack.assets/image-20230816195947135.png\" alt=\"image-20230816195947135\" /></p>\n<h3 id=\"打包publish页面\"><a class=\"anchor\" href=\"#打包publish页面\">#</a> 打包 publish 页面</h3>\n<ol>\n<li>\n<p>在项目中创建一个新文件夹命名为 publish 存储 publish 的 js，css 代码，将 publish.html 文件放到 public 中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162054625.png\" alt=\"image-20230816205419242\" /></p>\n</li>\n<li>\n<p>将 publish.html 里面的第三方 cnd 库全部使用 &lt;%%&gt; 进行判断，开发模式不使用，生产模式使用</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162055946.png\" alt=\"image-20230816205522765\" /></p>\n</li>\n<li>\n<p>配置 webpack.config.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 设置打包模式 (development 开发者模式 - 使用相关内置优化)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 在 package.json 中设置两种不同的打包模式的自定义命令的话这里就可以注释掉了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// mode: 'development',</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 入口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// entry: path.join(__dirname, 'src/login/index.js'),</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 配置多个入口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string-property property\">'login'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'src/login/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string-property property\">'content'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'src/content/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token string-property property\">'publish'</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/publish/index.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 出口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// [name] 根据不同的模块名生成不同的位置 (模块名占位符)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./[name]/index.js'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 插件 ([给 webpack 提供更多功能])</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 实例化上面 require 导入的对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/login.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/login/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token literal-property property\">useCnd</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生产模式下使用 cdn 引入的地址</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 引入哪些打包后的模块 (和 entry 和 key 一致)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token comment\">// template: path.join(__dirname, 'public/index.html'),</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public/content.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 模版文件</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token comment\">// filename: path.join(__dirname, 'dist/login/index.html')</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/content/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token literal-property property\">useCnd</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生产模式下使用 cdn 引入的地址</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'public/publish.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span> <span class=\"token string\">'dist/publish/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         <span class=\"token literal-property property\">useCnd</span><span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'publish'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token comment\">// 生成 css 文件</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         <span class=\"token comment\">// 输出文件</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         <span class=\"token comment\">//[name] 占位符，根据不同的模块名生成不同的目录名</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'./[name]/index.css'</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token comment\">// 配置 webpack</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         <span class=\"token string-property property\">'process.env.NDE_ENV'</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>安装对应插件</strong>：</p>\n<p>前面已经安装过 axios 和 bootstrap 了 所以 只剩下这两个</p>\n<p>editor：npm i @wangeditor/editor</p>\n<p>form：npm i form-serialize</p>\n<p><strong>说明</strong>：</p>\n<p>@wangeditor/editor 比较特殊在 editor.js 中必须使用 require 进行导入然后使用 对象名来接受 editor 里面的两个 同名变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> wangEditor <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@wangeditor/editor'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 富文本编辑器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建编辑器函数，创建工具栏函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createEditor<span class=\"token punctuation\">,</span> createToolbar <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> wangEditor</pre></td></tr></table></figure><p>配置 webpack.config.js 中的 externals 让第三方 cdn 库 不进行打包</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 生产环境下使用相关配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 外部扩展 (让 webpack 防止 import 的包被打包进来)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    config<span class=\"token punctuation\">.</span>externals <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//key: import from 语句后面的字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//value: 留在原地的全局变量 (最好和 cdn 在全局暴漏的变量一致)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string-property property\">'bootstrap/dist/css/bootstrap.min.css'</span><span class=\"token operator\">:</span> <span class=\"token string\">'bootstrap'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string-property property\">'axios'</span><span class=\"token operator\">:</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string-property property\">'form-serialize'</span><span class=\"token operator\">:</span> <span class=\"token string\">'serialize'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string-property property\">'@wangeditor/editor'</span><span class=\"token operator\">:</span> <span class=\"token string\">'wangEditor'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行命令：npm run build 生产模式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162100290.png\" alt=\"image-20230816210011003\" /></p>\n<p>执行命令：npm run dev 开发模式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162101797.png\" alt=\"image-20230816210124802\" /></p>\n<p>开发模式没有引入第三方的 bootstrap 库和一些其他的库导致样式发生了改变</p>\n<h2 id=\"优化分割公共代码\"><a class=\"anchor\" href=\"#优化分割公共代码\">#</a> 优化 — 分割公共代码</h2>\n<p><strong>需求</strong>：把 2 个以上页面引用的公共代码提取</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>&lt;font title='red'&gt; 配置 &lt;/font&gt;webpack.config.js 的 splitChunks 分割功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// 代码分割 </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 所有模块动态非动态移入的都分割分析</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 分隔组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token literal-property property\">commons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 抽取公共模块</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token literal-property property\">minSize</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 抽取的 Chunk 最小 大小字节</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token literal-property property\">minChunks</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 最小引用数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token literal-property property\">reuseExistingChunk</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">module <span class=\"token punctuation\">,</span> chunks <span class=\"token punctuation\">,</span> cacheGroupKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 分离出模块文件名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token keyword\">const</span> allChunksNames <span class=\"token operator\">=</span> chunks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'~'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 模块 1 ~ 模块名 2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./js/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>allChunksNames<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token comment\">// 输出到 dist 目录下位置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>&lt;font title='red'&gt; 打包 &lt;/font &gt; 观察效果</p>\n</li>\n</ol>\n<p>执行命令：npm run build</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162120945.png\" alt=\"image-20230816212016525\" /></p>\n<p>查看目录变化</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162120169.png\" alt=\"image-20230816212049697\" /></p>\n<p>在项目中生成了一个公共的 js 目录里面都是被拼接成代码片段的使用过的代码 也就是用到的公共代码被提取成了代码片段了</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>命令 <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": [
                "计算机学科",
                "web",
                "计算机学科",
                "web"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Promise/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Promise/",
            "title": "Promise",
            "date_published": "2024-01-08T07:26:30.320Z",
            "content_html": "<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<h3 id=\"基本使用与概述\"><a class=\"anchor\" href=\"#基本使用与概述\">#</a> 基本使用与概述</h3>\n<p><strong>定义</strong>：</p>\n<p>Promise 对象用于表示一个<mark>异步操作</mark>的<mark>最终完成</mark> (或<mark>失败</mark>) 及其<mark>结果值</mark>。</p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 好处 &lt;/span&gt;：</p>\n<ol>\n<li>逻辑更清晰</li>\n<li>了解 axios 函数内部运作机制</li>\n<li>能解决回调函数地狱问题</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130946670.png\" alt=\"image-20230813094654122\" /></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//2. 执行异步任务 — 并传递结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 成功调用：resolve (值) 触发 then () 执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 失败调用：reject (值) 触发 catch () 执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 接收结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Promise?\n<ul>\n<li>表示 (管理) 一个 &lt; font title=red &gt; 异步 &lt;/font &gt; 操作 &lt; font title=red &gt; 最终状态 &lt;/font &gt; 和 &lt; font title=red &gt; 结果值 &lt;/font &gt; 的对象</li>\n</ul>\n</li>\n<li>为什么学习 Promise?\n<ul>\n<li>成功和失败状态，可以关联对应处理程序</li>\n<li>了解 axios 内部原理</li>\n</ul>\n</li>\n<li>Promise 使用步骤？\n<ol>\n<li>创建 Promise 对象  <code>new Promise((成功回调函数，失败回调函数)=&gt; &#123;&#125;)</code></li>\n<li>执行异步任务 — 并传递结果\n<ol>\n<li>成功调用：成功回调函数 (值) 触发 then () 执行</li>\n<li>失败调用：失败回调函数 (值) 触发 catch () 执行</li>\n</ol>\n</li>\n<li>接收结果\n<ol>\n<li>成功：then (回调函数 =&gt; {})</li>\n<li>失败：catch (回调函数 =&gt; {})</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promise三种状态\"><a class=\"anchor\" href=\"#promise三种状态\">#</a> Promise— 三种状态</h3>\n<p><strong>作用</strong>：理解 Promise 对象如何 &lt;font title=red&gt; 关联 &lt;/font&gt; 的 &lt; font title=red &gt; 处理函数 &lt;/font&gt;，以及代码执行顺序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131009808.png\" alt=\"image-20230813100906484\" /></p>\n<p>待定 (pending)：初始状态，既没有被兑现，也没有拒绝</p>\n<p>已兑现 (fulfilled)：意味着，操作成功完成</p>\n<p>已拒绝 (rejected)：意味着，操作失败</p>\n<p>&lt;blockquote alt=danger&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;Promise 对象一旦被 &lt; font title=red &gt; 兑现 / 拒绝 &lt;/font &gt; 就是 &lt; font title=red &gt; 已敲定了，状态无法再被改变 &lt;/font&gt;&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 目标：使用 Promise 管理异步任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 在下面的定时器任务还没执行 成功或失败的回调函数之前展开 console</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// Promise 处于 pending 状态 - 待定状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">//2. 执行异步代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">//resolve () => fulfilled 状态 - 已兑现状态 执行 = then ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求—成功结果'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//reject () => rejected 状态 - 已拒绝状态 执行 = catch ()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求—失败结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 程序执行到这里 Promise 的状态就已经敲定了不可改变了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 上面同时执行成功和失败最终是？ fulfilled 因为不可变</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 3. 获取结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131023902.png\" alt=\"image-20230813102333221\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>Promise 对象有哪 3 中 &lt;font title=red&gt; 状态 &lt;/font&gt;？\n<ul>\n<li>待定：pending</li>\n<li>已兑现：fulfilled</li>\n<li>已拒绝：rejected</li>\n</ul>\n</li>\n<li>Promise 状态有什么用？\n<ul>\n<li>状态改变后，调用关联的处理函数</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promisexhr获取省份列表\"><a class=\"anchor\" href=\"#promisexhr获取省份列表\">#</a> Promise+XHR 获取省份列表</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：使用 Promise 管理 XHR 请求省份列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 创建 Promise 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 执行 XHR 异步代码，获取省份列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 关联成功或失败函数，做后续处理</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 2. 执行 XHR 代码，获取省份列表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 3.xhr 如何判断响应成功还是失败的？</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 2xx 开头都是成功响应状态码</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// console.log(xhr.response)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 3. 关联成功或失败函数，做后续处理</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将成功获取的数据添加到 p 标签中展示</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 错误对象要用 dir 详细打印</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 服务器返回错误提示信息，插入到 p 标签展示</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131100796.png\" alt=\"image-20230813110046300\" /></p>\n<p>如果要发送一个 JSON 数据而且后端接收数据警告了：text/plain;charset=UTF-8 此时需要设置下请求头的数据格式了：</p>\n<p>写在 open 与 send 之间</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhl<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"封装_简易axios-_-获取省份列表\"><a class=\"anchor\" href=\"#封装_简易axios-_-获取省份列表\">#</a> 封装_简易 axios _ 获取省份列表</h3>\n<p><strong>需求</strong>：基于<mark> Promise</mark> + <mark>XHR</mark> 封装 myAxios 函数，获取省份列表展示</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>定义 myAxios 函数，接收 &lt;font title=red&gt; 配置对象 &lt;/font&gt;，返回 &lt; font title=red&gt;Promise 对象 &lt;/font&gt;.</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>发起 &lt;font title=red&gt;XHR 请求，默认请求方法 &lt;/font&gt; 为 GET</p>\n</li>\n<li>\n<p>调用 成功 / 失败 的处理程序</p>\n</li>\n<li>\n<p>使用 myAxios 函数，获取省份列表展示</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_获取省份列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 发起 XHR 请求，默认请求方法为 GET</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 调用 成功 / 失败 的处理程序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        4. 使用 myAxios 函数，获取省份列表展示</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131134277.png\" alt=\"image-20230813113448862\" /></p>\n<h3 id=\"封装_简易axios-_-获取地区列表-查询参数\"><a class=\"anchor\" href=\"#封装_简易axios-_-获取地区列表-查询参数\">#</a> 封装_简易 axios _ 获取地区列表 (查询参数)</h3>\n<p><strong>需求</strong>：修改 myAxios 函数支持传递 &lt;font title=red&gt; 查询参数 &lt;/font&gt;，获取 ‘辽宁省’ ，‘大连市’ 对应地区列表展示</p>\n<p><strong>要求</strong>：</p>\n<ol>\n<li>\n<p>myAxios 函数调用后，传入 &lt;font title=red&gt;params&lt;/font&gt; 选项</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求 - 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于  <code>URLSearchParams</code>  转换 &lt;font title=red&gt; 查询参数字符串 &lt;/font&gt;.</p>\n</li>\n<li>\n<p>使用自己封装的 myAxios 函数展示地区列表</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_获取地区列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 判断 params 选项，携带查询参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 使用 URLSearchParams 转换，并携带到 url 上</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 使用 myAxios 函数，获取地区列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 将获取到的查询参数转换为字符串类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 把查询参数字符串，拼接在 url 的？后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> <span class=\"token string\">'辽宁省'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> <span class=\"token string\">'大连市'</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131329652.png\" alt=\"image-20230813132951994\" /></p>\n<h3 id=\"封装_简易-_axios-_注册用户-请求体数据\"><a class=\"anchor\" href=\"#封装_简易-_axios-_注册用户-请求体数据\">#</a> 封装_简易 _axios _注册用户 (请求体数据)</h3>\n<p><strong>需求</strong>：修改 myAxios 函数支持传递 &lt;font title=red&gt; 请求体 &lt;/font &gt; 数据，完成注册用户功能</p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>myAxios 函数调用后，判断 &lt;font title=red&gt;data&lt;/font &gt; 选项</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求 - 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>转换数据类型，在 <code>send()</code>  方法中发送</p>\n</li>\n<li>\n<p>使用自己封装的 myAxios 函数完成注册用户功能</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"reg-btn\"</span><span class=\"token operator\">></span>注册用户<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_注册账号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 判断 data 选项，携带请求体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 转换数据类型，在 send 中发送</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 使用 myAxios 函数，完成注册用户</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 将获取到的查询参数转换为字符串类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 把查询参数字符串，拼接在 url 的？后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 data 选项，携带请求体</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// 2. 转换数据类型，在 send 中发送</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">const</span> jsonStr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 设置请求头数据类型为 application/json 是 JSON 数据格式</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token comment\">// 发送请求，携带请求体数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.reg-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 3. 使用 myAxios 函数，完成注册用户</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'qweqjisd1123'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123123'</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131400425.png\" alt=\"image-20230813140045017\" /></p>\n<h3 id=\"同步代码异步代码\"><a class=\"anchor\" href=\"#同步代码异步代码\">#</a> 同步代码 &amp; 异步代码</h3>\n<h4 id=\"同步代码\"><a class=\"anchor\" href=\"#同步代码\">#</a> 同步代码：</h4>\n<blockquote>\n<p>我们应该注意的是，实际上浏览器是按照我们 &lt;span alt=solid&gt; 书写代码的顺序一行一行执行程序的 &lt;/span&gt;。浏览器会等待代码的解析和工作，在 &lt; span alt=solid &gt; 上一行完成后才会执行下一行 &lt;/span&gt;。这样做是很有必要的，因为每一行新的代码都是建立在前面代码的基础之上的。</p>\n<p>这也使得它成为一个 &lt;span alt=solid&gt; 同步程序 &lt;/span&gt;.</p>\n</blockquote>\n<h4 id=\"异步代码\"><a class=\"anchor\" href=\"#异步代码\">#</a> 异步代码：</h4>\n<blockquote>\n<p>异步编程技术使得你的程序可以在执行一个 &lt;span alt=solid&gt; 可能长期运行的任务 &lt;/span &gt; 的同时继续对其它事件做出反应而 &lt; span alt=solid &gt; 不必等待任务完成 &lt;/span&gt;。与此同时，你的程序也将在任务 &lt; span alt=solid &gt; 完成后显示结果 &lt;/span&gt;。</p>\n</blockquote>\n<p><strong>同步代码</strong>：逐行执行，&lt;font title=red&gt; 需要原地等待结果 &lt;/font &gt; 后，才继续向下执行</p>\n<p><strong>异步代码</strong>：调用后 &lt;font title=red&gt; 耗时 &lt;/font&gt;，不阻塞代码继续执行 (不必原地等待)，在将来完成后触发一个 &lt;font title=red &gt; 回调函数 &lt;/font&gt;.</p>\n<blockquote>\n<p>JS 线程 详细查看 <a href=\"../Web/JavaScript/WebAPIs.md\">点击查看</a> 打开后 ctrl + F 搜索：JS 执行机制</p>\n</blockquote>\n<hr />\n<h3 id=\"回调函数地狱\"><a class=\"anchor\" href=\"#回调函数地狱\">#</a> 回调函数地狱</h3>\n<p><strong>需求</strong>：展示默认第一个省，第一个城市，第一个地区在下拉菜单中</p>\n<p><strong>概念</strong>：在回调函数中 &lt;font title=red&gt; 嵌套回调函数 &lt;/font&gt;，一直嵌套下去就形成了回调函数地狱</p>\n<p><strong>缺点</strong>：可读性差，异常无法捕获，耦合性严重，牵一发动全身</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131424346.png\" alt=\"image-20230813142433861\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 获取第一个省份默认下属的第一个城市名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>pname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 获取第一个城市默认下属第一个地区的名字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>pname <span class=\"token punctuation\">,</span> cname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可读性 太差了，不好维护，耦合性严重</p>\n<p><strong>演示</strong>：</p>\n<h6 id=\"html代码\"><a class=\"anchor\" href=\"#html代码\">#</a> html 代码：</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>省份:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>城市:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>地区:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>js 代码</strong>：</p>\n<p>在第三个最里面的 axios 的 url 中 故意多加一个 1 然它报错看看最外层的是否能捕获到它的错误信息呢</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：演示回调函数地狱</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：获取默认第一个省，第一个市，第一个区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 概念：在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 缺点：可读性差，异常无法捕获，耦合性严重，牵一发动全身</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//1. 获取默认第一个省份的名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 获取默认第一个城市的名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> city <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> city</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 3. 获取默认第一个地区的名称</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 我们故意将接口的地址写错看下异常的处理是什么样子的 多加一个 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> city <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>： &lt;font title=red&gt; 不行 &lt;/font&gt;！！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131533753.png\" alt=\"image-20230813153339502\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是回调函数地狱？\n<ul>\n<li>在回调函数一直向下 &lt;font title=red&gt; 嵌套回调函数 &lt;/font&gt;，形成回调函数地狱</li>\n</ul>\n</li>\n<li>回调函数地狱问题？\n<ul>\n<li>可读性差</li>\n<li>异常捕获困难</li>\n<li>耦合性严重</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"下面就是解决回调函数地狱问题的方式\"><a class=\"anchor\" href=\"#下面就是解决回调函数地狱问题的方式\">#</a> 下面就是解决回调函数地狱问题的方式：</h4>\n<h3 id=\"promise-链式调用\"><a class=\"anchor\" href=\"#promise-链式调用\">#</a> Promise - 链式调用</h3>\n<p>使用 Promise 的特性来解决 回调函数地狱问题！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131543365.png\" alt=\"image-20230813153913043\" /></p>\n<p><strong>上图解释</strong>：</p>\n<p>在创建一个 Promise 对象的时候，里面就会管理一个异步任务。而拿到异步任务成功的结果就可以调用对象内置的.then () 方法中传入回调函数接收成功的结果。而这个.then () 本身也是方法的调用本身也有返回值，而它的返回值又是一个新的 Promise 对象。这又是一个新的 Promise 对象，那里面还能再管理一个异步任务。</p>\n<p><strong>解决方式</strong>：</p>\n<p>获取省份的 Promise 中调用.then 在它的.then 中获取城市，而获取城市的 Promise 中调用.then 在它的.then 中获取地区。</p>\n<p>这样回调函数嵌套的问题就变成了线性的结构！</p>\n<blockquote>\n<p>概念：</p>\n<ul>\n<li>依靠 then () 方法返回一个 &lt; font title=red&gt; 新生成的 Promise 对象 &lt;/font &gt; 特性，继续串联下一环任务，直到结束</li>\n</ul>\n<p>细节：</p>\n<ul>\n<li>then () 回调函数中的 &lt; font title=red&gt; 返回值 &lt;/font&gt;，会影响新生成的 Promise 对象 &lt; font title=red &gt; 最终状态和结果 &lt;/font&gt;.</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131547443.png\" alt=\"image-20230813154716607\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 Promise 的链式调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：把省市的嵌套结构，改成链式调用的结构</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//1. 创建 Promise 对象 - 模拟请求省份名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'北京市'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 2. 获取省份名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 3. 创建 Promise 对象 - 模拟请求城市名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">//return Promise 对象最终状态和结果，影响到新的 Promise 对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token string\">'---北京'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//then () 返回的 Promise 是一个新对象 两个对象 的地址不同 返回 为 false</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">===</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131606112.png\" alt=\"image-20230813160612061\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Promise 的链式调用 ？\n<ul>\n<li>使用 then 函数返回新 Promise 对象特性，一直串联下去</li>\n</ul>\n</li>\n<li>then 回调函数中，return 的值会传给哪里？\n<ul>\n<li>传给 then 函数生成的新 Promise 对象</li>\n</ul>\n</li>\n<li>Promise 链式调用有什么用？\n<ul>\n<li>解决回调函数嵌套 (地狱) 问题</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promise-链式应用\"><a class=\"anchor\" href=\"#promise-链式应用\">#</a> Promise - 链式应用</h3>\n<p><strong>目标</strong>：使用 Promise 链式调用，解决回调函数地狱问题。</p>\n<p><strong>做法</strong>：每个 Promise 对象中管理一个异步任务，用 then 返回 Promise 对象，串联起来。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131619195.png\" alt=\"image-20230813161938585\" /></p>\n<p>每一个 axios 就相当于 Promise 可以看下上面的 &lt;a href=&quot;#Promise+XHR 获取省份列表&quot;&gt;Promise+XHR&lt;/a&gt;.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：把回调函数嵌套代码，改成 Promise 链式调用结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：获取默认第一个省，第一个市，第一个地区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> pname <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//1. 获取第一个省 Promise 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 获取第一个城市 Promise 对象 并返回 多加一个 1 让它报错查看捕获的结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 3. 获取第一个地区 Promise 对象 并返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131646743.png\" alt=\"image-20230813164606240\" /></p>\n<h2 id=\"async函数和await\"><a class=\"anchor\" href=\"#async函数和await\">#</a> async 函数和 await</h2>\n<blockquote>\n<p>&lt;span alt=solid&gt; 定义 &lt;/span&gt;：</p>\n<p>async 函数是使用 <code>async</code>  关键字声明的函数。async 函数是  <code>AsyncFunction</code>  构造函数的实例，并且其中允许使用 <code>await</code>  关键字。&lt;span alt=solid&gt; <code>async</code>  和 <code>await</code>  关键字让我们可以用一种更简洁的方式写出基于 <code>Promise</code>  的异步行为，而无需刻意地链式调用 <code>Promise</code> &lt;/span&gt;。</p>\n<p>&lt;span alt=solid&gt; 概念 &lt;/span&gt;：在 async 函数内，使用 await 关键字取代 then 函数，&lt;font title=red &gt; 等待 &lt;/font &gt; 获取 Promise 对象成 &lt; font title=red &gt; 功状态的结果值 &lt;/font&gt;.</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<h6 id=\"html代码-2\"><a class=\"anchor\" href=\"#html代码-2\">#</a> html 代码：</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>省份:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>城市:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>地区:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取默认省市区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDefaultArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 赋予到页面上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getDefaultArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h3 id=\"async函数和await_解决回调函数地狱问题\"><a class=\"anchor\" href=\"#async函数和await_解决回调函数地狱问题\">#</a> async 函数和 await_解决回调函数地狱问题</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 async 和 await 语法，解决回调函数地狱问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 概念：在 async 函数内，使用 await 关键字，获取 Promise 对象，\"成功状态\"   结果值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 注意：await 必须用在 async 修饰的函数内 (await 会阻止 \"异步函数\" 代码继续执行，原地等待结果)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">//axios 原地返回一个 Promise 对象而 await 等待一个 Promise 对象成功状态的结果值 所以在前面使用 await 接收将结果取在原地使用 一个变量接收</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">//await 必须用在 async 修饰内</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 故意在地址尾部多加一个 1 当这里发生错误后 后面不会再执行，你可能会想到下面不是依赖了这里一个变量吗应该是报错了吧不是没有执行。这个结论是错误的下面的代码并不会再去执行了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 只是终止了 aysnc 块中的代码执行并不是终止程序 哦～</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131748288.png\" alt=\"image-20230813174800891\" /></p>\n<p>没有对异常做处理，对异常做处理请看下章</p>\n<hr />\n<h3 id=\"async函数和await_捕获错误\"><a class=\"anchor\" href=\"#async函数和await_捕获错误\">#</a> async 函数和 await_捕获错误</h3>\n<p><strong>使用</strong>：try-catch</p>\n<p><code>try-catch</code>  语句标记要尝试的语句块，并指定一个出现异常时抛出的响应。</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 要执行的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//error 接收的是，错误信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//try 里面代码，如果有错误，直接进入这里执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 async 和 await 语法，解决回调函数地狱问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 概念：在 async 函数内，使用 await 关键字，获取 Promise 对象，\"成功状态\"   结果值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 注意：await 必须用在 async 修饰的函数内 (await 会阻止 \"异步函数\" 代码继续执行，原地等待结果)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 1. 使用 try 包裹可能发生错误的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//axios 原地返回一个 Promise 对象而 await 等待一个 Promise 对象成功状态的结果值 所以在前面使用 await 接收将结果取在原地使用 一个变量接收</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">//await 必须用在 async 修饰内</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 故意在地址尾部多加一个 1 当这里发生错误后 后面不会再执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 2. 使用 catch 捕获发生错误的信息</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 打印捕获到的错误信息 是一个对象是 axios 返回的错误使用 dir 查看详细</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 只是终止了 aysnc 块中的代码执行并不是终止程序 哦～</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131755747.png\" alt=\"image-20230813175557560\" /></p>\n<h2 id=\"宏任务与微任务\"><a class=\"anchor\" href=\"#宏任务与微任务\">#</a> 宏任务与微任务</h2>\n<p>ES6 之后引入了 Promise 对象，让 JS 引擎也可以发起异步任务</p>\n<p><strong>异步任务分为</strong>：</p>\n<p>&lt;span alt=solid&gt; 宏任务 &lt;/span&gt;：由 &lt; font title=red &gt; 浏览器 &lt;/font &gt; 环境执行的异步代码</p>\n<p>&lt;span alt=solid&gt; 微任务 &lt;/span&gt;：由 &lt; font title=red&gt;JS 引擎 &lt;/font &gt; 环境执行的异步代码</p>\n<p>宏任务</p>\n<table>\n<thead>\n<tr>\n<th>任务 (代码)</th>\n<th>执行所在环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JS 脚本执行事件 (Script)</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>setTimeout/setInterval</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>Ajax 请求完成事件</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>用户交互事件等</td>\n<td>浏览器</td>\n</tr>\n</tbody>\n</table>\n<p>微任务</p>\n<table>\n<thead>\n<tr>\n<th>任务 (代码)</th>\n<th>执行所在环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise 对象.then ()</td>\n<td>JS 引擎</td>\n</tr>\n</tbody>\n</table>\n<p>Promise 本身是同步的，而 then 和 catch&lt;font title=red&gt; 回调函数 &lt;/font &gt; 是异步的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132000229.png\" alt=\"image-20230813195951215\" /></p>\n<p>执行步骤：</p>\n<pre><code> 1.script标签js脚本执行的事件就会交给浏览器环境\n\n 2.然后把整个js脚本代码推入到宏任务队列中\n\n 3.调用栈是空闲的它会立刻执行第一个宏任务就是script脚本(标签)然后执行里面代码\n\n 4.读到console.log(1)放入到调用栈进行执行\n  \n 5.读取setTimeout是异步任务，是个宏任务，宏任务交给浏览器来执行\n\n 6.读取new Promise放入到调用栈中，Promise对象本身是同步的,立刻打印里面的值\n\n 6.1 Promise是同步的立刻调用了里面的成功回调函数，它是微任务的\n\n 7.将console.log(5)推入调用栈执行\n\n 8.调用栈空闲了就反复去查看任务队列中是否有可执行的异步回调函数如果宏任务，微任务两个任务队列都有可执行的异步代码会优先执行微任务中的异步回调函数，因为微任务更接近与JS引擎\n\n 9.将微任务队列的任务推入到调用栈执行\n\n 10.此时微任务队列中没有任务了去找宏任务并将其推入到调用栈执行\n\n 11.程序运行完毕!!\n</code></pre>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是宏任务？\n<ul>\n<li>&lt;font title=red&gt; 浏览器执行 &lt;/font &gt; 的异步代码</li>\n<li>例如：JS 执行脚本事件，setTimeout /setInterval，Ajax 请求完成事件，用户交互事件等</li>\n</ul>\n</li>\n<li>什么是微服务？\n<ul>\n<li>&lt;font title=red&gt;JS 引擎 &lt;/font&gt; 执行的异步代码</li>\n<li>例如：Promise 对象.then () 的回调</li>\n</ul>\n</li>\n<li>JavaScript 内部代码如何执行？\n<ul>\n<li>执行第一个 script 脚本事件宏任务，里面 &lt;font title=red&gt; 同步 &lt;/font &gt; 代码</li>\n<li>遇到 &lt;font title=red&gt; 宏任务 / 微任务 &lt;/font &gt; 交给宿主环境，有结果回调函数进入对应队列</li>\n<li>当执行栈空闲时，&lt;font title=red&gt; 清空微任务 &lt;/font &gt; 队列，再执行 &lt; font title=red &gt; 下一个宏任务 &lt;/font&gt;，从 1 再来</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132005359.png\" alt=\"image-20230813200500564\" /></p>\n</blockquote>\n<h2 id=\"promiseall静态方法\"><a class=\"anchor\" href=\"#promiseall静态方法\">#</a> Promise.all 静态方法</h2>\n<p><strong>概念</strong>：合并多个 Promise 对象，等待所有 &lt;font title=red&gt; 同时成功 &lt;/font &gt; 完成 (或某一个失败)，做后续逻辑</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132023381.png\" alt=\"image-20230813202342010\" /></p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//all 的构造函数传入一个数组，数组里面就是要合并的一个一个小的 Promise 对象然后返回一个新的大 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promsie<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise对象，Promise对象，<span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//result 结果：[Promise 对象成功结果，Promise 对象成功结果，...]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 第一个失败的 Promise 对象，抛出的异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/%E5%89%8D%E7%AB%AF/form-serialize%E6%8F%92%E4%BB%B6/",
            "url": "https://pigpigletsgo.github.io/tools/%E5%89%8D%E7%AB%AF/form-serialize%E6%8F%92%E4%BB%B6/",
            "title": "form-serialize插件，快速收集表单元素的值",
            "date_published": "2024-01-08T07:24:21.683Z",
            "content_html": "<h2 id=\"form-serialize插件\"><a class=\"anchor\" href=\"#form-serialize插件\">#</a> form-serialize 插件</h2>\n<p><strong>作用</strong>：<mark>快速</mark>收集表单元素的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130850440.png\" alt=\"image-20230813085042213\" /></p>\n<p>这么多的用户填写的表单信息我们如果一个一个获取的话会很麻烦，可以使用 form-serialize 插件来完成。</p>\n<h5 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法：</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取表单对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> ducment<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//serialize 函数 参数 1：指定获取哪个表单范围内的值传入表单对象，参数 2：传入配置对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130853093.png\" alt=\"image-20230813085338699\" /></p>\n<p>无论有多少个表单元素都可以快速的一步到位的全部收集出来。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"javaScript:;\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-data\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"提交\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javaScript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/form-serialize.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 使用 form-serialize 函数，快速收集表单元素值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 参数 1：要获取哪个表单的数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">//      表单元素设置 name 属性，值会作为对象的属性名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">//      建议 name 属性的值，最好和接口文档参数名一致，否则后端接收不不到数据就会报错</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 参数 2：配置对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//      hash: 设置获取数据结构</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//           -  true ：JSON 格式的 JS 对象数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//           -  false：查询字符串 url ？后面的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">//      empty: 设置是否获取空值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.form-data'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308150957805.gif\" alt=\"test\" /></p>\n<h3 id=\"hash参数的true跟false的区别\"><a class=\"anchor\" href=\"#hash参数的true跟false的区别\">#</a> hash：参数的 true 跟 false 的区别</h3>\n<ul>\n<li>true ：JSON 格式的 JS 对象数据</li>\n<li>false：查询字符串 url ？后面的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151003940.png\" alt=\"image-20230815100345134\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151004712.png\" alt=\"image-20230815100416896\" /></p>\n",
            "tags": [
                "tools",
                "web",
                "工具"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/git/Git/",
            "url": "https://pigpigletsgo.github.io/computer-science/git/Git/",
            "title": "Git版本控制系统",
            "date_published": "2024-01-08T07:19:37.359Z",
            "content_html": "<h2 id=\"git版本控制系统\"><a class=\"anchor\" href=\"#git版本控制系统\">#</a> Git 版本控制系统</h2>\n<h5 id=\"git初始\"><a class=\"anchor\" href=\"#git初始\">#</a> git 初始</h5>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 概念 &lt;/span&gt;：</p>\n<p>一个免费开源，分布式的 &lt;font title='red'&gt; 代码版本 &lt;/font &gt; 控制系统， 帮助开发团队维护代码</p>\n<p>&lt;span alt='solid'&gt; 作用 &lt;/span&gt;：</p>\n<p>&lt;font title='red'&gt; 记录 &lt;/font &gt; 代码内容，&lt;font title='red'&gt; 切换 &lt;/font &gt; 代码版本，多人开发时高效 &lt; font title='red'&gt; 合并 &lt;/font &gt; 代码内容</p>\n</blockquote>\n<p>&lt;span alt='solid'&gt; 如何学 &lt;/span&gt;：</p>\n<p><strong>个人本机使用</strong>：git 基础命令和概念</p>\n<p><strong>多人共享使用</strong>：团队开发同一个项目的代码版本管理</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308162135287.png\" alt=\"image-20230816213516967\" /></p>\n<h3 id=\"git配置用户信息\"><a class=\"anchor\" href=\"#git配置用户信息\">#</a> Git 配置用户信息</h3>\n<p><strong>配置</strong>：用户名和邮箱，应用在每次提交代码版本时<mark>表明自己身份</mark>.</p>\n<p><strong>命令</strong>：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">'用户名'</span></pre></td></tr></table></figure><figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">'邮箱'</span></pre></td></tr></table></figure><blockquote>\n<p>总结：</p>\n<ol>\n<li>为何学习 Git ?\n<ul>\n<li>&lt;font title='red'&gt; 管理代码版本 &lt;/font&gt;，记录，切换，合并代码</li>\n</ul>\n</li>\n<li>Git 学习\n<ul>\n<li>现在本机自己使用</li>\n<li>再学习多人共享使用</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"掌握git仓库\"><a class=\"anchor\" href=\"#掌握git仓库\">#</a> 掌握 Git 仓库</h3>\n<p>Git 仓库 (repository) ：记录文件 &lt; font title='red'&gt; 状态 &lt;/font &gt; 内容的地方，存储着修改的 &lt; font title='red'&gt; 历史记录 &lt;/font&gt;。</p>\n<p><strong>创建</strong>：</p>\n<ol>\n<li>\n<p>把本地文件夹 &lt;font title='red'&gt; 转换 &lt;/font &gt; 成 Git 仓库：命令：&lt;font title='red'&gt;git init&lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171148966.png\" alt=\"image-20230817114756556\" /></p>\n</li>\n<li>\n<p>从其它服务器上 &lt;font title='red'&gt; 克隆 &lt;/font&gt;Git 仓库</p>\n</li>\n</ol>\n<p>需求：创建一个空白的 Git 仓库</p>\n<p>打开 GitBash 到项目目录下，执行命令：git init</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171230894.png\" alt=\"image-20230817123047004\" /></p>\n<p>查看项目目录下的变化</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171231139.png\" alt=\"image-20230817123104694\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Git 仓库？\n<ul>\n<li>记录文件状态内容和 &lt;font title='red'&gt; 历史记录 &lt;/font &gt; 的地方 (.git 文件夹)</li>\n</ul>\n</li>\n<li>如何创建 Git 仓库？\n<ul>\n<li>把本地文件夹转换成 Git 仓库：命令 &lt;font title='red'&gt;git init&lt;/font&gt;</li>\n<li>从其它服务器上克隆 Git 仓库</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"git的三个区域\"><a class=\"anchor\" href=\"#git的三个区域\">#</a> Git 的三个区域</h3>\n<p><strong>Git 使用时</strong>：</p>\n<p>&lt;span alt='solid'&gt; 工作区 &lt;/span&gt;：实际 &lt; font title='red'&gt; 开发 &lt;/font &gt; 时操作的文件夹</p>\n<p>&lt;span alt='solid'&gt; 暂存区 &lt;/span&gt;：保存之前的 &lt; font title='red'&gt; 准备区域 &lt;/font&gt; (暂存改动过的文件)</p>\n<p>&lt;span alt='solid'&gt; 版本库 &lt;/span&gt;：提交并 &lt; font title='red'&gt; 保存 &lt;/font &gt; 暂存区中的内容，产生一个版本快照</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git add 文件名</td>\n<td>暂存指定文件</td>\n</tr>\n<tr>\n<td>git add .</td>\n<td>暂存所有改动的文件</td>\n</tr>\n<tr>\n<td>git commit -m ‘注释说明’</td>\n<td>提交并保存，产生版本快照</td>\n</tr>\n<tr>\n<td>git ls-files</td>\n<td>查看当前暂存区记录了哪些文件</td>\n</tr>\n<tr>\n<td><code>git log --oneline</code></td>\n<td>查看版本库历史日志</td>\n</tr>\n<tr>\n<td><code>git reflog --online</code></td>\n<td>查看完整的版本库历史日志</td>\n</tr>\n<tr>\n<td><code>git rm --cached 路径/文件名</code></td>\n<td>从暂存区中移除指定文件</td>\n</tr>\n</tbody>\n</table>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：图中的 git_study 也就是自己的当前项目路面 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171340651.png\" alt=\"image-20230817134010660\" /></p>\n<p><strong>需求</strong>：把登录页面新增后，暂存并提交</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171353405.png\" alt=\"image-20230817135326555\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>Git 使用时有哪些区域？\n<ul>\n<li>工作区，暂存区，版本库</li>\n</ul>\n</li>\n<li>工作区的内容，最终要如何保存在版本库中？\n<ul>\n<li>&lt;font title='red'&gt;git add&lt;/font&gt; 添加到暂存区</li>\n<li>等待时机后 &lt;font title='red'&gt;git commit&lt;/font&gt; 提交保存到版本库，产生一次版本快照记录</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"git-文件状态\"><a class=\"anchor\" href=\"#git-文件状态\">#</a> Git 文件状态</h3>\n<p>Git 文件 2 种状态：</p>\n<ul>\n<li>未跟踪：新文件，从未被 Git 管理过</li>\n<li>已跟踪：Git 已经知道和管理的文件</li>\n</ul>\n<p><strong>使用</strong>：修改文件，暂存，提交保存记录，如此反复</p>\n<p><strong>需求</strong>：新增 css 文件，并使用 &lt;font title='red'&gt;git status -s&lt;/font&gt; 查看文件状态，并最终提交</p>\n<table>\n<thead>\n<tr>\n<th>文件状态</th>\n<th>概念</th>\n<th>场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未跟踪 (U)</td>\n<td>从未被 Git 管理过</td>\n<td>新文件</td>\n</tr>\n<tr>\n<td>新添加 (A)</td>\n<td>第一次被 Git 暂存</td>\n<td>之前版本记录无此文件</td>\n</tr>\n<tr>\n<td>未修改 (‘ ’)</td>\n<td>三个区域统一</td>\n<td>提交保存后</td>\n</tr>\n<tr>\n<td>已修改 (M)</td>\n<td>工作内容变化</td>\n<td>修改了内容产生</td>\n</tr>\n</tbody>\n</table>\n<p>其它的状态：</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>D</td>\n<td>你本地删除的文件 (服务器上还在)</td>\n</tr>\n<tr>\n<td>R</td>\n<td>文件名被修改</td>\n</tr>\n<tr>\n<td>T</td>\n<td>文件的类型被修改</td>\n</tr>\n<tr>\n<td>X</td>\n<td>未知状态</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171406687.png\" alt=\"image-20230817140620456\" /></p>\n<p>第一列是暂存区状态</p>\n<p>第二列是工作区状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171407660.png\" alt=\"image-20230817140706529\" /></p>\n<p><strong>演示</strong>：</p>\n<h4 id=\"1-新增一个css文件\"><a class=\"anchor\" href=\"#1-新增一个css文件\">#</a> 1 新增一个 css 文件</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171410453.png\" alt=\"image-20230817141012331\" /></p>\n<h4 id=\"2-执行git-add\"><a class=\"anchor\" href=\"#2-执行git-add\">#</a> 2 执行：git add .</h4>\n<p>将所有文件添加到暂存区，然后 git status -s 查看状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171411783.png\" alt=\"image-20230817141140352\" /></p>\n<p>css 文件处于 新添加状态 (A)</p>\n<h4 id=\"3-改动css内容\"><a class=\"anchor\" href=\"#3-改动css内容\">#</a> 3 改动 css 内容</h4>\n<p>如果改动一下 css 文件的内容，然后执行命令：git status -s 查看状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171414244.png\" alt=\"image-20230817141443339\" /></p>\n<p>后面就会跟着一个 M 已修改状态 (M)  被修改过的文件。</p>\n<h4 id=\"4-改动内容同步到暂存区\"><a class=\"anchor\" href=\"#4-改动内容同步到暂存区\">#</a> 4 改动内容同步到暂存区</h4>\n<p>如果想让工作区里的改动同步到暂存区则需要再重复执行命令：git add .</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171417881.png\" alt=\"image-20230817141704591\" /></p>\n<p>工作区里面就是最新的了</p>\n<h4 id=\"5-将暂存区的文件提交到版本库\"><a class=\"anchor\" href=\"#5-将暂存区的文件提交到版本库\">#</a> 5 将暂存区的文件提交到版本库</h4>\n<p>执行命令：git commit -m ‘备注’ ，再执行 git status -s 后 可以看到当前没有任何变化的文件了，现在就是未修改状态了 (‘’) 三个区域统一。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171420856.png\" alt=\"image-20230817142029345\" /></p>\n<p>如果再对 css 文件进行内容的更改就有 处于 已修改状态了 (M)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171423614.png\" alt=\"image-20230817142323012\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>Git 文件状态分为哪 2 种？\n<ul>\n<li>未跟踪和已跟踪 (新添加，未修改，已修改)</li>\n</ul>\n</li>\n<li>如何查看暂存区和工作区文件状态？\n<ul>\n<li>git status -s</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"git-暂存区使用\"><a class=\"anchor\" href=\"#git-暂存区使用\">#</a> Git 暂存区使用</h3>\n<p>暂<strong>存区</strong>：暂时存储，可以临时恢复代码内容，与版本库解耦</p>\n<p>暂存区 -》 覆盖 -》 工作区 ，<strong>命令</strong>：git restore 目标文件 (&lt;span alt='solid'&gt; 注意 &lt;/span&gt;：&lt;font title='red'&gt; 完全确认覆盖时使用 &lt;/font&gt;)</p>\n<p>从暂存区移除文件，<strong>命令</strong>： <code>git rm --cached</code>  目标文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171430065.png\" alt=\"image-20230817143038646\" /></p>\n<p><strong>演示</strong>：</p>\n<h4 id=\"演示-git-restore\"><a class=\"anchor\" href=\"#演示-git-restore\">#</a> 演示 git restore</h4>\n<p>查看暂存区的文件列表：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171433851.png\" alt=\"image-20230817143328392\" /></p>\n<p>暂存区中有两个代码文件，我想重写一个 html 文件的代码</p>\n<p>原本的代码内容：里面是经过 webpack 打包压缩的 不过没关系 照改</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171435559.png\" alt=\"image-20230817143518094\" /></p>\n<p>更改后的代码内容：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171436138.png\" alt=\"image-20230817143625820\" /></p>\n<p>查看页面样式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171436381.png\" alt=\"image-20230817143653837\" /></p>\n<p>我有觉得太丑了没有之前那个写的好，但是那么多代码和思路 ， 总不能完美复刻上一次的代码把。怎么办呢？</p>\n<p>git 中执行命令：git restore 将 index.html 在暂存区中的那个代码文件覆盖工作区的这个 index.html</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171439985.png\" alt=\"image-20230817143945385\" /></p>\n<p>查看 index.html 文件的内容，可以看到之前的代码就回来了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171439980.png\" alt=\"image-20230817143917985\" /></p>\n<h4 id=\"演示-git-rm-cached\"><a class=\"anchor\" href=\"#演示-git-rm-cached\">#</a> 演示  <code>git rm --cached</code></h4>\n<p>执行命令：git ls-files 查看暂存区中的文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171442503.png\" alt=\"image-20230817144237248\" /></p>\n<p>将 index.css 从暂存区中移除，执行命令： <code>git rm --cached [目标文件]</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171443352.png\" alt=\"image-20230817144355199\" /></p>\n<h3 id=\"练习登录页面\"><a class=\"anchor\" href=\"#练习登录页面\">#</a> 练习 — 登录页面</h3>\n<p><strong>需求</strong>：新增 JS 代码并暂存提交产生新的版本快照</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>新增 JS 文件和内容</li>\n<li>临时存放在暂存区</li>\n<li>提交保存到版本库</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171454405.png\" alt=\"image-20230817145450013\" /></p>\n<p>将登录页面的项目代码拷贝到 git 仓库的目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171516124.png\" alt=\"image-20230817151633818\" /></p>\n<p>使用命令将项目所有代码都添加到暂存区里面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171517420.png\" alt=\"image-20230817151732684\" /></p>\n<p>提交到版本库中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171518156.png\" alt=\"image-20230817151804855\" /></p>\n<p>查看提交的历史记录</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171518633.png\" alt=\"image-20230817151835956\" /></p>\n<blockquote>\n<p>上图其中的 HEAD 表示本次提交分支，它指向了 主线 (主仓库) ，最前面的 字符串序列 是版本序列号</p>\n</blockquote>\n<h3 id=\"git-回退版本\"><a class=\"anchor\" href=\"#git-回退版本\">#</a> Git 回退版本</h3>\n<blockquote>\n<p>概念：把版本库某个版本对应的内容快照，恢复到工作区 / 暂存区</p>\n</blockquote>\n<p>查看提交历史： <code>git log --oneline</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171523118.png\" alt=\"image-20230817152320802\" /></p>\n<p><strong>回退命令</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171536327.png\" alt=\"image-20230817153622766\" /></p>\n<h6 id=\"第一种模式\"><a class=\"anchor\" href=\"#第一种模式\">#</a> 第一种模式</h6>\n<p><code>git reset --soft 版本号</code>  (其它文件未跟踪)</p>\n<p>执行命令后，会将对应 &lt;font title='red'&gt; 版本库 &lt;/font &gt; 的序列号的文件以及内容 &lt; span alt='wavy'&gt; 恢复 &lt;/span &gt; 到 &lt;font title='red'&gt; 暂存区 &lt;/font&gt; 和 &lt;font title='red'&gt; 工作区 &lt;/font&gt;<sup> 覆盖原有文件的内容</sup> 尽可能 &lt;span alt='wavy'&gt; 保留 工作区 和 暂存区 里面的文件 &lt;/span&gt; ，但是这些 &lt; span alt='wavy'&gt; 保留的文件会变为 未被跟踪状态 &lt;/span&gt;(U)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171535610.png\" alt=\"image-20230817153547119\" /></p>\n<h6 id=\"第二种模式\"><a class=\"anchor\" href=\"#第二种模式\">#</a> 第二种模式</h6>\n<p><code>git reset --hard 版本号</code></p>\n<p>执行命令后，&lt;font title='red'&gt; 暂存区 &lt;/font &gt; 就 &lt; span alt='wavy'&gt; 只有版本库中对应的文件以及内容了其它的都会被 &lt;/span&gt;&lt;font title='red'&gt; 清除掉 &lt;/font &gt; 而且 &lt; font title='red'&gt; 工作区 &lt;/font &gt; 也是 &lt; span alt='wavy'&gt; 同样的效果 &lt;/span&gt;。这种模式 &lt; span alt='solid'&gt; 比较彻底 &lt;/span&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171536906.png\" alt=\"image-20230817153610464\" /></p>\n<h6 id=\"第三种模式\"><a class=\"anchor\" href=\"#第三种模式\">#</a> 第三种模式</h6>\n<p><code>git reset --mixed 版本号</code>  (与 git reset 等价)</p>\n<p>执行命令后，&lt;font title='red'&gt; 暂存区 &lt;/font &gt; 里面的文件以及内容 &lt; span alt='wavy'&gt; 被版本库对应的文件覆盖 &lt;/span&gt;，但是在 &lt; font title='red'&gt; 工作区 &lt;/font &gt; 中 &lt; span alt='wavy'&gt; 保留它原有的文件以及内容 &lt;/span&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171536075.png\" alt=\"image-20230817153648781\" /></p>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 1&lt;/font&gt;：只有记录在版本库的提交记录才能恢复 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 2&lt;/font&gt;：回退后，继续修改 -&gt; 暂存 -&gt; 提交操作即可 (产生新的提交记录过程)&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<h4 id=\"演示\"><a class=\"anchor\" href=\"#演示\">#</a> 演示</h4>\n<h5 id=\"第三种模式-2\"><a class=\"anchor\" href=\"#第三种模式-2\">#</a> 第三种模式</h5>\n<p>执行命令查看暂存区中的文件：git ls-files</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171550533.png\" alt=\"image-20230817155035750\" /></p>\n<p>查看所有版本库对应的序列号，对应序列号进行回退</p>\n<p>执行命令：</p>\n<p><code>git log --oneline</code></p>\n<p><code>git reset --mixed 90d394d</code></p>\n<p>然后查看暂存区中的文件以及内容：git ls-files 可以看到里面的文件以及内容被对应序列号版本库里面的文件以及内容覆盖了，其它的被清除掉了，但是并不会清除 工作区的文件以及内容</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171550378.png\" alt=\"image-20230817155053525\" /></p>\n<p>查看工作区的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171553373.png\" alt=\"image-20230817155331841\" /></p>\n<h5 id=\"第二种模式-2\"><a class=\"anchor\" href=\"#第二种模式-2\">#</a> 第二种模式</h5>\n<p>执行命令进行回退： <code>git reset --hard 90d394d</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171555624.png\" alt=\"image-20230817155536935\" /></p>\n<p>查看工作区的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171556134.png\" alt=\"image-20230817155624192\" /></p>\n<p>工作区没有被覆盖，但是上面说，暂存区 和 工作区 都会被覆盖 并 清除其它的文件以及内容的啊。</p>\n<p><strong>解释</strong>：</p>\n<p>因为在上面使用第三种模式回退时。暂存区 与 对应版本库 文件以及内容一致 是 未修改状态 (‘’) ，而且清除了其它的文件以及内容。而工作区 只是覆盖了 对应版本库 的文件以及内容 ，其它的文件变成了 未跟踪状态了 (U) 。所以 工作区 再执行 回退 那些 未跟踪的 文件以及 内容也不会发生任何事情。</p>\n<p>它也是从右向左进行 对照 影响的。</p>\n<p><strong>解决</strong>：</p>\n<p>执行命令：git add . 让 工作区 与 暂存区 的文件以及内容一致 然后在进行回退</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171601944.png\" alt=\"image-20230817160110680\" /></p>\n<p>查看工作区情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171601270.png\" alt=\"image-20230817160131858\" /></p>\n<p>回退之后再进行查看版本库的历史版本</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171604957.png\" alt=\"image-20230817160430318\" /></p>\n<h4 id=\"查看完整版本库历史日志\"><a class=\"anchor\" href=\"#查看完整版本库历史日志\">#</a> 查看完整版本库历史日志</h4>\n<p>因为回退到了对应的版本后之后的版本都不见了，怎么办呢？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171607163.png\" alt=\"image-20230817160720559\" /></p>\n<p><strong>解决</strong>：</p>\n<p>使用完整查看 版本库历史 日志的命令： <code>git reflog --online</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171607640.png\" alt=\"image-20230817160742375\" /></p>\n<p>再次回退到 最新的版本库 ，也就是：登录页面 - 开发完毕 的这个</p>\n<p>执行命令： <code>git reset --hard 16babbc</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171609122.png\" alt=\"image-20230817160921582\" /></p>\n<p>查看回退之后的暂存区和工作区的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171610890.png\" alt=\"image-20230817161045206\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Git 回退版本？\n<ul>\n<li>把版本库某个对应的内容快照，恢复到工作区 / 暂存区</li>\n</ul>\n</li>\n<li>强制覆盖暂存区和工作区的命令？\n<ul>\n<li><code>git reset --hard 版本号</code></li>\n</ul>\n</li>\n<li>如何查看提交历史？\n<ul>\n<li><code>git log --oneline</code></li>\n<li>查看完整的： <code>git reflog --oneline</code></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h3>\n<p><strong>需求</strong>：删除 editor.js 文件，并产生一次版本记录</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>手动删除 工作区 文件</li>\n<li>暂存变更 / 手动删除暂存区文件造成变更\n<ul>\n<li><code>git add .</code></li>\n<li><code>rm -f --cached 路径/文件名</code></li>\n</ul>\n</li>\n<li>提交保存</li>\n</ol>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<p>工作区只要改变，都可以暂存提交产生新记录</p>\n</blockquote>\n<h3 id=\"忽略文件\"><a class=\"anchor\" href=\"#忽略文件\">#</a> 忽略文件</h3>\n<blockquote>\n<p>概念： <code>.gitignore</code>  配置文件可以让 git 彻底 &lt;font title='red'&gt; 忽略跟踪 &lt;/font&gt; 指定文件</p>\n</blockquote>\n<p><strong>目的</strong>：让 git 仓库更小更快，避免重复无意义的文件管理</p>\n<p><strong>例如</strong>：</p>\n<ol>\n<li>系统或软件自动生成的文件</li>\n<li>编译产生的结果文件</li>\n<li>运行时生成的日志文件，缓存文件，临时文件等</li>\n<li>涉密文件，密码，密钥等文件</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171629450.png\" alt=\"image-20230817162932902\" /></p>\n<p><strong>创建</strong>：</p>\n<ol>\n<li>项目根目录新建 <code>.gitignore</code>  文件</li>\n<li>填入相应配置来忽略指定文件</li>\n<li>不用管要忽略的文件在哪个位置直接写它的名字就行</li>\n</ol>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：如果文件已经被暂存区跟踪过，可以从暂存区移除即可 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p>演示：</p>\n<p>项目根目录创建 <code>.gitignore</code>  忽略配置文件 里面配置 忽略 叫 password.txt 的文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171635902.png\" alt=\"image-20230817163519830\" /></p>\n<p>在项目的 tuils 目录中有一个 password.txt 文件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171636948.png\" alt=\"image-20230817163600805\" /></p>\n<p>之前的时候 将项目添加到暂存区的时候是有 password.txt 文件的并且 添加到了暂存区</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171637426.png\" alt=\"image-20230817163700550\" /></p>\n<p>将 password.txt 文件从暂存区中移除</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171638717.png\" alt=\"image-20230817163837250\" /></p>\n<p>然后再将工作区的代码 添加到暂存区 这时候是有 忽略配置文件的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171641922.png\" alt=\"image-20230817164138303\" /></p>\n<p>这样 password.txt 指定要被忽略的文件就被忽略了</p>\n<h3 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h3>\n<blockquote>\n<p>概念：本质上是指向 &lt;font title='red'&gt; 提交节点 &lt;/font&gt; 的可变 &lt;font title='red'&gt; 指针 &lt;/font&gt;，默认名字是 master</p>\n</blockquote>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：&lt;span alt='solid'&gt;HEAD 指针 &lt;/span&gt;&lt;/span &gt; 影响工作区 / 暂存区的代码状态 &lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171644086.png\" alt=\"image-20230817164441779\" /></p>\n<p><strong>场景</strong>：开发 &lt;font title='red'&gt; 新需求 / 修复 BUG&lt;/font&gt;，保证主线代码随时可用，多人协同开发提高效率</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171656807.png\" alt=\"image-20230817164853276\" /></p>\n<p>假如说公司招了一个前端新人，我想让它接着我的项目代码接着写。但是我不想让它影响到我现在已经开发完的主线代码。怎么办呢？</p>\n<p>这就需要用到分支概念了</p>\n<p><strong>例如</strong>：在现有代码上创建新分支完成内容列表业务</p>\n<p>所以可以让在现有的分支基础上创建一个 content 分支，让这个分支下来实现内容列表业务的开发</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171656679.png\" alt=\"image-20230817165128330\" /></p>\n<p>这样就不会影响我 master 默认主分支的代码了。</p>\n<p>也就是说 content 分支下暂存提交产生的版本记录不会影响 master 分支下看到的代码，开发完成后再合并回到 master 主分支下</p>\n<hr />\n<p>突然需要紧急修复 BUG— 单独创建分支解决 BUG</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171655189.png\" alt=\"image-20230817165556763\" /></p>\n<h4 id=\"创建分支\"><a class=\"anchor\" href=\"#创建分支\">#</a> 创建分支</h4>\n<p><strong>需求</strong>：创建内容列表 content 分支，并产生 3 次提交记录</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>创建分支命令： <code>git branch 分支名</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171658414.png\" alt=\"image-20230817165818460\" /></p>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;P&gt;<br />\n&lt;span&gt; 创建分支以当前 HEAD 指针，指向的提交记录作为起点。将新的分支指向 HEAD 指向的提交记录 &lt;/span&gt;<br />\n&lt;/P&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n</li>\n<li>\n<p>切换分支命令： <code>git checkout 分支名</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171701078.png\" alt=\"image-20230817170110799\" /></p>\n<p>让 HEAD 指针指向新创建的分支，HEAD 会影响 工作区和暂存区 的代码。</p>\n</li>\n<li>\n<p>工作区 准备 代码 并暂存提交，重复 3 次</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171703585.png\" alt=\"image-20230817170330021\" /></p>\n<p>命令： <code>git branch</code>  查看当前 git 仓库当中有哪些分支</p>\n<p><img data-src=\"./Git.assets/image-20230817170607707.png\" alt=\"image-20230817170607707\" /></p>\n<p>提交三次版本库代码</p>\n<p><img data-src=\"./Git.assets/image-20230817172211736.png\" alt=\"image-20230817172211736\" /></p>\n<p>查看提交记录</p>\n<p><img data-src=\"./Git.assets/image-20230817172259808-1692264248011-5.png\" alt=\"image-20230817172259808\" /></p>\n<p>content 分支 新增加的代码内容</p>\n<p><img data-src=\"./Git.assets/image-20230817172420105.png\" alt=\"image-20230817172420105\" /></p>\n<p>切换到 master 主分支，切换后 content 分支创建的项目就没有了</p>\n<p><img data-src=\"./Git.assets/image-20230817172500666.png\" alt=\"image-20230817172500666\" /></p>\n</li>\n</ol>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是 Git 分支？\n<ul>\n<li>指针，指向提交记录</li>\n</ul>\n</li>\n<li>HEAD 指针的作用？\n<ul>\n<li>影响暂存区和工作区的代码</li>\n</ul>\n</li>\n<li>如何创建和切换指针？\n<ul>\n<li>git branch 分支名</li>\n<li>git checkout 分支名</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"练习登录bug修复\"><a class=\"anchor\" href=\"#练习登录bug修复\">#</a> 练习 — 登录 BUG 修复</h3>\n<p>需求：新建 login-bug 分支，做 2 次提交记录 (对手机号长度，验证码长度做判断)</p>\n<p>步骤：</p>\n<ol>\n<li>切回到主分支：git checkout master</li>\n<li>创建新分支：git branch login-bug</li>\n<li>切换新分支：git checkout login-bug</li>\n<li>修改代码，暂存，提交产生版本记录</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171732512.png\" alt=\"image-20230817173236845\" /></p>\n<p>修复点代码后添加到暂存区然后提交到版本库中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171740320.png\" alt=\"image-20230817174037592\" /></p>\n<h3 id=\"分支合并与删除\"><a class=\"anchor\" href=\"#分支合并与删除\">#</a> 分支 — 合并与删除</h3>\n<p><strong>需求</strong>：把 login-bug 合并回到 master 分支并删除 login-bug 分支</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>切回到合入的分支上：git checkout master</li>\n<li>合并其它分支过来：git merge login-bug</li>\n<li>删除合并后的分支指针：git branch -d login-bug</li>\n</ol>\n<p>合并分支：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171749315.png\" alt=\"image-20230817174655075\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171749622.png\" alt=\"image-20230817174748472\" /></p>\n<p>分支合并后 master 就拿到了 login-bug 修复 bug 后的代码了那么它的任务也就完成了。</p>\n<h4 id=\"移除分支git-branch-d-分支名\"><a class=\"anchor\" href=\"#移除分支git-branch-d-分支名\">#</a> 移除分支：git branch -d 分支名</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171749922.png\" alt=\"image-20230817174944702\" /></p>\n<h3 id=\"分支合并与提交\"><a class=\"anchor\" href=\"#分支合并与提交\">#</a> 分支 — 合并与提交</h3>\n<p><strong>合并提交</strong>：发生于 &lt;font title='red'&gt; 原分支 &lt;/font&gt; 产生了 &lt; font title='red'&gt; 新的提交 &lt;/font&gt; 记录后，再 &lt; font title='red'&gt; 合并 &lt;/font &gt; 回去时发生，自动使用多个快照记录合并后产生一次新的提交</p>\n<p>步骤：</p>\n<ol>\n<li>切回到要合入的分支上：git checkout master</li>\n<li>合并其它分支过来：git merge content</li>\n<li>删除合并后的分支：git branch -d content</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171758341.png\" alt=\"image-20230817175358515\" /></p>\n<p>最后合并回到主分支上时，提交记录流程图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171758112.png\" alt=\"image-20230817175811579\" /></p>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;P&gt;<br />\n&lt;span&gt;&lt;font title='red'&gt; 注意 &lt;/font&gt;：提交记录的顺序按照产生的先后顺序排列，而非合并后的先后顺序 &lt;/span&gt;<br />\n&lt;/P&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171924499.png\" alt=\"image-20230817180223745\" /></p>\n<p>合并后发现，content 分支还在指向它原来的分支，在 HEAD 指向的 master 分支下，及拥有 login-bug 分支的代码，又拥有 content 提交的最新代码，它将这两个分支的代码进行了 ort 的策略的合并提交</p>\n<p>合并后 content 分支就没有用处了，将其移除。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171927001.png\" alt=\"image-20230817192727577\" /></p>\n<h3 id=\"分支合并冲突\"><a class=\"anchor\" href=\"#分支合并冲突\">#</a> 分支 — 合并冲突</h3>\n<p>需求 1：基于 master 新建 publish 分支，完成发布文章业务，然后修改内容页面的 html 文件的 title 标签内容，并提交一次。</p>\n<p>需求 2：切换到 master，也在修改内容页面的 html 文件的 title 标签修改内容，并提交一次。</p>\n<p>冲突：把 publish 分支合并到 master 回来，产生合并冲突</p>\n<p>概念：&lt;font title='red'&gt; 不同分支中 &lt;/font&gt;，对于 &lt; font title='red'&gt; 同一个文件 &lt;/font &gt; 的 &lt; font title='red'&gt; 同一部分修改 &lt;/font&gt;，Git 无法干净的合并，产生合并冲突</p>\n<p>解决：</p>\n<ol>\n<li>找到冲突文件并手动解决</li>\n<li>解决后需要提交一次记录</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171939278.png\" alt=\"image-20230817193939951\" /></p>\n<p>演示</p>\n<p>在 publish 分支中，在项目中创建一个 publish 目录并将黑马头条中的 publish 模块代码放入</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308171954472.png\" alt=\"image-20230817195427952\" /></p>\n<p>在 publish 分支下修改 content/index.html 页面的 titile 标签内容</p>\n<p><img data-src=\"./Git.assets/image-20230817195602595.png\" alt=\"image-20230817195602595\" /></p>\n<p>提交记录</p>\n<p><img data-src=\"./Git.assets/202308171942914.png\" alt=\"image-20230817194212620\" /></p>\n<p>切换到 master 分支，并修改 content/index.html 的 title 标签的内容。</p>\n<p><img data-src=\"./Git.assets/image-20230817195730476.png\" alt=\"image-20230817195730476\" /></p>\n<p><img data-src=\"./Git.assets/image-20230817195757409.png\" alt=\"image-20230817195757409\" /></p>\n<p>提交记录</p>\n<p><img data-src=\"./Git.assets/image-20230817195855697.png\" alt=\"image-20230817195855697\" /></p>\n<p>将 publish 分支进行合并</p>\n<p><img data-src=\"./Git.assets/image-20230817200320155.png\" alt=\"image-20230817200320155\" /></p>\n<p>此时就产生了合并冲突</p>\n<h3 id=\"git常用命令\"><a class=\"anchor\" href=\"#git常用命令\">#</a> Git 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n<th>注意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>git -v</td>\n<td>查看 git 版本</td>\n<td></td>\n</tr>\n<tr>\n<td>git init</td>\n<td>初始化 git 仓库</td>\n<td></td>\n</tr>\n<tr>\n<td>git add 路径 / 文件名</td>\n<td>暂存某个文件</td>\n<td>文件标识以终端为起始的相对路径</td>\n</tr>\n<tr>\n<td>git add .</td>\n<td>暂存所有文件</td>\n<td></td>\n</tr>\n<tr>\n<td>git commit -m ‘’</td>\n<td>提交产生版本记录</td>\n<td>每次提交，把暂存区内容快照一份</td>\n</tr>\n<tr>\n<td>git status</td>\n<td>查看文件状态 - 详细信息</td>\n<td></td>\n</tr>\n<tr>\n<td>git status -s</td>\n<td>查看文件状态 - 简略信息</td>\n<td>第一列是暂存区状态，第二列是工作区状态</td>\n</tr>\n<tr>\n<td>git ls-files</td>\n<td>查看暂存区文件列表</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git restore 路径/文件名</code></td>\n<td>从暂存区恢复到工作区</td>\n<td>如果文件标识为。则恢复所有文件</td>\n</tr>\n<tr>\n<td><code>git rm --cached 路径 /文件名</code></td>\n<td>从暂存区移除文件</td>\n<td>不让 git 跟踪文件变化</td>\n</tr>\n<tr>\n<td><code>git log</code></td>\n<td>查看提交记录 - 详细信息</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git log --oneline</code></td>\n<td>查看提交记录 - 简略信息</td>\n<td>版本号 分支指针 提交时说明注释</td>\n</tr>\n<tr>\n<td><code>git reflog --oneline</code></td>\n<td>查看完整历史 - 简略信息</td>\n<td>包括提交， 切换，回退等所有记录</td>\n</tr>\n<tr>\n<td><code>git reset --hard 版本号</code>  (常用)</td>\n<td>切换版本代码到暂存区和工作区</td>\n<td><code>--soft</code>  模式保留暂存区和工作区原本内容 &lt;br /&gt; <code>--hard</code>  模式不保留暂存区和工作区原本内容 &lt;br /&gt; <code>--mixed</code>  模式不保留暂存区，工作区保留 (默认)&lt;br /&gt; 先覆盖到暂存区，再用暂存区对比覆盖工作区</td>\n</tr>\n<tr>\n<td><code>git branch 分支名</code></td>\n<td>创建分支</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git  branch</code></td>\n<td>查看本地分支</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git branch -d 分支名</code></td>\n<td>删除分支</td>\n<td>请确保记录已经合并到别的分支下，再删除分支</td>\n</tr>\n<tr>\n<td><code>git checkout 分支名</code></td>\n<td>切换分支</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git checkout -b 分支名</code></td>\n<td>创建并立刻切换分支</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git merge 分支名</code></td>\n<td>把分支提交历史记录合并到当前所在分支</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git branch -D 分支名</code></td>\n<td>强制删除分支</td>\n<td>一般不建议使用</td>\n</tr>\n<tr>\n<td><code>git branch -m 分支命名</code></td>\n<td>修改分支的名称</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"git-远程仓库\"><a class=\"anchor\" href=\"#git-远程仓库\">#</a> Git 远程仓库</h3>\n<p><strong>概念</strong>：托管在因特网或其它网络中的你的项目的 &lt;font title='red'&gt; 版本库 &lt;/font&gt;.</p>\n<p><strong>作用</strong>：保存版本库的历史记录，多人协作</p>\n<p><strong>创建</strong>：公司自己服务器 / 第三方托管平台 (Gitee，GitLab，GitHub …)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172031783.png\" alt=\"image-20230817203135688\" /></p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>新建仓库得到远程仓库 Git 地址</p>\n</li>\n<li>\n<p>本地 Git 仓库添加远程仓库原点地址</p>\n<p>命令： <code>git remote add 远程仓库别名 远程仓库地址</code></p>\n<p>例如： <code>git remotea add origin https://xxx.xxx.git</code></p>\n</li>\n<li>\n<p>本地 Git 仓库推送版本记录到远程仓库</p>\n<p>命令： <code>git push -u 远程仓库别名 本地和远程分支名</code></p>\n<p>例如： <code>git push -u origin master</code></p>\n<p>完整写法： <code>git push --set-upstream origin master:master</code></p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172037228.png\" alt=\"image-20230817203743706\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172057840.png\" alt=\"image-20230817204421000\" /></p>\n<p>命令：git remote -v 查看本地 git 仓库中都有哪些远程仓库的地址</p>\n<p>fetch：从哪个远程仓库取来对应版本库的内容</p>\n<p>push：往哪个远程仓库版本库里面推送</p>\n<p>如果远程仓库的地址填错了，想要换一个不能直接再添加一次而是移除后再添加如下：</p>\n<p>移除远程仓库的地址： <code>git remote remove origin</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172057018.png\" alt=\"image-20230817204740674\" /></p>\n<p>推送代码到 gitee 上</p>\n<p>执行命令： <code>git push -u origin master</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172057935.png\" alt=\"image-20230817205150194\" /></p>\n<p>查看 gitee 对应的仓库的变化</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172100506.png\" alt=\"image-20230817210012892\" /></p>\n<p>第一次使用 git 的时候，它会弹出 gitee 的一个登录器，让你用账号密码登录才能推送代码，使用 https 开头的协议它需要账号，密码进行连接。如果要是换了 gitee 账号 那怎么办呢？</p>\n<p>&lt;span alt='solid'&gt; 解决如下 &lt;/span&gt;：</p>\n<p>在 windows 上打开控制面板，进入到 凭据管理器，点击 windows 凭据 中看到有一个 git:gitee 的网址 点击展开，将其删除。我们再使用 https 开头的地址它就会再次让我们输入对应新的账号，密码了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172058682.png\" alt=\"image-20230817205535447\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>远程版本库的作用？\n<ul>\n<li>保存提交历史记录，多人共享</li>\n</ul>\n</li>\n<li>远程版本库使用步骤？\n<ul>\n<li>创建远程版本库 (自己服务器 / 第三方托管平台)</li>\n<li>本地版本库设置远程地址</li>\n<li>推送本地版本库到远程</li>\n</ul>\n</li>\n<li>推送的命令？\n<ul>\n<li><code>git push -u origin master</code></li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"git-远程仓库克隆\"><a class=\"anchor\" href=\"#git-远程仓库克隆\">#</a> Git 远程仓库 — 克隆</h3>\n<p><strong>克隆</strong>：拷贝一个 Git 仓库到本地，进行使用</p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 得到一个 Git 仓库有两种方式 &lt;/span&gt;：</p>\n<ol>\n<li>使用 <code>git init</code>  自己在本地转换</li>\n<li>克隆仓库到本地使用</li>\n</ol>\n</blockquote>\n<p><strong>命令</strong>：&lt;font title='red'&gt;git clone 远程仓库地址 &lt;/font&gt;，例如： <code>git clone https://xxx.xxx.git</code></p>\n<p><strong>效果</strong>：在运行命令所在文件夹，生成 work 项目文件夹 (包含版本库，并映射到暂存区和工作区)</p>\n<p>&lt;blockquote alt='danger'&gt;<br />\n&lt;div&gt;<br />\n&lt;P&gt;<br />\n&lt;span&gt;&lt;font title='red'&gt; 注意 1&lt;/font&gt;：Git 本地仓库已经建立好和远程仓库的链接 &lt;/span&gt;<br />\n&lt;/P&gt;<br />\n&lt;P&gt;<br />\n&lt;span&gt;&lt;font title='red'&gt; 注意 2&lt;/font&gt;：仓库公开随意克隆，推送需要身为仓库团队成员 &lt;/span&gt;<br />\n&lt;/P&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<p>演示：</p>\n<p>终端 cd 到指定的目录下执行命令： <code>git clone https://xxx.xxx.git</code></p>\n<p>复制要克隆的地址</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172132553.png\" alt=\"image-20230817213248571\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172138708.png\" alt=\"image-20230817213640684\" /></p>\n<p>克隆之后进入目录中，里面有一个.git 隐藏文件表示是一个仓库</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172138542.png\" alt=\"image-20230817213722667\" /></p>\n<p>执行命令查看提交的历史记录： <code>git log --oneline</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308172138187.png\" alt=\"image-20230817213836924\" /></p>\n<h3 id=\"多人协同开发\"><a class=\"anchor\" href=\"#多人协同开发\">#</a> 多人协同开发</h3>\n<p>需求：小传新代码共享给小智</p>\n<p>步骤：</p>\n<ol>\n<li>小传开发代码  -&gt; 工作区 -&gt; 暂存区 -&gt; 提交 -&gt; 拉取 (可选) -&gt; 推送</li>\n<li>小智 -&gt; 拉取 (后续也可以开发代码 -&gt; … -&gt; 推送)</li>\n<li>想要看别人同步上去的最新内容： <code>git pull origin master</code>  等价于\n<ol>\n<li><code>git fetch origin master:master</code>  (获取远程分支记录到本地，未合并)</li>\n<li><code>git merge origin/master</code>  (把远程分支记录合并到所在分支下)</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"git-命令总结\"><a class=\"anchor\" href=\"#git-命令总结\">#</a> Git 命令总结</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n<th>注意</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>git remote add 远程仓库别名 远程仓库地址</code></td>\n<td>添加远程仓库地址</td>\n<td>别名唯一，地址是.git 结尾的网址</td>\n</tr>\n<tr>\n<td><code>git remote -v</code></td>\n<td>查看远程仓库地址</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git remote remove 远程仓库别名</code></td>\n<td>删除远程仓库地址</td>\n<td></td>\n</tr>\n<tr>\n<td><code>git pull 远程仓库别名 分支名</code></td>\n<td>拉取</td>\n<td>完整写法： <code>git pull</code>  远程仓库别名 远程分支名：本地分支名 &lt;br /&gt; 等价于： <code>git fetch</code>  和 <code>git merge</code></td>\n</tr>\n<tr>\n<td><code>git push 远程仓库别名 分支名</code></td>\n<td>推送</td>\n<td>完整写法： <code>git push</code>  远程仓库别名 本地分支名：远程分支名 -u: 建立通道以后可以简写 git push</td>\n</tr>\n<tr>\n<td><code>git pull --rebase 远程仓库别名 分支名</code></td>\n<td>拉取合并</td>\n<td>合并没有关系的记录</td>\n</tr>\n<tr>\n<td><code>git clone 远程仓库地址</code></td>\n<td>克隆</td>\n<td>从 0 得到一个远程的 Git 仓库到本地使用</td>\n</tr>\n<tr>\n<td><code>git push -u -f 远程仓库别名 分支名</code></td>\n<td>强制推送</td>\n<td>会覆盖原有的内容 慎用</td>\n</tr>\n<tr>\n<td><code>git clone -b [分支名] 远程仓库地址</code></td>\n<td>拉取指定的分支项目</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"推送超出文件大小范围的解决方式\"><a class=\"anchor\" href=\"#推送超出文件大小范围的解决方式\">#</a> 推送超出文件大小范围的解决方式</h3>\n<p>打开当前初始化.git 的文件里面的 config 配置文件 配置如下</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>http<span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>postBuffer <span class=\"token operator\">=</span> <span class=\"token number\">924288000</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "git",
                "基础",
                "git"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%95%B0%E7%BB%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86/",
            "title": "二维数组的局部性原理",
            "date_published": "2024-01-08T07:14:22.255Z",
            "content_html": "<h1 id=\"二维数组的局部性原理\"><a class=\"anchor\" href=\"#二维数组的局部性原理\">#</a> 二维数组的局部性原理</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081459751.png\" alt=\"image-20240108145924650\" /></p>\n<h2 id=\"局部性原理\"><a class=\"anchor\" href=\"#局部性原理\">#</a> 局部性原理</h2>\n<p>这里只讨论空间局部性</p>\n<ul>\n<li>CPU 读取内存 (速度慢) 数据后，会将其放入高速缓存 (速度快) 当中，如果后来的计算再用到此数据，在缓存中能读到的话，就不必读内存了</li>\n<li>缓存的最小存储单位是缓存行 (cacheline) ，一般是 64 bytes，一次读取的数据少了不划算，因此最少读 64 bytes 填满一个缓存行，因此读入某个数据时也会读取其邻近的数据，这就是所谓空间局部性</li>\n</ul>\n<p>下面代码中 StopWatch 是 spring-core-5.2.3.RELEASE.jar 导入即可使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCacheLine</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ij</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> columns<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ji</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    CPU 缓存 内存</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    皮秒     毫秒</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>       64 字节</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>       缓存行  cache line</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>       空间局部性</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> rows <span class=\"token operator\">=</span> <span class=\"token number\">1_000_000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> columns <span class=\"token operator\">=</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>columns<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">StopWatch</span> stopWatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StopWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ij\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">ij</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ji\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">ji</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">prettyPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>0\n0\nStopWatch '': running time = 192431100 ns\n---------------------------------------------\nns         %     Task name\n---------------------------------------------\n041449500  022%  ij\n150981600  078%  ji\n</code></pre>\n<p>为什么两者之间有这么大的差异？</p>\n<p>我们分析一下如下的代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ij</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> columns<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当循环 <code>a[0][0]</code>  时，它除了读取 0,0 索引的元素外，还会将邻近的 (后续) 元素也顺便读取进来 (局部性原理) 凑读 64 个字节给它填满一个缓存行。所以不光读了 0,0 就连 0,1 到 0,13 也都读取进来了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081504230.png\" alt=\"image-20240108150414150\" /></p>\n<p>当读取 0,1 元素是也就是 <code>a[0][1]</code>  时，就不需要当内存中找了，因为已经缓存起来了所以直接找缓存就行了速度就比较快了</p>\n<p>蓝色背景代表需要找内存，灰色背景代表不需要找内存直接找缓存，可以充分利用缓存来提高效率</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081505599.png\" alt=\"image-20240108150547518\" /></p>\n<p>直到最后的 0,13，都直接找缓存中读取数据就可以了，速度很快</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081506399.png\" alt=\"image-20240108150626334\" /></p>\n<p>0~n 的这一轮就循环读取完毕了，该下一行了就是 1,0 了这时 缓存中是没有的就需要再到内存中读取了，同理读取一次后就会将邻近的元素都加载到缓存中去</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081506054.png\" alt=\"image-20240108150645962\" /></p>\n<p><strong>总结</strong>：</p>\n<p>我们发现，外层循环数组行，内层循环数组列 就能充分利用提升读取效率</p>\n<p><strong>下面再分析速度比较慢的情况，就是外层循环数组列，内层循环数组行</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ji</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> columns<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         sum <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第一次将 0,0 的元素和邻近的元素到 0,13 的所有元素都读取到缓存了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081507610.png\" alt=\"image-20240108150724520\" /></p>\n<p>但是第二次读取的是 1,0 因为 i 不变 j 变 1  <code>a[j][i]</code>  也就是 <code>a[1][0]</code> 。这时缓存中并没有 1,0 又要去读取内存了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081508323.png\" alt=\"image-20240108150803234\" /></p>\n<p>第三次读取 3,0。同样的缓存中没有需要找内存读取加载到缓存中。但是缓存是有限的，而缓存中的 0,1  1,1  2,1 都没有用上 ，数据没用上接下来超过了缓存的最大值后它就会把旧的数据被新的数据覆盖掉</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081508883.png\" alt=\"image-20240108150823786\" /></p>\n<p>假设我们缓存最大值是 7 行数据，而我们需要遍历 10 行数据。此时超过缓存最大之后旧的数据就会被新的数据覆盖掉如下所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081508911.png\" alt=\"image-20240108150843755\" /></p>\n<p><strong>总结</strong>：</p>\n<p>我们发现，外层循环数组列，内层循环数组行 会浪费掉每行缓存的数据 而 旧数据会被新数据覆盖因为缓存有限 这使得效率很低</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "数组"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88%E5%8F%8C%E5%A4%A7%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E9%9B%86%E5%90%88/%E9%9B%86%E5%90%88%E5%8F%8C%E5%A4%A7%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/",
            "title": "集合双大括号的初始化",
            "date_published": "2024-01-08T06:49:59.749Z",
            "content_html": "<blockquote>\n<p>我们创建并初始化一个对象，往往有多种方法，多少人知道 {} 也是一种？这种方法独特，是不是一个良好的特性呢？</p>\n</blockquote>\n<h3 id=\"普通初始化\"><a class=\"anchor\" href=\"#普通初始化\">#</a> 普通初始化</h3>\n<p>通常我们会这样创建对象并初始化，如下创建一个 List</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主要分为两部分：1. 创建对象 2. 初始化数据</p>\n<hr />\n<h3 id=\"双大括号法\"><a class=\"anchor\" href=\"#双大括号法\">#</a> 双大括号法</h3>\n<p>利用这种方法，我们可以把创建和初始化写在一起</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"好处与坏处\"><a class=\"anchor\" href=\"#好处与坏处\">#</a> 好处与坏处</h4>\n<p><mark>好处</mark></p>\n<ol>\n<li>相对普通的看起来行数更少 (不考虑换行等)</li>\n<li>可读性更高</li>\n<li>创建和初始化在同一个表达式里完成了</li>\n</ol>\n<p><mark>坏处</mark></p>\n<ol>\n<li>并不是一个被广泛知道和使用的方法</li>\n<li>每次使用它都会额外产生一个匿名类</li>\n</ol>\n<p>第一层括号：实际是定义了一个匿名内部类 (Anonymous inner Class)</p>\n<p>第二层括号：实际上是一个实例化初始化块 (Instance initializer block) 这个块在内部匿名类构造时被执行，这个块之所以被叫做 &quot;实例化初始化块&quot; 是因为它们被定义了一个类的实力范围内</p>\n<p><mark>解析原因</mark></p>\n<p>在 cmd 中，进行编译</p>\n<pre><code>javac TestHashMap.java\n</code></pre>\n<p>生成两个类</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081449111.png\" alt=\"image_2022-12-27-10-31-20\" /></p>\n<p>正如，双括号写法的原理一样，生成一个 Niubi666.class (外部实体类), 及 Niubi666$1.class (内部匿名类)</p>\n<p><mark>Niubi666.class (外部实体类)</mark></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Niubi666</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello,java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>Niubi666$1.class (内部匿名类)</mark></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Niubi666</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token char\">'I'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>不支持泛型推断 (List&lt;String&gt; list = new ArrayList&lt;&gt;())(也就是后面必须加泛型)</li>\n<li>不支持 final 的类</li>\n<li>会持有隐式的引用，这可能会导致内存泄露</li>\n</ol>\n<p>其它更好的选择</p>\n<p>使用 Stream 的工厂方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>list <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mac\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>java9 可以使用 Collections 的工厂方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wiondows\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mac\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wiondows\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mac\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "集合"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/bug/Unreachable-statement/",
            "url": "https://pigpigletsgo.github.io/bug/Unreachable-statement/",
            "title": "Java出现unreachable statement异常 原因检查",
            "date_published": "2024-01-08T06:47:27.017Z",
            "content_html": "<h1 id=\"java出现unreachable-statement异常-原因检查\"><a class=\"anchor\" href=\"#java出现unreachable-statement异常-原因检查\">#</a> Java 出现 unreachable statement 异常 原因检查</h1>\n<p>问题描述:</p>\n<pre><code>unreachable statement异常：\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081447369.png\" alt=\"image_2023-01-23-21-21-25\" /></p>\n<p>我这个问题很显然了就是上面 truen 所导致的下面查看下会导致这种情况的规则:</p>\n<h2 id=\"原因一\"><a class=\"anchor\" href=\"#原因一\">#</a> 原因一</h2>\n<blockquote>\n<p>&lt;font style=&quot;color:red&quot;&gt;java 编译器 &lt;/font &gt; 把 unreachable statement 标记为运行时错误，一个 unreachable statement 就是编译器决定永远不会执行它</p>\n</blockquote>\n<p>下面的几种情况会出现: <code>unreachable statement</code></p>\n<ol>\n<li>\n<p>在 return 语句后写语句</p>\n</li>\n<li>\n<p>在 throw 语句后写语句</p>\n</li>\n<li>\n<p>break,continue 语句之后定义语句</p>\n</li>\n<li>\n<p>&quot;\\u10100&quot;  <code>//合法</code> ，相当于 '\\u1010' 和字符串 &quot;0&quot;</p>\n</li>\n<li>\n<p>移动位运算符可以用于 long int char short byte</p>\n</li>\n<li>\n<p>类的访问控制符可以是 public, 或什么都不加</p>\n</li>\n<li>\n<p>goto 是保留字但不是关键字，then 什么都不是</p>\n</li>\n<li>\n<p>把超类的类型强制转换后赋予子类的对象时，编译无异常，但运行时会出现异常</p>\n</li>\n</ol>\n<h2 id=\"原因二\"><a class=\"anchor\" href=\"#原因二\">#</a> 原因二</h2>\n<blockquote>\n<p>不可达语句的造成是因为:<strong> 在此语句前面有一个返回操作，或者其它操作导致不管什么条件都无法执行到这一语句</strong> &lt;br&gt; 最重要的是:<strong> 检查最前面语句是否有返回，并查看是否因为自己的疏忽，即使没有语法等错误，导致的任何条件都会在此语句前返回</strong></p>\n</blockquote>\n<p>因为自己的疏忽，好几次在 if 或 for 条件后面加了 <code>;</code>  导致下面的 return 语句不会执行之后的任何语句就会返回 1;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081447316.png\" alt=\"image_2023-01-23-21-30-27\" /></p>\n<p>千万要细心再细心</p>\n",
            "tags": [
                "问题总汇",
                "报错"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/",
            "title": "Java中的浅拷贝与深拷贝",
            "date_published": "2024-01-08T06:46:12.705Z",
            "content_html": "<h1 id=\"java中的浅拷贝与深拷贝\"><a class=\"anchor\" href=\"#java中的浅拷贝与深拷贝\">#</a> Java 中的浅拷贝与深拷贝</h1>\n<h2 id=\"引用拷贝\"><a class=\"anchor\" href=\"#引用拷贝\">#</a> 引用拷贝</h2>\n<blockquote>\n<p>当我们使用 = 号将一个对象引用另一个对象时，此时的对象只是引用指向了另一个对象，当被引用对象发生改变时，引用对象也会发生改变</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081445087.png\" alt=\"image_2023-03-08-09-16-13\" /></p>\n<p>案例:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小日子-刘桑\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 克隆对象 = new 一个新的同样的对象并进行赋值不同操作返回结果是同一个对象但是结果不同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   p2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大佐-小日子-刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    * 使用 = 来引用对象判断时输出为 true 因为两个是同一个对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * 使用 clone 克隆出来的对象是不同的对象所以两个地址值是不同的输出为 false</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>输出结果<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span>'大佐<span class=\"token operator\">-</span>小日子<span class=\"token operator\">-</span>刘桑'<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span>'大佐<span class=\"token operator\">-</span>小日子<span class=\"token operator\">-</span>刘桑'<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token boolean\">true</span></pre></td></tr></table></figure><h2 id=\"浅拷贝\"><a class=\"anchor\" href=\"#浅拷贝\">#</a> 浅拷贝</h2>\n<blockquote>\n<p>在浅拷贝中 Object 提供了一个 clone 的方法，该方法的访问修饰符为 protected 如果子类不重写该方法，将将其声明为 public 那外部就调用不到了对象的 clone 方法，它是 native 方法底层已经实现了拷贝对象的逻辑，子类一定要实现 Cloneable 否则调用 clone 方法将会报错 CloneNotSupportedException 异常</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081445241.png\" alt=\"image_2023-03-08-09-22-05\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>实现<span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span>并重写clone方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 clone 克隆对象，必须实现 Cloneable 接口否则会报错 CloneNotSupportedException</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//    重写克隆对象方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小日子-刘桑\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//        克隆对象 = new 一个新的同样的对象并进行赋值不同操作返回结果是同一个对象但是结果不同</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        p2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大佐-小日子-刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         * 使用 = 来引用对象判断时输出为 true 因为两个是同一个对象</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         * 使用 clone 克隆出来的对象是不同的对象所以两个地址值是不同的输出为 false</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Person&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>输出结果<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token char\">'小日子-刘桑'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span>'大佐<span class=\"token operator\">-</span>小日子<span class=\"token operator\">-</span>刘桑'<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token boolean\">false</span></pre></td></tr></table></figure><h3 id=\"但是当属性中出现引用类型的成员变量那么这种浅拷贝的方式只会复制该属性的引用地址即拷贝对象和原对象的属性都指向了同一个对象如果对一个对象进行操作会影响到另一个对象的属性如果想要将对象中的引用类型进行拷贝就需要用深拷贝了\"><a class=\"anchor\" href=\"#但是当属性中出现引用类型的成员变量那么这种浅拷贝的方式只会复制该属性的引用地址即拷贝对象和原对象的属性都指向了同一个对象如果对一个对象进行操作会影响到另一个对象的属性如果想要将对象中的引用类型进行拷贝就需要用深拷贝了\">#</a> 但是当属性中出现引用类型的成员变量，那么这种浅拷贝的方式只会复制该属性的引用地址，即拷贝对象和原对象的属性都指向了同一个对象，如果对一个对象进行操作会影响到另一个对象的属性，如果想要将对象中的引用类型进行拷贝就需要用深拷贝了</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081445145.png\" alt=\"image_2023-03-08-09-24-34\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    重写克隆对象方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小日子-刘桑\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//        克隆对象 = new 一个新的同样的对象并进行赋值不同操作返回结果是同一个对象但是结果不同</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        p2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大佐-小日子-刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         * 使用 = 来引用对象判断时输出为 true 因为两个是同一个对象</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         * 使用 clone 克隆出来的对象是不同的对象所以两个地址值是不同的输出为 false</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>输出结果<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token char\">'小日子-刘桑'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span>'大佐<span class=\"token operator\">-</span>小日子<span class=\"token operator\">-</span>刘桑'<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token boolean\">true</span></pre></td></tr></table></figure><h2 id=\"深拷贝\"><a class=\"anchor\" href=\"#深拷贝\">#</a> 深拷贝</h2>\n<blockquote>\n<p>我们在重写 clone 的方法中对对象进行向下类型转换拷贝对象后再用对象名调用对象中的引用数据类型再进行 clone 这样就将对象中的引用类型 也拷贝了，引用类型拷贝的原理和对象拷贝一样</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 clone 克隆对象，必须实现 Cloneable 接口否则会报错 CloneNotSupportedException</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//    重写克隆对象方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>           <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//           将对象中的引用数据类型也进行拷贝</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           person<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小日子-刘桑\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//        克隆对象 = new 一个新的同样的对象并进行赋值不同操作返回结果是同一个对象但是结果不同</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        p2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大佐-小日子-刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         * 使用 = 来引用对象判断时输出为 true 因为两个是同一个对象</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         * 使用 clone 克隆出来的对象是不同的对象所以两个地址值是不同的输出为 false</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>arr <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>输出结果<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span><span class=\"token char\">'小日子-刘桑'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">=</span>'大佐<span class=\"token operator\">-</span>小日子<span class=\"token operator\">-</span>刘桑'<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token boolean\">false</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081445408.png\" alt=\"image_2023-03-08-09-34-45\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/Java%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/",
            "title": "Java值传递和引用传递的详解",
            "date_published": "2024-01-08T06:44:32.649Z",
            "content_html": "<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 实参</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> test <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 形参</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>结果<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr></table></figure><p><mark>值传递:</mark> ** 对形参的修改不会影响到实参 **</p>\n<p><mark>引用传递:</mark> <strong>对形参的修改能够影响到实参</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 实参</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实参: \"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> test <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形参: \"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 形参</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>结果<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>形参<span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>实参<span class=\"token operator\">:</span> <span class=\"token number\">8</span></pre></td></tr></table></figure><p>形参的修改没有影响到实参 ==&gt; 符合值传递</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实参: \"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> f <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形参: \"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>结果<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>形参<span class=\"token operator\">:</span> 李四</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>实参<span class=\"token operator\">:</span> 李四</pre></td></tr></table></figure><p>形参的修改影响到了实参 ==&gt; 符合引用传递</p>\n<ul>\n<li>但是我们在方法中 引用 p 来 new 一个 Person 构造器传入值此时，实参和形参的值就不一样了</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"实参: \"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> f <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"形参: \"</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>结果<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>形参<span class=\"token operator\">:</span> 李四</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>实参<span class=\"token operator\">:</span> 张三</pre></td></tr></table></figure><p>JVM 中划分了好几块内存区域，其中有一个栈空间和堆空间，我们创建的所有对象都是在堆空间里，而基本数据类型和局部变量在栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081443209.png\" alt=\"image_2023-04-05-09-47-04\" /></p>\n<p>当传递基本数据类型时是将数据创建了一个副本，传递到方法中，那自然形参修改不会影响到实参的值，符合<mark>值传递</mark> &lt;font style=&quot;color:red&quot;&gt; 另一个栈空间是调用方法里面的形参属于该方法内的一个局部变量外部不可调用 &lt;/font&gt;。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081443802.png\" alt=\"image_2023-04-05-09-48-44\" /></p>\n<p>操作对象时，对象是存放在堆中的，我们拿到的只是这个对象的引用，通过对象的引用就可以操作对象。可以将引用理解为遥控器，而对象就好像一个电视机，这也是为什么我们说 Java 的数据类型分两种 <mark>一种是基本数据类型</mark>，<mark> 一种是引用数据类型</mark></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081444587.png\" alt=\"image_2023-04-05-09-50-18\" /></p>\n<p>当对<mark>象引用传递给方法时</mark>，其实是<mark>创建了一个引用副本</mark>此时，<mark> 形参</mark>和<mark>实参是两个遥控器</mark>，<mark> 但都指向了同一个对象</mark>，所以<mark>通过形参引用操作对象时</mark>，就<mark>显得实参好像改变了</mark>，但<mark>实参本身是没有改变</mark>的，因为<mark>实参就是一个遥控器嘛，电视机内容是改变了，遥控器本身又没有改变</mark>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081444289.png\" alt=\"image_2023-04-05-09-52-31\" /></p>\n<p>解释： <code>p = new Person(&quot;李四&quot;);</code>  所以当我们将形参重新<mark>实例化对象赋值时</mark>，<mark> 实参是不会收到任何影响</mark>的，此时<mark>形参和实参已经指向不同的对象</mark>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081444826.png\" alt=\"image_2023-04-05-09-55-08\" /></p>\n<p>这里可以看出 Java 完全就是<mark>值传递</mark>如果是<mark>基本数据类型</mark>那就是<mark>复制一份值传递给形参</mark>，如果是<mark>引用类型</mark>，那就<mark>将引用复制一份传递给形参</mark>，<mark> 形参始终拿到的都是一个副本</mark>，&lt;strong style=&quot;color:red&quot;&gt; 无论如何都无法通过形参改变实参，毕竟形参只是操作的副本而已 &lt;/strong&gt;。</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/float%E4%B8%8Edouble%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/float%E4%B8%8Edouble%E7%9A%84%E5%8C%BA%E5%88%AB/",
            "title": "基本数据类型float和double的区别",
            "date_published": "2024-01-08T06:43:16.617Z",
            "content_html": "<h2 id=\"基本数据类型float和double的区别\"><a class=\"anchor\" href=\"#基本数据类型float和double的区别\">#</a> 基本数据类型 float 和 double 的区别</h2>\n<p><mark>float</mark>：单精度浮点数</p>\n<p><mark>double</mark>：双精度浮点数<sup>默认</sup></p>\n<h3 id=\"两者的主要区别如下\"><a class=\"anchor\" href=\"#两者的主要区别如下\">#</a> 两者的主要区别如下：</h3>\n<ol>\n<li>\n<p><strong>在内存中占有的字节数不同</strong></p>\n<p>单精度浮点数在机内存占 4 个字节</p>\n<p>双精度浮点数在机内存占 8 个字节</p>\n</li>\n<li>\n<p><strong>有效数字位数不同</strong></p>\n<p>单精度浮点数有效数字 8 位</p>\n<p>双精度浮点数有效数字 16 位</p>\n</li>\n<li>\n<p><strong>数值取值范围</strong></p>\n<p>单精度浮点数的表示范围：-3.40E + 38 ~ 3.40E + 38</p>\n<p>双精度浮点数的表示范围：-1.79E + 308 ~ -1.79E + 308</p>\n</li>\n<li>\n<p><strong>在程序中处理速度不同</strong></p>\n<p>一般来说，CPU 处理单精度浮点数的速度比处理双精度浮点数快</p>\n<p>如果不声明，默认小数位 Double 类型，所以如果要用 Float 的话，必须进行强转。</p>\n<p>例如：float a = 1.3; 会编译报错，正确写法：float a = (Float) 1.3; 或者 float a = 1.3f;</p>\n<p>(f 或 F 不区别大小写)</p>\n<p>&lt;font style=&quot;color:red&quot;&gt; 注意 &lt;/font&gt;：float 是 8 位有效数字，第 7 位数字将会四舍五入。</p>\n<h4 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题：</h4>\n<ol>\n<li>\n<p>Java 中 3 * 0.1 == 0.3 将会返回什么？ true 还是 false</p>\n<p>答：false，因为浮点数不能完全精确的表示出来，一般会损失精度</p>\n</li>\n<li>\n<p>Java 中 float f = 3.4; 是否正确</p>\n<p>答：不正确 3.4 是双精度数，将双精度型 (double) 赋值给浮点型 (float) 属于向下转型会造成精度损失，因此需要强制类型转换 float f = (float) 3.4 或者写成 float f = 3.4f;</p>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "number"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%B3%9B%E5%9E%8B/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E6%B3%9B%E5%9E%8B/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4/",
            "title": "什么是泛型擦除",
            "date_published": "2024-01-08T06:40:39.990Z",
            "content_html": "<h1 id=\"什么是泛型擦除\"><a class=\"anchor\" href=\"#什么是泛型擦除\">#</a> 什么是泛型擦除</h1>\n<ul>\n<li>怎么理解泛型擦除</li>\n</ul>\n<blockquote>\n<p>Java 的泛型机制其实是伪泛型，因为它只作用于 Java 程序 <code>编译</code>  期间，(就是在你写代码的时候起作用); 在运行期间并不存在 &lt; br &gt; 编译器在编译期间会动态的将泛型 <code>T</code>  擦除为 Object, 或者将 <code>T extends xxxClass</code>  擦除为其限定类型 <code>xxxClass</code></p>\n</blockquote>\n<h2 id=\"举例说明\"><a class=\"anchor\" href=\"#举例说明\">#</a> 举例说明</h2>\n<p>在我们创建不同类型的 List 时候，会放入不同的泛型，在进行 add 的时候，可以限制 add 的类型，但是它们的类在最终比较的时候确是相同的，这就是泛型擦除造成的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> stringlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integerlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 输出结果为:true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stringlist<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> integerlist<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 输出结果为:class java.util.ArrayList</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>stringlist<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 输出结果为:class java.util.ArrayList</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integerlist<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是 add 的类型限制也并不是绝对的，我们在它运行时 (反射), 进行动态的传参，可以做到往 <code>integerlist</code>  中添加 String 类型的代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> integerlist <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        integerlist<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 通过反射将 integerlist 的集合对象中添加一个 Object 类型的元素，这里并不能添加什么 String 类型什么包装类的会报错的，因为 add 方法只能添加 Object 类型的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Method</span> add <span class=\"token operator\">=</span> integerlist<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"add\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 调用方法传入调用对象并进行赋值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        add<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>integerlist<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 打印结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>integerlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上代码都能证明，泛型是在运行期间被擦除的</p>\n<p>另外以下写法会报错，也是因为泛型擦除的存在，报错为 <code>两种方法具有相同的擦除</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081441912.png\" alt=\"image_2022-11-27-21-21-22\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"既然有泛型擦除为什么还要使用呢用object代替不行\"><a class=\"anchor\" href=\"#既然有泛型擦除为什么还要使用呢用object代替不行\">#</a> 既然有泛型擦除，为什么还要使用呢，用 Object 代替不行？</h4>\n<ol>\n<li>使用泛型可以在编译期间进行类型检测，尽早发现问题</li>\n<li>使用 <code>Object</code>  类型需要手动强制类型转换，而用泛型则可以节省了这个操作可以有效避免 <code>classCastException</code>  代码可读性更高，出错率更低</li>\n<li>提升性能，编译完成后，基本就确定了类型，节省了强制类型转换带来的性能消耗</li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "泛型"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/%E8%BF%9B%E5%88%B6%E6%95%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/%E8%BF%9B%E5%88%B6%E6%95%B0/",
            "title": "进制数",
            "date_published": "2024-01-08T06:39:39.051Z",
            "content_html": "<h1 id=\"进制数\"><a class=\"anchor\" href=\"#进制数\">#</a> 进制数</h1>\n<h3 id=\"二八十六转十进制️\"><a class=\"anchor\" href=\"#二八十六转十进制️\">#</a> 二，八，十六转十进制⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>从最低位 (右边) 开始，将每个位上的位提取出来，剩以进制数 (2,8,16) 的 (位数 - 1 次方), 然后求和</p>\n</blockquote>\n<p>例如:</p>\n<pre><code>1.二进制：0b1011\n转十进制公式：[1*2^0]+[1*2^1]+[0*2^2]+[1*2^3]=1+2+0+8=11\n2.八进制：0234\n转十进制公式：[4*8^0]+[3*8^1]+[2*8^2]=4+24+128=156\n3.十六进制：0X23A\n转十进制公式：[10*16^0]+[3*16^1]+[2*16^2]=10+48+512=570\n六进制数：A:10,B:11,C:12,D:13,E:14,F:15。\n</code></pre>\n<h3 id=\"十进制转二八十六️\"><a class=\"anchor\" href=\"#十进制转二八十六️\">#</a> 十进制转二，八，十六⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>将该数不断除以进制数 (2,8,16), 直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的进制数</p>\n</blockquote>\n<p>或者将进制数 (2,8,16) 剩商 减去 被除数得出准确的余数</p>\n<p>按照反顺序排列</p>\n<p>六进制数：A:10,B:11,C:12,D:13,E:14,F:15。</p>\n<p>例如:</p>\n<p>十进制数: 123 转二进制</p>\n<p>公式:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438124.png\" alt=\"image_2023-04-03-13-32-00\" /></p>\n<p>十进制数: 678 转八进制数</p>\n<p>公式:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438397.png\" alt=\"image_2023-04-03-13-32-33\" /></p>\n<p>十进制数：8912 转十六进制数</p>\n<p>公式:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438244.png\" alt=\"image_2023-04-03-13-32-56\" /></p>\n<h3 id=\"十进制小数转二进制小数️\"><a class=\"anchor\" href=\"#十进制小数转二进制小数️\">#</a> 十进制小数转二进制小数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>十进制小数，转换成二进制小数采用 &quot;剩 2 取整&quot; 顺序排列</p>\n</blockquote>\n<p>例如:</p>\n<pre><code>十进制小数0.96875\n  就是将0.96875乘2得出1.9375取1\n  为0.9375乘2得出1.875取1\n  为0.875乘2得出1.75取1\n  为0.75乘2得出1.5取1\n  为0.5乘2得出1\n  余1取1\n 结果为0.111111\n</code></pre>\n<h3 id=\"二进制数转八进制数️\"><a class=\"anchor\" href=\"#二进制数转八进制数️\">#</a> 二进制数转八进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>从低位开始，将二进制数每三位一组，转成对应的八进制数即可</p>\n</blockquote>\n<p>案例:</p>\n<pre><code>案例：0B11010101\n0B[11][010][101]=0325\n1,2,4。 0不取数所以4+1=5\n0,1,0. 取数2 \n1,1. 取数1+2=3\n规律每三位右开始，以1.2.4.8.16的规律来计算。\n只取1的数不取0的数。\n</code></pre>\n<h3 id=\"二进制数转十六进制数️\"><a class=\"anchor\" href=\"#二进制数转十六进制数️\">#</a> 二进制数转十六进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>从低位开始，将二进制数每四位一组，转成对应的六进制数即可</p>\n</blockquote>\n<p>案例:</p>\n<pre><code>0B11010101\n0B[1101][0101]=0XD5\n第一组是4+1=5\n第二组是1+4+8=13\n顺序倒过来即可\n六进制数：A:10,B:11,C:12,D:13,E:14,F:15。\n</code></pre>\n<h3 id=\"八进制数转二进制数️\"><a class=\"anchor\" href=\"#八进制数转二进制数️\">#</a> 八进制数转二进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>将八进制数每 1 位，转成对应的一个 3 位的二进制数即可</p>\n</blockquote>\n<p>案例:</p>\n<pre><code>0237\n0237=0B010011111\n2=010\n3=011\n7=111\n</code></pre>\n<h3 id=\"十六进制数转二进制数️\"><a class=\"anchor\" href=\"#十六进制数转二进制数️\">#</a> 十六进制数转二进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>将十六进制数每 1 位，转成对应的 4 位的一个二进制数即可</p>\n</blockquote>\n<p>数字 1 <code>~</code> 9，字母 A <code>~</code> F</p>\n<p>B 为 11</p>\n<p>案例:</p>\n<pre><code>0X23B\n0X23B=\nB=1011\n3=0011\n2=0010\n在不确定多少个1能满足进制数转换的情况下，可以将4位全部拿1，4个1为15，将15减去进制数B得4那么就将对应位数中的4的那个1去掉就是11。\n六进制数：A:10,B:11,C:12,D:13,E:14,F:15。\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "计算机底层"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A0%81%E7%82%B9,%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83,lnegth,codePointCount%E6%96%B9%E6%B3%95%E5%BF%83%E5%BE%97/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E7%A0%81%E7%82%B9,%E4%BB%A3%E7%A0%81%E5%8D%95%E5%85%83,lnegth,codePointCount%E6%96%B9%E6%B3%95%E5%BF%83%E5%BE%97/",
            "title": "码点,代码单元,lnegth,codePointCount",
            "date_published": "2024-01-08T06:35:25.863Z",
            "content_html": "<h1 id=\"码点代码单元lnegthcodepointcount\"><a class=\"anchor\" href=\"#码点代码单元lnegthcodepointcount\">#</a> 码点，代码单元，lnegth,codePointCount</h1>\n<p>[TOC]</p>\n<p>码点，代码单元，length (),codePointCount ()</p>\n<p>下面是我在阅读 &lt;&lt;Java 核心技术卷 Ⅰ&gt;&gt; 中的两段代码</p>\n<h3 id=\"length方法\"><a class=\"anchor\" href=\"#length方法\">#</a> length () 方法</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434624.png\" alt=\"image-20220831143809050\" /></p>\n<p><code>Returns the length of this string. The length is equal to the number of Unicode code units in the string.</code></p>\n<ul>\n<li>返回此字符串的长度，长度等于字符串中的 Unicode<mark> 代码单元</mark>数</li>\n</ul>\n<h3 id=\"codepointcount方法\"><a class=\"anchor\" href=\"#codepointcount方法\">#</a> codePointCount () 方法</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434404.png\" alt=\"image-20220831143859921\" /></p>\n<p><code>Returns the number of Unicode code points in the specified text range of this String.</code></p>\n<ul>\n<li>返回此字符串指定文本范围内的 Unicode<mark> 码点</mark>数</li>\n</ul>\n<h3 id=\"length方法和codepointcount方法的区别\"><a class=\"anchor\" href=\"#length方法和codepointcount方法的区别\">#</a> length () 方法和 codePointCount () 方法的区别</h3>\n<p>从返回值可以看出: length () 方法返回的是代码单元，codePointCount () 方法返回的是码点，而代码单元和码点究竟是什么呢？它们有什么区别呢？</p>\n<table>\n<thead>\n<tr>\n<th>length()</th>\n<th>codePointCount()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>返回此字符串的长度，长度等于字符串中的 Unicode<mark> 代码单元</mark>数</td>\n<td>返回此字符串指定文本范围内的 Unicode<mark> 码点</mark>数</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>从下面这个例子的结果来看，码点和代码单元似乎没有区别</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> cpCount <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cpCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果:    <code>5</code></p>\n<p>​\t\t\t\t   <code>5</code></p>\n<ul>\n<li>但是从这个例子就可以看出码点和代码单元的不同了，下面我们就来聊一下码点和代码单元</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> cpCount <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>cpCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=-------------=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"😂\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">codePointCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><p>打印结果: <img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434986.png\" alt=\"image-20220831144457496\" /></p>\n<h3 id=\"码点\"><a class=\"anchor\" href=\"#码点\">#</a> 码点</h3>\n<p>码点就是你实际看到的每一个字符，比如:a,1,%,😂等都算一个码点</p>\n<blockquote>\n<p>码点 (Code Point)</p>\n<p>码点是指与一个编码表中的某个字符对应的值，在 Unicode 标准中，码点采用了十六进制书写，并加上前缀 U+, 例如 U+0041 就是拉丁字母 A 的码点，Unicode 的码点可以分成 17 个代码平面，第一个代码平面成为基本多语言平面，包括码点从 U+0000 到 U+FFFF 的经典 Unicode 代码，其余的 16 个平面的码点为从 U+10000 到 U+10FFFF, 包括辅助字符</p>\n<p>----------  &lt;&lt;Java 核心技术卷 Ⅰ&gt;&gt;P33</p>\n</blockquote>\n<h3 id=\"代码单元\"><a class=\"anchor\" href=\"#代码单元\">#</a> 代码单元</h3>\n<p>而代码单元就不一定是你实际看到的每一个字符，有可能你实际看到的字符是包含一个代码单元，也有可能包含两个代码单元，这是因为:</p>\n<p>java 的字符串由 char 类型序列组成，而 char 类型原本是用来表示单个字符的，但是由于 Unicode 编码的机制，16 位的 char 类型已经无法满足描述所有的 Unicode 字符的需要了，那么有些 Unicode 字符就需要两个 char 值表示，则可对应上下文中的高亮字体:<mark> 一个代码单元时一个字符的编码</mark></p>\n<blockquote>\n<p>代码单元 (Code Unit)</p>\n<p>UTF-16 编码采用不同长度的编码表示所有 Unicode 编码，在基本多语言平面中，每个字符用 1 位表示，称为代码单元，辅助字符编码为一对连续的代码单元，采用这种编码对表示的各个值落入基本多语言平面中未用的 2048 个值范围内，通常称为替代区域，这样设计十分巧妙，我们可以从中迅速知道<mark>一个代码单元时一个字符的编码</mark>，还是辅助字符的第一或第二部分</p>\n<p>----------  &lt;&lt;Java 核心技术卷 Ⅰ&gt;&gt;P33</p>\n</blockquote>\n<h3 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法:</h3>\n<table>\n<thead>\n<tr>\n<th>方法声明</th>\n<th>功能介绍</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int offsetCodePoints(int index,int codePointoffset)</td>\n<td>返回此 String 中的索引，该索引从给定的 index 偏移 codePointoffset 码点，由 index 和 codePointoffset 给出的文本范围内的未配对代理计为每个代码点</td>\n</tr>\n<tr>\n<td>int codePointAt(int index)</td>\n<td>返回指定索引处的字符 (Unicode 代码点), 索引引用 char 值 (Unicode 代码单位), 范围从 0 到 lenth () - 1</td>\n</tr>\n<tr>\n<td><strong>StringBuilder 方法</strong></td>\n</tr>\n<tr>\n<td>String appendCodePoint(int cp)</td>\n<td>追加一个码点，并将其转化为一个或者两个代码单元并返回 this</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> atest <span class=\"token operator\">=</span> <span class=\"token string\">\"abcABC😀a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcABC😀a\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>atest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">int</span> cp1 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">int</span> cp4 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">int</span> cp5 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> cp7 <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cp1 is \"</span><span class=\"token operator\">+</span>cp1<span class=\"token operator\">+</span><span class=\"token string\">\"  cp4 is \"</span><span class=\"token operator\">+</span> cp4<span class=\"token operator\">+</span><span class=\"token string\">\"  cp5 is \"</span><span class=\"token operator\">+</span>cp5<span class=\"token operator\">+</span><span class=\"token string\">\"  cp7 is \"</span><span class=\"token operator\">+</span>cp7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> cp1unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> cp4unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> cp5unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> cp7unicode <span class=\"token operator\">=</span> atest<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cp7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: \"</span><span class=\"token operator\">+</span>cp1unicode<span class=\"token operator\">+</span><span class=\"token string\">\"  A: \"</span><span class=\"token operator\">+</span>cp4unicode<span class=\"token operator\">+</span><span class=\"token string\">\"  😀: \"</span><span class=\"token operator\">+</span>cp5unicode<span class=\"token operator\">+</span><span class=\"token string\">\"  a: \"</span><span class=\"token operator\">+</span>cp7unicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果:<img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434856.png\" alt=\"image-20220904101620196\" /></p>\n<h4 id=\"offsetbycodepoints\"><a class=\"anchor\" href=\"#offsetbycodepoints\">#</a> offsetByCodePoints</h4>\n<p><code>public int offsetByCodePoints(int index,int codePointoffset)</code></p>\n<p>这里的 index 就是你指定的任意第 i 个码点，假如你想知道距离第 i 个码点 x 个码点，(x 可正可负) 是相对于第 0 个码点第几个码点，则可以用 offsetByCodePoints (i,x) 得到的你想要的值，比方说</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> astring <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdABCD\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> cpcount <span class=\"token operator\">=</span> astring<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 从 0 开始也就是 d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对应 ACSII 码值也就是 100</span></pre></td></tr></table></figure><p>cpcount 的值应该是 3 (即表示 d 距离 a 3 个码点，也就是距离第 0 个位置 3 个位置)</p>\n<h4 id=\"codepointat\"><a class=\"anchor\" href=\"#codepointat\">#</a> codePointAt</h4>\n<p><code>public int codePointAt(int index)</code></p>\n<p>还是以上面那个例子，d 距离 a, 有 3 个位置，这个 3 通过 offsetByCodePoints () 得到，并且就可以看成是一个索引值，通过它你就能找到对应位置上是 d</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> astring <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdABCD\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> cpcount <span class=\"token operator\">=</span> astring<span class=\"token punctuation\">.</span><span class=\"token function\">offsetByCodePoints</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从 0 开始也就是 d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 对应 ACSII 码值也就是 100</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> dddunicode <span class=\"token operator\">=</span> astring<span class=\"token punctuation\">.</span><span class=\"token function\">codePointAt</span><span class=\"token punctuation\">(</span>cpcount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dddunicode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>dddunicode = 100; 这其实是 ASCII 码值</p>\n<h4 id=\"appendcodepoint\"><a class=\"anchor\" href=\"#appendcodepoint\">#</a> appendCodePoint</h4>\n<p><code>String appendCodePoint(int cp)</code></p>\n<p>追加一个码点，并将其转化为一个或者两个代码单元并返回 this</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> strbud <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        strbud<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>strbud<span class=\"token punctuation\">.</span><span class=\"token function\">appendCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>打印结果: <img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081434104.png\" alt=\"image-20220904103852797\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "API的区别"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AF%B9%E8%B1%A1/Java%E5%AD%90%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%AF%B9%E8%B1%A1/Java%E5%AD%90%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BF%87%E7%A8%8B/",
            "title": "子类实例化是否会实例化父类？",
            "date_published": "2024-01-08T06:32:56.827Z",
            "content_html": "<h2 id=\"子类实例化是否会实例化父类\"><a class=\"anchor\" href=\"#子类实例化是否会实例化父类\">#</a> 子类实例化是否会实例化父类？</h2>\n<blockquote>\n<p>不会。父类在子类实例化过程中是并没有被实例化，java 中 new 子类没有实例化父类，只是调用父类的构造方法初始化了，子类从父类继承来的属性，这个调用是子类的对象调用的父类的构造方法，而子类自己的构造方法完成对自己属性的初始化（这里的初始化是指我们在内存分配完了，虚拟机初始化之后，我们按自己的要求进行的初始化）。</p>\n</blockquote>\n<h2 id=\"子类对象实例化的全过程\"><a class=\"anchor\" href=\"#子类对象实例化的全过程\">#</a> 子类对象实例化的全过程</h2>\n<ol>\n<li>\n<p>当最底层子类实例化对象时，它的父类，父类的父类... 到 Object 类的所有类的构造器都会被调用，只不过当一个类拥有多个构造器时，调用的是其中一个。</p>\n</li>\n<li>\n<p>子类构造器内，默认调用父类构造器：super (); 当有 this 关键字时，就不调用父类构造器了，就会调用同一个类内的其他构造器，所以一个类当有 n 个构造器时，仅允许最多有 n-1 个构造器内使用 this 关键字，最少有一个构造器去调用上层父类的构造器。</p>\n</li>\n<li>\n<p>当父类重载一个构造器，则默认的无形参构造器就会消失，父类又不重载另一个无形参的构造器，那么子类构造器不使用 this 或 super 关键字就会出错，因为子类构造器不使用 this 和 super 关键字，默认调用父类的无形参构造器，而这个构造器不存在，就会出错，解决办法：1）父类声明一个无形参的构造器 2）调用父类另一个参数不为空的构造器</p>\n</li>\n<li>\n<p>所以建议：创建类时，都创建一个无形参的构造器</p>\n</li>\n<li>\n<p>当有类实例化对象时，Object 类的无形参构造器一定会被调用。</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "对象"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/short%E7%9B%B8%E5%8A%A0%E6%8F%90%E5%8D%87%E4%B8%BAint/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%9F%A5%E8%AF%86%E7%82%B9/number/short%E7%9B%B8%E5%8A%A0%E6%8F%90%E5%8D%87%E4%B8%BAint/",
            "title": "为什么short相加会自动提升为int？",
            "date_published": "2024-01-08T06:32:56.820Z",
            "content_html": "<h2 id=\"为什么short相加会自动提升为int\"><a class=\"anchor\" href=\"#为什么short相加会自动提升为int\">#</a> 为什么 short 相加会自动提升为 int？</h2>\n<p>Java 中进行二元与运算类型的提升规则</p>\n<p>整数运算：</p>\n<p>如果两个操作数有一个为 long，则结果也为 long；</p>\n<p>没有 long 时，结果为 int，即使操作数全为 short，byte，结果也是 int。</p>\n<p>浮点数运算：</p>\n<p>如果两个操作数有一个为 double，则结果为 double；</p>\n<p>只有两个操作数都是 float，则结果才是 float。</p>\n<p>注意：int 与 float 运算，结果为 float。</p>\n<p>为什么两个 short 类型相加会自动提升为 int？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432091.png\" alt=\"image-20230618093102338\" /></p>\n<p>s1+s2 系统会自动将它们提升为 int 再运算，结果为 int 类型，赋给 short 类型，编译报错；s3 = s2 + 1 也是同样的原因；s3 = 4 + 45，系统先计算 4 + 45 = 50，也就是变为 s3 = 50,50 在 short 表示的范围内自动转型为 short，但是为什么 java 在两个 short 型运算时自动提升为 int，即使它们没有超过表示范围？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432680.png\" alt=\"image-20230618093321379\" /></p>\n<p>使用较小类型运算没有性能优势，消除较小的类型使得字节码更简单，并且使得具有未来扩展空间的完整指令集仍然适合单个字节码中的操作码，因此，较小的类型通常被视为 Java 设计中的二等公民，在各个步骤转换为 int，因为这简化了一些事情。</p>\n<p>Why does the Java API use int instead of short or byte?</p>\n<p>为什么 Java API 使用 int 而不是 short 或 byte？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432375.png\" alt=\"image-20230618093548011\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081432055.png\" alt=\"image-20230618093559929\" /></p>\n<p>答案可能只与 Java 虚拟机指令集有关。较小的类型 (byte，short) 基本上只用于数组。</p>\n<p>If each typed instruction supported all of the Java Virtual Machine's run-time data types, there would be more instructions than could be represented in a byte。</p>\n<p>为较小的类型引入专用的算术逻辑单元不值得付出努力：它需要额外的晶体管，但它仍然只能在一个时钟周期内执行一次加法。 JVM 设计时的主流架构是 32 位，适合 32 位 int。</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "知识点",
                "知识点",
                "number"
            ]
        }
    ]
}