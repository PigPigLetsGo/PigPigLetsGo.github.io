{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dkx の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/video/movie/Reality/%E5%8A%A0%E8%8F%B2%E7%8C%AB%E7%94%B5%E5%BD%B1/",
            "url": "https://pigpigletsgo.github.io/video/movie/Reality/%E5%8A%A0%E8%8F%B2%E7%8C%AB%E7%94%B5%E5%BD%B1/",
            "title": "加菲猫-电影",
            "date_published": "2024-01-24T10:48:47.076Z",
            "content_html": "<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"加菲猫1\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%8E%AC%20%E7%94%B5%E5%BD%B1%E7%8F%8D%E8%97%8F/%F0%9F%93%81%20%E6%97%A0%E5%AD%97%E5%B9%95/%F0%9F%93%81%20%E5%8A%A0%E8%8F%B2%E7%8C%AB1/Garfield.2004.mp4\"},{\"name\":\"加菲猫2\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%8E%AC%20%E7%94%B5%E5%BD%B1%E7%8F%8D%E8%97%8F/%F0%9F%93%81%20%E6%97%A0%E5%AD%97%E5%B9%95/%F0%9F%93%81%20%E5%8A%A0%E8%8F%B2%E7%8C%AB2/Garfield.2006.mp4\"}]'></div></div></p>\n",
            "tags": [
                "video",
                "movie",
                "Reality",
                "电影"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/video/movie/animation/%E7%90%A6%E5%AE%AB%E5%A5%87%E9%AA%8F-%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/",
            "url": "https://pigpigletsgo.github.io/video/movie/animation/%E7%90%A6%E5%AE%AB%E5%A5%87%E9%AA%8F-%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/",
            "title": "琦宫奇骏-千与千寻",
            "date_published": "2024-01-24T10:48:47.064Z",
            "content_html": "<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"千与千寻\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%8E%AC%20%E7%94%B5%E5%BD%B1%E7%8F%8D%E8%97%8F/%F0%9F%93%81%20%E6%97%A0%E5%AD%97%E5%B9%95/%F0%9F%93%81%20%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/Spirited-Away.mp4\"}]'></div></div></p>\n",
            "tags": [
                "video",
                "movie",
                "animation",
                "动画电影"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/video/movie/animation/%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA/",
            "url": "https://pigpigletsgo.github.io/video/movie/animation/%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA/",
            "title": "冰河世纪",
            "date_published": "2024-01-24T10:48:47.060Z",
            "content_html": "<p><div class=\"media-container\"><div class=\"player\" data-type=\"video\" data-src='[{\"name\":\"冰河世纪1\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%90%BC%20%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1/%F0%9F%93%81%20%E7%94%A8%E7%94%B5%E8%84%91%E7%9C%8B/%F0%9F%93%81%20%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA/%E5%86%B0%E5%B7%9D%E6%97%B6%E4%BB%A3.mp4\"},{\"name\":\"冰河世纪2\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%90%BC%20%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1/%F0%9F%93%81%20%E7%94%A8%E7%94%B5%E8%84%91%E7%9C%8B/%F0%9F%93%81%20%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA2/%E5%86%B0%E5%B7%9D%E6%97%B6%E4%BB%A32.mp4\"},{\"name\":\"冰河世纪3\",\"url\":\"https://tuostudy-static.onmicrosoft.cn/api/raw/?path=/%F0%9F%8E%A5%20175%23%20%E7%94%B5%E5%BD%B1%E5%8A%A8%E7%94%BB/%F0%9F%90%BC%20%E5%8A%A8%E7%94%BB%E7%94%B5%E5%BD%B1/%F0%9F%93%81%20%E7%94%A8%E7%94%B5%E8%84%91%E7%9C%8B/%F0%9F%93%81%20%E5%86%B0%E6%B2%B3%E4%B8%96%E7%BA%AA3/%E5%86%B0%E5%B7%9D%E6%97%B6%E4%BB%A33.mp4\"}]'></div></div></p>\n",
            "tags": [
                "video",
                "movie",
                "animation",
                "动画电影"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/%E5%AF%86%E7%A0%81%E5%AD%98%E5%82%A8%E5%BA%93%E4%BD%BF%E7%94%A8KeePass/",
            "url": "https://pigpigletsgo.github.io/tools/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/%E5%AF%86%E7%A0%81%E5%AD%98%E5%82%A8%E5%BA%93%E4%BD%BF%E7%94%A8KeePass/",
            "title": "KeePass的使用",
            "date_published": "2024-01-24T10:48:47.017Z",
            "content_html": "<p>官网下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rZWVwYXNzLmluZm8v\">https://keepass.info/</span></p>\n<h2 id=\"自动输入\"><a class=\"anchor\" href=\"#自动输入\">#</a> 自动输入</h2>\n<p>右键数据库点击编辑，然后选择自动输入并输入以下的表达式：</p>\n<p><code>+&#123;DELAY 100&#125;&#123;CLEARFIELD&#125;&#123;USERNAME&#125;&#123;TAB&#125;&#123;PASSWORD&#125;&#123;ENTER&#125;</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211713827.png\" alt=\"image-20231121171345488\" /></p>\n<p>点击一个存储的账号密码的表然后在里面输入这个号要登录的对应的网址</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211714992.png\" alt=\"image-20231121171446704\" /></p>\n<p>然后在点击自动输入选择我们自定义的表达式然后下面点击添加，添加对应的浏览器打开的对应网址</p>\n<p>&lt;font color='red'&gt; 注意 &lt;/font&gt;.：添加只能是这个浏览器才生效其它浏览器开启对应网址不生效</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211716403.png\" alt=\"image-20231121171605580\" /></p>\n<p>然后点击输入框，按 <code>ctrl + alt + a</code>  就可以实现自动输入并登录了下面进行演示。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211717549.gif\" alt=\"test\" /></p>\n<p>如果要只输入密码快捷键为： <code>shift + ctrl + alt + a</code></p>\n<p>演示如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201056984.gif\" alt=\"recording\" /></p>\n",
            "tags": [
                "tools",
                "密码管理",
                "tools",
                "密码管理"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/%E5%89%8D%E7%AB%AF/form-serialize%E6%8F%92%E4%BB%B6/",
            "url": "https://pigpigletsgo.github.io/tools/%E5%89%8D%E7%AB%AF/form-serialize%E6%8F%92%E4%BB%B6/",
            "title": "form-serialize插件，快速收集表单元素的值",
            "date_published": "2024-01-24T10:48:47.007Z",
            "content_html": "<h2 id=\"form-serialize插件\"><a class=\"anchor\" href=\"#form-serialize插件\">#</a> form-serialize 插件</h2>\n<p><strong>作用</strong>：<mark>快速</mark>收集表单元素的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130850440.png\" alt=\"image-20230813085042213\" /></p>\n<p>这么多的用户填写的表单信息我们如果一个一个获取的话会很麻烦，可以使用 form-serialize 插件来完成。</p>\n<h5 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法：</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取表单对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> ducment<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//serialize 函数 参数 1：指定获取哪个表单范围内的值传入表单对象，参数 2：传入配置对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130853093.png\" alt=\"image-20230813085338699\" /></p>\n<p>无论有多少个表单元素都可以快速的一步到位的全部收集出来。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"javaScript:;\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-data\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"提交\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javaScript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/form-serialize.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 使用 form-serialize 函数，快速收集表单元素值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 参数 1：要获取哪个表单的数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">//      表单元素设置 name 属性，值会作为对象的属性名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">//      建议 name 属性的值，最好和接口文档参数名一致，否则后端接收不不到数据就会报错</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 参数 2：配置对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//      hash: 设置获取数据结构</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//           -  true ：JSON 格式的 JS 对象数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//           -  false：查询字符串 url ？后面的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">//      empty: 设置是否获取空值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.form-data'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308150957805.gif\" alt=\"test\" /></p>\n<h3 id=\"hash参数的true跟false的区别\"><a class=\"anchor\" href=\"#hash参数的true跟false的区别\">#</a> hash：参数的 true 跟 false 的区别</h3>\n<ul>\n<li>true ：JSON 格式的 JS 对象数据</li>\n<li>false：查询字符串 url ？后面的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151003940.png\" alt=\"image-20230815100345134\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151004712.png\" alt=\"image-20230815100416896\" /></p>\n",
            "tags": [
                "tools",
                "前端",
                "tools",
                "web"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/windows/%E5%AE%89%E8%A3%85scoop/",
            "url": "https://pigpigletsgo.github.io/tools/windows/%E5%AE%89%E8%A3%85scoop/",
            "title": "安装和使用scoop",
            "date_published": "2024-01-24T10:48:46.996Z",
            "content_html": "<h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<ul>\n<li>寻找软件： <code>scoop search 软件名</code></li>\n<li>安装软件： <code>scoop install 软件名</code></li>\n<li>删除软件： <code>scoop uninstall 软件名</code></li>\n<li>查看已安装的软件：  <code>sccop list</code></li>\n<li>清理缓存： <code>scoop cache rm 软件名</code>  或者  <code>scoop cache rm *</code></li>\n<li>查看可添加仓库： <code>scoop bucket known</code></li>\n<li>添加额外仓库： <code>scoop bucket add 仓库名</code></li>\n</ul>\n<p>1 打开 PowerShell 输入，执行策略更改为 RemoteSigned</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set-executionpolicy RemoteSigned</pre></td></tr></table></figure><p>2 输入命令进行安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iex <span class=\"token string\">\"&amp; &#123;<span class=\"token variable\"><span class=\"token variable\">$(</span>irm get.scoop.sh<span class=\"token variable\">)</span></span>&#125; -RunAsAdmin\"</span></pre></td></tr></table></figure><h3 id=\"中国用户专享\"><a class=\"anchor\" href=\"#中国用户专享\">#</a> 中国用户专享</h3>\n<p>如果访问 Github 有问题，下载资源失败可以尝试一下方式：</p>\n<ol>\n<li>设置 Scoop 代理。在命令行中输入 (PowerShell 或 CMD 中都行)，： <code>scoop config proxy 127.0.0.1:7890</code>  让 scoop 网络连接走代理，后面的 ip 地址和端口号根据自己的代理设置。</li>\n</ol>\n<h3 id=\"更改scoop的默认安装路径\"><a class=\"anchor\" href=\"#更改scoop的默认安装路径\">#</a> 更改 scoop 的默认安装路径</h3>\n<p>在终端输入：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>environment<span class=\"token punctuation\">]</span>::setEnvironmentVariable<span class=\"token punctuation\">(</span><span class=\"token string\">'SCOOP_GLOBAL'</span>,<span class=\"token string\">'F:\\GlobalScoopApps'</span>,<span class=\"token string\">'Machine'</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$env</span>:SCOOP_GLOBAL<span class=\"token operator\">=</span><span class=\"token string\">'F:\\GlobalScoopApps'</span></pre></td></tr></table></figure><ul>\n<li>路径自己创建存放的文件夹自己改路径</li>\n<li>当使用 scoop 命令进行安装时，注意加 -g ， scoop install &lt;app&gt; -g</li>\n</ul>\n<h2 id=\"建议安装程序aria2\"><a class=\"anchor\" href=\"#建议安装程序aria2\">#</a> 建议安装程序 aria2</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Installed apps:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Name           Version  Source Updated             Info</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>----           -------  ------ -------             ----</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>7zip           <span class=\"token number\">23.01</span>    main   <span class=\"token number\">2023</span>-07-14 00:16:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span>            <span class=\"token number\">2.41</span>.0.2 main   <span class=\"token number\">2023</span>-07-14 00:16:42</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>neofetch       <span class=\"token number\">7.1</span>.0    main   <span class=\"token number\">2023</span>-07-14 00:17:26</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">vim</span>            <span class=\"token number\">9.0</span>      main   <span class=\"token number\">2023</span>-07-14 00:24:45</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>aria2          <span class=\"token number\">1.36</span>.0-1 main   <span class=\"token number\">2023</span>-08-26 <span class=\"token number\">11</span>:06:50 Global <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>quicklook      <span class=\"token number\">3.7</span>.3    extras <span class=\"token number\">2023</span>-08-26 <span class=\"token number\">13</span>:38:35 Global <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>youtube-dl-gui <span class=\"token number\">1.8</span>.5    extras <span class=\"token number\">2023</span>-08-26 <span class=\"token number\">11</span>:52:11 Global <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop <span class=\"token function\">install</span> aria2</pre></td></tr></table></figure><h2 id=\"使用bucket让windows软件包管理器变得更加强大\"><a class=\"anchor\" href=\"#使用bucket让windows软件包管理器变得更加强大\">#</a> 使用 bucket 让 windows 软件包管理器变得更加强大</h2>\n<h4 id=\"什么是bucket\"><a class=\"anchor\" href=\"#什么是bucket\">#</a> 什么是 bucket?</h4>\n<p>在 Scoop 里面，bucket 就是一个软件仓库。Scoop 将一个个仓库缓存至本地，当我们想要安装一个软件的时候，Scoop 就从本地的仓库中挑选出我们想要安装的软件的安装配置文件，并依照这个配置文件进行软件的安装工作，包括：</p>\n<ul>\n<li>从哪里下载软件</li>\n<li>如何安装软件、安装到哪里、需要修改更新什么环境变量</li>\n<li>安装之前、之后都要做什么准备（善后）工作</li>\n<li>……</li>\n</ul>\n<h4 id=\"添加一个bucket\"><a class=\"anchor\" href=\"#添加一个bucket\">#</a> 添加一个 bucket</h4>\n<p>首先，Scoop 给我们提供了很多可以直接使用的 bucket，就是为了方便我们安装更为常见的带有 GUI 的软件。一个最为常见，也是我推荐大家添加的 bucket 是  <code>extras</code> ，这里面基本涵盖了大部分不符合 main bucket 收录条件的常用软件，包括我们熟悉的：各个版本的 Firefox、福昕阅读器、Geek Uninstaller、Inkscape、Snipaste 等等。（甚至有 Steam，但是不推荐用这样的方式安装。）</p>\n<p>我们可以通过下面这个命令来添加  <code>extras</code>  这个 bucket：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket <span class=\"token function\">add</span> extras</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261124794.png\" alt=\"image-20230826112430785\" /></p>\n<p>之后，我们就可以下载更多更多常见的软件了。比方说，我们要下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC80MDU1Ng==\">ScreenToGif</span> 这个极为好用的 Gif 屏幕录制软件：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop <span class=\"token function\">install</span> screentogif</pre></td></tr></table></figure><h3 id=\"官方维护的-bucket\"><a class=\"anchor\" href=\"#官方维护的-bucket\">#</a> 官方维护的 bucket</h3>\n<p><code>extras</code>  这个 bucket 是最有用，也是我们大部分人肯定会用到的仓库。除此之外，我们可以通过这个命令查看 Scoop 还能直接识别哪些 bucket：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket known</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261126217.png\" alt=\"image-20230826112605419\" /></p>\n<p>下面列出的这几个仓库就是 Scoop 可以直接识别并添加的 bucket，即我们可以通过下面这个命令直接添加相应的 bucket：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>仓库名<span class=\"token operator\">></span></pre></td></tr></table></figure><p>比如：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop bucket known</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>extras</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>versions</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nirsoft</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sysinternals</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>php</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nerd-fonts</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>nonportable</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>games</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop bucket <span class=\"token function\">add</span> mages</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Unknown bucket <span class=\"token string\">'mages'</span><span class=\"token builtin class-name\">.</span> Try specifying <span class=\"token operator\">&lt;</span>repo<span class=\"token operator\">></span>.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>usage: scoop bucket <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>repo<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop bucket <span class=\"token function\">add</span> games</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Checking repo<span class=\"token punctuation\">..</span>. OK</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>The games bucket was added successfully.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span></pre></td></tr></table></figure><p>这里面，我来介绍一下和开发环境的安装没有太大关系的几个仓库：</p>\n<ul>\n<li>\n<p><code>extras</code> ：就是我刚刚介绍的，Scoop 官方维护的一个仓库，涵盖了大部分因为种种原因不能被收录进主仓库的常用软件。地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGbHVrZXNhbXBzb24lMkZzY29vcC1leHRyYXMlMkZ0cmVlJTJGbWFzdGVyJTJGYnVja2V0\">lukesampson/scoop-extras</span></p>\n</li>\n<li>\n<p><code>nirsoft</code> ：是一个 NirSoft 开发的小工具的安装合集。NirSoft 制作了大量的（dozens and dozens）小工具，包括系统工具、网络工具、密码恢复等等，孜孜不倦、持续更新。</p>\n</li>\n<li>\n<ul>\n<li>Bucket 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGa29keWJyb3duJTJGc2Nvb3Atbmlyc29mdA==\">kodybrown/scoop-nirsoft</span></li>\n<li>NirSoft 官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cCUzQSUyRiUyRnd3dy5uaXJzb2Z0Lm5ldCUyRg==\">NirSoft</span></li>\n</ul>\n</li>\n<li>\n<p><code>games</code> ：顾名思义，是游戏（和与游戏相关的工具）合集。包含了大量免费 / 开源的小游戏，地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGQ2FsaW5vdSUyRnNjb29wLWdhbWVz\">Calinou/scoop-games</span></p>\n</li>\n</ul>\n<p>剩下的几个 bucket 都是和开发环境相关的，比如  <code>java</code>  这个 bucket 就是为了安装 JDK 用的 bucket，这些我在这里就不过多赘述了。</p>\n<h2 id=\"备份与恢复配置文件\"><a class=\"anchor\" href=\"#备份与恢复配置文件\">#</a> 备份与恢复配置文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#[备份] 导出 scoop 的 bucket，已安装 apps 和 自定义配置信息到文件 scoopfile.json 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>scoop <span class=\"token builtin class-name\">export</span> <span class=\"token operator\">></span> scoopfile.json</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#[恢复] 从 scoopfile.json 文件中恢复信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>scoop <span class=\"token function\">import</span> scoopfile.json</pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "windows",
                "tools",
                "windows"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/windows/scoop%E5%AE%89%E8%A3%85mysql/",
            "url": "https://pigpigletsgo.github.io/tools/windows/scoop%E5%AE%89%E8%A3%85mysql/",
            "title": "Scoop安装mysql",
            "date_published": "2024-01-24T10:48:46.993Z",
            "content_html": "<h2 id=\"scoop安装mysql\"><a class=\"anchor\" href=\"#scoop安装mysql\">#</a> Scoop 安装 mysql</h2>\n<ol>\n<li>\n<p>添加仓库： <code>main</code></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket <span class=\"token function\">add</span> main</pre></td></tr></table></figure></li>\n<li>\n<p>执行命令安装 mysql</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop <span class=\"token function\">install</span> mysql</pre></td></tr></table></figure></li>\n<li>\n<p>启动 mysql 数据库</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token parameter variable\">--console</span></pre></td></tr></table></figure><ol>\n<li>\n<p>这里启动的方式分为两种</p>\n<ol>\n<li>后台启动 <code>--standalone</code></li>\n<li>终端启动  <code>--console</code></li>\n</ol>\n</li>\n<li>\n<p>如果报错则执行下面代码：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token parameter variable\">--initialze</span> <span class=\"token parameter variable\">--user</span><span class=\"token operator\">=</span>mysql <span class=\"token parameter variable\">--console</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>执行命令： <code>mysqld -install</code>  安装服务</p>\n<ol>\n<li>\n<p>如果出现下面的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040935540.png\" alt=\"image-20230904093551765\" /></p>\n</li>\n<li>\n<p>则执行命令： <code>sc delete mysql</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040936057.png\" alt=\"image-20230904093618438\" /></p>\n</li>\n<li>\n<p>再次执行： <code>mysqld -install</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040936016.png\" alt=\"image-20230904093638396\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p>最后启动服务： <code>net start mysql</code>  启动！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040937628.png\" alt=\"image-20230904093707195\" /></p>\n</li>\n</ol>\n<p>最后一步可能会想，为什么不直接去任务管理器里面的服务去启动服务呢？因为这里有可能在任务管理器中启动不了，但是终端可以。</p>\n<p>启动后你想执行一下 sql 命令比如： <code>show databses;</code></p>\n<p>却报错了，不要慌它提示的是需要重置密码。</p>\n<p>重置密码执行命令： <code>ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';</code>  然后你就可以正常的使用了。</p>\n",
            "tags": [
                "tools",
                "windows",
                "mysql",
                "tools",
                "windows"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/windows/PowerShell%E9%85%8D%E7%BD%AEohmyzsh/",
            "url": "https://pigpigletsgo.github.io/tools/windows/PowerShell%E9%85%8D%E7%BD%AEohmyzsh/",
            "title": "PowerShell配置ohmyzsh",
            "date_published": "2024-01-24T10:48:46.989Z",
            "content_html": "<p>第一步</p>\n<p>windows 应用商店安装 WindowsTerminal</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261938192.png\" alt=\"image-20230826193816724\" /></p>\n<p>确保自己电脑有 PowerShell, 或者去下载一个也是在应用商店</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261938122.png\" alt=\"image-20230826193848906\" /></p>\n<p>安装字体否则一些显示有问题：字体上传到了云端可以去拉取获取下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy9pbnN0YWxsYXRpb24vZm9udHMlRTclODIlQjklRTUlODclQkI=\">https://ohmyposh.dev/docs/installation/fonts 点击</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3J5YW5vYXNpcy9uZXJkLWZvbnRzL3JlbGVhc2VzL2Rvd25sb2FkL3YzLjAuMi9NZXNsby56aXA=\">Meslo LGM NF</span> 即可下载字体包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 oh-my-posh</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>winget <span class=\"token function\">install</span> JanDeDobbeleer.OhMyPosh <span class=\"token parameter variable\">-s</span> winget</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用的是哪个 shell</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>oh-my-posh get shell</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 直接加载：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ScriptBlock<span class=\"token punctuation\">]</span>::Create<span class=\"token variable\"><span class=\"token punctuation\">((</span>oh<span class=\"token operator\">-</span>my<span class=\"token operator\">-</span>posh init pwsh <span class=\"token operator\">--</span>config \"$env<span class=\"token operator\">:</span>POSH_THEMES_PATH\\night<span class=\"token operator\">-</span>owl.omp.json\" <span class=\"token operator\">--</span>print<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>join \"`n\"<span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 编辑 PowerShell 配置文件脚本，每次启动之后自动加载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>notepad <span class=\"token variable\">$PROFILE</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 当上述命令出错时，请确保先创建配置文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>New-Item <span class=\"token parameter variable\">-Path</span> <span class=\"token variable\">$PROFILE</span> <span class=\"token parameter variable\">-Type</span> File <span class=\"token parameter variable\">-Force</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 在配置文件里添加以下行：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ScriptBlock<span class=\"token punctuation\">]</span>::Create<span class=\"token variable\"><span class=\"token punctuation\">((</span>oh<span class=\"token operator\">-</span>my<span class=\"token operator\">-</span>posh init pwsh <span class=\"token operator\">--</span>config \"$env<span class=\"token operator\">:</span>POSH_THEMES_PATH\\night<span class=\"token operator\">-</span>owl.omp.json\" <span class=\"token operator\">--</span>print<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>join \"`n\"<span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>或者添加这行：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'$env:POSH_THEMES_PATH\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 重新加载配置文件以使更改生效</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token builtin class-name\">.</span> <span class=\"token variable\">$PROFILE</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 查看所有 themes:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Get-PoshThemes</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#运行上面命令后，最后 3 行显示如下：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># ---theme 存放的位置：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Themes location: C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>admin<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>Programs<span class=\"token punctuation\">\\</span>oh-my-posh<span class=\"token punctuation\">\\</span>themes</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># --- 如果输入 $profile, 得出的路径跟以下是一致的：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>To change your theme, adjust the init script <span class=\"token keyword\">in</span> C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>admin<span class=\"token punctuation\">\\</span>Documents<span class=\"token punctuation\">\\</span>PowerShell<span class=\"token punctuation\">\\</span>Microsoft.PowerShell_profile.ps1.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># --- 之前 $profile 配置文件，也可以改成以下这句（之前这句，向防病毒软件添加例外）里面路径写自己对应的</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 安装文件图标库</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Install-Module <span class=\"token parameter variable\">-Name</span> Terminal-Icons <span class=\"token parameter variable\">-Repository</span> PSGallery</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#使用图标，可以把以下这条命令加到 $PROFILE 里（保存，.$profile 使生效），单独运行就是一次性：</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Import-Module <span class=\"token parameter variable\">-Name</span> Terminal-Icons</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#BONUS：</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 设置随机主题：</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 在 powershell 输入 code $profile，输入下面的脚本命令：</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr></table></figure><p>如果命令操作中出现创建文件的错误问题而无法解决则自己去对应的路径下创建一个如下：然后将下面配置信息写入</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr></table></figure><ul>\n<li><strong>注意</strong>：里面的路径按照自己执行命令：Get-PoshThemes 的时候最后一行看到的填写打开路径的目录可以按照自己喜欢的样式改。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261939548.png\" alt=\"image-20230826193942959\" /></p>\n<p>最后就是 Windows Terminal 的配置了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261942396.png\" alt=\"image-20230826194133851\" /><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261942154.png\" alt=\"image-20230826194150186\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261942041.png\" alt=\"image-20230826194225862\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308271651695.png\" alt=\"image-20230827165110165\" /></p>\n<p>效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308280929677.png\" alt=\"image-20230828092941987\" /></p>\n<p>也可以配合着 neofetch 使用</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>neofetch <span class=\"token parameter variable\">--ascii_distro</span> Mac</pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "windows",
                "tools",
                "windows"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/nodeJs/nvm-Node%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",
            "url": "https://pigpigletsgo.github.io/tools/nodeJs/nvm-Node%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",
            "title": "nvm-Node版本控制",
            "date_published": "2024-01-24T10:48:46.978Z",
            "content_html": "<p>附：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1ub2RlJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\">node</span> 更换版本（简单操作）<br />\n安装 nvm<br />\n1 系统已经有 node</p>\n<ol start=\"2\">\n<li>网址：https://<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1naXRodWImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">github</span>.com/coreybutler/nvm-windows/releases</li>\n<li>下载 nvm-setup.zip, 解压之后会有个.exe 安装程序，第一步是同意，剩下的无脑 next 即可安装成功。</li>\n</ol>\n<h5 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h5>\n<ol>\n<li>打开 cmd，使用 nvm ls 命令查看本地已有版本</li>\n<li>使用 安装命令 nvm install v10.16.0 即可（别忘了写 v）</li>\n<li>再次使用 nvm ls 命令查看本地已有版本。发现 12.15.0 和 10.16.0 均有</li>\n<li>切换版本 nvm use 12.15.0</li>\n</ol>\n<h3 id=\"基础命令\"><a class=\"anchor\" href=\"#基础命令\">#</a> 基础命令</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nvm ls               <span class=\"token comment\">// 查看已安装 node 版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nvm install vXX      <span class=\"token comment\">// 安装对应 vXX 版本的 node</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nvm uninstall vXX    <span class=\"token comment\">// 卸载对应 vXX 版本的 node</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nvm use xxx          <span class=\"token comment\">// 选择使用 XXX 版本</span></pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "nodeJs",
                "tools",
                "nodeJs"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/idea/%E7%A0%B4%E8%A7%A3idea/",
            "url": "https://pigpigletsgo.github.io/tools/idea/%E7%A0%B4%E8%A7%A3idea/",
            "title": "搜索服务器使用idea",
            "date_published": "2024-01-24T10:48:46.967Z",
            "content_html": "<p>如果上方的服务器激活地址都失效了，还有个办法可以搜索网络上可用的激活服务器，一般人我不告诉他，请务必低调使用。</p>\n<ol>\n<li>\n<p>首先打开这个网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWFyY2guY2Vuc3lzLmlvLw==\">https://search.censys.io/</span></p>\n</li>\n<li>\n<p>然后在搜索框中输入： <code>services.http.response.headers.location: account.jetbrains.com/fls-auth</code> ，点击 <code>搜索</code> ，网站会检索出很多 IP 地址</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309131411486.png\" alt=\"search.censys.io\" /></p>\n</li>\n<li>\n<p>任意点一个 IP 地址查看详情页，确保 <code>80/HTTP</code>  地址下的 <code>Status Code</code>  状态码为 <code>302</code> ，这时候复制出 <code>Detail</code>  这里的 IP 地址，作为我们的 License Server 地址</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309131411450.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>和上面一样，输入地址后点击激活</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309131412970.png\" alt=\"输入激活服务器IP地址\" /></p>\n</li>\n<li>\n<p>如果无法激活再回到搜索结果页换一个 IP 地址再次试验，小编试验了 3 次就成功了，IDEA 成功永久 激活，亲测有效</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309131412586.png\" alt=\"IEAD正版激活成功\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "tools",
                "idea"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/idea/idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E/",
            "url": "https://pigpigletsgo.github.io/tools/idea/idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E/",
            "title": "idea创建类或方法自动生成注释声明",
            "date_published": "2024-01-24T10:48:46.964Z",
            "content_html": "<p>创建类时自动生成注释声明：操作步骤:</p>\n<p><code>File --&gt; settings --&gt; Editor --&gt; File and Code Templates</code></p>\n<p>点击 <code>Includes</code>  选择 <code>File Header</code>  在右边内容框中输入如下内容:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @author Dkx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @$&#123;DATE&#125;$&#123;TIME&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @version 1.0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @function</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* @comment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-04-28_20230323080818.png?v=1&amp;type=image&amp;token=V1:OyTyou1tw5AZ_pnL9RTe-fkw0H5HbvIq8k4G9iSL4wQ\" alt=\"image_2023-01-14-21-04-28\" /></p>\n<p>创建方法时自动生成注释声明：操作步骤:</p>\n<p><code>File --&gt; settings --&gt; Editor --&gt; Live Templates</code></p>\n<ol>\n<li>点击 + 号，再点击 <code>Template Group...</code></li>\n</ol>\n<p>创建名称随意，建议使用名称: <code>Method</code>  翻译为方法更为规范</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401051449757.png\" alt=\"image-20240105144937718\" /></p>\n<p>选中刚才创建好的 Method 再次点击 + 号，选择 Live Template</p>\n<p>取名为: <code>/**</code>  注意：不能随便起名建议使用这个名称</p>\n<p>在展开 <code>Method</code>  选项点击 <code>/**</code>  标签</p>\n<p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-09-33_20230323080843.png?v=1&amp;type=image&amp;token=V1:GFig0QnwaLoCcCiUdET-hb1squrrMdI7wj9-sC1e6Eg\" alt=\"image_2023-01-14-21-09-33\" /></p>\n<p>在下面的内容框中输入如下内容:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*@param:$params$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*@return:$returns$</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*@Date:$date$</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-10-29_20230323080857.png?v=1&amp;type=image&amp;token=V1:oOF5UI_XfVYuwA4p0r6yVvsDFSuhwdzMsDlJnf4BZRM\" alt=\"image_2023-01-14-21-10-29\" /></p>\n<p>然后点击 <code>EDIT VARIABLES</code></p>\n<p>设置如下设置:</p>\n<p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-11-14_20230323080909.png?v=1&amp;type=image&amp;token=V1:L_nMc_WJc9fBed2PoQQBavSbR0qlPNK_SiUOE_3b66E\" alt=\"image_2023-01-14-21-11-14\" /></p>\n<p>更改调用方式为按 Enter 后触发</p>\n<p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-11-47_20230323080922.png?v=1&amp;type=image&amp;token=V1:qKjGfIUD9JY-i1meZnGKDZa0GGQ7vOGDMNdeY8a6-7U\" alt=\"image_2023-01-14-21-11-47\" /></p>\n<p>点击 APPLY,OK 即可</p>\n",
            "tags": [
                "tools",
                "idea",
                "java",
                "tools",
                "idea",
                "项目"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/tools/idea/HTTP%20Client%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%8F%92%E4%BB%B6/",
            "url": "https://pigpigletsgo.github.io/tools/idea/HTTP%20Client%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%8F%92%E4%BB%B6/",
            "title": "HTTP Client接口测试插件[idea-2022版本以上自带]",
            "date_published": "2024-01-24T10:48:46.960Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310260909263.png\" alt=\"image-20231026090939362\" /></p>\n<p>使用方式：</p>\n<p>在项目的根目录创建一个名为 api 结尾的文件夹，里面存放 api 接口测试的代码：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310260910384.png\" alt=\"image-20231026091037630\" /></p>\n<p>在该文件中编写代码如下：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST http://localhost:63040/content/course/list?pageNo=1&amp;pageSize=2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token string-property property\">\"auditStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"203001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token string-property property\">\"conurseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token string-property property\">\"publishStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>&lt;font color='red'&gt; 注意 &lt;/font&gt;：如果写多个测试接口 uri 需要使用 ### 将其分隔否则会出现红色波浪线！比如，如下：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST http://localhost:63040/content/course/list?pageNo=1&amp;pageSize=2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token string-property property\">\"auditStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"203001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token string-property property\">\"conurseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token string-property property\">\"publishStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>###</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token constant\">GET</span> <span class=\"token literal-property property\">http</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">63040</span><span class=\"token operator\">/</span>content<span class=\"token operator\">/</span>course<span class=\"token operator\">-</span>category<span class=\"token operator\">/</span>tree<span class=\"token operator\">-</span>nodes</span></pre></td></tr></table></figure><p>启动对应的服务后进行测试结果如下：</p>\n<pre><code>POST http://localhost:63040/content/course/list?pageNo=1&amp;pageSize=2\n\nHTTP/1.1 200 \nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Thu, 26 Oct 2023 01:06:34 GMT\nKeep-Alive: timeout=60\nConnection: keep-alive\n\n&#123;\n  &quot;items&quot;: [\n    &#123;\n      &quot;id&quot;: 1,\n      &quot;companyId&quot;: 1232141425,\n      &quot;companyName&quot;: &quot;&quot;,\n      &quot;name&quot;: &quot;JAVA8/9/10新特性讲解&quot;,\n      &quot;users&quot;: &quot;java爱好者,有一定java基础&quot;,\n      &quot;tags&quot;: &quot;有个java 版本变化的新内容，帮助大家使用最新的思想和工具&quot;,\n      &quot;mt&quot;: &quot;1&quot;,\n      &quot;st&quot;: &quot;1-3-2&quot;,\n      &quot;grade&quot;: &quot;204002&quot;,\n      &quot;teachmode&quot;: &quot;200002&quot;,\n      &quot;description&quot;: null,\n      &quot;pic&quot;: &quot;https://cdn.educba.com/academy/wp-content/uploads/2018/08/Spring-BOOT-Interview-questions.jpg&quot;,\n      &quot;createDate&quot;: &quot;2019-09-03T17:48:19&quot;,\n      &quot;changeDate&quot;: &quot;2022-09-17T16:47:29&quot;,\n      &quot;createPeople&quot;: &quot;1&quot;,\n      &quot;changePeople&quot;: null,\n      &quot;auditStatus&quot;: &quot;202004&quot;,\n      &quot;status&quot;: &quot;203001&quot;\n    &#125;,\n    &#123;\n      &quot;id&quot;: 27,\n      &quot;companyId&quot;: 1232141425,\n      &quot;companyName&quot;: null,\n      &quot;name&quot;: &quot;Javascript之VueJS&quot;,\n      &quot;users&quot;: &quot;所有人&quot;,\n      &quot;tags&quot;: null,\n      &quot;mt&quot;: &quot;1-1&quot;,\n      &quot;st&quot;: &quot;1-1-9&quot;,\n      &quot;grade&quot;: &quot;200002&quot;,\n      &quot;teachmode&quot;: &quot;200002&quot;,\n      &quot;description&quot;: &quot;Vue系列课程：从Vue1.0讲到Vue2.0，从理论讲到实战，理论与案例巧妙结合，让课程更容易理解！&quot;,\n      &quot;pic&quot;: &quot;https://cdn.educba.com/academy/wp-content/uploads/2018/08/Spring-BOOT-Interview-questions.jpg&quot;,\n      &quot;createDate&quot;: &quot;2019-09-04T09:56:19&quot;,\n      &quot;changeDate&quot;: null,\n      &quot;createPeople&quot;: null,\n      &quot;changePeople&quot;: null,\n      &quot;auditStatus&quot;: &quot;202004&quot;,\n      &quot;status&quot;: &quot;203001&quot;\n    &#125;\n  ],\n  &quot;counts&quot;: 5,\n  &quot;page&quot;: 1,\n  &quot;pageSize&quot;: 2\n&#125;\nResponse file saved.\n&gt; 2023-10-26T090634.200.json\n\nResponse code: 200; Time: 32ms (32 ms); Content length: 987 bytes (987 B)\n</code></pre>\n<p>但是如果每次请求发生变化都需要改变的话很繁琐，我们可以对其进行定义变量</p>\n<p>创建一个名为： <code>http-client.env.json</code>  的文件，内容如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"gateway_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63010\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"content_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63040\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"system_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63110\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"media_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63050\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"search_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63080\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"auth_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63070\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"checkcode_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:6375\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"learning_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63020\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义完成后怎么使用呢？</p>\n<p>使用方式如下：将 Post 请求中的 localhost 固定写法改为变量</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST &#125;/content/course/list?pageNo=1&amp;pageSize=2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"auditStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"203001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"conurseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"publishStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "idea",
                "java",
                "tools",
                "idea",
                "项目"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/math/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/",
            "url": "https://pigpigletsgo.github.io/math/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/",
            "title": "欧几里得算法",
            "date_published": "2024-01-24T10:48:46.939Z",
            "content_html": "<h1 id=\"欧几里得算法\"><a class=\"anchor\" href=\"#欧几里得算法\">#</a> 欧几里得算法</h1>\n<p>也被称为：辗转相除法，其特征包括如下：</p>\n<ol>\n<li>有效性：辗转相除法 是一种有效的方法，能够找到两个整数的最大公约数</li>\n<li>递归性质：该算法可以通过递归方式实现，也可以用迭代方式</li>\n<li>基于整数除法：辗转相除法的核心操作是整数除法，通过计算余数和更新被除数，除数，直至余数为零，找到最大公约数</li>\n</ol>\n<h2 id=\"详细说明如下\"><a class=\"anchor\" href=\"#详细说明如下\">#</a> 详细说明如下：</h2>\n<p>当我们有两个整数 p 和 q，我们可以使用欧几里得算法求它们的最大公约数 (GCD)。这个算法的基本思想是：</p>\n<ol>\n<li>若 q 为 0，则最大公约数为 p</li>\n<li>否则，将 p 除以 q 得到余数 r，然后用 q 代替 p，用 r 代替 q，重复上述过程</li>\n</ol>\n<p>这个过程会一直持续，直到 q 变为 0，此时，p 的值就是最大公约数。这是一个反复取余的过程，逐步缩小问题规模。例如：</p>\n<pre><code>p = 48, q = 18\n\n1. 48 / 18 = 2 余 12，此时 p = 18，q = 12\n2. 18 / 12 = 1 余 6，此时 p = 12，q = 6\n3. 12 / 6 = 2 余 0，此时 q = 0\n\n最大公约数为 6。\n</code></pre>\n<p>在这个例子中，直到除数可以整数时的最大除数 就是 最大公约数，比如例子中的 12 / 6 = 2 余数为 0 是一个可以整数的除数 而且 也是唯一最大能整出的除数 所以 6 就是 最大公约数</p>\n<h2 id=\"使用java语言描述\"><a class=\"anchor\" href=\"#使用java语言描述\">#</a> 使用 Java 语言描述</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> p <span class=\"token operator\">%</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 q == 0 就直接返回 p 这是因为 0 不能除以任何数 所以 直接 返回 p 作为最大公约数</p>\n<p>int r = p % q 就是取 被除数 和 除数 之间的余数</p>\n<p>return gcd (q, r) 就是通过递归 逐步的缩小问题规模 得到最终的 最大公约数</p>\n",
            "tags": [
                "math",
                "math",
                "算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/math/100%E4%BB%A5%E5%86%85%E5%8A%A0%E5%87%8F%E6%B3%95%E9%80%9F%E7%AE%97/",
            "url": "https://pigpigletsgo.github.io/math/100%E4%BB%A5%E5%86%85%E5%8A%A0%E5%87%8F%E6%B3%95%E9%80%9F%E7%AE%97/",
            "title": "100以内加减法速算技巧",
            "date_published": "2024-01-24T10:48:46.931Z",
            "content_html": "<h1 id=\"100以内加减法速算技巧\"><a class=\"anchor\" href=\"#100以内加减法速算技巧\">#</a> 100 以内加减法速算技巧</h1>\n<h2 id=\"不进位加法\"><a class=\"anchor\" href=\"#不进位加法\">#</a> 不进位加法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>23</mn><mo>+</mo><mn>34</mn><mo>=</mo><mn>57</mn></mrow><annotation encoding=\"application/x-tex\">23 + 34 = 57\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span></span></span></p>\n<p>十位：头 + 头 = 头</p>\n<p>个位：尾 + 尾 = 尾</p>\n<h2 id=\"进位加法\"><a class=\"anchor\" href=\"#进位加法\">#</a> 进位加法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>36</mn><mo>+</mo><mn>28</mn><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">36 + 28 = 64\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p>十位：头 + 头 + 1 = 头</p>\n<p>个位：尾 - 尾的补数 = 尾</p>\n<ul>\n<li>补数指的是 尾数 凑够 10 的数 是多少 比如 8 凑够 10 就是 2</li>\n</ul>\n<h2 id=\"不退位减法\"><a class=\"anchor\" href=\"#不退位减法\">#</a> 不退位减法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>46</mn><mo>−</mo><mn>25</mn><mo>=</mo><mn>21</mn></mrow><annotation encoding=\"application/x-tex\">46 - 25 = 21\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>十位：头 - 头 = 头</p>\n<p>个位：尾 - 尾 = 尾</p>\n<h2 id=\"退位减法\"><a class=\"anchor\" href=\"#退位减法\">#</a> 退位减法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>47</mn><mo>−</mo><mn>29</mn><mo>=</mo><mn>18</mn></mrow><annotation encoding=\"application/x-tex\">47 - 29 = 18\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span></span></span></p>\n<p>十位：头 - 头 - 1 = 头</p>\n<p>个位：尾 + 尾的补数 = 尾</p>\n<ul>\n<li>补数指的是 尾数 凑够 10 的数 是多少 比如 9 凑够 10 就是 1</li>\n</ul>\n",
            "tags": [
                "math",
                "math",
                "速算技巧",
                "加法",
                "减法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AE%E7%9C%8B%E6%9D%BF%E5%A8%98/",
            "url": "https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AE%E7%9C%8B%E6%9D%BF%E5%A8%98/",
            "title": "shoka配置看板娘",
            "date_published": "2024-01-24T10:48:46.917Z",
            "content_html": "<h1 id=\"配置看板娘\"><a class=\"anchor\" href=\"#配置看板娘\">#</a> 配置看板娘</h1>\n<h2 id=\"项目地址\"><a class=\"anchor\" href=\"#项目地址\">#</a> 项目地址</h2>\n<p>叫 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3N0ZXZlbmpvZXpoYW5nL2xpdmUyZC13aWRnZXQ=\">live2d-widget</span> 的开源项目</p>\n<h2 id=\"for项目\"><a class=\"anchor\" href=\"#for项目\">#</a> For 项目</h2>\n<p>将上面的项目 for 一份</p>\n<h2 id=\"简单引用\"><a class=\"anchor\" href=\"#简单引用\">#</a> 简单引用</h2>\n<ul>\n<li>因为在  <code>Shoka</code>  主题下没有找到可以引入第三方插件的配置，所以我选择了直接修改  <code>themes\\shoka\\layout\\_partials\\layout.njk</code>  ，在下面引入</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cnd.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"cdn加载看板娘\"><a class=\"anchor\" href=\"#cdn加载看板娘\">#</a> CDN 加载看板娘</h2>\n<p>修改脚本路径为  <code>https://cdn.jsdelivr.net/gh/你github的名字/项目名@latest/autoload.js</code>  ，比如</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.jsdelivr.net/gh/GardenHamster/live2d-widget@latest/autoload.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>注意</strong>：如果你 for 了项目那么就将博客项目的 themes\\shoka\\layout_partials\\layout.njk 文件中引入的链接修改为上面的链接</p>\n<h2 id=\"调整看板娘\"><a class=\"anchor\" href=\"#调整看板娘\">#</a> 调整看板娘</h2>\n<p>到自己 for 的项目里面找到 autoload.js 文件修改如下的代码</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#waifu <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">bottom</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span>1000px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">right</span><span class=\"token operator\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    line<span class=\"token operator\">-</span>height<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    margin<span class=\"token operator\">-</span>bottom<span class=\"token operator\">:</span> <span class=\"token operator\">-</span>10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span> fixed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>3px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">transition</span><span class=\"token operator\">:</span> transform <span class=\"token punctuation\">.</span>3s ease<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token operator\">-</span>out<span class=\"token punctuation\">,</span> bottom 3s ease<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token operator\">-</span>out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    z<span class=\"token operator\">-</span>index<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"jsdelivr-缓存\"><a class=\"anchor\" href=\"#jsdelivr-缓存\">#</a> jsdelivr 缓存</h2>\n<ul>\n<li><code>jsdelivr.net</code>  只会缓存你第一次提交的版本，后续修改后你需要手动访问  <code>https://purge.jsdelivr.net/gh/你github的名字/项目名@latest/文件名</code>  的方式对其进行刷新</li>\n<li>访问以后会返回一段这样的 json</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NfF3A42TzNhDiFJy\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"status\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"finished\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-12-02T18:49:16.998Z\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"/gh/GardenHamster/live2d-widget@latest/waifu.css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"throttled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"providers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">\"CF\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"FY\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>例如我需要刷新的项目文件路径如下</li>\n</ul>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//purge.jsdelivr.net/gh/GardenHamster/live2d-widget@latest/waifu.css</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//purge.jsdelivr.net/gh/GardenHamster/live2d-widget@latest/src/index.js</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//purge.jsdelivr.net/gh/GardenHamster/live2d-widget@latest/waifu-tips.js</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//purge.jsdelivr.net/gh/GardenHamster/live2d-widget@latest/waifu-tips.json</span></span></pre></td></tr></table></figure>",
            "tags": [
                "hexo",
                "shoka",
                "shoka"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/",
            "title": "配置shoka主题，以及解决依赖版本问题导致的代码块显示问题",
            "date_published": "2024-01-24T10:48:46.914Z",
            "content_html": "<h1 id=\"配置shoka主题\"><a class=\"anchor\" href=\"#配置shoka主题\">#</a> 配置 shoka 主题</h1>\n<p><strong>前提</strong>：配置好 hexo，会有版本问题下面再解决</p>\n<ol>\n<li>\n<p>访问 github 拉取 shoka 主题代码</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//github.com/amehime/hexo-theme-shoka</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>或者直接使用如下命令拉取项目</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>需要知道的几点：</p>\n<ol>\n<li>shoka 拉取下来后里面有一个 example 目录，这个目录里面都是例子代码，并不会配置了对项目生效的 😪</li>\n<li>其中 example 下的 package.json 是 hexo 目录中的 package.json 的参考文件，_config.yml 是 hexo 目录中的 <code>_config.yml</code>  参考文件， <code>_config.shoka.yml</code>  是 shok 中的 <code>_config.yml</code>  参考文件。注意不要混淆！</li>\n<li>建议将 shoka 中的 example 中的配置文件与 hexo 的配置文件内容放到 hexo 的配置文件中，避免重复的设置项 不然会报错的</li>\n</ol>\n</li>\n<li>\n<p>拉取下来 shoka 项目后确认这个项目放到的位置是在 hexo 的 themes 目录中</p>\n</li>\n<li>\n<p>修改 hexo 的_config.yml 文件，将里面的主题项修改为 shoka</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Plugins: http://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Themes: http://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr></table></figure><p>配置完成后基本上 shoka 这个主题就应用上去了，我们就可以去配置 shoka 的_config.yml 配置了</p>\n</li>\n<li>\n<p>安装依赖的插件：</p>\n<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>npm 地址</th>\n<th>功能</th>\n<th>依赖程度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo-renderer-multi-markdown-it</td>\n<td>链接</td>\n<td>md 文件渲染器，压缩 css/js/html</td>\n<td>必需</td>\n</tr>\n<tr>\n<td>hexo-autoprefixer</td>\n<td>链接</td>\n<td>给生成的 css 文件们添加浏览器前缀</td>\n<td>必需</td>\n</tr>\n<tr>\n<td>hexo-algoliasearch</td>\n<td>链接</td>\n<td>站内搜索功能</td>\n<td>搜索按钮失灵</td>\n</tr>\n<tr>\n<td>hexo-symbols-count-time</td>\n<td>链接</td>\n<td>文章或站点字数及阅读时间统计</td>\n<td>统计没有</td>\n</tr>\n<tr>\n<td>hexo-feed</td>\n<td>链接</td>\n<td>生成 Feed 文件</td>\n<td>Feed 文件没有</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>hexo-renderer-multi-markdown-it   ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tdWx0aS1tYXJrZG93bi1pdA==\">https://www.npmjs.com/package/hexo-renderer-multi-markdown-it</span></li>\n<li>hexo-autoprefixer : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvcHJlZml4ZXI=\">https://www.npmjs.com/package/hexo-autoprefixer</span></li>\n<li>hexo-algoliasearch ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hbGdvbGlhc2VhcmNo\">https://www.npmjs.com/package/hexo-algoliasearch</span></li>\n<li>hexo-symbols-count-time ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">https://www.npmjs.com/package/hexo-symbols-count-time</span></li>\n<li>hexo-feed ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1mZWVk\">https://www.npmjs.com/package/hexo-feed</span></li>\n</ul>\n</li>\n<li>\n<p>如果直接下载上面的插件可能导致 页面的 代码块 显示有问题 这是 版本问题所导致的解决问题如下：修改 package.json 文件</p>\n</li>\n<li>\n<p>修改 hexo 的 package.json 的文件内容，将 shoka 的 example 目录中的 package.json 文件的内容拷贝到 hexo 的 package.json 中即可</p>\n</li>\n<li>\n<p>修改完 package.json 文件内容后执行下面的命令降级 hexo</p>\n<ul>\n<li>\n<p>重新全局安装 hexo 5.4.2</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo@5.4.2</pre></td></tr></table></figure></li>\n<li>\n<p>然后在 hexo 目录下更新依赖</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure></li>\n<li>\n<p>然后重新生成就可以解决问题了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s</pre></td></tr></table></figure><p>注意：浏览器可能有缓存，记得刷新缓存</p>\n</li>\n</ul>\n</li>\n<li>\n<p>然后将 shoka 中的 example\\source 目录中的  <code>_data</code>  ，assets， friends 这几个目录放到 hexo 的 source 目录中，注意你要配置友情链接可以看 friends 目录中的说明，这个目录就是友情链接的配置文件，其余的如下：</p>\n</li>\n<li>\n<p>什么是 about，friends，links？就是如下图</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031903220.png\" alt=\"image-20240103190306102\" /></p>\n<ul>\n<li>\n<p>about：关于 的页面配置，在 hexo 的 source 目录中创建 about 目录里面创建 index.md 文件，在里面写 helloworld 然后重新生成 hexo s 打开网页后点击关于查看 会显示 hello world 字样</p>\n</li>\n<li>\n<p>links：链接 的配置同样的在 hexo 的 source 目录中创建 links 目录然后里面创建 index.md 文件用于配置链接的页面</p>\n</li>\n<li>\n<p><code>_post</code> ：里面是配置 .md 笔记的，在该目录中创建 目录分类 比如 java 目录里面存放 java 的笔记 易于管理 并且 创建 java 目录后我们需要在 hexo 的 <code>_config.yml</code>  文件中进行 category_map 的配置格式如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">计算机学科</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">数据结构与算法</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">-</span>structures<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>algorithms</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">编程题</span><span class=\"token punctuation\">:</span> programming<span class=\"token punctuation\">-</span>questions</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span> js</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span> web</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">video</span><span class=\"token punctuation\">:</span> video</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">movie</span><span class=\"token punctuation\">:</span> movie</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">Tvdrama</span><span class=\"token punctuation\">:</span> Tvdrama</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">animation</span><span class=\"token punctuation\">:</span> animation</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">Reality</span><span class=\"token punctuation\">:</span> Reality</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">问题总汇</span><span class=\"token punctuation\">:</span> bug</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span> css</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">vue</span><span class=\"token punctuation\">:</span> vue</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">vue3</span><span class=\"token punctuation\">:</span> vue3</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> databse</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span> mongodb</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span> mysql</pre></td></tr></table></figure></li>\n<li>\n<p><strong>注意</strong>：下面还有一个 tag_map 的配置项，这里并不是配置标签的不要被误导了，标签是在笔记文件中的 YAML Front Matter 里面配置的 tag 选项 具体格式如下：</p>\n<pre><code class=\"language-.md笔记文章\">---\ntitle: 这是文章的标题\ncategories:\n\t- [分类,分类,分类]\ntags:\n\t- 标签\n\t- 标签\n---\n\nhello world,这里是我的笔记内容\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>其它的配置就看个人喜好来配置就好了，至此基本的配置完毕！</p>\n</li>\n</ol>\n<h2 id=\"精选分类配置\"><a class=\"anchor\" href=\"#精选分类配置\">#</a> 精选分类配置</h2>\n<p>在 <code>_post</code>  目录中创建的笔记目录中存放一个 cover.jpg 格式的图片就可以了，注意：必须命名为 cover 否则无效，具体如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401051601874.png\" alt=\"image-20240105160129814\" /></p>\n<p><strong>注意</strong>：文章的 categories 的 顺序会对精选分类产生影响的，不要弄混了，建议按照自己建立目录的顺序来写</p>\n",
            "tags": [
                "hexo",
                "shoka",
                "hexo",
                "shoka"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Promise/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Promise/",
            "title": "Promise",
            "date_published": "2024-01-24T10:48:46.878Z",
            "content_html": "<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<h3 id=\"基本使用与概述\"><a class=\"anchor\" href=\"#基本使用与概述\">#</a> 基本使用与概述</h3>\n<p><strong>定义</strong>：</p>\n<p>Promise 对象用于表示一个<mark>异步操作</mark>的<mark>最终完成</mark> (或<mark>失败</mark>) 及其<mark>结果值</mark>。</p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 好处 &lt;/span&gt;：</p>\n<ol>\n<li>逻辑更清晰</li>\n<li>了解 axios 函数内部运作机制</li>\n<li>能解决回调函数地狱问题</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130946670.png\" alt=\"image-20230813094654122\" /></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//2. 执行异步任务 — 并传递结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 成功调用：resolve (值) 触发 then () 执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 失败调用：reject (值) 触发 catch () 执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 接收结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Promise?\n<ul>\n<li>表示 (管理) 一个 &lt; font title=red &gt; 异步 &lt;/font &gt; 操作 &lt; font title=red &gt; 最终状态 &lt;/font &gt; 和 &lt; font title=red &gt; 结果值 &lt;/font &gt; 的对象</li>\n</ul>\n</li>\n<li>为什么学习 Promise?\n<ul>\n<li>成功和失败状态，可以关联对应处理程序</li>\n<li>了解 axios 内部原理</li>\n</ul>\n</li>\n<li>Promise 使用步骤？\n<ol>\n<li>创建 Promise 对象  <code>new Promise((成功回调函数，失败回调函数)=&gt; &#123;&#125;)</code></li>\n<li>执行异步任务 — 并传递结果\n<ol>\n<li>成功调用：成功回调函数 (值) 触发 then () 执行</li>\n<li>失败调用：失败回调函数 (值) 触发 catch () 执行</li>\n</ol>\n</li>\n<li>接收结果\n<ol>\n<li>成功：then (回调函数 =&gt; {})</li>\n<li>失败：catch (回调函数 =&gt; {})</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promise三种状态\"><a class=\"anchor\" href=\"#promise三种状态\">#</a> Promise— 三种状态</h3>\n<p><strong>作用</strong>：理解 Promise 对象如何 &lt;font title=red&gt; 关联 &lt;/font&gt; 的 &lt; font title=red &gt; 处理函数 &lt;/font&gt;，以及代码执行顺序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131009808.png\" alt=\"image-20230813100906484\" /></p>\n<p>待定 (pending)：初始状态，既没有被兑现，也没有拒绝</p>\n<p>已兑现 (fulfilled)：意味着，操作成功完成</p>\n<p>已拒绝 (rejected)：意味着，操作失败</p>\n<p>&lt;blockquote alt=danger&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;Promise 对象一旦被 &lt; font title=red &gt; 兑现 / 拒绝 &lt;/font &gt; 就是 &lt; font title=red &gt; 已敲定了，状态无法再被改变 &lt;/font&gt;&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 目标：使用 Promise 管理异步任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 在下面的定时器任务还没执行 成功或失败的回调函数之前展开 console</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// Promise 处于 pending 状态 - 待定状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">//2. 执行异步代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">//resolve () => fulfilled 状态 - 已兑现状态 执行 = then ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求—成功结果'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//reject () => rejected 状态 - 已拒绝状态 执行 = catch ()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求—失败结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 程序执行到这里 Promise 的状态就已经敲定了不可改变了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 上面同时执行成功和失败最终是？ fulfilled 因为不可变</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 3. 获取结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131023902.png\" alt=\"image-20230813102333221\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>Promise 对象有哪 3 中 &lt;font title=red&gt; 状态 &lt;/font&gt;？\n<ul>\n<li>待定：pending</li>\n<li>已兑现：fulfilled</li>\n<li>已拒绝：rejected</li>\n</ul>\n</li>\n<li>Promise 状态有什么用？\n<ul>\n<li>状态改变后，调用关联的处理函数</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promisexhr获取省份列表\"><a class=\"anchor\" href=\"#promisexhr获取省份列表\">#</a> Promise+XHR 获取省份列表</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：使用 Promise 管理 XHR 请求省份列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 创建 Promise 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 执行 XHR 异步代码，获取省份列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 关联成功或失败函数，做后续处理</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 2. 执行 XHR 代码，获取省份列表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 3.xhr 如何判断响应成功还是失败的？</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 2xx 开头都是成功响应状态码</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// console.log(xhr.response)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 3. 关联成功或失败函数，做后续处理</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将成功获取的数据添加到 p 标签中展示</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 错误对象要用 dir 详细打印</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 服务器返回错误提示信息，插入到 p 标签展示</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131100796.png\" alt=\"image-20230813110046300\" /></p>\n<p>如果要发送一个 JSON 数据而且后端接收数据警告了：text/plain;charset=UTF-8 此时需要设置下请求头的数据格式了：</p>\n<p>写在 open 与 send 之间</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhl<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"封装_简易axios-_-获取省份列表\"><a class=\"anchor\" href=\"#封装_简易axios-_-获取省份列表\">#</a> 封装_简易 axios _ 获取省份列表</h3>\n<p><strong>需求</strong>：基于<mark> Promise</mark> + <mark>XHR</mark> 封装 myAxios 函数，获取省份列表展示</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>定义 myAxios 函数，接收 &lt;font title=red&gt; 配置对象 &lt;/font&gt;，返回 &lt; font title=red&gt;Promise 对象 &lt;/font&gt;.</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>发起 &lt;font title=red&gt;XHR 请求，默认请求方法 &lt;/font&gt; 为 GET</p>\n</li>\n<li>\n<p>调用 成功 / 失败 的处理程序</p>\n</li>\n<li>\n<p>使用 myAxios 函数，获取省份列表展示</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_获取省份列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 发起 XHR 请求，默认请求方法为 GET</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 调用 成功 / 失败 的处理程序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        4. 使用 myAxios 函数，获取省份列表展示</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131134277.png\" alt=\"image-20230813113448862\" /></p>\n<h3 id=\"封装_简易axios-_-获取地区列表-查询参数\"><a class=\"anchor\" href=\"#封装_简易axios-_-获取地区列表-查询参数\">#</a> 封装_简易 axios _ 获取地区列表 (查询参数)</h3>\n<p><strong>需求</strong>：修改 myAxios 函数支持传递 &lt;font title=red&gt; 查询参数 &lt;/font&gt;，获取 ‘辽宁省’ ，‘大连市’ 对应地区列表展示</p>\n<p><strong>要求</strong>：</p>\n<ol>\n<li>\n<p>myAxios 函数调用后，传入 &lt;font title=red&gt;params&lt;/font&gt; 选项</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求 - 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于  <code>URLSearchParams</code>  转换 &lt;font title=red&gt; 查询参数字符串 &lt;/font&gt;.</p>\n</li>\n<li>\n<p>使用自己封装的 myAxios 函数展示地区列表</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_获取地区列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 判断 params 选项，携带查询参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 使用 URLSearchParams 转换，并携带到 url 上</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 使用 myAxios 函数，获取地区列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 将获取到的查询参数转换为字符串类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 把查询参数字符串，拼接在 url 的？后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> <span class=\"token string\">'辽宁省'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> <span class=\"token string\">'大连市'</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131329652.png\" alt=\"image-20230813132951994\" /></p>\n<h3 id=\"封装_简易-_axios-_注册用户-请求体数据\"><a class=\"anchor\" href=\"#封装_简易-_axios-_注册用户-请求体数据\">#</a> 封装_简易 _axios _注册用户 (请求体数据)</h3>\n<p><strong>需求</strong>：修改 myAxios 函数支持传递 &lt;font title=red&gt; 请求体 &lt;/font &gt; 数据，完成注册用户功能</p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>myAxios 函数调用后，判断 &lt;font title=red&gt;data&lt;/font &gt; 选项</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求 - 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>转换数据类型，在 <code>send()</code>  方法中发送</p>\n</li>\n<li>\n<p>使用自己封装的 myAxios 函数完成注册用户功能</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"reg-btn\"</span><span class=\"token operator\">></span>注册用户<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_注册账号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 判断 data 选项，携带请求体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 转换数据类型，在 send 中发送</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 使用 myAxios 函数，完成注册用户</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 将获取到的查询参数转换为字符串类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 把查询参数字符串，拼接在 url 的？后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 data 选项，携带请求体</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// 2. 转换数据类型，在 send 中发送</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">const</span> jsonStr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 设置请求头数据类型为 application/json 是 JSON 数据格式</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token comment\">// 发送请求，携带请求体数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.reg-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 3. 使用 myAxios 函数，完成注册用户</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'qweqjisd1123'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123123'</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131400425.png\" alt=\"image-20230813140045017\" /></p>\n<h3 id=\"同步代码异步代码\"><a class=\"anchor\" href=\"#同步代码异步代码\">#</a> 同步代码 &amp; 异步代码</h3>\n<h4 id=\"同步代码\"><a class=\"anchor\" href=\"#同步代码\">#</a> 同步代码：</h4>\n<blockquote>\n<p>我们应该注意的是，实际上浏览器是按照我们 &lt;span alt=solid&gt; 书写代码的顺序一行一行执行程序的 &lt;/span&gt;。浏览器会等待代码的解析和工作，在 &lt; span alt=solid &gt; 上一行完成后才会执行下一行 &lt;/span&gt;。这样做是很有必要的，因为每一行新的代码都是建立在前面代码的基础之上的。</p>\n<p>这也使得它成为一个 &lt;span alt=solid&gt; 同步程序 &lt;/span&gt;.</p>\n</blockquote>\n<h4 id=\"异步代码\"><a class=\"anchor\" href=\"#异步代码\">#</a> 异步代码：</h4>\n<blockquote>\n<p>异步编程技术使得你的程序可以在执行一个 &lt;span alt=solid&gt; 可能长期运行的任务 &lt;/span &gt; 的同时继续对其它事件做出反应而 &lt; span alt=solid &gt; 不必等待任务完成 &lt;/span&gt;。与此同时，你的程序也将在任务 &lt; span alt=solid &gt; 完成后显示结果 &lt;/span&gt;。</p>\n</blockquote>\n<p><strong>同步代码</strong>：逐行执行，&lt;font title=red&gt; 需要原地等待结果 &lt;/font &gt; 后，才继续向下执行</p>\n<p><strong>异步代码</strong>：调用后 &lt;font title=red&gt; 耗时 &lt;/font&gt;，不阻塞代码继续执行 (不必原地等待)，在将来完成后触发一个 &lt;font title=red &gt; 回调函数 &lt;/font&gt;.</p>\n<blockquote>\n<p>JS 线程 详细查看 <a href=\"../Web/JavaScript/WebAPIs.md\">点击查看</a> 打开后 ctrl + F 搜索：JS 执行机制</p>\n</blockquote>\n<hr />\n<h3 id=\"回调函数地狱\"><a class=\"anchor\" href=\"#回调函数地狱\">#</a> 回调函数地狱</h3>\n<p><strong>需求</strong>：展示默认第一个省，第一个城市，第一个地区在下拉菜单中</p>\n<p><strong>概念</strong>：在回调函数中 &lt;font title=red&gt; 嵌套回调函数 &lt;/font&gt;，一直嵌套下去就形成了回调函数地狱</p>\n<p><strong>缺点</strong>：可读性差，异常无法捕获，耦合性严重，牵一发动全身</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131424346.png\" alt=\"image-20230813142433861\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 获取第一个省份默认下属的第一个城市名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>pname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 获取第一个城市默认下属第一个地区的名字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>pname <span class=\"token punctuation\">,</span> cname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可读性 太差了，不好维护，耦合性严重</p>\n<p><strong>演示</strong>：</p>\n<h6 id=\"html代码\"><a class=\"anchor\" href=\"#html代码\">#</a> html 代码：</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>省份:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>城市:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>地区:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>js 代码</strong>：</p>\n<p>在第三个最里面的 axios 的 url 中 故意多加一个 1 然它报错看看最外层的是否能捕获到它的错误信息呢</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：演示回调函数地狱</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：获取默认第一个省，第一个市，第一个区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 概念：在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 缺点：可读性差，异常无法捕获，耦合性严重，牵一发动全身</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//1. 获取默认第一个省份的名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 获取默认第一个城市的名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> city <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> city</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 3. 获取默认第一个地区的名称</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 我们故意将接口的地址写错看下异常的处理是什么样子的 多加一个 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> city <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>： &lt;font title=red&gt; 不行 &lt;/font&gt;！！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131533753.png\" alt=\"image-20230813153339502\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是回调函数地狱？\n<ul>\n<li>在回调函数一直向下 &lt;font title=red&gt; 嵌套回调函数 &lt;/font&gt;，形成回调函数地狱</li>\n</ul>\n</li>\n<li>回调函数地狱问题？\n<ul>\n<li>可读性差</li>\n<li>异常捕获困难</li>\n<li>耦合性严重</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"下面就是解决回调函数地狱问题的方式\"><a class=\"anchor\" href=\"#下面就是解决回调函数地狱问题的方式\">#</a> 下面就是解决回调函数地狱问题的方式：</h4>\n<h3 id=\"promise-链式调用\"><a class=\"anchor\" href=\"#promise-链式调用\">#</a> Promise - 链式调用</h3>\n<p>使用 Promise 的特性来解决 回调函数地狱问题！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131543365.png\" alt=\"image-20230813153913043\" /></p>\n<p><strong>上图解释</strong>：</p>\n<p>在创建一个 Promise 对象的时候，里面就会管理一个异步任务。而拿到异步任务成功的结果就可以调用对象内置的.then () 方法中传入回调函数接收成功的结果。而这个.then () 本身也是方法的调用本身也有返回值，而它的返回值又是一个新的 Promise 对象。这又是一个新的 Promise 对象，那里面还能再管理一个异步任务。</p>\n<p><strong>解决方式</strong>：</p>\n<p>获取省份的 Promise 中调用.then 在它的.then 中获取城市，而获取城市的 Promise 中调用.then 在它的.then 中获取地区。</p>\n<p>这样回调函数嵌套的问题就变成了线性的结构！</p>\n<blockquote>\n<p>概念：</p>\n<ul>\n<li>依靠 then () 方法返回一个 &lt; font title=red&gt; 新生成的 Promise 对象 &lt;/font &gt; 特性，继续串联下一环任务，直到结束</li>\n</ul>\n<p>细节：</p>\n<ul>\n<li>then () 回调函数中的 &lt; font title=red&gt; 返回值 &lt;/font&gt;，会影响新生成的 Promise 对象 &lt; font title=red &gt; 最终状态和结果 &lt;/font&gt;.</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131547443.png\" alt=\"image-20230813154716607\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 Promise 的链式调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：把省市的嵌套结构，改成链式调用的结构</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//1. 创建 Promise 对象 - 模拟请求省份名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'北京市'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 2. 获取省份名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 3. 创建 Promise 对象 - 模拟请求城市名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">//return Promise 对象最终状态和结果，影响到新的 Promise 对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token string\">'---北京'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//then () 返回的 Promise 是一个新对象 两个对象 的地址不同 返回 为 false</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">===</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131606112.png\" alt=\"image-20230813160612061\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Promise 的链式调用 ？\n<ul>\n<li>使用 then 函数返回新 Promise 对象特性，一直串联下去</li>\n</ul>\n</li>\n<li>then 回调函数中，return 的值会传给哪里？\n<ul>\n<li>传给 then 函数生成的新 Promise 对象</li>\n</ul>\n</li>\n<li>Promise 链式调用有什么用？\n<ul>\n<li>解决回调函数嵌套 (地狱) 问题</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promise-链式应用\"><a class=\"anchor\" href=\"#promise-链式应用\">#</a> Promise - 链式应用</h3>\n<p><strong>目标</strong>：使用 Promise 链式调用，解决回调函数地狱问题。</p>\n<p><strong>做法</strong>：每个 Promise 对象中管理一个异步任务，用 then 返回 Promise 对象，串联起来。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131619195.png\" alt=\"image-20230813161938585\" /></p>\n<p>每一个 axios 就相当于 Promise 可以看下上面的 &lt;a href=&quot;#Promise+XHR 获取省份列表&quot;&gt;Promise+XHR&lt;/a&gt;.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：把回调函数嵌套代码，改成 Promise 链式调用结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：获取默认第一个省，第一个市，第一个地区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> pname <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//1. 获取第一个省 Promise 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 获取第一个城市 Promise 对象 并返回 多加一个 1 让它报错查看捕获的结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 3. 获取第一个地区 Promise 对象 并返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131646743.png\" alt=\"image-20230813164606240\" /></p>\n<h2 id=\"async函数和await\"><a class=\"anchor\" href=\"#async函数和await\">#</a> async 函数和 await</h2>\n<blockquote>\n<p>&lt;span alt=solid&gt; 定义 &lt;/span&gt;：</p>\n<p>async 函数是使用 <code>async</code>  关键字声明的函数。async 函数是  <code>AsyncFunction</code>  构造函数的实例，并且其中允许使用 <code>await</code>  关键字。&lt;span alt=solid&gt; <code>async</code>  和 <code>await</code>  关键字让我们可以用一种更简洁的方式写出基于 <code>Promise</code>  的异步行为，而无需刻意地链式调用 <code>Promise</code> &lt;/span&gt;。</p>\n<p>&lt;span alt=solid&gt; 概念 &lt;/span&gt;：在 async 函数内，使用 await 关键字取代 then 函数，&lt;font title=red &gt; 等待 &lt;/font &gt; 获取 Promise 对象成 &lt; font title=red &gt; 功状态的结果值 &lt;/font&gt;.</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<h6 id=\"html代码-2\"><a class=\"anchor\" href=\"#html代码-2\">#</a> html 代码：</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>省份:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>城市:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>地区:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取默认省市区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDefaultArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 赋予到页面上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getDefaultArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h3 id=\"async函数和await_解决回调函数地狱问题\"><a class=\"anchor\" href=\"#async函数和await_解决回调函数地狱问题\">#</a> async 函数和 await_解决回调函数地狱问题</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 async 和 await 语法，解决回调函数地狱问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 概念：在 async 函数内，使用 await 关键字，获取 Promise 对象，\"成功状态\"   结果值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 注意：await 必须用在 async 修饰的函数内 (await 会阻止 \"异步函数\" 代码继续执行，原地等待结果)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">//axios 原地返回一个 Promise 对象而 await 等待一个 Promise 对象成功状态的结果值 所以在前面使用 await 接收将结果取在原地使用 一个变量接收</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">//await 必须用在 async 修饰内</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 故意在地址尾部多加一个 1 当这里发生错误后 后面不会再执行，你可能会想到下面不是依赖了这里一个变量吗应该是报错了吧不是没有执行。这个结论是错误的下面的代码并不会再去执行了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 只是终止了 aysnc 块中的代码执行并不是终止程序 哦～</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131748288.png\" alt=\"image-20230813174800891\" /></p>\n<p>没有对异常做处理，对异常做处理请看下章</p>\n<hr />\n<h3 id=\"async函数和await_捕获错误\"><a class=\"anchor\" href=\"#async函数和await_捕获错误\">#</a> async 函数和 await_捕获错误</h3>\n<p><strong>使用</strong>：try-catch</p>\n<p><code>try-catch</code>  语句标记要尝试的语句块，并指定一个出现异常时抛出的响应。</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 要执行的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//error 接收的是，错误信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//try 里面代码，如果有错误，直接进入这里执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 async 和 await 语法，解决回调函数地狱问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 概念：在 async 函数内，使用 await 关键字，获取 Promise 对象，\"成功状态\"   结果值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 注意：await 必须用在 async 修饰的函数内 (await 会阻止 \"异步函数\" 代码继续执行，原地等待结果)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 1. 使用 try 包裹可能发生错误的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//axios 原地返回一个 Promise 对象而 await 等待一个 Promise 对象成功状态的结果值 所以在前面使用 await 接收将结果取在原地使用 一个变量接收</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">//await 必须用在 async 修饰内</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 故意在地址尾部多加一个 1 当这里发生错误后 后面不会再执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 2. 使用 catch 捕获发生错误的信息</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 打印捕获到的错误信息 是一个对象是 axios 返回的错误使用 dir 查看详细</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 只是终止了 aysnc 块中的代码执行并不是终止程序 哦～</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131755747.png\" alt=\"image-20230813175557560\" /></p>\n<h2 id=\"宏任务与微任务\"><a class=\"anchor\" href=\"#宏任务与微任务\">#</a> 宏任务与微任务</h2>\n<p>ES6 之后引入了 Promise 对象，让 JS 引擎也可以发起异步任务</p>\n<p><strong>异步任务分为</strong>：</p>\n<p>&lt;span alt=solid&gt; 宏任务 &lt;/span&gt;：由 &lt; font title=red &gt; 浏览器 &lt;/font &gt; 环境执行的异步代码</p>\n<p>&lt;span alt=solid&gt; 微任务 &lt;/span&gt;：由 &lt; font title=red&gt;JS 引擎 &lt;/font &gt; 环境执行的异步代码</p>\n<p>宏任务</p>\n<table>\n<thead>\n<tr>\n<th>任务 (代码)</th>\n<th>执行所在环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JS 脚本执行事件 (Script)</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>setTimeout/setInterval</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>Ajax 请求完成事件</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>用户交互事件等</td>\n<td>浏览器</td>\n</tr>\n</tbody>\n</table>\n<p>微任务</p>\n<table>\n<thead>\n<tr>\n<th>任务 (代码)</th>\n<th>执行所在环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise 对象.then ()</td>\n<td>JS 引擎</td>\n</tr>\n</tbody>\n</table>\n<p>Promise 本身是同步的，而 then 和 catch&lt;font title=red&gt; 回调函数 &lt;/font &gt; 是异步的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132000229.png\" alt=\"image-20230813195951215\" /></p>\n<p>执行步骤：</p>\n<pre><code> 1.script标签js脚本执行的事件就会交给浏览器环境\n\n 2.然后把整个js脚本代码推入到宏任务队列中\n\n 3.调用栈是空闲的它会立刻执行第一个宏任务就是script脚本(标签)然后执行里面代码\n\n 4.读到console.log(1)放入到调用栈进行执行\n  \n 5.读取setTimeout是异步任务，是个宏任务，宏任务交给浏览器来执行\n\n 6.读取new Promise放入到调用栈中，Promise对象本身是同步的,立刻打印里面的值\n\n 6.1 Promise是同步的立刻调用了里面的成功回调函数，它是微任务的\n\n 7.将console.log(5)推入调用栈执行\n\n 8.调用栈空闲了就反复去查看任务队列中是否有可执行的异步回调函数如果宏任务，微任务两个任务队列都有可执行的异步代码会优先执行微任务中的异步回调函数，因为微任务更接近与JS引擎\n\n 9.将微任务队列的任务推入到调用栈执行\n\n 10.此时微任务队列中没有任务了去找宏任务并将其推入到调用栈执行\n\n 11.程序运行完毕!!\n</code></pre>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是宏任务？\n<ul>\n<li>&lt;font title=red&gt; 浏览器执行 &lt;/font &gt; 的异步代码</li>\n<li>例如：JS 执行脚本事件，setTimeout /setInterval，Ajax 请求完成事件，用户交互事件等</li>\n</ul>\n</li>\n<li>什么是微服务？\n<ul>\n<li>&lt;font title=red&gt;JS 引擎 &lt;/font&gt; 执行的异步代码</li>\n<li>例如：Promise 对象.then () 的回调</li>\n</ul>\n</li>\n<li>JavaScript 内部代码如何执行？\n<ul>\n<li>执行第一个 script 脚本事件宏任务，里面 &lt;font title=red&gt; 同步 &lt;/font &gt; 代码</li>\n<li>遇到 &lt;font title=red&gt; 宏任务 / 微任务 &lt;/font &gt; 交给宿主环境，有结果回调函数进入对应队列</li>\n<li>当执行栈空闲时，&lt;font title=red&gt; 清空微任务 &lt;/font &gt; 队列，再执行 &lt; font title=red &gt; 下一个宏任务 &lt;/font&gt;，从 1 再来</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132005359.png\" alt=\"image-20230813200500564\" /></p>\n</blockquote>\n<h2 id=\"promiseall静态方法\"><a class=\"anchor\" href=\"#promiseall静态方法\">#</a> Promise.all 静态方法</h2>\n<p><strong>概念</strong>：合并多个 Promise 对象，等待所有 &lt;font title=red&gt; 同时成功 &lt;/font &gt; 完成 (或某一个失败)，做后续逻辑</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132023381.png\" alt=\"image-20230813202342010\" /></p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//all 的构造函数传入一个数组，数组里面就是要合并的一个一个小的 Promise 对象然后返回一个新的大 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promsie<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise对象，Promise对象，<span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//result 结果：[Promise 对象成功结果，Promise 对象成功结果，...]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 第一个失败的 Promise 对象，抛出的异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/JSON/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/JSON/",
            "title": "初始JSON",
            "date_published": "2024-01-24T10:48:46.873Z",
            "content_html": "<h1 id=\"初始json\"><a class=\"anchor\" href=\"#初始json\">#</a> 初始 JSON</h1>\n<h2 id=\"json是什么\"><a class=\"anchor\" href=\"#json是什么\">#</a> JSON 是什么</h2>\n<p>Ajax 发送和接收数据的一种格式</p>\n<p>JSON 全称是 JavaScript Object Notation</p>\n<h2 id=\"为什么需要json\"><a class=\"anchor\" href=\"#为什么需要json\">#</a> 为什么需要 JSON</h2>\n<p>JSON 有 3 种形式，每种形式的写法都和 JS 中的数据类型很像，可以很轻松的和 JS 中的数据类型互相转换。</p>\n<h2 id=\"json的3中形式\"><a class=\"anchor\" href=\"#json的3中形式\">#</a> JSON 的 3 中形式</h2>\n<h3 id=\"简单值形式\"><a class=\"anchor\" href=\"#简单值形式\">#</a> 简单值形式</h3>\n<p>JSON 的简单值形式就对应着 JS 中的基础数据类型</p>\n<p>数字，字符串，布尔值，null</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"username\"</span></pre></td></tr></table></figure><p>注意事项：</p>\n<ol>\n<li>JSON 中没有 undefined 值</li>\n<li>JSON 中的字符串必须使用双引号</li>\n<li>JSON 中是不能注释的</li>\n</ol>\n<h3 id=\"对象形式\"><a class=\"anchor\" href=\"#对象形式\">#</a> 对象形式</h3>\n<p>JSON 的对象形式就对应着 JS 中的对象</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t<span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   \t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"20\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意事项：</p>\n<p>JSON 中对象的属性名必须用双引号，属性值如果是字符串也必须用双引号。</p>\n<p>JSON 中只要涉及到字符串，就必须使用双引号。</p>\n<p>不支持 undefined</p>\n<h3 id=\"数组形式\"><a class=\"anchor\" href=\"#数组形式\">#</a> 数组形式</h3>\n<p>JSON 的数组形式就对应着 JS 中的数组</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"刘桑\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意事项：</p>\n<p>数组中的字符串必须使用双引号</p>\n<p>JSON 中只要涉及到字符串，就必须使用双引号</p>\n<p>不支持 undefined</p>\n<h2 id=\"json的常用方法\"><a class=\"anchor\" href=\"#json的常用方法\">#</a> JSON 的常用方法</h2>\n<h3 id=\"jsonparse\"><a class=\"anchor\" href=\"#jsonparse\">#</a> JSON.parse</h3>\n<p>JSON.parse 可以将 JSON 格式的字符串解析成 JS 中的对应值</p>\n<p>一定要是合法的 JSON 字符串，否则会报错</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jsonstringify\"><a class=\"anchor\" href=\"#jsonstringify\">#</a> JSON.stringify</h3>\n<p>JSON.stringify 可以将 JS 的基本数据类型，对象或者数组转换成 JSON</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"zuqi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bingbqiu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">userTo</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span><span class=\"token string\">\"sl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token literal-property property\">mother</span><span class=\"token operator\">:</span><span class=\"token string\">\"lidama\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用jsonparse和jsonstringify封装localstorage\"><a class=\"anchor\" href=\"#使用jsonparse和jsonstringify封装localstorage\">#</a> 使用 JSON.parse 和 JSON.stringify 封装 localStorage</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740061.png\" alt=\"image-20230530164849606\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740654.png\" alt=\"image-20230530164902425\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span>clear<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740615.png\" alt=\"image-20230530165013596\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740239.png\" alt=\"image-20230530165025302\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span>clear<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740337.png\" alt=\"image-20230530165051597\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740675.png\" alt=\"image-20230530165100768\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互",
                "数据格式"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Fetch/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Fetch/",
            "title": "Fetch",
            "date_published": "2024-01-24T10:48:46.869Z",
            "content_html": "<h1 id=\"fetch\"><a class=\"anchor\" href=\"#fetch\">#</a> Fetch</h1>\n<h2 id=\"fetch是什么\"><a class=\"anchor\" href=\"#fetch是什么\">#</a> Fetch 是什么</h2>\n<p>Fetch 也是前后端通信的一种方式。</p>\n<p>Fetch 是 Ajax (XMLHttpRequest) 的一种替代方案，它是基于 Promise 的。</p>\n<p>Ajax 的兼容性比 Fetch 好。</p>\n<p>Fetch 中目前还没有 abort，timeout，这些想要使用还要我们去实现。</p>\n<h2 id=\"fetch的基本用法\"><a class=\"anchor\" href=\"#fetch的基本用法\">#</a> Fetch 的基本用法</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：在 js 中是有 fetch 这个东西的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734678.png\" alt=\"image-20230531201344579\" /></p>\n<ol>\n<li>\n<pre><code>Response &#123;type: 'cors', url: 'http://127.0.0.1:81/data', redirected: false, status: 200, ok: true, …&#125;\nbody: ReadableStream\nbodyUsed: false\nheaders: Headers &#123;&#125;\nok: true\nredirected: false\nstatus: 200\nstatusText: &quot;&quot;\ntype: &quot;cors&quot;\nurl: &quot;http://127.0.0.1:81/data&quot;\n[[Prototype]]: Response\n</code></pre>\n</li>\n<li>\n<p>body/bodyUsed：只能读一次，读过之后就不让再读了。</p>\n</li>\n<li>\n<p>OK：如果 OK 为 true，表示可以读取数据，不用再去判断 HTTP 状态码了。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：返回了一个 Promise 对象，我们需要将他返回出去才能看到数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735239.png\" alt=\"image-20230531202444465\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>报错了，翻译一下：</p>\n<p><img data-src=\"./images/image-20230531202627455.png\" alt=\"image-20230531202627455\" /></p>\n<pre><code>类型错误：无法在“响应”上执行“json”：正文流已读取\n取.html：16：29\n</code></pre>\n<p>原因是读取了两次，上面 body 明确不可以读取两次的只能读取一次</p>\n<p>将返回值上面的 console.log 读取数据的给注释掉</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// console.log(response.json())</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>数据就读取出来了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735394.png\" alt=\"image-20230531202830539\" /></p>\n<p>如果数据不是 JSON 格式的则使用 response.text () 来返回文本格式的数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// console.log(response.json())</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// return response.json()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735213.png\" alt=\"image-20230531203055670\" /></p>\n<h2 id=\"fetch第二个参数是对象用来配置fetch\"><a class=\"anchor\" href=\"#fetch第二个参数是对象用来配置fetch\">#</a> Fetch 第二个参数是对象，用来配置 Fetch。</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//boey 发送请求体数据，发送 json 使用 body 直接传会报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 直接传递对应的类型为 x-www-form-urlencoded</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// body:null,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">//body:'name = 张三 & amp;age=18',</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 不能直接传对象需要自己转</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 跨域资源共享，默认就是 cors</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 跨域请求是否携带 Cooki, 传入的不再是布尔值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span><span class=\"token string\">'include'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735416.png\" alt=\"image-20230531205447013\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Axios/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Axios/",
            "title": "Axios",
            "date_published": "2024-01-24T10:48:46.865Z",
            "content_html": "<h1 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> Axios</h1>\n<h2 id=\"axios是什么\"><a class=\"anchor\" href=\"#axios是什么\">#</a> Axios 是什么</h2>\n<p>Axios 是一个给予 Peromise 的 HTTP 库，可以用在浏览器和 node.js 中</p>\n<p>第三方 Ajax 库</p>\n<p>Axios 中文官方文档：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20v\">http://www.axios-js.com/</span></p>\n<p>或者电脑安装了 node.js 则可以使用 node.js 来进行下载 axios.js 到本地，这样可以提升访问的速度了。</p>\n<p><strong>步骤</strong>：</p>\n<p>1 执行命令：下载 axios 到本地</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios</pre></td></tr></table></figure><p>执行后下载到的地方一般在用户文件夹中的 node_modules 中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131717320.png\" alt=\"image-20230813171704981\" /></p>\n<p>2 也可以直接在项目中打开终端执行命令下载可以直接使用。然后将下载的 axios 文件夹 剪切到项目中</p>\n<blockquote>\n<p>注意：不要直接剪切走 node_modules 文件夹，这是在项目中执行命令生成的。</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131719218.png\" alt=\"image-20230813171832066\" /></p>\n<p>3 引入 axios 到 html 页面中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span>\"width<span class=\"token operator\">=</span>device<span class=\"token operator\">-</span>width<span class=\"token punctuation\">,</span> initial<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    minimun<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>maximun<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>user<span class=\"token operator\">-</span>scalable<span class=\"token operator\">=</span>no\"<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 引入 axios</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javaScript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./node_modules/axios/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印一下 axios 函数 看看是否引入成功了。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>结果</strong>： OK ! 可以使用了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131721605.png\" alt=\"image-20230813172101445\" /></p>\n<h2 id=\"axios的基本用法\"><a class=\"anchor\" href=\"#axios的基本用法\">#</a> Axios 的基本用法</h2>\n<p>引入 Axios 第三方库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/axios@1.4.0/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看是否引入成功</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732260.png\" alt=\"image-20230531191826664\" /></p>\n<p>使用 Axios 发送请求：</p>\n<p>使用结构：</p>\n<p>url：请求地址</p>\n<p>method：直接使用 axios 需要使用 method 指定请求方式如：post，get</p>\n<p>headers：指定请求头信息</p>\n<p>params：请求头携带的数据</p>\n<p>data：请求体携带的数据</p>\n<p>params 和 data 可以同时设置参数不会报错</p>\n<p>timeout：设置请求超时时间</p>\n<p>withCredentials：跨域请求是否携带 Cookie</p>\n<p>Axios 的超时报错效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732887.png\" alt=\"image-20230531195700272\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 请求时的头信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">heaers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 'Content-Type':'application/x-www-form-urlencoded'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 通过请求头携带的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 通过请求体携带的数据，传递 JSON 数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 传递 application/x-www-form-urlencoded 数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//data:'name = 张三李四 & amp;age=18'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 设置超时时间，超出时间后报错</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 跨域是否携带 Cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732256.png\" alt=\"image-20230531194731633\" /></p>\n<p>使用 Axios 调用 get，post 请求方式：</p>\n<p>可以不用写 headers</p>\n<p><mark>GET</mark></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url1 <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json-get'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732190.png\" alt=\"image-20230531195732003\" /></p>\n<p><mark>POST</mark></p>\n<p>还是同样的：'name = 张三 &amp; age=18' 对应数据格式为：application/x-www-form-urlencoded</p>\n<p>而 {name:' 张三 ',age:18} 对应数据格式为：appliction/json，如果后端需要 json 而传递了 x-www-form-urlencoded 则会报错 415</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'name=张三&amp;age=18'</span><span class=\"token comment\">/*&#123;name:' 张三 ',age:18&#125;*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"content-type与data-type的区别\"><a class=\"anchor\" href=\"#content-type与data-type的区别\">#</a> Content-Type 与 data-Type 的区别</h2>\n<p>content-Type：告诉服务器，我要发什么类型的数据。</p>\n<p>data-Type：告诉服务器，我想要什么类型的数据，如果没有指定，那么会自动推断是返回 XML，还是 JSON，还是 script，还是 String。</p>\n<h2 id=\"axios请求拦截器\"><a class=\"anchor\" href=\"#axios请求拦截器\">#</a> axios 请求拦截器</h2>\n<p>axios 请求拦截器：发起请求之前，触发的配置函数，对 &lt;font title=red&gt; 请求参数 &lt;/font &gt; 进行额外配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 做统一设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 统一携带 token 令牌字符串在请求头上 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 逻辑中断判断，如果有 token 则不进行设置，如果没有则进行设置 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   token <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>haeads<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>toke<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当我们在请求个人信息，所有频道，文章列表时都会先经过请求拦截器，然后访问服务器查看 token 是否合法，合法则返回数据到 axios 请求中 得到个人信息，所有频道数据，文章列表数据等。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151310161.png\" alt=\"image-20230813212511388\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是 axios 请求拦截器？\n<ul>\n<li>发起请求之前，调用一个 &lt;font title=red&gt; 函数 &lt;/font&gt;，对 &lt; font title=red &gt; 请求参数 &lt;/font &gt; 进行 &lt; font title=red &gt; 设置 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>axios 请求拦截器，什么时候使用？\n<ul>\n<li>有 &lt;font title=red&gt; 公共配置 &lt;/font &gt; 和设置时，<mark>统一</mark>设置在请求拦截器中</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132155054.png\" alt=\"image-20230813215516420\" /></p>\n<h2 id=\"axios与axiosget的区别\"><a class=\"anchor\" href=\"#axios与axiosget的区别\">#</a> axios () 与 axios.get () 的区别</h2>\n<p>&lt;span alt='solid'&gt; 拿一个接口来做对比演示 &lt;/span&gt;：</p>\n<p>后端接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加角色接口\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//  @RequestBody：不能使用 get 方式提交，传递 JSON 格式数据，把 json 格式数据封装到对象里面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SysRole</span> sys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> sysRoleService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"一使用axios进行发送请求\"><a class=\"anchor\" href=\"#一使用axios进行发送请求\">#</a> 一，使用 axios () 进行发送请求</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 接口路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 请求方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 请求参数，传递 JSON 格式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> sys</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061421525.png\" alt=\"image-20230906142119290\" /></p>\n<h5 id=\"二使用axiospost进行发送请求\"><a class=\"anchor\" href=\"#二使用axiospost进行发送请求\">#</a> 二，使用 axios.post () 进行发送请求</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 正确写法可以传递到后端接口值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">roleName</span><span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span>roleName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">roleCode</span><span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span>roleCode <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 错误写法不能传递到后端接口值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// request.post(`$&#123;url&#125;/save`, &#123; sys: sys &#125;)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061425789.png\" alt=\"image-20230906142507359\" /></p>\n<p>如果按照错误写法呢？ 结果如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 正确写法可以传递到后端接口值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token comment\">/* request.post(`$&#123;url&#125;/save`, &#123; roleName: sys.roleName, roleCode: sys.roleCode &#125;) */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 错误写法不能传递到后端接口值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">sys</span><span class=\"token operator\">:</span> sys <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：结果就是接收到了两个没有传递过来的值 null 了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061426213.png\" alt=\"image-20230906142656845\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        }
    ]
}