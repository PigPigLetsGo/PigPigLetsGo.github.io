{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dkx の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%9B%BE/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%9B%BE/",
            "title": "数据结构与算法-图",
            "date_published": "2024-01-05T01:17:28.988Z",
            "content_html": "<h2 id=\"图\"><a class=\"anchor\" href=\"#图\">#</a> 图</h2>\n<p><strong>为什么要有图</strong></p>\n<ol>\n<li>前面我们学了线性表 和 树</li>\n<li>线性表局限于一个直接前驱和一个直接后继的关系</li>\n<li>树也只能有一个直接前驱也就是父节点</li>\n<li>当我们需要表示多对多的关系时，这里我们就用到了图</li>\n</ol>\n<h3 id=\"图的举例说明\"><a class=\"anchor\" href=\"#图的举例说明\">#</a> 图的举例说明</h3>\n<p>图是一种<mark>数据结构</mark>，其中节点可以具有<mark>零</mark>个或<mark>多</mark>个<mark>相邻元素</mark>。两个节点之间的连接称为 <mark>边</mark>。节点也可以称为<mark>顶点</mark>。如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711200325089.png\" alt=\"image-20230711200325089\" /></p>\n<h3 id=\"图常用的概念\"><a class=\"anchor\" href=\"#图常用的概念\">#</a> 图常用的概念</h3>\n<ol>\n<li>顶点 (vertex)</li>\n<li>边 (edge)</li>\n<li>路径</li>\n<li>无向图 (下图)</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711200430332.png\" alt=\"image-20230711200430332\" /></p>\n<ul>\n<li>\n<p><strong>无向图</strong>：顶点之间的连接<mark>没有方向</mark>，比如 A - B，既可以是 A - B 也可以 B - A</p>\n</li>\n<li>\n<p><strong>路径</strong>：比如从 D - C 的路径有</p>\n</li>\n</ul>\n<ol>\n<li>\n<p>D - B - C</p>\n</li>\n<li>\n<p>D - A - B - C</p>\n</li>\n<li>\n<p>有向图 (下图)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711200958618.png\" alt=\"image-20230711200958618\" /></p>\n<ul>\n<li><strong>有向图</strong>：顶点之间的连接<mark>有方向</mark>，比如 A - B ， 只能是 A -&gt; B 不能是 B -&gt; A。</li>\n</ul>\n</li>\n<li>\n<p>带权图</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711201041513.png\" alt=\"image-20230711201041513\" /></p>\n<ul>\n<li><strong>带权图</strong>：这种边带权值的图也叫<mark>网</mark>。</li>\n</ul>\n<h3 id=\"图的表示方式\"><a class=\"anchor\" href=\"#图的表示方式\">#</a> 图的表示方式</h3>\n<p><strong>图的表示方式有两种</strong>：</p>\n<ul>\n<li>\n<p><strong><mark>二维数组</mark>表示</strong> (邻接矩阵)；</p>\n</li>\n<li>\n<p><strong><mark>链表</mark>表示</strong> (邻接表)；</p>\n</li>\n</ul>\n<h4 id=\"邻接矩阵\"><a class=\"anchor\" href=\"#邻接矩阵\">#</a> 邻接矩阵</h4>\n<p>邻接矩阵是表示图形中顶点之间相邻关系的矩阵，对于 n 个顶点的图而言，矩阵是 row 和 col 表示的是 1...n 个点。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711202214098.png\" alt=\"image-20230711202214098\" /></p>\n<h4 id=\"邻接表\"><a class=\"anchor\" href=\"#邻接表\">#</a> 邻接表</h4>\n<ol>\n<li>邻接矩阵需要为每个顶点都分配 n 个边的空间，其实有很多边都是不存在的，会造成空间的一定损失。</li>\n<li>邻接表的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组 + 链表组成</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711202425883.png\" alt=\"image-20230711202425883\" /></p>\n<p><strong>说明</strong>：</p>\n<ol>\n<li>标号为 0 的节点的相关联的节点为 1  2  3  4</li>\n<li>标号为 1 的节点的相关联节点为 0  4</li>\n<li>标号为  2  的节点的相关联节点为 0  4  5</li>\n<li>....</li>\n</ol>\n<h4 id=\"图的快速入门案例\"><a class=\"anchor\" href=\"#图的快速入门案例\">#</a> 图的快速入门案例</h4>\n<p>1 <strong>要求</strong>：代码实现如下图结构</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711211516098.png\" alt=\"image-20230711211516098\" /></p>\n<p>2 <strong>思路分析</strong></p>\n<ol>\n<li>每一个<mark>顶点</mark>需要用一个<mark>容器来装</mark>，这里使用简单的 <mark>String 类型来表示</mark> A,B ... 等<mark>节点</mark></li>\n<li>这些所有的<mark>顶点</mark>，我们用一个<mark> List 来存储</mark></li>\n<li>它对应的<mark>矩阵使用</mark>一个<mark>二维数组</mark>来<mark>表示</mark>，<mark>节点之间的关系</mark></li>\n</ol>\n<p>3 <strong>代码实现</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1120:41</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> vertexList<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储顶点集合</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储图对应的邻接矩阵</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numOfEdges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示边的数目</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        vertexList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        numOfEdges <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 图中常用的方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 返回节点个数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 得到边的数目</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumEdges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> numOfEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 返回节点 i 对应下标的值 (0 -> \"A\") (1 -> \"B\") (2 -> \"C\")</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getVertexByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 返回 v1 和 v2 的权值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 显示图对应的矩阵</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token operator\">:</span>edges<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 插入节点</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param vertex</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> vertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * 添加边</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * @param v1     表示点的下标，即是第几个顶点</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * @param v2     第二个顶点对应的下标</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * @param weight 表示关联</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        numOfEdges<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 创建图对象</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token class-name\">Graph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 循环的添加顶点</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token operator\">:</span>vertexValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 添加边</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 输出邻接矩阵</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>[0, 1, 1, 0, 0]\n[1, 0, 1, 1, 1]\n[1, 1, 0, 0, 0]\n[0, 1, 0, 0, 0]\n[0, 1, 0, 0, 0]\n</code></pre>\n<h3 id=\"图的深度优先遍历介绍\"><a class=\"anchor\" href=\"#图的深度优先遍历介绍\">#</a> 图的深度优先遍历介绍</h3>\n<h4 id=\"图遍历介绍\"><a class=\"anchor\" href=\"#图遍历介绍\">#</a> 图遍历介绍</h4>\n<p>所谓图的遍历，即是对节点的访问。一个图有那么多个节点，如何遍历这些节点，需要特定策略，一般有两种访问策略：</p>\n<ol>\n<li>深度优先遍历</li>\n<li>广度优先遍历</li>\n</ol>\n<h4 id=\"深度优先遍历基本思想\"><a class=\"anchor\" href=\"#深度优先遍历基本思想\">#</a> 深度优先遍历基本思想</h4>\n<p><strong>图的深度优先搜索</strong> (Depth First Search)</p>\n<ol>\n<li>深度优先遍历，从初始访问节点出发，初始访问节点可能有多个邻接节点，深度优先遍历的策略就是首先访问第一个邻接节点，然后再以这个被访问的邻接节点作为初始节点，访问它的第一个邻接节点，可以这样理解：每次都在访问完<mark>当前节点</mark>后首先访问<mark>当前节点的第一个邻接节点</mark>。</li>\n<li>我们可以看到，这样的访问策略是优先往<mark>纵向挖掘深入</mark>，而不是对一个节点的所有邻接节点进行横向访问。</li>\n<li>显然，深度优先搜索是一个<mark>递归的过程</mark>。</li>\n</ol>\n<h5 id=\"深度优先遍历算法步骤\"><a class=\"anchor\" href=\"#深度优先遍历算法步骤\">#</a> 深度优先遍历算法步骤</h5>\n<ol>\n<li>访问初始节点 v，并标记节点 v 为已访问。</li>\n<li>查找节点 v 的第一个邻接节点 w。</li>\n<li>若 w 存在，则继续执行第 4 步，如果 w 不存在，则回到第 1 步，将从 v 的下一个节点继续。</li>\n<li>若 w 未被访问，对 w 进行深度优先遍历递归 (即把 w 当做另一个 v，然后进行步骤 123)。</li>\n<li>查找节点 v 的 w 邻接节点的下一个邻接节点，转到步骤 3。</li>\n</ol>\n<p><strong>看一个具体案例分析</strong>：</p>\n<p><strong>要求</strong>：对下图进行深度优先搜索，从 A 开始遍历</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711220409405.png\" alt=\"image-20230711220409405\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230712165116264.png\" alt=\"image-20230712165116264\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1120:41</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> vertexList<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储顶点集合</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储图对应的邻接矩阵</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numOfEdges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示边的数目</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 记录某个节点是否被访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        vertexList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        numOfEdges <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        isVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 得到第一个邻接节点的下标 w</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param index</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 如果存在就返回对应的下标，否则返回 - 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 根据前一个邻接节点的下标来获取下一个邻接节点</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param v1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param v2</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> v2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * 深度优先遍历</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * @param isVisited</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @param i         第一次就是 0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 首先我们访问该节点，输出</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 将节点设置为已经访问</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 查找节点 i 的第一个邻接节点 w</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 如果 w 节点已经被访问过</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 对 dfs 进行一个重载，遍历我们所有的节点，并进行 dfs</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 遍历所有的节点，进行 dfs [回溯]</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 图中常用的方法</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 返回节点个数</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 得到边的数目</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumEdges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">return</span> numOfEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// 返回节点 i 对应下标的值 (0 -> \"A\") (1 -> \"B\") (2 -> \"C\")</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 返回 v1 和 v2 的权值</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">// 显示图对应的矩阵</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     * 插入节点</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     * @param vertex</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> vertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>     * 添加边</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>     * @param v1     表示点的下标，即是第几个顶点</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     * @param v2     第二个顶点对应的下标</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * @param weight 表示关联</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        numOfEdges<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 创建图对象</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token class-name\">Graph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">// 循环的添加顶点</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> vertexValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token comment\">// 添加边</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token comment\">// 输出邻接矩阵</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------深度遍历-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>[0, 1, 1, 0, 0]\n[1, 0, 1, 1, 1]\n[1, 1, 0, 0, 0]\n[0, 1, 0, 0, 0]\n[0, 1, 0, 0, 0]\n-----------------深度遍历-----------------\nA\nB\nC\nD\nE\n</code></pre>\n<h3 id=\"图的广度优先遍历\"><a class=\"anchor\" href=\"#图的广度优先遍历\">#</a> 图的广度优先遍历</h3>\n<h5 id=\"广度优先遍基本思想\"><a class=\"anchor\" href=\"#广度优先遍基本思想\">#</a> 广度优先遍基本思想</h5>\n<p>图的广度优先搜索 (Broad First Search)。</p>\n<p>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的节点的顺序，以便按这个顺序来访问这些节点的邻接节点。</p>\n<h5 id=\"广度优先遍历算法步骤\"><a class=\"anchor\" href=\"#广度优先遍历算法步骤\">#</a> 广度优先遍历算法步骤</h5>\n<ol>\n<li>访问初始节点 v 并标记节点 v 为已访问。</li>\n<li>节点 v 入队列</li>\n<li>当队列非空时，继续执行，否则算法结束。</li>\n<li>出队列，取得对头节点 u。</li>\n<li>查找节点 u 的第一个邻接节点 w。</li>\n<li>若节点 u 的邻接节点 w 不存在，则转到步骤 3；否则循环执行以下三个步骤\n<ol>\n<li>若节点 w 尚未被访问，则访问节点 w 并标记为已访问。</li>\n<li>节点 w 入队列</li>\n<li>查找节点 u 的继 w 邻接节点后的下一个邻接节点 w，转到步骤 6。</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"广度优先遍历举例说明\"><a class=\"anchor\" href=\"#广度优先遍历举例说明\">#</a> 广度优先遍历举例说明</h5>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711221219958.png\" alt=\"image-20230711221219958\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230712171034456.png\" alt=\"image-20230712171034456\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1120:41</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> vertexList<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储顶点集合</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储图对应的邻接矩阵</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numOfEdges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示边的数目</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义给数组 boolean [], 记录某个节点是否被访问</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        vertexList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        numOfEdges <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        isVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 得到第一个邻接节点的下标 w</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param index</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 如果存在就返回对应的下标，否则返回 - 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 根据前一个邻接节点的下标来获取下一个邻接节点</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param v1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param v2</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//+1 略过自己 (不算自己)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> v2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 对一个节点进行广度优先遍历</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 表示队列头节点对应的下标</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 邻接节点 w</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 队列，记录节点访问的顺序</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 访问节点，输出节点的信息</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 标记为已访问</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 将节点加入到队列</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 取出队列头节点下标</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 得到第一个邻接节点的下标 w</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token comment\">// 标记已访问</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    <span class=\"token comment\">// 加入队列</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token comment\">// 以 u 为前驱节点找 w 后面的下一个邻接节点</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                w <span class=\"token operator\">=</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 遍历所有节点，都进行广度优先搜索</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 图中常用的方法</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 返回节点个数</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">// 得到边的数目</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumEdges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> numOfEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">// 返回节点 i 对应下标的值 (0 -> \"A\") (1 -> \"B\") (2 -> \"C\")</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 返回 v1 和 v2 的权值</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// 显示图对应的矩阵</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     * 插入节点</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     * @param vertex</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> vertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>     * 添加边</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>     * @param v1     表示点的下标，即是第几个顶点</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>     * @param v2     第二个顶点对应的下标</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>     * @param weight 表示关联</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        numOfEdges<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token comment\">// 创建图对象</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token class-name\">Graph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">// 循环的添加顶点</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> vertexValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">// 添加边</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token comment\">// 输出邻接矩阵</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------广度遍历-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>[0, 1, 1, 0, 0]\n[1, 0, 1, 1, 1]\n[1, 1, 0, 0, 0]\n[0, 1, 0, 0, 0]\n[0, 1, 0, 0, 0]\n-----------------广度遍历-----------------\nA\nB\nC\nD\nE\n</code></pre>\n<p>完整代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1120:41</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> vertexList<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储顶点集合</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储图对应的邻接矩阵</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numOfEdges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示边的数目</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 定义给数组 boolean [], 记录某个节点是否被访问</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        vertexList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        numOfEdges <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 得到第一个邻接节点的下标 w</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param index</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 如果存在就返回对应的下标，否则返回 - 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 根据前一个邻接节点的下标来获取下一个邻接节点</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param v1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param v2</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//+1 略过自己 (不算自己)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> v2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * 深度优先遍历</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @param isVisited</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @param i         第一次就是 0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 首先我们访问该节点，输出</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 将节点设置为已经访问</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 查找节点 i 的第一个邻接节点 w</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 如果 w 节点已经被访问过</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 对 dfs 进行一个重载，遍历我们所有的节点，并进行 dfs</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        isVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 遍历所有的节点，进行 dfs [回溯]</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 对一个节点进行广度优先遍历</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 表示队列头节点对应的下标</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 邻接节点 w</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// 队列，记录节点访问的顺序</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">// 访问节点，输出节点的信息</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// 标记为已访问</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">// 将节点加入到队列</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 取出队列头节点下标</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">// 得到第一个邻接节点的下标 w</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    <span class=\"token comment\">// 标记已访问</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                    <span class=\"token comment\">// 加入队列</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token comment\">// 以 u 为前驱节点找 w 后面的下一个邻接节点</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                w <span class=\"token operator\">=</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">// 遍历所有节点，都进行广度优先搜索</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        isVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 图中常用的方法</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// 返回节点个数</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 得到边的数目</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumEdges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">return</span> numOfEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 返回节点 i 对应下标的值 (0 -> \"A\") (1 -> \"B\") (2 -> \"C\")</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">// 返回 v1 和 v2 的权值</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 显示图对应的矩阵</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     * 插入节点</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>     * @param vertex</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> vertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     * 添加边</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>     * @param v1     表示点的下标，即是第几个顶点</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     * @param v2     第二个顶点对应的下标</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     * @param weight 表示关联</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        numOfEdges<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token comment\">// 创建图对象</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token class-name\">Graph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token comment\">// 循环的添加顶点</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> vertexValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token comment\">// 添加边</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token comment\">// 输出邻接矩阵</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------深度遍历-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------广度遍历-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果</p>\n<pre><code>[0, 1, 1, 0, 0, 0, 0, 0]\n[1, 0, 1, 1, 1, 0, 0, 0]\n[1, 1, 0, 0, 0, 0, 0, 0]\n[0, 1, 0, 0, 0, 0, 0, 0]\n[0, 1, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0, 0]\n[0, 0, 0, 0, 0, 0, 0, 0]\n-----------------深度遍历-----------------\n1\n2\n3\n4\n5\n6\n7\n8\n-----------------广度遍历-----------------\n1\n2\n3\n4\n5\n6\n7\n8\n</code></pre>\n<h3 id=\"图的深度优先strong-stylecolorred-vs-strong广度优先\"><a class=\"anchor\" href=\"#图的深度优先strong-stylecolorred-vs-strong广度优先\">#</a> 图的<mark>深度优先</mark> &lt;strong style=&quot;color:red&quot;&gt; VS &lt;/strong&gt;<mark> 广度优先</mark></h3>\n<p>由于前面讲解的顶点较少，恰好输出顺序一致，现在来对比下多一点的顶点，如下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230712174413248.png\" alt=\"image-20230712174413248\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li><mark>深度优先遍历</mark>顺序为  <code>1-&gt;2-&gt;4-&gt;8-&gt;5-&gt;3-&gt;6-&gt;7</code></li>\n<li><mark>广度优先遍历</mark>顺序为： <code>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8</code></li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1120:41</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> vertexList<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储顶点集合</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储图对应的邻接矩阵</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numOfEdges<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示边的数目</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 定义给数组 boolean [], 记录某个节点是否被访问</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        vertexList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        numOfEdges <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 得到第一个邻接节点的下标 w</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param index</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 如果存在就返回对应的下标，否则返回 - 1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 根据前一个邻接节点的下标来获取下一个邻接节点</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param v1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param v2</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">//+1 略过自己 (不算自己)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> v2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * 深度优先遍历</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @param isVisited</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @param i         第一次就是 0</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 首先我们访问该节点，输出</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 将节点设置为已经访问</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 查找节点 i 的第一个邻接节点 w</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 如果 w 节点已经被访问过</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 对 dfs 进行一个重载，遍历我们所有的节点，并进行 dfs</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        isVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 遍历所有的节点，进行 dfs [回溯]</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 对一个节点进行广度优先遍历</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 表示队列头节点对应的下标</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 邻接节点 w</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// 队列，记录节点访问的顺序</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">// 访问节点，输出节点的信息</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token comment\">// 标记为已访问</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">// 将节点加入到队列</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 取出队列头节点下标</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">// 得到第一个邻接节点的下标 w</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            w <span class=\"token operator\">=</span> <span class=\"token function\">getFirstNeighbor</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    <span class=\"token comment\">// 标记已访问</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                    isVisited<span class=\"token punctuation\">[</span>w<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                    <span class=\"token comment\">// 加入队列</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    queue<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token comment\">// 以 u 为前驱节点找 w 后面的下一个邻接节点</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                w <span class=\"token operator\">=</span> <span class=\"token function\">getNextNeighbor</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">// 遍历所有节点，都进行广度优先搜索</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        isVisited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 图中常用的方法</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// 返回节点个数</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumOfVertex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 得到边的数目</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNumEdges</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">return</span> numOfEdges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 返回节点 i 对应下标的值 (0 -> \"A\") (1 -> \"B\") (2 -> \"C\")</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getValueByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">return</span> vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">// 返回 v1 和 v2 的权值</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token comment\">// 显示图对应的矩阵</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     * 插入节点</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>     * @param vertex</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> vertex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        vertexList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>vertex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     * 添加边</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>     * @param v1     表示点的下标，即是第几个顶点</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     * @param v2     第二个顶点对应的下标</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     * @param weight 表示关联</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        edges<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        numOfEdges<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">// 创建图对象</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token class-name\">Graph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Graph</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token comment\">// 循环的添加顶点</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> vertexValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token comment\">// 添加边</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">insertEdge</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token comment\">// 输出邻接矩阵</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------深度遍历-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------广度遍历-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        graph<span class=\"token punctuation\">.</span><span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<ul>\n<li>深度优先遍历</li>\n</ul>\n<pre><code>[0, 1, 1, 0, 0, 0, 0, 0]\n[1, 0, 0, 1, 1, 0, 0, 0]\n[1, 0, 0, 0, 0, 1, 1, 0]\n[0, 1, 0, 0, 0, 0, 0, 1]\n[0, 1, 0, 0, 0, 0, 0, 1]\n[0, 0, 1, 0, 0, 0, 1, 0]\n[0, 0, 1, 0, 0, 1, 0, 0]\n[0, 0, 0, 1, 1, 0, 0, 0]\n-----------------深度遍历-----------------\n1\n2\n4\n8\n5\n3\n6\n7\n</code></pre>\n<ul>\n<li>广度优先遍历</li>\n</ul>\n<pre><code>[0, 1, 1, 0, 0, 0, 0, 0]\n[1, 0, 0, 1, 1, 0, 0, 0]\n[1, 0, 0, 0, 0, 1, 1, 0]\n[0, 1, 0, 0, 0, 0, 0, 1]\n[0, 1, 0, 0, 0, 0, 0, 1]\n[0, 0, 1, 0, 0, 0, 1, 0]\n[0, 0, 1, 0, 0, 1, 0, 0]\n[0, 0, 0, 1, 1, 0, 0, 0]\n-----------------广度遍历-----------------\n1\n2\n3\n4\n5\n6\n7\n8\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E5%A4%9A%E8%B7%AF%E6%9F%A5%E6%89%BE%E6%A0%91/",
            "title": "数据结构与算法-多路查找树",
            "date_published": "2024-01-05T01:16:34.114Z",
            "content_html": "<h2 id=\"多路查找树\"><a class=\"anchor\" href=\"#多路查找树\">#</a> 多路查找树</h2>\n<p><a href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%8EB%E6%A0%91\">二叉树与 B 树</a></p>\n<p><a href=\"#%E6%A0%91\">树</a></p>\n<p>[B 树，B+ 树，B <code>*</code>  树](#B 树，B+ 树，B <code>*</code>  树)</p>\n<hr />\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t<strong>钢达姆机器人</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/%E9%92%A2%E8%BE%BE%E5%A7%86%E6%9C%BA%E5%99%A8%E4%BA%BA.png\" alt=\"钢达姆机器人\" /></p>\n<h3 id=\"二叉树与b树\"><a class=\"anchor\" href=\"#二叉树与b树\">#</a> 二叉树与 B 树</h3>\n<p>二叉树的问题分析</p>\n<p>二叉树的操作效率较高，但是也存在问题，请看下面的二叉树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711154532431.png\" alt=\"image-20230711154532431\" /></p>\n<p>层数：5</p>\n<p>节点数量：31</p>\n<ul>\n<li>计算方式：2 ^ 5<sup> 层数</sup> - 1 = 31</li>\n</ul>\n<ol>\n<li><mark>二叉树需要加载到内存的</mark>，如果二叉树的<mark>节点少</mark>，<mark>没</mark>有<mark>什么问题</mark>，但是如果二叉树的<mark>节点很多</mark> (比如 1 亿)，就<mark>存在</mark>如下<mark>问题</mark>：</li>\n<li><strong>问题 1</strong>：在<mark>构建二叉树时</mark>，需要<mark>多次进行  <code>i/o</code>  操作</mark> (海量数据存在<mark>数据库</mark>或<mark>文件</mark>中)，节点海量，<mark>构建二叉树时，速度有影响</mark>。</li>\n<li><strong>问题 2</strong>：<mark>节点海量</mark>，也会造成二叉树的<mark>高度很大</mark>，会<mark>降低操作速度</mark>。</li>\n</ol>\n<h4 id=\"多叉树\"><a class=\"anchor\" href=\"#多叉树\">#</a> 多叉树</h4>\n<ol>\n<li>在 &lt;font style=&quot;color:red&quot;&gt; 二叉树中 &lt;/font&gt;，每个节点有 &lt; font style=&quot;color:red&quot;&gt; 数据项 &lt;/font&gt;，&lt;font style=&quot;color:red&quot;&gt; 最多有两个子节点 &lt;/font&gt;。如果<mark>允许每个节点可以有更多的数据项</mark>和<mark>更多的子节点</mark>，就是<mark>多叉树</mark> (multiway tree)</li>\n<li>后面讲解的 2 - 3 树，2 - 3 - 4 树就是多叉树，<mark>多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化</mark>。</li>\n<li>举例说明 (下面 2 - 3 树就是一颗多叉树)</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711155922937.png\" alt=\"image-20230711155922937\" /></p>\n<p>多叉树中，如果一个节点中存在了三个分叉则称为 <mark>3 节点</mark>。如果是两个分叉则称为 <mark>2 节点</mark>。</p>\n<h4 id=\"b树的基本介绍\"><a class=\"anchor\" href=\"#b树的基本介绍\">#</a> B 树的基本介绍</h4>\n<p>B 树通过重新组织节点，降低树的高度，并减少  <code>i/o</code>  读写次数来提升效率。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711161106696.png\" alt=\"image-20230711161106696\" /></p>\n<p>上图说明：</p>\n<ul>\n<li>\n<p>一个 <strong>○</strong> 代表一个数项</p>\n</li>\n<li>\n<p>一整个 <strong>○ ○ ○</strong> 的集合代表一个节点</p>\n</li>\n</ul>\n<p><strong>优点理解</strong>：</p>\n<ul>\n<li>\n<p>降低树的高度：</p>\n<p>可以看到，一个节点中有很多数据项，就能大大减少节点数量，从而降低树的高度</p>\n</li>\n<li>\n<p>减少  <code>I/O</code>  读写次数</p>\n<p>文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页 (页的大小通常为 4K)，这样每个节点只需要一次  <code>i/o</code>  就可以完全载入。</p>\n<p>这样说，你可能没有概念，举个例子：将树的度 M 设置为 1024 ，在 600 亿个元素中最多只需要 4 次  <code>i/o</code>  操作就可以读取到想要的元素，B 树 (B+) 宽泛应用于文件存储系统以及数据库系统中。</p>\n<p>什么是 <strong>度</strong>？</p>\n</li>\n<li>\n<p>节点的度：</p>\n<p>一个节点下的子树节点个数就是 节点的度。</p>\n</li>\n<li>\n<p>树的度：</p>\n<p>指一颗树中 ，节点的度最大的哪一个值。</p>\n</li>\n</ul>\n<h3 id=\"树\"><a class=\"anchor\" href=\"#树\">#</a> 树</h3>\n<h4 id=\"2-3-树基本介绍\"><a class=\"anchor\" href=\"#2-3-树基本介绍\">#</a> 2 - 3 树基本介绍</h4>\n<p><strong>2 - 3 树 是最简单的 B 树结构，具有如下特点</strong>：</p>\n<ol>\n<li>\n<p><mark>2 - 3 树的所有叶子节点都在同一层</mark> (<strong>只要是 B 树都满足这个条件，就是满树</strong>)</p>\n</li>\n<li>\n<p>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点</p>\n<p>不能只有一个节点，<mark>说得通俗点就是不能比父节点的节点还少</mark></p>\n</li>\n<li>\n<p>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点</p>\n<p>不能有二个子节点，一个子节点，<mark>说得通俗点就是不能比父节点的节点还少</mark></p>\n</li>\n<li>\n<p><mark>2 - 3 树</mark>是<mark>由二节点</mark>和<mark>三节点构成的树</mark>。</p>\n</li>\n</ol>\n<h5 id=\"2-3-树构建图解\"><a class=\"anchor\" href=\"#2-3-树构建图解\">#</a> 2-3 树构建图解</h5>\n<p>对数列 {16, 24, 12, 32, 14, 26, 34, 10, 8, 28, 38, 20} 构建成一个 2-3 树，那么它构建的规则要满足前面说的特点。下面进行图解后，你就明白，上面的特点是如何限制的。</p>\n<p>有几个额外的注意事项：</p>\n<ol>\n<li>一个节点中，最多只允许放 2 个数据。</li>\n<li>构建的树必须是有序的，也就是按照二叉排序 (BST) 的要求构建有序的树</li>\n</ol>\n<p>下面是图解步骤：</p>\n<ol>\n<li>添加 16,24</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711173129240.png\" alt=\"image-20230711173129240\" /></p>\n<p>添加 16 时，没有数据，直接新建一个节点，放进去。</p>\n<p>添加 24 时，发现有一个节点了，并且比 16 大， 此时该节点中只有一个数据，则将 24 放在 16 的右边。</p>\n<ol start=\"2\">\n<li>添加 12</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711173239395.png\" alt=\"image-20230711173239395\" /></p>\n<p>此时会发现，12 比 16 小，本来应该放在  16 的左边。此时发现这个节点 <strong>已经有两个数据了</strong>，那么就只能放在 <strong>左子节点</strong>。</p>\n<p>如果直接将 12 放到   <code>16 , 24</code>  的左节点，就会破坏 2-3 树的条件：2  节点 ，要么没有子节点，要么有两个节点。</p>\n<p>那么此时就只能将  <code>16,24</code>   这个节点进行拆分。如上图： 24  变成 16 的右节点，12 变成  16  的左节点。</p>\n<p>这时就满足了 2-3 树 的特性。</p>\n<ol start=\"3\">\n<li>添加 32</li>\n</ol>\n<p>这个就简单了，以现在的树结构，可以直接添加到 24 的 右边 ，变成  <code>24,32</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711173649665.png\" alt=\"image-20230711173649665\" /></p>\n<ol start=\"4\">\n<li>添加 14</li>\n</ol>\n<p>这个也简单，直接添加到 12 的右边，变成  <code>12,14</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711173735064.png\" alt=\"image-20230711173735064\" /></p>\n<ol start=\"5\">\n<li>添加 26</li>\n</ol>\n<p>此时应该添加到  <code>24,32</code>  的中间，由于一个节点只能添加两个数据，那么就需要拆分。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711173823070.png\" alt=\"image-20230711173823070\" /></p>\n<p>为了满足 B 树特点，发现上层的  <code>16</code>  只有一个数，那么就补足它。组成  <code>16,26</code> 。</p>\n<p>因为此时  <code>24,32</code>  <strong>这个节点，不满足 BST 的排序了</strong>，24 是小于 26 的。只能 32 满足。</p>\n<p><strong>拆完上层，再拆本层</strong>：由于 24 介于  <code>16,24</code>  之间，<strong>则将它安排在 3 节点中的中间节点</strong>，  <code>24,32</code>  把 24 拆分出去了，只剩下  <code>32</code>  ，此时完全满足 B 树的特点</p>\n<ol start=\"6\">\n<li>添加 34</li>\n</ol>\n<p>此时就简单了，添加到  <code>32,34</code>  中。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711174145067.png\" alt=\"image-20230711174145067\" /></p>\n<ol start=\"7\">\n<li>添加 10</li>\n</ol>\n<p>此时应该添加到  <code>12,14</code>  的左侧，但是不满足条件：一个节点最多只能装 2 个数据。</p>\n<p>放到  <code>12,14</code>  的左节点，也不满足条件：所有叶子节点必须在同一层，也不满足 2-3 树 节点的 数量要求。</p>\n<p>那么此时就需要拆分，先看它们上层  <code>16,26</code>  是满 的，如何做呢？看下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711174344071.png\" alt=\"image-20230711174344071\" /></p>\n<p>左侧的拆分图，上面我们分析过了，不满足 B 树要求，那么就需要拆分成右图这样：</p>\n<ul>\n<li></li>\n</ul>\n<ol>\n<li>\n<p>将  <code>12,14</code>  中的 14 拆分成 右子节点 ，10 挂在 左节点。</p>\n</li>\n<li>\n<p>此时不满足 B 树要求的，则将  <code>16,26</code>  中的 26 拆分成 右子节点。</p>\n</li>\n<li>\n<p><code>24</code>  这个节点由于上层被拆分了，不满足在中间节点了。调整它的位置</p>\n</li>\n<li>\n<p>原来的  <code>32,34</code>  节点调整为  <code>16</code>  的有节点。</p>\n</li>\n<li>\n<p>添加 8</p>\n<p>此时很简单，组成  <code>8,10</code>  即可</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711174809201.png\" alt=\"image-20230711174809201\" /></p>\n</li>\n<li>\n<p>添加 28</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711174827823.png\" alt=\"image-20230711174827823\" /></p>\n<p>这里有个小问题，此时 28 不是应该加在  <code>26,28</code>  吗？难道说还有一个规则？</p>\n<ul>\n<li><strong>只有一个数据的节点</strong>，下面只允许 <strong>最多右 2 个节点，要么没有</strong></li>\n<li><strong>有 2 个数据的节点</strong>，下面只允许 <strong>最多 3 个节点，要么没有</strong></li>\n</ul>\n<ol start=\"10\">\n<li>添加 38</li>\n</ol>\n<p>此时就简单，直接组成  <code>34,38</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711175119632.png\" alt=\"image-20230711175119632\" /></p>\n<ol start=\"11\">\n<li>添加 20</li>\n</ol>\n<p>这个也简单，直接组成  <code>20,24</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711175153140.png\" alt=\"image-20230711175153140\" /></p>\n<h5 id=\"2-3树添加规则总结\"><a class=\"anchor\" href=\"#2-3树添加规则总结\">#</a> 2-3 树添加规则总结</h5>\n<p>满足如下特点：</p>\n<ol>\n<li>\n<p>所有  <mark>叶子节点</mark>  都在同一层</p>\n<p>只要是 B 树都满足这个条件，就是<mark>满树</mark>。</p>\n</li>\n<li>\n<p>有两个子节点的节点 叫  <mark>二节点</mark></p>\n<p>二节点要么  <mark>没有子节点</mark> ，要么  <mark>必须有两个子节点</mark>。</p>\n</li>\n<li>\n<p>有三个子节点的节点叫  <mark>三节点</mark></p>\n<p>三节点要么  <mark>没有子节点</mark>，要么  <mark>必须有三个子节点</mark>。</p>\n</li>\n<li>\n<p>2-3 树 是由 <mark>二节点</mark>  和  <mark>三节点</mark> 构成的树</p>\n</li>\n<li>\n<p>构建的树，要满足二叉排序树（BST）的顺序。</p>\n</li>\n<li>\n<p><mark>一个节点中，最多只允许放 2  个数据</mark>。</p>\n</li>\n<li>\n<p><mark>只有一个数据的节点</mark>，下面只允许 <mark>最多有 2 个节点，要么没有</mark></p>\n</li>\n<li>\n<p><mark>有 2 个数据的节点</mark>，下面只允许 <mark>最多有 3 个节点，要么没有</mark></p>\n</li>\n</ol>\n<p>其它说明</p>\n<p>除了 23 树，还有 234 树等，概念和 23 树类似，也是一种 B 树。如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711190603750.png\" alt=\"image-20230711190603750\" /></p>\n<h3 id=\"b树b-树b树\"><a class=\"anchor\" href=\"#b树b-树b树\">#</a> B 树，B+ 树，B <code>*</code>  树</h3>\n<h4 id=\"b树的介绍\"><a class=\"anchor\" href=\"#b树的介绍\">#</a> B 树的介绍</h4>\n<p><strong>B-tree</strong> 树即 <mark>B 树</mark>，<strong>B</strong> 即<mark> Balanced</mark>，平衡的意思。有人把 B-tree 翻译成 B - 树，容易让人产生<mark>误解</mark>。会以为 B - 树是一种树，而 B 树又是另一种树。实际上，<mark>B-tree 就是指的 B 树</mark>。</p>\n<p>前面已经介绍了 2-3 树 和 2-3-4 树，它们就是 B 树 (英语: B-tree 也写成 B - 树)，这里我们再做一个说明，我们在学习 MySQL 时，经常听到说某种类型的索引是基于 B 树或者 B + 树的，如图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711191024778.png\" alt=\"image-20230711191024778\" /></p>\n<p><strong>B 树的说明</strong>:</p>\n<ol>\n<li>B 树的阶：节点的最多子节点个数。比如 2-3 树的阶是 3，2-3-4 树的阶是 4</li>\n<li>B - 树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点</li>\n<li>关键字集合分布在整颗树中，即叶子节点和非叶子节点都存放数据.</li>\n<li>搜索有可能在非叶子结点结束</li>\n<li>其搜索性能等价于在关键字全集内做一次二分查找</li>\n</ol>\n<h4 id=\"b树的介绍-2\"><a class=\"anchor\" href=\"#b树的介绍-2\">#</a> B + 树的介绍</h4>\n<p>B + 树是 B 树的变体，也是一种多路搜索树。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711194503904.png\" alt=\"image-20230711194503904\" /></p>\n<p><strong>B + 树的说明</strong>:</p>\n<ol>\n<li>B + 树的搜索与 B 树也基本相同，区别是 B + 树只有达到叶子结点才命中（B 树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找</li>\n<li>所有<strong>关键字都出现在叶子结点的链表中</strong>（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字 (数据) 恰好是有序的。</li>\n<li>不可能在非叶子结点命中</li>\n<li>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层</li>\n<li>更适合文件索引系统</li>\n<li>B 树和 B + 树各有自己的应用场景，不能说 B + 树<strong>完全比</strong> B 树好，反之亦然.</li>\n</ol>\n<h4 id=\"b树的介绍-3\"><a class=\"anchor\" href=\"#b树的介绍-3\">#</a> B 树的介绍</h4>\n<p>B * 树是 B + 树的变体，在 B + 树的非根和非叶子结点再增加指向兄弟的指针。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711195028517.png\" alt=\"image-20230711195028517\" /></p>\n<p><strong>B 树的说明</strong>:</p>\n<ol>\n<li>B * 树定义了非叶子结点关键字个数至少为 (2/3)*M，即块的最低使用率为 2/3，而 B + 树的块的最低使用率为 B + 树的 1/2。</li>\n<li>从第 1 个特点我们可以看出，B * 树分配新结点的概率比 B + 树要低，空间使用率更高</li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%91%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%91%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/",
            "title": "数据结构与算法-树结构实际应用",
            "date_published": "2024-01-05T01:14:54.862Z",
            "content_html": "<h2 id=\"树结构实际应用\"><a class=\"anchor\" href=\"#树结构实际应用\">#</a> 树结构实际应用</h2>\n<h3 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h3>\n<p><strong>堆排序基本介绍</strong></p>\n<ol>\n<li>堆排序是利用<strong>堆</strong>这种数据结构而设计的一种<mark>排序算法</mark>，堆排序是一种<mark>选择排序</mark>，它的<mark>最坏，最好，平均时间复杂度均为 O (nlogn)，它也是不稳定排序</mark>。</li>\n<li>堆是具有以下性质的<mark>完全二叉树</mark>：<mark>每个结点的值</mark>都<mark>大于</mark>或<mark>等于</mark>其<mark>左右孩子结点的值</mark>，称为<mark>大顶堆</mark>\n<ul>\n<li>&lt;strong style=&quot;color:red&quot;&gt; 注意 &lt;/strong&gt;: 没有要求<mark>结点</mark>的<mark>左孩子的值</mark>和<mark>右孩子的值</mark>的<mark>大小关系</mark>。</li>\n</ul>\n</li>\n<li><mark>每个结点的值</mark>都<mark>小于</mark>或<mark>等于</mark>其<mark>左右孩子结点的值</mark>，称为<mark>小顶堆</mark></li>\n</ol>\n<h4 id=\"大顶堆举例说明\"><a class=\"anchor\" href=\"#大顶堆举例说明\">#</a> 大顶堆举例说明</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704170408717.png\" alt=\"image-20230704170408717\" /></p>\n<p>我们对堆中的结点按层进行编号，映射到数组中就是下面这个样子:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704170435750.png\" alt=\"image-20230704170435750\" /></p>\n<p><strong>大顶堆特点</strong>： <code>arr[i] &gt;= arr[2\\*i+1] &amp;&amp; arr[i] &gt;= arr[2\\*i+2]</code></p>\n<ul>\n<li>i 对应第几个节点，i 从 0 开始编号</li>\n</ul>\n<h4 id=\"小顶堆举例说明\"><a class=\"anchor\" href=\"#小顶堆举例说明\">#</a> 小顶堆举例说明</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704170624790.png\" alt=\"image-20230704170624790\" /></p>\n<p><strong>小顶堆</strong>： <code>arr[i] &lt;= arr[2\\*i+1] &amp;&amp; arr[i] &lt;= arr[2\\*i+2]</code></p>\n<ul>\n<li>i 对应第几个节点，i 从 0 开始编号</li>\n</ul>\n<ol start=\"6\">\n<li>一般<mark>升序采用大顶堆</mark>，<mark>降序采用小顶堆</mark></li>\n</ol>\n<p><strong>堆排序基本思想</strong></p>\n<ol>\n<li>将待排序序列构造成一个大顶堆</li>\n<li>此时，整个序列的最大值就是堆顶的根节点。</li>\n<li>将其与末尾元素进行交换，此时末尾就为最大值。</li>\n<li>然后将剩余 n-1 个元素重新构造成一个堆，这样会得到 n 个元素的次小值 &lt;font style=&quot;color:red&quot;&gt;<sup> 第二小的值</sup> &lt;/font&gt;。如此反复执行，便能得到一个有序序列了。</li>\n</ol>\n<p>可以看到在构建大顶堆的过程中，元素的个数逐渐减少，最后就得到一个有序序列了.</p>\n<p><strong>堆排序步骤图解说明</strong></p>\n<p><strong>步骤一 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)</strong>。</p>\n<ol>\n<li>假设给定无序序列结构如下</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171102845.png\" alt=\"image-20230704171102845\" /></p>\n<ol start=\"2\">\n<li>此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点  <code>arr.length/2-1=5/2-1=1</code> ，也就是下面的 6 结点），从左至右，从下至上进行调整。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171121981.png\" alt=\"image-20230704171121981\" /></p>\n<ol start=\"3\">\n<li>找到第二个非叶节点 4，由于 [4,9,8] 中 9 元素最大，4 和 9 交换。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171144931.png\" alt=\"image-20230704171144931\" /></p>\n<ol start=\"4\">\n<li>这时，交换导致了子根 [4,5,6] 结构混乱，继续调整，[4,5,6] 中 6 最大，交换 4 和 6。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171207684.png\" alt=\"image-20230704171207684\" /></p>\n<p>此时，我们就将一个无序序列构造成了一个大顶堆。</p>\n<p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换</strong>。</p>\n<ol>\n<li>将堆顶元素 9 和末尾元素 4 进行交换</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171233081.png\" alt=\"image-20230704171233081\" /></p>\n<ol start=\"2\">\n<li>重新调整结构，使其继续满足堆定义</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171255536.png\" alt=\"image-20230704171255536\" /></p>\n<ol start=\"3\">\n<li>再将堆顶元素 8 与末尾元素 5 进行交换，得到第二大元素 8.</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171316338.png\" alt=\"image-20230704171316338\" /></p>\n<ol start=\"4\">\n<li>后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230704171334035.png\" alt=\"image-20230704171334035\" /></p>\n<p><strong>再简单总结下堆排序的基本思路：</strong></p>\n<ol>\n<li><strong>将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆；</strong></li>\n<li><strong>将堆顶元素与末尾元素交换，将最大元素 &quot;沉&quot; 到数组末端；</strong></li>\n<li><strong>重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整 + 交换步骤，直到整个序列有序。</strong></li>\n</ol>\n<p>要求：给你一个数组 {4,6,8,5,9} , 要求使用堆排序法，将数组升序排序。</p>\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/416:10</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeapSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 堆排序方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        adjustHeap(arr,1,arr.length);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//        System.out.println (\"第一次\"+ Arrays.toString (arr));//4, 9, 8, 5, 6</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//        adjustHeap(arr,0,arr.length);</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        System.out.println (\"第二次\"+Arrays.toString (arr));//9,6,8,5,4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">adjustHeap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         * 2. 将堆顶元素与末尾元素交换，将最大元素 \"沉\" 到数组末端</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         * 3. 重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整 + 交换步骤，直到</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         * 整个序列有序</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token function\">adjustHeap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 将一个数组 (二叉树)，调整成一个大顶堆</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 功能：完成将以 i 对应的非叶子结点的树调整成大顶堆</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     * 举例：int [] arr = &#123;4,6,8,5,9&#125;; => i = 1 => adjustHeap => 得到 &#123;4,9,8,5,6&#125;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 如果我们再次调用 adjustHeap 传入的是 i = 0 => 得到 &#123;4,9,8,5,6&#125; => &#123;9,6,8,5,4&#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * @param arr 待调整的数组</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * @param i 数组中的下标</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * @param length 大小</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">adjustHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 先取出当前元素的值，保存在临时变量</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         * 开始调整</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         * 说明：</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         * 1.k = i * 2 + 1 k 是 i 节点的左子节点</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span>k <span class=\"token operator\">=</span> k <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">// 说明 左子节点的值小于右子节点的值</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token comment\">//k 指向右子节点</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                k <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 如果子节点大于父节点</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token comment\">// 把较大的值赋值给当前节点</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token comment\">//i 指向 k, 继续循环比较</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 当 for 循环结束后，我们已经将 i 为父节点的树的最大值，放在了 最顶 (局部)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 将 temp 值放到调整后的位置</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"赫夫曼树\"><a class=\"anchor\" href=\"#赫夫曼树\">#</a> 赫夫曼树</h3>\n<p><strong>基本介绍</strong></p>\n<ol>\n<li>给定 n 个权值作为 n 个 <strong>叶子结点</strong> ，构造一颗二叉树，若该树的<strong>带权路径长度 (wpl) 达到最小</strong>，称这样的二叉树为<strong>最优二叉树</strong>，也称为<strong>赫夫曼树 (HuffmanTree)</strong>，还有的书翻译为<strong>霍夫曼树</strong>。</li>\n<li>赫夫曼树是<strong>带权路径长度最短的树</strong>，<strong>权值较大的节点离根较近</strong>。</li>\n</ol>\n<p><strong>赫夫曼树几个重要概念和举例说明</strong></p>\n<ol>\n<li><strong>路径和长度</strong>：在一颗树中，从一个节点往下可以达到的孩子或孙子节点之间的通路，称为路径。通路中分支的数目称为路径长度。若规定根节点的层数为 1，则从根节点到第 L 层节点的路径长度为 L-1。</li>\n<li><strong>节点的权及带权路径长度</strong>：若将树中节点赋给一个有着某种含义的数值，则这个数值称为该节点的权。<strong>节点的带权路径长度为</strong>：从根节点到该节点之间的路径长度与该节点的权的乘积。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230705194848316.png\" alt=\"image-20230705194848316\" /></p>\n<ol start=\"3\">\n<li>树的带权路径长度：树的带权路径长度规定为所有 <strong>叶子结点</strong> 的带权路径长度之和，记为 WPL (weighted path length)，权值越大的节点离根节点越近的二叉树才是最优二叉树。</li>\n<li>WPL 最小的就是<strong>赫夫曼树</strong> 下图中 - 中间的就是赫夫曼树</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230705195146344.png\" alt=\"image-20230705195146344\" /></p>\n<p><strong>赫夫曼树创建思路图解</strong></p>\n<p>给你一个数列 {13,7,8,3,29,6,1} ，要求转成一颗赫夫曼树</p>\n<p>思路分析示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230705195844840.png\" alt=\"image-20230705195844840\" /></p>\n<p><strong>构成赫夫曼树的步骤</strong>：</p>\n<ol>\n<li>从小到大进行排序，将每一个数据，每个数据都是一个节点，每个节点可以看成是一颗最简单的二叉树</li>\n<li>取出根节点权值最小的两颗二叉树</li>\n<li>组成一颗新的二叉树，该新的二叉树的根节点的权值是前两棵二叉树根节点权值的和</li>\n<li>再将这棵新的二叉树，以根节点的权值大小再次排序，不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/519:01</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Node</span> huffmanTree <span class=\"token operator\">=</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span>huffmanTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赫夫曼二叉树数据为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 创建赫夫曼树方法</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @param arr</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         * 1. 遍历 arr 数组</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         * 2. 将 arr 的每个元素构成一个 Node</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * 3. 将 Node 放入到 ArrayList 中</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 排序从小打大</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 取出节点权值最小的两棵二叉树</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">//(1) 取出权值最小的节点 (二叉树)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">Node</span> leftNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">//(2) 取出第二小的节点 (二叉树)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">Node</span> rightNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">//(3) 构建成一棵新的二叉树</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> rightNode<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">//(4) 从 ArrayList 删除处理过的二叉树</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">//(5) 将 parent 加入到 list</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 返回赫夫曼树的 root 节点</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 创建节点类</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     * value: 节点权值</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * left: 指向左子节点</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * right: 指向右子节点</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"赫夫曼编码\"><a class=\"anchor\" href=\"#赫夫曼编码\">#</a> 赫夫曼编码</h4>\n<p><strong>基本介绍</strong>：</p>\n<ol>\n<li>赫夫曼编码也翻译为 <strong>哈夫曼编码 (HuffmanCoding)</strong> ，又称霍夫曼编码，是一种编码方式，属于一种程序算法</li>\n<li>赫夫曼编码是赫夫曼树在电讯通信中的经典的应用之一。</li>\n<li>赫夫曼编码广泛地用于数据文件压缩，其压缩率通常在 20% ~ 90% 之间</li>\n<li>赫夫曼编码是可变字长编码 (VLC) 的一种，Huffman 与 1952 年提出一种编码方法，称之为最佳编码</li>\n</ol>\n<p>原理剖析：</p>\n<ul>\n<li>\n<p>通信领域中信息的处理方式 1- 定长编码</p>\n<ul>\n<li>\n<p>i like like like java do you like a java    // 共 40 个字符 (包括空格)</p>\n</li>\n<li>\n<p>// 对应 Ascii 码</p>\n<blockquote>\n<p>105 32 108 105 107 101 32 108 105 107 101 32 108 105 107 101 32 106 97 118 97 32 100 111 32 121 111 117 32 108 105 107 101 32 97 32 106 97 118 97</p>\n</blockquote>\n</li>\n<li>\n<p>// 对应的二进制</p>\n<blockquote>\n<p>01101001 00100000 01101100 01101001 01101011 01100101 00100000 01101100 01101001 01101011 01100101 00100000 01101100 01101001 01101011 01100101 00100000 01101010 01100001 01110110 01100001 00100000 01100100 01101111 00100000 01111001 01101111 01110101 00100000 01101100 01101001 01101011 01100101 00100000 01100001 00100000 01101010 01100001 01110110 01100001</p>\n</blockquote>\n</li>\n<li>\n<p>按照二进制来传递信息，总的长度是 359  (包括空格)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>通信领域中信息的处理方式 2 - 变长编码</p>\n<ul>\n<li>\n<p>i like like like java do you like a java    // 共 40 个字符 (包括空格)</p>\n</li>\n<li>\n<p>d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5  :9 // 各个字符对应的个数</p>\n<p>0= , 1=a, 10=i, 11=e, 100=k, 101=l, 110=o, 111=v, 1000=j, 1001=u, 1010=y, 1011=d</p>\n</li>\n<li>\n<p><mark>说明</mark>：按照各个字符出现的次数进行编码，原则是出现次数越多的，则编码越小，比如 空格出现了 9 次， 编码为 0 , 其它依次类推.</p>\n</li>\n<li>\n<p>按照上面给各个字符规定的编码，则我们在传输 &quot;i like like like java do you like a java&quot; 数据时，编码就是</p>\n<p><code>10010110100... </code></p>\n</li>\n<li>\n<p>・字符的编码都不能是其他字符编码的前缀，符合此要求的编码叫做前缀编码， 即不能匹配到重复的编码 (这个在<strong>赫夫曼编码</strong>中，我们还要进行举例说明，不捉急)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>通信领域中信息的处理方式 3 - 赫夫曼编码</p>\n<ul>\n<li>\n<p>d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5  :9 // 各个字符对应的个数</p>\n<p>按照上面字符出现的次数构建一颗赫夫曼树，次数作为权值.(图后)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230706151354255.png\" alt=\"image-20230706151354255\" /></p>\n<p>// 根据赫夫曼树，给各个字符</p>\n<p>// 规定编码 ， 向左的路径为 0</p>\n<p>// 向右的路径为 1 ， 编码如下:</p>\n<p>o: 1000  u: 10010 d: 100110 y: 100111 i: 101</p>\n<p>a : 110   k: 1110  e: 1111    j: 0000    v: 0001</p>\n<p>l: 001     : 01</p>\n<p>按照上面的赫夫曼编码，我们的 &quot;i like like like java do you like a java&quot;  字符串对应的编码为 (注意这里我们使用的无损压缩)</p>\n<p>1010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110</p>\n<p><strong>长度为</strong> ： 133</p>\n<p><mark>说明</mark>:</p>\n<ol>\n<li>原来长度是 359 , 压缩了 (359-133) / 359 = 62.9%</li>\n<li>此编码满足前缀编码，即字符的编码都不能是其他字符编码的前缀。不会造成匹配的多义性</li>\n</ol>\n<p><mark>注意</mark>:, 这个赫夫曼树根据排序方法不同，也可能不太一样，<strong>这样对应的赫夫曼编码也不完全一样</strong>，但是 wpl 是一样的，都是最小的，比如：如果我们让每次生成的新的二叉树总是排在权值相同的二叉树的最后一个，则生成的二叉树为:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230706151550342.png\" alt=\"image-20230706151550342\" /></p>\n<h4 id=\"最佳实践-数据压缩创建赫夫曼树\"><a class=\"anchor\" href=\"#最佳实践-数据压缩创建赫夫曼树\">#</a> 最佳实践 - 数据压缩 (创建赫夫曼树)</h4>\n<p>将给出的一段文本，比如 &quot;i like like like java do you like a java&quot; ， 根据前面的讲的赫夫曼编码原理，对其进行数据压缩处理 ，形式如 &quot;1010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110&quot;</p>\n<p>步骤 1：根据赫夫曼编码压缩数据的原理，需要创建 &quot;i like like like java do you like a java&quot; 对应的赫夫曼树.</p>\n<p>思路：前面已经分析过了，而且我们已然讲过了构建赫夫曼树的具体实现。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>huffmancode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanCode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"i like like like java do you like a java\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 转成 byte 数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 进行赫夫曼编码压缩</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token comment\">// 先统计每一个 byte 出现的次数，并放入一个集合中</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token comment\">// 创建一颗赫夫曼树</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token comment\">// 测试一下 赫夫曼树 是否创建成功！</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token comment\">// 输出 root 的 值</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t * @param bytes byte 数组，就是内容字符串对应的 byte 数组</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t * @return List&lt;Node> 形式如 &#123;Node &#123;'i', 3&#125;, Node &#123;'a', 5&#125;...&#125;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">// 存储每一个 byte 出现了多少次。</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> counts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 统计每一个 byte 出现的次数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token operator\">:</span>bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\tcounts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\tcounts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">// 把每一个键值对转为一个 node 对象，并加入到 nodes 集合</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span>counts<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t * 创建赫夫曼树</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t * @param nodes 传入的是一个 node 集合</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t * @return 返回赫夫曼树的根节点</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token comment\">// 循环处理，</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 保证可以 get (0) 和 get (1)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token comment\">// 说明</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t<span class=\"token comment\">// 1. 需要 nodes 集合存放的对象实现 Comparable 接口</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取出来权值最小的两个二叉树</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span> left <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取出最权值次小的二叉树，作为新的二叉树的右子树</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span> right <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t<span class=\"token comment\">// 创建一颗新的二叉树 ， 新的节点 data 没有，权值为两颗子树权值和</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\t<span class=\"token comment\">// 把之前取出来的两颗二叉树设置为新创建的二叉树的子树</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\tparent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\tparent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t<span class=\"token comment\">// 把取出来的两个二叉树移除</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t\t<span class=\"token comment\">// 放入原来的二叉树集合中</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token comment\">// 返回的节点就是赫夫曼树的根节点.</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">// 实现 Comparable&lt;Node> 接口是让 Node 对象可以进行排序</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数据本身，char 本质就是 Byte</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以理解成权值，即字符出现的次数</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token comment\">// 这样写是从小到大排序</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Node [data=\"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\", weight=\"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先输出父节点</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"最佳实践-数据压缩生成赫夫曼编码和赫夫曼编码后的数据\"><a class=\"anchor\" href=\"#最佳实践-数据压缩生成赫夫曼编码和赫夫曼编码后的数据\">#</a> 最佳实践 - 数据压缩 (生成赫夫曼编码和赫夫曼编码后的数据)</h4>\n<p>我们已经生成了 赫夫曼树，下面我们继续完成任务</p>\n<ol>\n<li>生成赫夫曼树对应的赫夫曼编码，如下表:  =01 a=100 d=11000 u=11001 e=1110 v=11011 i=101 y=11010 j=0010 k=1111 l=000 o=0011</li>\n<li>使用赫夫曼编码来生成赫夫曼编码数据，即按照上面的赫夫曼编码，将 &quot;i like like like java do you like a java&quot; 字符串生成对应的编码数据，形式如下.<br />\n1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100</li>\n</ol>\n<p><strong>思路</strong>：前面已经分析过了，而且我们讲过了生成赫夫曼编码的具体实现。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>huffmancode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collections</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanCode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"i like like like java do you like a java\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 转成 byte 数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 进行赫夫曼编码压缩</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t * 将 content 进程赫夫曼编码，返回的就是 按 赫夫曼编码后的 byte 数组</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t * 比如: \"i like like like java do you like a java\" => </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t * 101010011011110111101001101111011110100..  但是 是按照 byte 数组来存放的，每 8 位 放入到一个 byte 中！</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t * 比如：huffmanBytes [0] = -41 (10101001)  huffmanBytes [1] = -61 (10111101) ...</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t * @param bytes</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t * @return</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 先统计每一个 byte 出现的次数，并放入一个集合中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">// 创建一颗赫夫曼树</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span> root <span class=\"token operator\">=</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token comment\">// 测试一下 赫夫曼树 是否创建成功！</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">// 输出 root 的 值</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(root + \" \" + root.left + \" \" + root.right);</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">// 创建一个赫夫曼编码表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">// 测试一把，看看 \t赫夫曼编码表 是否正确</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">//32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">//System.out.println(huffmanCodes);</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 遍历一把</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> keySet <span class=\"token operator\">=</span> huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span> key<span class=\"token operator\">:</span> keySet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t<span class=\"token comment\">// 对 bytes 进行哈夫曼编码，返回的是 一个 byte 数组</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token comment\">//\"i like like like java do you like a java\" </span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token comment\">// 对应的 是 \"1010100010111111110..\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token comment\">//huffmanBytes[0] = 10101000 = -88</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">//huffmanBytes[1] = 10111111 = -65</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span>huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token comment\">// 测试一个 </span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>huffmanBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> huffmanBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">// 某个叶子节点存储路径</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token comment\">// 存储赫夫曼编码</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t * 传入赫夫曼树的根节点，返回对应的赫夫曼编码 Map&lt;Byte, String></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t * 即形式如 (和生成的赫夫曼树有关系)： \t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t * \t\t\to: 1000   \tu: 10010  \td: 100110  \t\ty: 100111  \t\ti: 101</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\ta: 110     k: 1110    \te: 1111       \tj: 0000       \tv: 0001</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\tl: 001 \t\t : 01</pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t * @param tree</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t * @return</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\t<span class=\"token comment\">// 处理 root 的左子树</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t<span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t<span class=\"token comment\">// 处理 root 的右子树</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t\t<span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> huffmanCodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t * 该方法会 node 节点的所有叶子节点的赫夫曼编码，并存放在 huffmanCodes 集合中</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t * 其形式如：&#123;32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011&#125;</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t * @param node</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t * @param code</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t * @param stringBuilder</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t\t<span class=\"token class-name\">StringBuilder</span> stringBuilder2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t\tstringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t\t\t\t<span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t\t\t\t<span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t\t\thuffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"113\"></td><td><pre>\t * @param bytes 传入的 \"i like ..\" 对应的字节数组，和 哈夫曼编码表</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>\t * @param huffCodes 返回哈夫曼编码后的 byte []</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t * @return</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t\t<span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t\t<span class=\"token comment\">// 把需要压缩的 byte 数组处理成一个二进制的字符串</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t\t<span class=\"token comment\">//stringBuilder 就是 形式如 \"10101001101111011110...\"</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token operator\">:</span>bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t\t\tstringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"123\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stringBuilder(就是哈夫曼编码后的串)=\"</span> <span class=\"token operator\">+</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>\t\t<span class=\"token comment\">// 定义就是需要多少个 byte 来存储，这样就可以定义 byte [] 的大小了</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>\t\t<span class=\"token comment\">// 也可以一句话 len = (stringBuilder.length ()+7) / 8</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"128\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>\t\t\tlen <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>\t\t\tlen <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>\t\t<span class=\"token comment\">// 用于存储压缩后的 byte</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t\t<span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> by <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>\t\t<span class=\"token comment\">// 记录新 byte 的位置</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> strByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token operator\">></span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t\t\tstrByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t\t\t\tstrByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t\t\t<span class=\"token keyword\">byte</span> byt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>strByte<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t\t\tby<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>byt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t\tindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> by<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t * </pre></td></tr><tr><td data-num=\"153\"></td><td><pre>\t * @param bytes byte 数组，就是内容字符串对应的 byte 数组</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t * @return List&lt;Node> 形式如 &#123;Node &#123;'i', 3&#125;, Node &#123;'a', 5&#125;...&#125;</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>\t\t<span class=\"token comment\">// 存储每一个 byte 出现了多少次。</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> counts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t\t<span class=\"token comment\">// 统计每一个 byte 出现的次数</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token operator\">:</span>bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t\t\t<span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t\t\t\tcounts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t\t\tcounts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t<span class=\"token comment\">// 把每一个键值对转为一个 node 对象，并加入到 nodes 集合</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry<span class=\"token operator\">:</span>counts<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>\t<span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>\t * 创建赫夫曼树</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>\t * @param nodes 传入的是一个 node 集合</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>\t * @return 返回赫夫曼树的根节点</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>\t */</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> nodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>\t\t<span class=\"token comment\">// 循环处理，</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 保证可以 get (0) 和 get (1)</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>\t\t\t<span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t\t\t<span class=\"token comment\">// 说明</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t\t<span class=\"token comment\">// 1. 需要 nodes 集合存放的对象实现 Comparable 接口</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t\t\t<span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取出来权值最小的两个二叉树</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span> left <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取出最权值次小的二叉树，作为新的二叉树的右子树</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span> right <span class=\"token operator\">=</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t\t<span class=\"token comment\">// 创建一颗新的二叉树 ， 新的节点 data 没有，权值为两颗子树权值和</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t\t\t<span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t\t\t<span class=\"token comment\">// 把之前取出来的两颗二叉树设置为新创建的二叉树的子树</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t\tparent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t\t\tparent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t\t\t<span class=\"token comment\">// 把取出来的两个二叉树移除</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t\t\t<span class=\"token comment\">// 放入原来的二叉树集合中</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>\t\t\tnodes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>\t\t<span class=\"token comment\">// 返回的节点就是赫夫曼树的根节点.</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> nodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre></pre></td></tr><tr><td data-num=\"208\"></td><td><pre></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre></pre></td></tr><tr><td data-num=\"211\"></td><td><pre><span class=\"token comment\">// 实现 Comparable&lt;Node> 接口是让 Node 对象可以进行排序</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t<span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数据本身，char 本质就是 Byte</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以理解成权值，即字符出现的次数</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t<span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t<span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>\t\t<span class=\"token comment\">// 这样写是从小到大排序</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"231\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"232\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"Node [data=\"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\", weight=\"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>\t<span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先输出父节点</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"最佳实践-数据解压使用赫夫曼编码解码\"><a class=\"anchor\" href=\"#最佳实践-数据解压使用赫夫曼编码解码\">#</a> 最佳实践 - 数据解压 (使用赫夫曼编码解码)</h4>\n<p>使用赫夫曼编码来解码数据，具体要求是</p>\n<ol>\n<li>前面我们得到了赫夫曼编码和对应的编码 byte [] , 即:[-88, -65, -56, -65, -56, -65, -55, 77<br />\n, -57, 6, -24, -14, -117, -4, -60, -90, 28]</li>\n<li>现在要求使用赫夫曼编码， 进行解码，又<br />\n重新得到原来的字符串 &quot;i like like likejava do you like a java&quot;</li>\n</ol>\n<p><strong>思路</strong>：解码过程，就是编码的一个逆向操作。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/521:26</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanTreeCode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> <span class=\"token string\">\"i like like like java do you like a java\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> contentBytes <span class=\"token operator\">=</span> content<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>contentBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//40</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span>contentBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"压缩后的结果是：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>huffmanCodeBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sourceBytes <span class=\"token operator\">=</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">,</span> huffmanCodeBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"原来的字符串\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>sourceBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 分步过程</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        List&lt;Node01> list = getNodes (contentBytes);</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        System.out.println (list);</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        System.out.println (\"---------------- 赫夫曼树 ----------------\");</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Node01 huffmanTree = createHuffmanTree (list);</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        System.out.println (\"前序遍历\");</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        preOrder (huffmanTree);</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        // 测试是否生成了对应的赫夫曼编码</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        Map&lt;Byte, String> codes = getCodes (huffmanTree);</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        System.out.println (\"生成的赫夫曼编码表：\"+codes);</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        byte [] huffmanCodeBytes = zip (contentBytes,huffmanCodes);</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        System.out.println (\"huffmanCodeBytes:\"+Arrays.toString (huffmanCodeBytes));</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 编写一个方法，完成对压缩数据的解码</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * @param huffmanCodes 赫夫曼编码表 map</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * @param huffmanBytes 赫夫曼编码得到的字节数组</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * @return 就是原来的字符串对应的数组</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> huffmanBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> huffmanBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> huffmanBytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">byteToBitString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//        System.out.println (\"赫夫曼字节数组对应的二进制字符串：\"+stringBuilder.toString ());</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 把字符串按照指定的赫夫曼编码进行解码</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 把赫夫曼编码表进行调换，因为反向查询 a -> 100 100 -> a</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 创建集合，存放 byte</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 小的计数器</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token class-name\">Byte</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token comment\">// 先取出一个 '1','0'</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 不动，让 count 移动 匹配字符</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                b <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//b == null 说明没有匹配到</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明 匹配到了</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            i <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span><span class=\"token comment\">//i 直接移动到 count 位置</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 当 for 循环结束后 list 中就存放了所有的字符 i like like like java do you like a java</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 把 list 中 的数据放入 byte 数组并返回</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * 将一个 byte 转成一个二进制的字符串</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     * @param flag 标志是否需要补高位如果是 true，需要，false，不需要</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>     * @param b    传入的 byte</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>     * @return b 对应的二进制的字符串 (注意是按补码返回)</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byteToBitString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">// 使用变量保存 b, 将 b 转换成 int</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 判断是正数则需要补高位</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            temp <span class=\"token operator\">|=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 说明：按位与 256 1 0000 0000 | 0000 0001 => 1 0000 0001</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">// 返回的是 temp 对应的二进制的补码</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token comment\">// 使用一个方法，将前面的方法封装起来，便于我们的调用</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     * @param bytes 原始的字符串对应的字节数组</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>     * @return 是经过赫夫曼编码处理后的字节数组（压缩后的数组）</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token comment\">// 根据 nodes 创建的赫夫曼树</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token class-name\">Node01</span> huffmanTreeRoot <span class=\"token operator\">=</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token comment\">// 对应的赫夫曼编码 (根据 赫夫曼树)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>huffmanTreeRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token comment\">// 根据生成的赫夫曼编码，压缩得到压缩后的赫夫曼编码字节数组</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodeBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">// 编写一个方法，将字符串对应的 byte [] 数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码 压缩后的 byte []</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>     * @param bytes        这时原始的字符串对应的 byte []</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>     * @param huffmanCodes 生成的赫夫曼编码 map</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>     * @return 返回赫夫曼编码处理后的 byte []</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>     * 举例： String content = \"i like like like java do you like a java\"; =》 byte [] contentBytes = content.getBytes ();</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * 返回的是 字符串 \"1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100\"</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     * => 对应的 byte [] huffmanCodeBytes  ，即 8 位对应一个 byte, 放入到 huffmanCodeBytes</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>     * huffmanCodeBytes [0] =  10101000 (补码) => byte  [推导  10101000=> 10101000 - 1 => 10100111 (反码)=> 11011000= -88 ]</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>     * huffmanCodeBytes [1] = -88</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">//1. 利用 huffmanCodes 将  bytes 转成  赫夫曼编码对应的字符串</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token comment\">// 遍历 bytes 数组</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">//System.out.println (\"测试 stringBuilder~~~=\" + stringBuilder.toString ());</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token comment\">// 将 \"1010100010111111110...\" 转成 byte []</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token comment\">// 统计返回  byte [] huffmanCodeBytes 长度</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">// 一句话 int len = (stringBuilder.length () + 7) / 8;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            len <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            len <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token comment\">// 创建 存储压缩后的 byte 数组</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录是第几个 byte</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 因为是每 8 位对应一个 byte, 所以步长 +8</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token class-name\">String</span> strByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不够 8 位</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                strByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                strByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token comment\">// 将 strByte 转成一个 byte, 放入到 huffmanCodeBytes</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            huffmanCodeBytes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>strByte<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodeBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token comment\">// 生成赫夫曼树对应的赫夫曼编码</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token comment\">// 思路：</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token comment\">//1. 将赫夫曼编码表存放在 Map&lt;Byte,String> 形式</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token comment\">//&#123;32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011&#125; 等等 [形式]</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token comment\">//2. 在生成赫夫曼编码表时，需要去拼接路径，定义一个 StringBuilder，存储某个叶子节点的路径</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token comment\">// 处理 root 的左子树</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token comment\">// 处理 root 的右子树</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"199\"></td><td><pre>     * 功能：将传入的 Node 节点的所有叶子节点的赫夫曼编码存放到，并放入到 huffmanCodes 集合</pre></td></tr><tr><td data-num=\"200\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"201\"></td><td><pre>     * @param node          传入节点</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>     * @param code          路径：左子节点是 0，右子节点是 1</pre></td></tr><tr><td data-num=\"203\"></td><td><pre>     * @param stringBuilder 用于拼接路径</pre></td></tr><tr><td data-num=\"204\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token comment\">// 将 code，加入到 stringBuilder2 中</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>            <span class=\"token comment\">// 判断当前 node, 是叶子节点还是非叶子节点</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>                <span class=\"token comment\">// 非叶子节点</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>                <span class=\"token comment\">// 递归处理</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>                <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>                <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>                <span class=\"token comment\">// 说明是叶子节点</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>                <span class=\"token comment\">// 表示找到了某个叶子节点的最后</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>                huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>    <span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赫夫曼树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"236\"></td><td><pre>     * @param bytes bytes 接受字节数组</pre></td></tr><tr><td data-num=\"237\"></td><td><pre>     * @return 返回的就是 List 形式</pre></td></tr><tr><td data-num=\"238\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个 ArrayList</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        <span class=\"token comment\">// 遍历 list，统计每一个 byte 出现的次数 -> map [key,value]</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>            <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>            <span class=\"token comment\">//Map 还没有这个字符数据，第一次则执行如下</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 已经存在了执行如下</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        <span class=\"token comment\">// 把每一个键值对转成一个 Node 对象，并加入 list 集合</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token comment\">// 遍历 map</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>    <span class=\"token comment\">// 通过 List 创建赫夫曼树</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node01</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>            <span class=\"token comment\">// 排序，从小到大</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>            <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>            <span class=\"token comment\">// 取出第一棵最小的二叉树</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>            <span class=\"token class-name\">Node01</span> leftNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            <span class=\"token comment\">// 取出第二棵最小的二叉树</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            <span class=\"token class-name\">Node01</span> rightNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>            <span class=\"token comment\">// 创建一颗新的二叉树，它的根节点 没有 data，只有权值</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token class-name\">Node01</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> leftNode<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> rightNode<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token comment\">// 将处理过的两颗二叉树从 list 中移除</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>            <span class=\"token comment\">// 将新的二叉树加入到 list 集合中</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre></pre></td></tr><tr><td data-num=\"287\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node01</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>    <span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>    <span class=\"token class-name\">Node01</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>    <span class=\"token class-name\">Node01</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node[data = \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\" , weight = \"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"最佳实践-文件压缩\"><a class=\"anchor\" href=\"#最佳实践-文件压缩\">#</a> 最佳实践 - 文件压缩</h4>\n<p>我们学习了通过赫夫曼编码对一个字符串进行编码和解码，下面我们来完成对文件的压缩和解压， 具体要求：给你一个图片文件，要求对其进行无损压缩，看看压缩效果如何。</p>\n<p><strong>思路</strong>：读取文件 -&gt; 得到赫夫曼编码表 -&gt; 完成压缩</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 编写方法，将一个文件进行压缩</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param srcFile 你传入的希望压缩的文件的全路径</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param dstFile 我们压缩后将压缩文件放到哪个目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">zipFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> srcFile<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 创建输出流</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 创建文件的输入流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token class-name\">FileInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 创建文件的输入流</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 创建一个和源文件大小一样的 byte []</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 读取文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 获取到文件对应的赫夫曼编码表</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 直接对原文件进行压缩</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 创建文件的输出流，存放压缩文件</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 创建一个和文件输出流关联的 ObjectOutputStream</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 把赫夫曼编码后的字节数组写入压缩文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>huffmanBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 以对象流形式写入赫夫曼编码，为了解压 (恢复源文件) 时使用</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">// 注意：一定要把赫夫曼编码，写入压缩文件</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 关闭流，释放资源</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/521:26</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanTreeCode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 测试压缩文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> srcFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E://src.bmp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">String</span> dstFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E://dst.zip\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">zipFile</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">,</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"压缩文件OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 编写方法，将一个文件进行压缩</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param srcFile 你传入的希望压缩的文件的全路径</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param dstFile 我们压缩后将压缩文件放到哪个目录</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">zipFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> srcFile<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 创建输出流</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 创建文件的输入流</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 创建文件的输入流</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 创建一个和源文件大小一样的 byte []</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 读取文件</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 获取到文件对应的赫夫曼编码表</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 直接对原文件进行压缩</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 创建文件的输出流，存放压缩文件</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 创建一个和文件输出流关联的 ObjectOutputStream</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 把赫夫曼编码后的字节数组写入压缩文件</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>huffmanBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 以对象流形式写入赫夫曼编码，为了解压 (恢复源文件) 时使用</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 注意：一定要把赫夫曼编码，写入压缩文件</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 关闭流，释放资源</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     * 编写一个方法，完成对压缩数据的解码</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * @param huffmanCodes 赫夫曼编码表 map</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     * @param huffmanBytes 赫夫曼编码得到的字节数组</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * @return 就是原来的字符串对应的数组</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> huffmanBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> huffmanBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> huffmanBytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">byteToBitString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">//        System.out.println (\"赫夫曼字节数组对应的二进制字符串：\"+stringBuilder.toString ());</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 把字符串按照指定的赫夫曼编码进行解码</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token comment\">// 把赫夫曼编码表进行调换，因为反向查询 a -> 100 100 -> a</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// 创建集合，存放 byte</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 小的计数器</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token class-name\">Byte</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token comment\">// 先取出一个 '1','0'</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 不动，让 count 移动 匹配字符</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                b <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//b == null 说明没有匹配到</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明 匹配到了</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            i <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span><span class=\"token comment\">//i 直接移动到 count 位置</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">// 当 for 循环结束后 list 中就存放了所有的字符 i like like like java do you like a java</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">// 把 list 中 的数据放入 byte 数组并返回</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>     * 将一个 byte 转成一个二进制的字符串</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>     * @param flag 标志是否需要补高位如果是 true，需要，false，不需要</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     * @param b    传入的 byte</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * @return b 对应的二进制的字符串 (注意是按补码返回)</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byteToBitString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token comment\">// 使用变量保存 b, 将 b 转换成 int</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">// 判断是正数则需要补高位</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            temp <span class=\"token operator\">|=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token comment\">// 说明：按位与 256 1 0000 0000 | 0000 0001 => 1 0000 0001</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token comment\">// 返回的是 temp 对应的二进制的补码</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">// 使用一个方法，将前面的方法封装起来，便于我们的调用</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>     * @param bytes 原始的字符串对应的字节数组</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     * @return 是经过赫夫曼编码处理后的字节数组（压缩后的数组）</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token comment\">// 根据 nodes 创建的赫夫曼树</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token class-name\">Node01</span> huffmanTreeRoot <span class=\"token operator\">=</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">// 对应的赫夫曼编码 (根据 赫夫曼树)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>huffmanTreeRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token comment\">// 根据生成的赫夫曼编码，压缩得到压缩后的赫夫曼编码字节数组</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodeBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token comment\">// 编写一个方法，将字符串对应的 byte [] 数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码 压缩后的 byte []</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     * @param bytes        这时原始的字符串对应的 byte []</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>     * @param huffmanCodes 生成的赫夫曼编码 map</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>     * @return 返回赫夫曼编码处理后的 byte []</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     * 举例： String content = \"i like like like java do you like a java\"; =》 byte [] contentBytes = content.getBytes ();</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     * 返回的是 字符串 \"1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100\"</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     * => 对应的 byte [] huffmanCodeBytes  ，即 8 位对应一个 byte, 放入到 huffmanCodeBytes</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>     * huffmanCodeBytes [0] =  10101000 (补码) => byte  [推导  10101000=> 10101000 - 1 => 10100111 (反码)=> 11011000= -88 ]</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>     * huffmanCodeBytes [1] = -88</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token comment\">//1. 利用 huffmanCodes 将  bytes 转成  赫夫曼编码对应的字符串</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token comment\">// 遍历 bytes 数组</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token comment\">//System.out.println (\"测试 stringBuilder~~~=\" + stringBuilder.toString ());</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token comment\">// 将 \"1010100010111111110...\" 转成 byte []</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token comment\">// 统计返回  byte [] huffmanCodeBytes 长度</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\">// 一句话 int len = (stringBuilder.length () + 7) / 8;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            len <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            len <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token comment\">// 创建 存储压缩后的 byte 数组</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录是第几个 byte</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 因为是每 8 位对应一个 byte, 所以步长 +8</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token class-name\">String</span> strByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不够 8 位</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                strByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>                strByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token comment\">// 将 strByte 转成一个 byte, 放入到 huffmanCodeBytes</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>            huffmanCodeBytes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>strByte<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodeBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token comment\">// 生成赫夫曼树对应的赫夫曼编码</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token comment\">// 思路：</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token comment\">//1. 将赫夫曼编码表存放在 Map&lt;Byte,String> 形式</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\">//&#123;32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011&#125; 等等 [形式]</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>    <span class=\"token comment\">//2. 在生成赫夫曼编码表时，需要去拼接路径，定义一个 StringBuilder，存储某个叶子节点的路径</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>        <span class=\"token comment\">// 处理 root 的左子树</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token comment\">// 处理 root 的右子树</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"224\"></td><td><pre>     * 功能：将传入的 Node 节点的所有叶子节点的赫夫曼编码存放到，并放入到 huffmanCodes 集合</pre></td></tr><tr><td data-num=\"225\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"226\"></td><td><pre>     * @param node          传入节点</pre></td></tr><tr><td data-num=\"227\"></td><td><pre>     * @param code          路径：左子节点是 0，右子节点是 1</pre></td></tr><tr><td data-num=\"228\"></td><td><pre>     * @param stringBuilder 用于拼接路径</pre></td></tr><tr><td data-num=\"229\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token comment\">// 将 code，加入到 stringBuilder2 中</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>            <span class=\"token comment\">// 判断当前 node, 是叶子节点还是非叶子节点</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>                <span class=\"token comment\">// 非叶子节点</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>                <span class=\"token comment\">// 递归处理</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>                <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>                <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>                <span class=\"token comment\">// 说明是叶子节点</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>                <span class=\"token comment\">// 表示找到了某个叶子节点的最后</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>                huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>    <span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赫夫曼树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"261\"></td><td><pre>     * @param bytes bytes 接受字节数组</pre></td></tr><tr><td data-num=\"262\"></td><td><pre>     * @return 返回的就是 List 形式</pre></td></tr><tr><td data-num=\"263\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个 ArrayList</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token comment\">// 遍历 list，统计每一个 byte 出现的次数 -> map [key,value]</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>            <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            <span class=\"token comment\">//Map 还没有这个字符数据，第一次则执行如下</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 已经存在了执行如下</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token comment\">// 把每一个键值对转成一个 Node 对象，并加入 list 集合</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>        <span class=\"token comment\">// 遍历 map</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>    <span class=\"token comment\">// 通过 List 创建赫夫曼树</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node01</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>            <span class=\"token comment\">// 排序，从小到大</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>            <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>            <span class=\"token comment\">// 取出第一棵最小的二叉树</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>            <span class=\"token class-name\">Node01</span> leftNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>            <span class=\"token comment\">// 取出第二棵最小的二叉树</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>            <span class=\"token class-name\">Node01</span> rightNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>            <span class=\"token comment\">// 创建一颗新的二叉树，它的根节点 没有 data，只有权值</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>            <span class=\"token class-name\">Node01</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> leftNode<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> rightNode<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>            <span class=\"token comment\">// 将处理过的两颗二叉树从 list 中移除</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>            <span class=\"token comment\">// 将新的二叉树加入到 list 集合中</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"311\"></td><td><pre></pre></td></tr><tr><td data-num=\"312\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node01</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>    <span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>    <span class=\"token class-name\">Node01</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token class-name\">Node01</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node[data = \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\" , weight = \"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"最佳实践文件解压文件恢复\"><a class=\"anchor\" href=\"#最佳实践文件解压文件恢复\">#</a> 最佳实践 —— 文件解压 (文件恢复)</h4>\n<p>具体要求：将前面压缩的文件，重新恢复成原来的文件。</p>\n<p>思路：读取压缩文件 (数据和赫夫曼编码表) -&gt; 完成解压 (文件恢复)</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 完成对压缩文件的解压</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param zipFile 准备解压的文件</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param dstFile 将文件解压到哪个路径</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unZipFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> zipFile<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>zipFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 读取 byte 数组 huffmanBytes</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 读取赫夫曼编码表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 解码</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">,</span>huffmanBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 将 bytes, 数组写入到目标文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 写出数据到文件中</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 关闭流，释放资源</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>os <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ois <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/521:26</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanTreeCode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 测试压缩文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        String srcFile = \"E://src.bmp\";</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        String dstFile = \"E://dst.zip\";</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        zipFile (srcFile,dstFile);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        System.out.println (\"压缩文件 OK\");</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 测试解压文件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">String</span> zipFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E://dst.zip\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> dstFile <span class=\"token operator\">=</span> <span class=\"token string\">\"E://srcTwo.bmp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">unZipFile</span><span class=\"token punctuation\">(</span>zipFile<span class=\"token punctuation\">,</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解压完毕OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 完成对压缩文件的解压</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param zipFile 准备解压的文件</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param dstFile 将文件解压到哪个路径</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unZipFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> zipFile<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>zipFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 读取 byte 数组 huffmanBytes</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 读取赫夫曼编码表</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 解码</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">,</span>huffmanBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 将 bytes, 数组写入到目标文件</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 写出数据到文件中</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 关闭流，释放资源</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>os <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ois <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    ois<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * 编写方法，将一个文件进行压缩</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * @param srcFile 你传入的希望压缩的文件的全路径</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     * @param dstFile 我们压缩后将压缩文件放到哪个目录</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">zipFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> srcFile<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 创建输出流</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">ObjectOutputStream</span> oos <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// 创建文件的输入流</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">// 创建文件的输入流</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 创建一个和源文件大小一样的 byte []</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>is<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 读取文件</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// 获取到文件对应的赫夫曼编码表</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 直接对原文件进行压缩</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes <span class=\"token operator\">=</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// 创建文件的输出流，存放压缩文件</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dstFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">// 创建一个和文件输出流关联的 ObjectOutputStream</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 把赫夫曼编码后的字节数组写入压缩文件</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>huffmanBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">// 以对象流形式写入赫夫曼编码，为了解压 (恢复源文件) 时使用</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">// 注意：一定要把赫夫曼编码，写入压缩文件</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 关闭流，释放资源</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                    os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     * 编写一个方法，完成对压缩数据的解码</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     * @param huffmanCodes 赫夫曼编码表 map</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * @param huffmanBytes 赫夫曼编码得到的字节数组</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     * @return 就是原来的字符串对应的数组</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> huffmanBytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> huffmanBytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> huffmanBytes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">byteToBitString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\">//        System.out.println (\"赫夫曼字节数组对应的二进制字符串：\"+stringBuilder.toString ());</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 把字符串按照指定的赫夫曼编码进行解码</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token comment\">// 把赫夫曼编码表进行调换，因为反向查询 a -> 100 100 -> a</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">// 创建集合，存放 byte</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 小的计数器</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token class-name\">Byte</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                <span class=\"token comment\">// 先取出一个 '1','0'</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 不动，让 count 移动 匹配字符</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                b <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//b == null 说明没有匹配到</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 说明 匹配到了</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            i <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span><span class=\"token comment\">//i 直接移动到 count 位置</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">// 当 for 循环结束后 list 中就存放了所有的字符 i like like like java do you like a java</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token comment\">// 把 list 中 的数据放入 byte 数组并返回</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>     * 将一个 byte 转成一个二进制的字符串</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>     * @param flag 标志是否需要补高位如果是 true，需要，false，不需要</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>     * @param b    传入的 byte</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>     * @return b 对应的二进制的字符串 (注意是按补码返回)</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byteToBitString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> flag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token comment\">// 使用变量保存 b, 将 b 转换成 int</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">// 判断是正数则需要补高位</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            temp <span class=\"token operator\">|=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token comment\">// 说明：按位与 256 1 0000 0000 | 0000 0001 => 1 0000 0001</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token comment\">// 返回的是 temp 对应的二进制的补码</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBinaryString</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token comment\">// 使用一个方法，将前面的方法封装起来，便于我们的调用</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>     * @param bytes 原始的字符串对应的字节数组</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>     * @return 是经过赫夫曼编码处理后的字节数组（压缩后的数组）</pre></td></tr><tr><td data-num=\"193\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">huffmanZip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> nodes <span class=\"token operator\">=</span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token comment\">// 根据 nodes 创建的赫夫曼树</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token class-name\">Node01</span> huffmanTreeRoot <span class=\"token operator\">=</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span>nodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token comment\">// 对应的赫夫曼编码 (根据 赫夫曼树)</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>huffmanTreeRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token comment\">// 根据生成的赫夫曼编码，压缩得到压缩后的赫夫曼编码字节数组</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> huffmanCodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodeBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token comment\">// 编写一个方法，将字符串对应的 byte [] 数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码 压缩后的 byte []</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"208\"></td><td><pre>     * @param bytes        这时原始的字符串对应的 byte []</pre></td></tr><tr><td data-num=\"209\"></td><td><pre>     * @param huffmanCodes 生成的赫夫曼编码 map</pre></td></tr><tr><td data-num=\"210\"></td><td><pre>     * @return 返回赫夫曼编码处理后的 byte []</pre></td></tr><tr><td data-num=\"211\"></td><td><pre>     * 举例： String content = \"i like like like java do you like a java\"; =》 byte [] contentBytes = content.getBytes ();</pre></td></tr><tr><td data-num=\"212\"></td><td><pre>     * 返回的是 字符串 \"1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100\"</pre></td></tr><tr><td data-num=\"213\"></td><td><pre>     * => 对应的 byte [] huffmanCodeBytes  ，即 8 位对应一个 byte, 放入到 huffmanCodeBytes</pre></td></tr><tr><td data-num=\"214\"></td><td><pre>     * huffmanCodeBytes [0] =  10101000 (补码) => byte  [推导  10101000=> 10101000 - 1 => 10100111 (反码)=> 11011000= -88 ]</pre></td></tr><tr><td data-num=\"215\"></td><td><pre>     * huffmanCodeBytes [1] = -88</pre></td></tr><tr><td data-num=\"216\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token comment\">//1. 利用 huffmanCodes 将  bytes 转成  赫夫曼编码对应的字符串</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token comment\">// 遍历 bytes 数组</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>            stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token comment\">//System.out.println (\"测试 stringBuilder~~~=\" + stringBuilder.toString ());</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        <span class=\"token comment\">// 将 \"1010100010111111110...\" 转成 byte []</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token comment\">// 统计返回  byte [] huffmanCodeBytes 长度</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token comment\">// 一句话 int len = (stringBuilder.length () + 7) / 8;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>            len <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>            len <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token comment\">// 创建 存储压缩后的 byte 数组</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> huffmanCodeBytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录是第几个 byte</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 因为是每 8 位对应一个 byte, 所以步长 +8</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>            <span class=\"token class-name\">String</span> strByte<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">8</span> <span class=\"token operator\">></span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不够 8 位</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>                strByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>                strByte <span class=\"token operator\">=</span> stringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>            <span class=\"token comment\">// 将 strByte 转成一个 byte, 放入到 huffmanCodeBytes</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>            huffmanCodeBytes<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>strByte<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodeBytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    <span class=\"token comment\">// 生成赫夫曼树对应的赫夫曼编码</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre>    <span class=\"token comment\">// 思路：</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token comment\">//1. 将赫夫曼编码表存放在 Map&lt;Byte,String> 形式</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token comment\">//&#123;32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011&#125; 等等 [形式]</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> huffmanCodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>    <span class=\"token comment\">//2. 在生成赫夫曼编码表时，需要去拼接路径，定义一个 StringBuilder，存储某个叶子节点的路径</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>        <span class=\"token comment\">// 处理 root 的左子树</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token comment\">// 处理 root 的右子树</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        <span class=\"token keyword\">return</span> huffmanCodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"275\"></td><td><pre>     * 功能：将传入的 Node 节点的所有叶子节点的赫夫曼编码存放到，并放入到 huffmanCodes 集合</pre></td></tr><tr><td data-num=\"276\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"277\"></td><td><pre>     * @param node          传入节点</pre></td></tr><tr><td data-num=\"278\"></td><td><pre>     * @param code          路径：左子节点是 0，右子节点是 1</pre></td></tr><tr><td data-num=\"279\"></td><td><pre>     * @param stringBuilder 用于拼接路径</pre></td></tr><tr><td data-num=\"280\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> code<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringBuilder</span> stringBuilder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> stringBuilder2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span>stringBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token comment\">// 将 code，加入到 stringBuilder2 中</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>        stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>            <span class=\"token comment\">// 判断当前 node, 是叶子节点还是非叶子节点</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>                <span class=\"token comment\">// 非叶子节点</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>                <span class=\"token comment\">// 递归处理</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>                <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>                <span class=\"token function\">getCodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>                <span class=\"token comment\">// 说明是叶子节点</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>                <span class=\"token comment\">// 表示找到了某个叶子节点的最后</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>                huffmanCodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> stringBuilder2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>    <span class=\"token comment\">// 前序遍历</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"赫夫曼树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"312\"></td><td><pre>     * @param bytes bytes 接受字节数组</pre></td></tr><tr><td data-num=\"313\"></td><td><pre>     * @return 返回的就是 List 形式</pre></td></tr><tr><td data-num=\"314\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getNodes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个 ArrayList</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre>        <span class=\"token comment\">// 遍历 list，统计每一个 byte 出现的次数 -> map [key,value]</span></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b <span class=\"token operator\">:</span> bytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>            <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>            <span class=\"token comment\">//Map 还没有这个字符数据，第一次则执行如下</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 已经存在了执行如下</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"329\"></td><td><pre></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>        <span class=\"token comment\">// 把每一个键值对转成一个 Node 对象，并加入 list 集合</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>        <span class=\"token comment\">// 遍历 map</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>    <span class=\"token comment\">// 通过 List 创建赫夫曼树</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Node01</span> <span class=\"token function\">createHuffmanTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre></pre></td></tr><tr><td data-num=\"342\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>            <span class=\"token comment\">// 排序，从小到大</span></pre></td></tr><tr><td data-num=\"344\"></td><td><pre>            <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"345\"></td><td><pre>            <span class=\"token comment\">// 取出第一棵最小的二叉树</span></pre></td></tr><tr><td data-num=\"346\"></td><td><pre>            <span class=\"token class-name\">Node01</span> leftNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"347\"></td><td><pre>            <span class=\"token comment\">// 取出第二棵最小的二叉树</span></pre></td></tr><tr><td data-num=\"348\"></td><td><pre>            <span class=\"token class-name\">Node01</span> rightNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>            <span class=\"token comment\">// 创建一颗新的二叉树，它的根节点 没有 data，只有权值</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>            <span class=\"token class-name\">Node01</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> leftNode<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> rightNode<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"351\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> leftNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"352\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> rightNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"353\"></td><td><pre>            <span class=\"token comment\">// 将处理过的两颗二叉树从 list 中移除</span></pre></td></tr><tr><td data-num=\"354\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>leftNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"355\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>rightNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"356\"></td><td><pre>            <span class=\"token comment\">// 将新的二叉树加入到 list 集合中</span></pre></td></tr><tr><td data-num=\"357\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre></pre></td></tr><tr><td data-num=\"363\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node01</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node01</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>    <span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>    <span class=\"token class-name\">Node01</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>    <span class=\"token class-name\">Node01</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node01</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node01</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"378\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"379\"></td><td><pre></pre></td></tr><tr><td data-num=\"380\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"381\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"382\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"383\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"384\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"385\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"386\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"387\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"388\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"389\"></td><td><pre></pre></td></tr><tr><td data-num=\"390\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"391\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"392\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node[data = \"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span> <span class=\"token string\">\" , weight = \"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"393\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"394\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"赫夫曼编码压缩文件注意事项\"><a class=\"anchor\" href=\"#赫夫曼编码压缩文件注意事项\">#</a> 赫夫曼编码压缩文件注意事项</h4>\n<ol>\n<li>如果文件本身就是经过压缩处理的，那么使用赫夫曼编码再压缩效率不会有明显变化，比如视频，ppt，等等文件</li>\n<li>赫夫曼编码是按字节来处理的，因此可以处理所有的文件 (二进制，文本文件)</li>\n<li>如果一个文件中的内容，重复的数据不多，压缩效果也不会很明显</li>\n</ol>\n<h3 id=\"二叉排序树\"><a class=\"anchor\" href=\"#二叉排序树\">#</a> 二叉排序树</h3>\n<p><strong>先看一个需求</strong></p>\n<p>给你一个数列 {7,3,10,12,5,1,9} ，要求能够高效的完成对数据的查询和添加。</p>\n<p><strong>解决方案分析</strong></p>\n<ol>\n<li>\n<p><strong>数组未排序</strong></p>\n<ol>\n<li>优点：直接在数组尾添加，速度快。</li>\n<li>缺点：查找速度慢</li>\n</ol>\n</li>\n<li>\n<p><strong>数组排序</strong></p>\n<ol>\n<li>优点：可以使用二分查找，查找速度快</li>\n<li>缺点：为了保证数组有序在添加新数据时，找到插入位置后，后面的数据需要整体移动，速度慢</li>\n</ol>\n</li>\n<li>\n<p><strong>使用链式存储 —— 链表</strong></p>\n<p>不管链表是否有序，查找速度都慢，添加数据速度比数组快，不需要数据整体移动</p>\n</li>\n</ol>\n<p><strong>二叉排序树介绍</strong></p>\n<p>二叉排序树：<strong>BST：(Binary Sort(Search)Tree)</strong>，对于二叉排序树的任何一个<strong>非叶子结点</strong>，要求如下：</p>\n<ul>\n<li>左子节点的值比当前节点<sup>当前节点指的父节点</sup>的值小。</li>\n<li>右子节点的值比当前节点 ^^ 的值大。</li>\n</ul>\n<p><mark>特别说明</mark>：如果有相同的值，可以将该节点放在左子节点或右子节点。</p>\n<p>比如针对前面的数据 {7,3,10,12,5,1,9}，对应的二叉排序树为：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230707160016773.png\" alt=\"image-20230707160016773\" /></p>\n<ol>\n<li>从根节点开始，发现比 7 小，直接往左子树查找，相当于直接折半了。</li>\n<li>比 3 小，再次折半</li>\n<li>比 1 大，直接挂在 1 的有节点</li>\n</ol>\n<h4 id=\"二叉排序树创建和遍历\"><a class=\"anchor\" href=\"#二叉排序树创建和遍历\">#</a> 二叉排序树<mark>创建</mark>和<mark>遍历</mark></h4>\n<p>一个数组创建成对应的二叉排序树，并使用中序遍历二叉排序树，比如：数组为 Array {7,3,10,12,5,1,9} ，创建成对应的二叉排序树为：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230707185816753.png\" alt=\"image-20230707185816753\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/719:25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySortTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">BinarySort</span> binarySort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------中序遍历二叉排序树------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 判断 root 根节点如果为 null 则将传入的当前赋值为根节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 调用 add 方法添加传入的节点</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 如果根节点不为 null 则开始中序遍历二叉排序树</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉排序树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 添加传入节点</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点是否为空</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点的值是否小于当前节点的值</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的左子节点是否为空</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token comment\">// 为空则将传入的节点赋值到左子节点中</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的右子节点是否为空</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token comment\">// 为空将传入的节点赋值到当前节点的右子节点中</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 二叉排序树中序遍历</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 左</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// 中</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">// 右</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"二叉排序树的删除\"><a class=\"anchor\" href=\"#二叉排序树的删除\">#</a> 二叉排序树的<mark>删除</mark></h4>\n<p>二叉排序树的删除情况比较复杂，有下面三种情况需要考虑</p>\n<ol>\n<li>删除<mark>叶子节点</mark> (比如：2,5,9,12)</li>\n<li>删除<mark>只有一颗子树的节点</mark> (比如：1)</li>\n<li>删除<mark>有两颗子树的节点</mark> (比如：7,3,10)</li>\n</ol>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>示意图</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230707193738478.png\" alt=\"image-20230707193738478\" /></p>\n<h4 id=\"删除叶子节点\"><a class=\"anchor\" href=\"#删除叶子节点\">#</a> 删除<mark>叶子节点</mark></h4>\n<p>删除的节点是叶子节点，即该节点下没有左右子节点。</p>\n<p><strong>思路分析</strong></p>\n<pre><code>第一种情况:\n删除叶子节点 (比如：2, 5, 9, 12)\n思路\n(1) 需求先去找到要删除的结点  targetNode\n(2)  找到targetNode 的 父结点 parent \n(3)  确定 targetNode 是 parent的左子结点 还是右子结点\n(4)  根据前面的情况来对应删除\n左子结点 parent.left = null\n右子结点 parent.right = null;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230707194108379.png\" alt=\"image-20230707194108379\" /></p>\n<p><strong>代码实现</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/719:25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySortTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">BinarySort</span> binarySort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------中序遍历二叉排序树------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 测试删除叶子节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为有子节点 所以删除无效</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------删除节点后------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为没有子节点 所以删除成功</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------删除节点后------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 判断 root 根节点如果为 null 则将传入的当前赋值为根节点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 调用 add 方法添加传入的节点</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 如果根节点不为 null 则开始中序遍历二叉排序树</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉排序树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * 查找要删除的节点</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * 查找要删除的节点的父节点</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * 删除节点</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">//1. 需求先去找到要删除的节点，targetNode</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token class-name\">Node</span> targetNode <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>           <span class=\"token comment\">// 如果没有找到要删除的节点</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">// 如果我们发现当前这个二叉排序树只有一个节点则删除即可</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">// 去查找 targetNode 的父节点</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">// 如果删除的节点是叶子节点</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> targetNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>               <span class=\"token comment\">// 判断 targetNode 节点是父节点的左子节点还是右子节点</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 是左子节点</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 是右子节点</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     * 查找要删除的节点</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * @param value 希望删除的节点的值 [目标值]</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     * @return 找到返回节点，否则返回 null</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     * 查找要删除节点的父节点</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>     * @param value 要查找的节点值</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>     * @return 返回要删除节点的父节点，否则返回 null</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">// 如果当前节点就是要删除的节点的父节点则返回当前节点</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token comment\">// 如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token comment\">// 向左子树递归查找</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                <span class=\"token comment\">// 向右子树递归查找</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                <span class=\"token comment\">// 没有找到父节点</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token comment\">// 添加传入节点</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点是否为空</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点的值是否小于当前节点的值</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的左子节点是否为空</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                <span class=\"token comment\">// 为空则将传入的节点赋值到左子节点中</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的右子节点是否为空</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                <span class=\"token comment\">// 为空将传入的节点赋值到当前节点的右子节点中</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>    <span class=\"token comment\">// 二叉排序树中序遍历</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token comment\">// 左</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token comment\">// 中</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token comment\">// 右</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"删除节点有一个子节点\"><a class=\"anchor\" href=\"#删除节点有一个子节点\">#</a> 删除<mark>节点有一个子节点</mark></h4>\n<p>删除的节点有一个子节点，该节点有左子节点或者右子节点。比如这里的 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230709150143209.png\" alt=\"image-20230709150143209\" /></p>\n<p>思路分析：</p>\n<pre><code>第二种情况: 删除只有一颗子树的节点 比如 1\n思路\n(1) 需求先去找到要删除的结点  targetNode\n(2)  找到targetNode 的 父结点 parent \n(3) 确定targetNode 的子结点是左子结点还是右子结点\n(4) targetNode 是 parent 的左子结点还是右子结点\n(5) 如果targetNode 有左子结点\n5. 1 如果 targetNode 是 parent 的左子结点\nparent.left = targetNode.left;\n5.2  如果 targetNode 是 parent 的右子结点\nparent.right = targetNode.left;\n(6) 如果targetNode 有右子结点\n6.1 如果 targetNode 是 parent 的左子结点\nparent.left = targetNode.right;\n6.2 如果 targetNode 是 parent 的右子结点\nparent.right = targetNode.right\n</code></pre>\n<p><img data-src=\"./images/image-20230707194108379-1688886389817-1.png\" alt=\"image-20230707194108379\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/719:25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySortTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">BinarySort</span> binarySort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------中序遍历二叉排序树------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 测试删除叶子节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为有子节点 所以删除无效</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------删除节点后------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 判断 root 根节点如果为 null 则将传入的当前赋值为根节点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 调用 add 方法添加传入的节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 如果根节点不为 null 则开始中序遍历二叉排序树</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉排序树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 查找要删除的节点</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     * 查找要删除的节点的父节点</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * 删除节点</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">//1. 需求先去找到要删除的节点，targetNode</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token class-name\">Node</span> targetNode <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>           <span class=\"token comment\">// 如果没有找到要删除的节点</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 如果我们发现当前这个二叉排序树只有一个节点则删除即可</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">// 去查找 targetNode 的父节点</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">// 如果删除的节点是叶子节点</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> targetNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>               <span class=\"token comment\">// 判断 targetNode 节点是父节点的左子节点还是右子节点</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 是左子节点</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 是右子节点</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token comment\">// 删除只有一个叶子节点的子树节点</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 如果要删除的节点有左节点</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 如果 targetNode 是 parent 的左子节点</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                       <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>           \t\t\t\t<span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                          root <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token comment\">// 如果要删除的节点有右子节点</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                       <span class=\"token comment\">// 如果 targetNode 是 parent 的左子节点</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                       <span class=\"token keyword\">else</span><span class=\"token comment\">// 如果 targetNode 是 parent 的右子节点</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>           \t\t\t <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                       root <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>     * 查找要删除的节点</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>     * @param value 希望删除的节点的值 [目标值]</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>     * @return 找到返回节点，否则返回 null</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>     * 查找要删除节点的父节点</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>     * @param value 要查找的节点值</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>     * @return 返回要删除节点的父节点，否则返回 null</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token comment\">// 如果当前节点就是要删除的节点的父节点则返回当前节点</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token comment\">// 如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                <span class=\"token comment\">// 向左子树递归查找</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token comment\">// 向右子树递归查找</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token comment\">// 没有找到父节点</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token comment\">// 添加传入节点</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点是否为空</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点的值是否小于当前节点的值</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的左子节点是否为空</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                <span class=\"token comment\">// 为空则将传入的节点赋值到左子节点中</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的右子节点是否为空</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>                <span class=\"token comment\">// 为空将传入的节点赋值到当前节点的右子节点中</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>    <span class=\"token comment\">// 二叉排序树中序遍历</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token comment\">// 左</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token comment\">// 中</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token comment\">// 右</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"删除节点有两个子节点\"><a class=\"anchor\" href=\"#删除节点有两个子节点\">#</a> 删除<mark>节点有两个子节点</mark></h4>\n<p>删除的节点有两个子节点，即该节点有左子节点和右子节点。比如  7,3,10</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230709150453717.png\" alt=\"image-20230709150453717\" /></p>\n<p>思路分析：</p>\n<pre><code>情况三 ： 删除有两颗子树的节点. (比如：7, 3，10 )\n思路\n(1) 需求先去找到要删除的结点  targetNode\n(2)  找到targetNode 的 父结点 parent \n(3)  从targetNode 的右子树找到最小的结点\n(4) 用一个临时变量，将 最小结点的值保存 temp = 11\n(5)  删除该最小结点\n(6)  targetNode.value = temp\n</code></pre>\n<p><img data-src=\"./images/image-20230707194108379-1688886398397-4.png\" alt=\"image-20230707194108379\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/719:25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySortTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">BinarySort</span> binarySort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------中序遍历二叉排序树------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 测试删除叶子节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为有子节点 所以删除无效</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------删除节点后------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为有子节点 所以删除无效</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------删除节点后------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        binarySort<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 判断 root 根节点如果为 null 则将传入的当前赋值为根节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 调用 add 方法添加传入的节点</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 如果根节点不为 null 则开始中序遍历二叉排序树</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉排序树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * 查找要删除的节点</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     * 查找要删除的节点的父节点</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     * 删除节点</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * @param value</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">//1. 需求先去找到要删除的节点，targetNode</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token class-name\">Node</span> targetNode <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>           <span class=\"token comment\">// 如果没有找到要删除的节点</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">// 如果我们发现当前这个二叉排序树只有一个节点则删除即可</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 去查找 targetNode 的父节点</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token class-name\">Node</span> parent <span class=\"token operator\">=</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">// 如果删除的节点是叶子节点</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> targetNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>               <span class=\"token comment\">// 判断 targetNode 节点是父节点的左子节点还是右子节点</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 是左子节点</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 是右子节点</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                    parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> targetNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 删除有两个叶子节点的子树</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> <span class=\"token function\">delRightTreeMin</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                targetNode<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token comment\">// 删除只有一个叶子节点的子树节点</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 如果要删除的节点有左节点</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span><span class=\"token comment\">// 如果 targetNode 是 parent 的左子节点</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                       <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>           \t\t\t <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                       root <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token comment\">// 如果要删除的节点有右子节点</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                       <span class=\"token comment\">// 如果 targetNode 是 parent 的左子节点</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                       <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                       <span class=\"token keyword\">else</span><span class=\"token comment\">// 如果 targetNode 是 parent 的右子节点</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                           parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>           \t\t     <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                        root <span class=\"token operator\">=</span> targetNode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>     * 1. 返回 以 Node 为根节点的二叉排序树的最小节点的值</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>     * 2. 删除 node，为根节点的二叉排序树的最小节点</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>     * @param node 传入的节点 (当做二叉排序树的根节点)</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>     * @return 返回的以 node 为根节点的二叉排序树的最小节点的值</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">delRightTreeMin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token class-name\">Node</span> target <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token comment\">// 循环左子节点到最底下就是最小值</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            target <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t <span class=\"token comment\">// 这时 target 就只指向了最小节点</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">// 删除最小节点</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>     * 查找要删除的节点</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>     * @param value 希望删除的节点的值 [目标值]</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>     * @return 找到返回节点，否则返回 null</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>     * 查找要删除节点的父节点</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"181\"></td><td><pre>     * @param value 要查找的节点值</pre></td></tr><tr><td data-num=\"182\"></td><td><pre>     * @return 返回要删除节点的父节点，否则返回 null</pre></td></tr><tr><td data-num=\"183\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token comment\">// 如果当前节点就是要删除的节点的父节点则返回当前节点</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>            <span class=\"token comment\">// 如果查找的值小于当前节点的值，并且当前节点的左子节点不为空</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>                <span class=\"token comment\">// 向左子树递归查找</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>                <span class=\"token comment\">// 向右子树递归查找</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">searchParent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>                <span class=\"token comment\">// 没有找到父节点</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token comment\">// 添加传入节点</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点是否为空</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token comment\">// 判断传入的节点的值是否小于当前节点的值</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的左子节点是否为空</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>                <span class=\"token comment\">// 为空则将传入的节点赋值到左子节点中</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>                <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>            <span class=\"token comment\">// 判断当前节点的右子节点是否为空</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>                <span class=\"token comment\">// 为空将传入的节点赋值到当前节点的右子节点中</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>                <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>    <span class=\"token comment\">// 二叉排序树中序遍历</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token comment\">// 左</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>        <span class=\"token comment\">// 中</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token comment\">// 右</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"平衡二叉树avl树\"><a class=\"anchor\" href=\"#平衡二叉树avl树\">#</a> 平衡二叉树 (AVL 树)</h3>\n<p>看一个案例 (<mark>说明二叉排序树可能的问题</mark>)</p>\n<p>给你一个数列 {1,2,3,4,5,6}，要求创建一颗二叉排序树 (BST)，并分析问题所在。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230709181533895.png\" alt=\"image-20230709181533895\" /></p>\n<p><strong>左边 BST 存在的问题分析</strong>：</p>\n<ol>\n<li><mark>左子树全部为空</mark>，从形式上看，更像一个<mark>单链表</mark>。</li>\n<li><mark>插入速度没有影响</mark>。</li>\n<li><mark>查询速度明显降低</mark> (因为<mark>需要依次比较</mark>)，不能发挥 BST 的优势，因为<mark>每次还需要比较左子树</mark>，其<mark>查询速度比单链表还慢</mark></li>\n<li>解决方案 ——<strong> 平衡二叉树 (AVL)</strong></li>\n</ol>\n<p><strong>基本介绍</strong></p>\n<ol>\n<li><strong>平衡二叉树</strong>也叫<mark>平衡二叉搜索树</mark> (<strong>Self-balancing binary search tree</strong>) 又被称为 <mark>AVL 树</mark>，可以<mark>保证查询效率较高</mark></li>\n<li>具有以下<strong>特点</strong>：它是一颗<mark>空树</mark>或它的<mark>左右两个子树的高度差 &lt;strong style=&quot;color:red&quot;&gt;<sup> 只看高度不能看左右节点</sup> &lt;/strong&gt; 的绝对值不超过 1 并且左右两个子树都是一颗平衡二叉树</mark>。平衡二叉树的常用实现方法有<mark>红黑树</mark>，<mark>AVL&lt;strong style=&quot;color:red&quot;&gt;<sup> 指定是算法而不是树</sup> &lt;/strong&gt;</mark>，<mark>替罪羊树</mark>，<mark>Treap</mark>，<mark>伸展树等</mark>。</li>\n<li>举例说明，看看下面哪些是 AVL 树，为什么？</li>\n</ol>\n<p>​\t\t\t\t\t\t\t<strong>图一</strong>\t\t\t\t\t\t\t\t\t  \t\t\t\t<strong>图二</strong>\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\t<strong>图三</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230710150129892.png\" alt=\"image-20230710150129892\" /></p>\n<p><strong>分析</strong>：</p>\n<p>图一：左子树高度：2，右子树高度：1 。差值：1</p>\n<p>图二：左子树高度：2，右子树高度：2 。差值：0</p>\n<p>图三：左子树高度：3，右子树高度：1 。差值：2</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230710151042079.png\" alt=\"image-20230710151042079\" /></p>\n<h4 id=\"单旋转左旋转\"><a class=\"anchor\" href=\"#单旋转左旋转\">#</a> 单旋转 (左旋转)</h4>\n<p>如果是左旋转就属于是单旋转</p>\n<p 4,3,6,5,7,8=\"\"><strong>要求</strong>：给你一个数列，创建出对应的平衡二叉树，数列</p>\n<p><strong>左旋转的目的</strong>：降低右子树的高度</p>\n<p><strong>思路分析 (示意图)</strong></p>\n<p>下图红线部分是调整流程。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230710153838284.png\" alt=\"image-20230710153838284\" /></p>\n<p>按照规则调整完成之后，形成了下面这样一棵树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230710153954253.png\" alt=\"image-20230710153954253\" /></p>\n<p>完整流程如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230710154031528.png\" alt=\"image-20230710154031528\" /></p>\n<p>插入 8 时，发现左右子树高度相差大于 1，则进行左旋转；</p>\n<ol>\n<li>创建一个新的节点 <code>newNode</code> ，值等于当前 <strong>根节点</strong> 的值 (以 4 创建)</li>\n<li>把新节点的 左子树 设置为当前节点的 <strong>左子树</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>把新节点的 <strong>右子树</strong> 设置为<mark>当前节点</mark> <mark>右子树</mark>的<mark>左子树</mark></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>把 <mark>当前节点</mark> 的<mark>值换为</mark> <mark>右子节点 的值</mark></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>value <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>把 <mark>当前节点</mark> 的<mark>右子树设置为</mark> <mark>右子树的右子树</mark></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>把 <mark>当前节点</mark> 的<mark>左子树设置为新节点</mark></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;strong style=&quot;color:red&quot;&gt; 注 &lt;/strong&gt;：图左边是调整期，右边是调整后。注意调整期的 6 那个节点，<strong>调整之后，没有节点指向它了</strong>。也就是说，遍历的时候它是不可达的。那么将会自动的被垃圾回收掉。</p>\n<h5 id=\"树高度计算\"><a class=\"anchor\" href=\"#树高度计算\">#</a> 树高度计算</h5>\n<p>前面说过，平衡二叉树是为了解决二叉排序树中可能出现的查找效率问题，那么基本上的代码都可以在之前的二叉排序树上进行优化。那么下面只给出当前主题相关的代码，最后放出一份完整的代码。</p>\n<p>树的高度计算，我们需要得到 3 个高度：</p>\n<ol>\n<li>这棵树的整体高度</li>\n<li>左子树的高度</li>\n<li>右子树的高度</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1015:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">AVLTree</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        tree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"左树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"右数高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return 获取 root 节点</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param node 传入要添加的节点</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">// 节点的值</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 左子节点</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 右子节点</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 构造器初始化节点的值</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// 返回左子树的高度</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">// 返回右子树的高度</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 返回当前节点的高度，以当前节点为跟节点的树的高度</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>         * 这里使用了递归：返回了左右子树，最高的那一个数值。</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>         * 递归原理： 第一个开始统计的时候，一定是一个叶子节点。</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>         *          根据这个逻辑：叶子节点的 Math.max (0,0) = 0</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>         *          因为当前节点算一层，所以 +1;</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         *          返回到上一层的时候，至少是这样：Math.max (1,0) = 1</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         *          然后把自己本身的层 + 1. 以此类推，返回到根节点的时候，就拿到了从包含根节点的树的高度</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">//+1；因为本身节点也要算上</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * @param node 传入要添加的节点进行添加</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"旋转\"><a class=\"anchor\" href=\"#旋转\">#</a> 旋转</h5>\n<p><strong>说下旋转的时机</strong>：也就是什么时候采取做旋转的操作</p>\n<p><strong>当然是</strong>：当 <mark>右子树高度 - 左子树高度 &gt; 1</mark> 时，才执行左旋转。</p>\n<p>这里就得到一些信息：</p>\n<ol>\n<li>\n<p>每次添加完一个节点后，就需要检查树的高度</p>\n</li>\n<li>\n<p>满足 <mark>右子树高度 - 左子树高度 &gt; 1</mark>，那么一定满足下面的条件：</p>\n<ol>\n<li>\n<p>左子树高度为 1</p>\n</li>\n<li>\n<p>右子树高度为 3</p>\n<p>也就是符合以下这张图：</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711110051128.png\" alt=\"image-20230711110051128\" /></p>\n<p>也就是有如上的信息逻辑，在实现旋转的时候，只要按照思路分析写就可以了，不需要进行边界判断了。</p>\n</li>\n<li>\n<p>代码实现：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1015:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">AVLTree</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        tree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"左树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"右数高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前Root节点为: \"</span><span class=\"token operator\">+</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @return 获取 root 节点</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @param node 传入要添加的节点</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 节点的值</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 左子节点</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 右子节点</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 构造器初始化节点的值</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 返回左子树的高度</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 返回右子树的高度</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 返回当前节点的高度，以当前节点为跟节点的树的高度</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>         * 这里使用了递归：返回了左右子树，最高的那一个数值。</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>         * 递归原理： 第一个开始统计的时候，一定是一个叶子节点。</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>         *          根据这个逻辑：叶子节点的 Math.max (0,0) = 0</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         *          因为当前节点算一层，所以 +1;</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         *          返回到上一层的时候，至少是这样：Math.max (1,0) = 1</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>         *          然后把自己本身的层 + 1. 以此类推，返回到根节点的时候，就拿到了从包含根节点的树的高度</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">//+1；因为本身节点也要算上</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     * 创建左旋转方法</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个新的节点 newNode (以 4 这个值创建), 创建一个新的节点，值等于当前根节点的值</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token class-name\">Node</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">//2. 把新节点的左子树设置为当前节点的左子树</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">//3. 把新节点的右子树设置为当前节点的右子树的左子树</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">//4. 把当前节点的值换为右子节点的值</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">//5. 把当前节点的右子树设置为右子树的右子树</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">//6. 把当前节点的左子树设置为新节点</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     * @param node 传入要添加的节点进行添加</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>         * 旋转的时候有以下规则</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>         * 没添加一个节点后：检查树的高度是否平衡</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>         *         如果右子树高度 - 左子树高度 > 1 ，则左旋转</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>         *         也就是说：每次旋转的层只涉及到 4 层 (对照笔记上的图示理解)</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<pre><code>Node&#123;value=3&#125;\nNode&#123;value=4&#125;\nNode&#123;value=5&#125;\nNode&#123;value=6&#125;\nNode&#123;value=7&#125;\nNode&#123;value=8&#125;\n树高度：3\n左树高度：2\n右数高度：2\n当前Root节点为: Node&#123;value=6&#125;\n</code></pre>\n<p>看完代码之后，它的旋转其实就是，将 root 节点，往下沉到了 root.right 节点下面。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711110535115.png\" alt=\"image-20230711110535115\" /></p>\n<p>看着上图，是否有想过，貌似根本就可以不用前面讲解的 6 个步骤来旋转：</p>\n<ol>\n<li>不用创建新节点</li>\n<li>直接将 node 节点下沉</li>\n<li>更改 node 的 right 节点为 right.left</li>\n<li>更改 right.left = node</li>\n</ol>\n<p>其实就已经完成了旋转。但是你仔细想一想，旋转逻辑是写在 node 里面的，avlTree 中的引用如何改变？除非把旋转逻辑移动到 avlTree 中去，就可以省略掉新节点的步骤来完成。</p>\n<h4 id=\"右旋转\"><a class=\"anchor\" href=\"#右旋转\">#</a> 右旋转</h4>\n<ul>\n<li>左旋转：右 - 左 &gt; 1 ，把右边的往左边旋转一层</li>\n<li>右旋转：左 - 右 &gt; 1 ，把左边的往右边旋转一层</li>\n</ul>\n<p>它们是反着来得思路如下：</p>\n<ol>\n<li>创建一个新的节点 newNode，值等于当前 <strong>根节点</strong> 的值 (以 10 创建)</li>\n<li>把新节点的  <strong>右子树</strong>  设置为当前节点的 <strong>右子树</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>把新节点的  <strong>左子树</strong>  设置为当前节点的  <strong>左子树的右子树</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>把 <strong>当前节点</strong> 的<strong>值</strong>换为  <strong>左子节点</strong>  的值</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>把  <strong>当前节点</strong> 的<strong>左子树</strong>设置为 <strong>左子树的左子树</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>把 <strong>当前节点</strong> 的<strong>右子树</strong>设置为<strong>新节点</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述步骤就是对应下图的描述：查看图示更清楚</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711114545279.png\" alt=\"image-20230711114545279\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1015:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">AVLTree</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        int[] arr = &#123;4, 3, 6, 5, 7, 8&#125;;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        tree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"左树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"右数高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前Root节点为: \"</span><span class=\"token operator\">+</span>tree<span class=\"token punctuation\">.</span><span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//8</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @return 获取 root 节点</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param node 传入要添加的节点</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 节点的值</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 左子节点</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 右子节点</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 构造器初始化节点的值</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 返回左子树的高度</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 返回右子树的高度</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// 返回当前节点的高度，以当前节点为跟节点的树的高度</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>         * 这里使用了递归：返回了左右子树，最高的那一个数值。</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>         * 递归原理： 第一个开始统计的时候，一定是一个叶子节点。</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         *          根据这个逻辑：叶子节点的 Math.max (0,0) = 0</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         *          因为当前节点算一层，所以 +1;</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>         *          返回到上一层的时候，至少是这样：Math.max (1,0) = 1</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>         *          然后把自己本身的层 + 1. 以此类推，返回到根节点的时候，就拿到了从包含根节点的树的高度</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">//+1；因为本身节点也要算上</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * 创建右旋转方法</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个新的节点 newNode (以 10 这个值创建)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token class-name\">Node</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">//2. 把新节点的右子树设置为当前节点的右子树</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token comment\">//3. 把新节点的左子树设置为当前节点的左子树的右子树</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">//4. 把当前节点的值换为左子树的值</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">//5. 把当前节点的左子树设置为左子树的左子树</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">//6. 把当前节点的右子树设置为新节点</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     * 创建左旋转方法</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个新的节点 newNode (以 4 这个值创建), 创建一个新的节点，值等于当前根节点的值</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token class-name\">Node</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">//2. 把新节点的左子树设置为当前节点的左子树</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token comment\">//3. 把新节点的右子树设置为当前节点的右子树的左子树</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">//4. 把当前节点的值换为右子节点的值</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token comment\">//5. 把当前节点的右子树设置为右子树的右子树</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token comment\">//6. 把当前节点的左子树设置为新节点</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>     * @param node 传入要添加的节点进行添加</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>         * 旋转的时候有以下规则</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>         * 没添加一个节点后：检查树的高度是否平衡</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>         *         如果右子树高度 - 左子树高度 > 1 ，则左旋转</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>         *         也就是说：每次旋转的层只涉及到 4 层 (对照笔记上的图示理解)</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>Node&#123;value=6&#125;\nNode&#123;value=7&#125;\nNode&#123;value=8&#125;\nNode&#123;value=9&#125;\nNode&#123;value=10&#125;\nNode&#123;value=12&#125;\n树高度：3\n左树高度：2\n右数高度：2\n当前Root节点为: Node&#123;value=8&#125;\n</code></pre>\n<h3 id=\"单旋转的strong-stylecolorred注意事项strong\"><a class=\"anchor\" href=\"#单旋转的strong-stylecolorred注意事项strong\">#</a> <mark>单旋转</mark>的 &lt;strong style=&quot;color:red&quot;&gt; 注意事项 &lt;/strong&gt;</h3>\n<p>有些情况下，&lt;strong style=&quot;color:red&quot;&gt; 单旋转不能完成平衡二叉树的转换如比数列 &lt;/strong&gt; {10,11,7,6,8,9} 或者 {2,1,6,5,7,3}; 运行原来的代码可以看到，并没有转成 AVL 树。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90.png\" alt=\"问题分析\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711145636238.png\" alt=\"image-20230711145636238\" /></p>\n<p><strong>问题分析</strong>：</p>\n<p>左侧这个树满足  <code>leftHeight - rightHeight &gt; 1</code> ，也就是满足右旋转，旋转之后，树结构变化了。但是还是一个非平衡二叉树</p>\n<p>它的主要原因是：root 左子树的 左子树高度 小于 右子树的高度。即：节点 7 的左子树高度小于右子树的高度。</p>\n<h3 id=\"解决办法双旋转\"><a class=\"anchor\" href=\"#解决办法双旋转\">#</a> 解决办法 —— 双旋转</h3>\n<ol>\n<li>先将 7 这个节点为 root 节点，进行左旋转</li>\n<li>再将原始的 root 节点进行右旋转</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230711145017212.png\" alt=\"123\" /></p>\n<p><strong>其实可以参考下面两个单旋转的例子，它有这样一个特点</strong>：</p>\n<ol>\n<li><strong>右旋转</strong>：\n<ul>\n<li>root 的 left 左子树高度 大于 右子树高度</li>\n<li>右旋转的时候，会将 left.right 旋转到 right.left 节点上个</li>\n</ul>\n</li>\n<li><strong>左旋转</strong>：\n<ul>\n<li>root 的 right 右子树高度 大于 左子树高度</li>\n<li>左旋转的时候，会将 right.left 旋转到 left.right 上</li>\n</ul>\n</li>\n</ol>\n<p>如果不满足这个要求，在第二个操作的时候，就会导致 2 层的高度被旋转到 1 层的节点下面，导致不平衡了。</p>\n<p><strong>解决代码如下</strong>：</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/1015:49</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">AVLTree</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AVLTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//        int[] arr = &#123;4, 3, 6, 5, 7, 8&#125;;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//        int[] arr = &#123;10, 12, 8, 9, 7, 6&#125;;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">// 下面两个数组是导致单旋转失败的例子</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        int[] arr = &#123;10, 11, 7, 6, 8, 9&#125;;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            tree<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        tree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"左树高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"右数高度：%d\\n\"</span><span class=\"token punctuation\">,</span> tree<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前Root节点为: \"</span> <span class=\"token operator\">+</span> tree<span class=\"token punctuation\">.</span><span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">AVLTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @return 获取 root 节点</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">getRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @param node 传入要添加的节点</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            root <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 节点的值</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 左子节点</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 右子节点</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// 构造器初始化节点的值</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 返回左子树的高度</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token comment\">// 返回右子树的高度</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 返回当前节点的高度，以当前节点为跟节点的树的高度</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         * 这里使用了递归：返回了左右子树，最高的那一个数值。</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>         * 递归原理： 第一个开始统计的时候，一定是一个叶子节点。</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>         *          根据这个逻辑：叶子节点的 Math.max (0,0) = 0</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         *          因为当前节点算一层，所以 +1;</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>         *          返回到上一层的时候，至少是这样：Math.max (1,0) = 1</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>         *          然后把自己本身的层 + 1. 以此类推，返回到根节点的时候，就拿到了从包含根节点的树的高度</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">//+1；因为本身节点也要算上</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     * 创建有旋转方法</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个新的节点 newNode (以 10 这个值创建)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token class-name\">Node</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">//2. 把新节点的右子树设置为当前节点的右子树</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">//3. 把新节点的左子树设置为当前节点的左子树的右子树</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">//4. 把当前节点的值换为左子树的值</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">//5. 把当前节点的左子树设置为左子树的左子树</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token comment\">//6. 把当前节点的右子树设置为新节点</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * 创建左旋转方法</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">//1. 创建一个新的节点 newNode (以 4 这个值创建), 创建一个新的节点，值等于当前根节点的值</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token class-name\">Node</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token comment\">//2. 把新节点的左子树设置为当前节点的左子树</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token comment\">//3. 把新节点的右子树设置为当前节点的右子树的左子树</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token comment\">//4. 把当前节点的值换为右子节点的值</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token comment\">//5. 把当前节点的右子树设置为右子树的右子树</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">//6. 把当前节点的左子树设置为新节点</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     * 添加节点</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>     * @param node 传入要添加的节点进行添加</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>         * 旋转的时候有以下规则</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>         * 没添加一个节点后：检查树的高度是否平衡</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>         *         如果右子树高度 - 左子树高度 > 1 ，则左旋转</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>         *         也就是说：每次旋转的层只涉及到 4 层 (对照笔记上的图示理解)</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>            <span class=\"token comment\">// 如果它的右子树的左子树的高度大于它的右子树的右子树的高度</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> right<span class=\"token punctuation\">.</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                <span class=\"token comment\">// 先对右子节点进行右旋转</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                right<span class=\"token punctuation\">.</span><span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                <span class=\"token comment\">// 然后再对当前节点进行左旋转</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                <span class=\"token comment\">// 直接进行左旋转</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token comment\">// 旋转好后阻止程序的向后执行否则就会产生错误的操作</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token comment\">// 如果它的左子树的右子树高度大于它的左子树的高度</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">rightHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> left<span class=\"token punctuation\">.</span><span class=\"token function\">leftHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>                <span class=\"token comment\">// 先对当前节点的左节点 (左子树) -> 左旋转</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                left<span class=\"token punctuation\">.</span><span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                <span class=\"token comment\">// 再对当前节点进行右旋转</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                <span class=\"token comment\">// 直接进行右旋转</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>                <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"190\"></td><td><pre>     * 中序遍历排序二叉树</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Node&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>                <span class=\"token string\">\"value=\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>Node&#123;value=1&#125;\nNode&#123;value=2&#125;\nNode&#123;value=3&#125;\nNode&#123;value=5&#125;\nNode&#123;value=6&#125;\nNode&#123;value=7&#125;\n树高度：3\n左树高度：2\n右数高度：2\n当前Root节点为: Node&#123;value=5&#125;\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%91%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%91%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/",
            "title": "数据结构与算法-树结构基础部分",
            "date_published": "2024-01-05T01:11:11.482Z",
            "content_html": "<h2 id=\"树结构基础部分\"><a class=\"anchor\" href=\"#树结构基础部分\">#</a> 树结构基础部分</h2>\n<h3 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> 二叉树</h3>\n<p><strong>为什么需要树这种数据结构</strong></p>\n<ol>\n<li>数组存储方式的分析<br />\n<strong>优点</strong>：通过<mark>下标方式访问元素</mark>，速度快。对于有序数组，还可使用<mark>二分查找提高检索速度</mark>。<br />\n<strong>缺点</strong>：如果要检索具体某个值，或者<mark>插入值 (按一定顺序) 会整体移动</mark>，效率较低 [示意图]。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903674.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>链式存储方式的分析<br />\n<strong>优点</strong>：在一定程度上对数组存储方式有优化 (比如：插入一个数值节点，只需要将插入节点，链接到链表中即可， 删除效率也很好)。<br />\n<strong>缺点</strong>：在进行检索时，效率仍然较低，比如 (检索某个值，需要从头节点开始遍历)</li>\n<li>【示意图】</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903376.png\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>树存储方式的分析<br />\n能提高数据存储，读取的效率，比如利用 二叉排序树 (Binary Sort Tree)，既可以保证数据的检索速度，同时也可以保证数据的插入，删除，修改的速度。【示意图，后面详讲】<br />\n<strong>案例</strong>: [7, 3, 10, 1, 5, 9, 12]</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903631.png\" alt=\"\" /></p>\n<h4 id=\"树的常用术语\"><a class=\"anchor\" href=\"#树的常用术语\">#</a> 树的常用术语：</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903841.png\" alt=\"\" /></p>\n<p>树的常用术语 (结合示意图理解):</p>\n<ol>\n<li>节点</li>\n<li>根节点</li>\n<li>父节点</li>\n<li>子节点</li>\n<li>叶子节点 (没有子节点的节点)</li>\n<li>节点的权 (节点值)</li>\n<li>路径 (从 root 节点找到该节点的路线）</li>\n<li>层</li>\n<li>子树</li>\n<li>树的高度 (最大层数)</li>\n<li>森林：多颗子树构成森林</li>\n</ol>\n<p><strong>二叉树的概念</strong></p>\n<ol>\n<li>树有很多种，<mark>每个节点最多只能有两个子节点</mark>的一种形式<mark>称为二叉树</mark>。</li>\n<li>二叉树的<mark>子节点</mark>分为<mark>左节点</mark>和<mark>右节点</mark>。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903760.png\" alt=\"\" /></p>\n<p><strong>二叉树的概念</strong></p>\n<ol start=\"3\">\n<li>如果该二叉树的所有<mark>叶子节点都在最后一层</mark>，并且结点总数 = 2^n -1 , n 为层数，则我们称为<mark>满二叉树</mark>。</li>\n<li>如果该二叉树的所有<mark>叶子节点都在最后一层</mark>或者<mark>倒数第二层</mark>，<mark>而且</mark><mark>最后一层的叶子节点在左边连续</mark>，<mark>倒数第二层的叶子节点在右边连续</mark>，我们称为<mark>完全二叉树</mark>。<br />\n我们重点讲解一下二叉树的<strong>前序遍历</strong>，<strong>中序遍历</strong>和<strong>后序遍历</strong>。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903921.png\" alt=\"\" /></p>\n<h4 id=\"二叉树遍历应用实例前序中序后序\"><a class=\"anchor\" href=\"#二叉树遍历应用实例前序中序后序\">#</a> 二叉树遍历应用实例 (前序，中序，后序)</h4>\n<p><strong>二叉树遍历的说明</strong></p>\n<p>使用前序，中序和后序对下面的二叉树进行遍历.</p>\n<p><mark>前序遍历</mark>：先输出父节点，再遍历左子树和右子树</p>\n<p><mark>中序遍历</mark>：先遍历左子树，再输出父节点，再遍历右子树</p>\n<p><mark>后序遍历</mark>：先遍历左子树，再遍历右子树，最后输出父节点</p>\n<p><mark>小结</mark>：看输出父节点的顺序，就确定是前序，中序还是后序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903028.png\" alt=\"\" /></p>\n<p><strong>要求如下</strong>：</p>\n<ol>\n<li>前上图的 3 号节点 &quot;卢俊&quot;  , 增加一个左子节点 [5, 关胜]</li>\n<li>使用前序，中序，后序遍历，请写出各自输出的顺序是什么？</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903018.png\" alt=\"\" /></p>\n<p><strong>输出顺序思路</strong>：</p>\n<blockquote>\n<p>前序：中，左，右 -&gt; 父节点 (1) &gt; 左 (2)[左节点没有右节点就到下一个旁边的] &gt; 右 (3)[先输出父节点，然后左节点和右节点] &gt; 左 (5) &gt; 右 (4)<br />\n 最终结果：1，2，3，5，4</p>\n<p>中序：左，中，右 -&gt; 左节点 (2)[没有左右节点] &gt; 父节点 (1) &gt; 左节点 (5)[3 是父节点它的左节点是 3] &gt; 父节点 (3) &gt; 右节点 (4)<br />\n 最终结果：2，1，5，3，4</p>\n<p>后序：左，右，中 -&gt; 左节点 (2)[没有左右节点到旁边节点] &gt; 3 节点的左节点 (5)[节点 3 是父节点先输出左节点 5] &gt; 3 节点的有节点 (4) &gt; 父节点 (3) &gt; 父节点 (1)<br />\n 最终结果：2，5，4，3，1</p>\n</blockquote>\n<p>代码实现：</p>\n<p>测试前序，中序，后序的输出顺序的代码案例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个二叉树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> binaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"林冲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关胜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树 (后面使用递归方式创建二叉树)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前序遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,3,5,4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中序遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2,1,3,5,4</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后序遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5,4,3,2,1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 定义 BinaryTree 二叉树</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 前序遍历，遍历是从根节点 (root) 开始的</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 后序遍历</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token comment\">// 前序遍历方法</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token comment\">// 先输出父节点</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树前序遍历</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树前序遍历</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token comment\">// 中序遍历方法</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树中序遍历</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树中序遍历</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">// 后序遍历方法</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树后序遍历</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树后序遍历</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"二叉树-查找指定节点\"><a class=\"anchor\" href=\"#二叉树-查找指定节点\">#</a> 二叉树 -<mark> 查找指定节点</mark></h4>\n<p>要求</p>\n<ol>\n<li>请编写<strong>前序查找</strong>，<strong>中序查找</strong>和<strong>后序查找</strong>的<strong>方法</strong></li>\n<li>并分别使用<strong>三种查找方式</strong>，<strong>查找 heroNode = 5</strong> 的节点</li>\n<li>并<strong>分析各种查找方式</strong>，分别<strong>比较了多少次</strong></li>\n</ol>\n<p>代码演示：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个二叉树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> binaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"林冲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关胜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树 (后面使用递归方式创建二叉树)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前序遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,3,5,4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//        binaryTree.preOrder();</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中序遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//        binaryTree.infixOrder();//2,1,3,5,4</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 测试</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后序遍历\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        binaryTree.postOrder();//5,4,3,2,1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------前序遍历方式-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> resNode <span class=\"token operator\">=</span> binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找到的信息为 [↓]\\n>>>\\t\\tid:\\t%d\\n>>>\\t\\tname:\\t%s\\n\"</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到编号为%d的信息\"</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------中序遍历方式-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> resNode1 <span class=\"token operator\">=</span> binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resNode1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找到的信息为 [↓]\\n>>>\\t\\tid:\\t%d\\n>>>\\t\\tname:\\t%s\\n\"</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到编号为%d的信息\"</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------后序遍历方式-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> resNode2 <span class=\"token operator\">=</span> binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resNode2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"查找到的信息为 [↓]\\n>>>\\t\\tid:\\t%d\\n>>>\\t\\tname:\\t%s\\n\"</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有找到编号为%d的信息\"</span><span class=\"token punctuation\">,</span>resNode<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 定义 BinaryTree 二叉树</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 前序遍历，遍历是从根节点 (root) 开始的</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 后序遍历</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 前序遍历查找</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\">// 中序遍历查找</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// 后序遍历查找</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> countPre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> countInfix <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> countPost <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token comment\">// 前序遍历方法</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token comment\">// 先输出父节点</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树前序遍历</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树前序遍历</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token comment\">// 中序遍历方法</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树中序遍历</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树中序遍历</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>    <span class=\"token comment\">// 后序遍历方法</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树后序遍历</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树后序遍历</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"219\"></td><td><pre>     * 前序遍历查找</pre></td></tr><tr><td data-num=\"220\"></td><td><pre>     * @param no 查找 no</pre></td></tr><tr><td data-num=\"221\"></td><td><pre>     * @return 如果找到就返回该 Node，如果没有找到返回 null</pre></td></tr><tr><td data-num=\"222\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        countPre<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入前序遍历~~~\\t一共遍历了>\\t%d\\t&lt;次\\n\"</span><span class=\"token punctuation\">,</span>countPre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token comment\">// 比较当前节点是不是要查找的节点</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token comment\">// 则判断当前节点的左子节点是否为空，如果不为空，则递归前序查找</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"233\"></td><td><pre>         * 1. 判断当前节点的左子节点是否为空，如果不为空，则递归前序查找</pre></td></tr><tr><td data-num=\"234\"></td><td><pre>         * 2. 如果做递归前序查找，找到节点，则返回</pre></td></tr><tr><td data-num=\"235\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>            heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token comment\">// 说明左子树找到</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>heroNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>            <span class=\"token keyword\">return</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>            heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token keyword\">return</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>    <span class=\"token comment\">// 中序遍历查找</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token comment\">// 判断左子节点是否为空，如果不为空则递归向左子节点遍历查找</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        countInfix <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入中序遍历~~~\\t一共遍历了>\\t%d\\t&lt;次\\n\"</span><span class=\"token punctuation\">,</span>countInfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>        <span class=\"token comment\">// 判断当前节点是否 为需要查找的</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>        <span class=\"token comment\">// 判断右子节点是否为空，如果不为空则递归向右子节点遍历查找</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token comment\">// 无论是否为空 都要返回递归节点</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>    <span class=\"token comment\">// 后序遍历查找</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>        <span class=\"token comment\">// 判断左子节点是否为空</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token comment\">// 判断节点不为空则返回</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>        <span class=\"token comment\">// 判断右子节点是否为空</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>        countPost <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入后序遍历~~~\\t一共遍历了>\\t%d\\t&lt;次\\n\"</span><span class=\"token punctuation\">,</span>countPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>        <span class=\"token comment\">// 判断是否为需要查找的节点</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<pre><code>-----------------前序遍历方式-----------------\n进入前序遍历~~~\t一共遍历了&gt;\t1\t&lt;次\n进入前序遍历~~~\t一共遍历了&gt;\t2\t&lt;次\n进入前序遍历~~~\t一共遍历了&gt;\t3\t&lt;次\n进入前序遍历~~~\t一共遍历了&gt;\t4\t&lt;次\n查找到的信息为 [↓]\n&gt;&gt;&gt;\t\tid:\t5\n&gt;&gt;&gt;\t\tname:\t关胜\n-----------------中序遍历方式-----------------\n进入中序遍历~~~\t一共遍历了&gt;\t1\t&lt;次\n进入中序遍历~~~\t一共遍历了&gt;\t2\t&lt;次\n进入中序遍历~~~\t一共遍历了&gt;\t3\t&lt;次\n查找到的信息为 [↓]\n&gt;&gt;&gt;\t\tid:\t5\n&gt;&gt;&gt;\t\tname:\t关胜\n-----------------后序遍历方式-----------------\n进入后序遍历~~~\t一共遍历了&gt;\t1\t&lt;次\n进入后序遍历~~~\t一共遍历了&gt;\t2\t&lt;次\n查找到的信息为 [↓]\n&gt;&gt;&gt;\t\tid:\t5\n&gt;&gt;&gt;\t\tname:\t关胜\n</code></pre>\n<p><strong>分析结果</strong>：前序查找次数：4 ，中序查找次数：3 ，后序查找次数：2</p>\n<h4 id=\"二叉树-删除节点\"><a class=\"anchor\" href=\"#二叉树-删除节点\">#</a> 二叉树 -<mark> 删除节点</mark></h4>\n<p>要求：</p>\n<ol>\n<li>如果删除的节点是叶子节点，则删除该节点。</li>\n<li>如果删除的节点是非叶子节点，则删除该子树。</li>\n<li>测试，删除掉 5 号叶子节点和 3 号子树。</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230630120206935.png\" alt=\"image-20230630120206935\" /></p>\n<p>完成删除的思路分析：</p>\n<p>二叉树 - 删除节点</p>\n<p>思考题 (课后练习)</p>\n<p>如果要删除的节点是非叶子节点，现在我们不希望将该非叶子节点为根节点的子树删除，<strong>需要指定规则</strong>，<strong> 假如规定如下</strong>:</p>\n<ol>\n<li>如果该非叶子节点 A 只有一个子节点 B，则子节点 B 替代节点 A</li>\n<li>如果该非叶子节点 A 有左子节点 B 和右子节点 C，则让左子节点 B 替代节点 A。</li>\n</ol>\n<p>思路：</p>\n<blockquote>\n<p>首先先处理：</p>\n<p>考虑如果树是空树 root，如果只有一个 root 节点，则等价将二叉树置空</p>\n</blockquote>\n<p>然后进行下面步骤：</p>\n<ol>\n<li>因为我们的二叉树是单向的，所以我们是判断当前节点的子节点是否需要删除节点，而不能去判断当前这个节点是不是需要删除节点。</li>\n<li>如果当前节点的左子节点不为空，并且左子节点就是要删除节点，就将 <code>this.left = null;</code>  并且就返回<sup> `return;`</sup>(结束递归删除)</li>\n<li>如果当前节点的右子节点不为空，并且右子节点就是要删除节点，就将 <code>this.right = null;</code>  并且就返回<sup> `return;`</sup>(结束递归删除)</li>\n<li>如果第 2 和第 3 步没有删除节点，那么我们就需要向左子树进行递归删除</li>\n<li>如果第 4 步也没有删除节点，则应当向右子树进行递归删除</li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建一个二叉树</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BinaryTree</span> binaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"吴用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"卢俊义\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"林冲\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关胜\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树 (后面使用递归方式创建二叉树)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        root<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        node1<span class=\"token punctuation\">.</span><span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span>node3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* TODO</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        // 测试</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        System.out.println (\"前序遍历\");//1,2,3,5,4</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        binaryTree.preOrder ();</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        // 测试</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        System.out.println (\"中序遍历\");</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        binaryTree.infixOrder ();//2,1,3,5,4</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        // 测试</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        System.out.println (\"后序遍历\");</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        binaryTree.postOrder ();//5,4,3,2,1</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        TODO */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">/* TODO</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        System.out.println (\"----------------- 前序遍历方式 -----------------\");</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        HeroNode resNode = binaryTree.preOrderSearch (5);</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        if (resNode != null)&#123;</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            System.out.printf (\"查找到的信息为 [↓]\\n>>>\\t\\tid:\\t% d\\n>>>\\t\\tname:\\t% s\\n\",resNode.getNo (),resNode.getName ());</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        &#125; else &#123;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            System.out.printf (\"没有找到编号为 % d 的信息\",resNode.getNo ());</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        System.out.println (\"----------------- 中序遍历方式 -----------------\");</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        HeroNode resNode1 = binaryTree.infixOrderSearch (5);</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        if (resNode1 != null)&#123;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            System.out.printf (\"查找到的信息为 [↓]\\n>>>\\t\\tid:\\t% d\\n>>>\\t\\tname:\\t% s\\n\",resNode.getNo (),resNode.getName ());</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        &#125; else &#123;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            System.out.printf (\"没有找到编号为 % d 的信息\",resNode.getNo ());</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        System.out.println (\"----------------- 后序遍历方式 -----------------\");</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        HeroNode resNode2 = binaryTree.postOrderSearch (5);</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        if (resNode2 != null)&#123;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            System.out.printf (\"查找到的信息为 [↓]\\n>>>\\t\\tid:\\t% d\\n>>>\\t\\tname:\\t% s\\n\",resNode.getNo (),resNode.getName ());</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        &#125; else &#123;</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            System.out.printf (\"没有找到编号为 % d 的信息\",resNode.getNo ());</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        TODO */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">/* TODO</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        // 测试删除节点</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        System.out.println (\"----------------- 删除前，前序遍历情况 -----------------\");</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        binaryTree.preOrder ();//1,2,3,5,4</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        binaryTree.delNode (5);</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        System.out.println (\"----------------- 删除后，前序遍历情况 -----------------\");</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        binaryTree.preOrder ();//1,2,3,4</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        TODO */</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------删除前，前序遍历情况-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,3,5,4</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----------------删除后，前序遍历情况-----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        binaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">// 定义 BinaryTree 二叉树</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">// 删除节点</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// 如果只有一个 root 节点，这里立即判断 root 是不是就是要删除节点</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// 递归删除</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">// 前序遍历，遍历是从根节点 (root) 开始的</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">// 后序遍历</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 前序遍历查找</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">// 中序遍历查找</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token comment\">// 后序遍历查找</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> countPre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> countInfix <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> countPost <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">return</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">getRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>    <span class=\"token comment\">// 前序遍历方法</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token comment\">// 先输出父节点</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树前序遍历</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树前序遍历</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>    <span class=\"token comment\">// 中序遍历方法</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树中序遍历</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树中序遍历</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token comment\">// 后序遍历方法</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>        <span class=\"token comment\">// 递归向左子树后序遍历</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>        <span class=\"token comment\">// 递归向右子树后序遍历</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token comment\">// 输出父节点</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"253\"></td><td><pre>     * 前序遍历查找</pre></td></tr><tr><td data-num=\"254\"></td><td><pre>     * @param no 查找 no</pre></td></tr><tr><td data-num=\"255\"></td><td><pre>     * @return 如果找到就返回该 Node，如果没有找到返回 null</pre></td></tr><tr><td data-num=\"256\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>        countPre<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入前序遍历~~~\\t一共遍历了>\\t%d\\t&lt;次\\n\"</span><span class=\"token punctuation\">,</span>countPre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>        <span class=\"token comment\">// 比较当前节点是不是要查找的节点</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token comment\">// 则判断当前节点的左子节点是否为空，如果不为空，则递归前序查找</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>         * 1. 判断当前节点的左子节点是否为空，如果不为空，则递归前序查找</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>         * 2. 如果做递归前序查找，找到节点，则返回</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token comment\">// 说明左子树找到</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>heroNode <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            <span class=\"token keyword\">return</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>            heroNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>        <span class=\"token keyword\">return</span> heroNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>    <span class=\"token comment\">// 中序遍历查找</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token comment\">// 判断左子节点是否为空，如果不为空则递归向左子节点遍历查找</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>        countInfix <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入中序遍历~~~\\t一共遍历了>\\t%d\\t&lt;次\\n\"</span><span class=\"token punctuation\">,</span>countInfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>        <span class=\"token comment\">// 判断当前节点是否 为需要查找的</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>        <span class=\"token comment\">// 判断右子节点是否为空，如果不为空则递归向右子节点遍历查找</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>        <span class=\"token comment\">// 无论是否为空 都要返回递归节点</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>    <span class=\"token comment\">// 后序遍历查找</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>        <span class=\"token comment\">// 判断左子节点是否为空</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>        <span class=\"token comment\">// 判断节点不为空则返回</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>        <span class=\"token comment\">// 判断右子节点是否为空</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre>            node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">postOrderSearch</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"327\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"328\"></td><td><pre></pre></td></tr><tr><td data-num=\"329\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"330\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"331\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"332\"></td><td><pre></pre></td></tr><tr><td data-num=\"333\"></td><td><pre>        countPost <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"334\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"进入后序遍历~~~\\t一共遍历了>\\t%d\\t&lt;次\\n\"</span><span class=\"token punctuation\">,</span>countPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"335\"></td><td><pre></pre></td></tr><tr><td data-num=\"336\"></td><td><pre>        <span class=\"token comment\">// 判断是否为需要查找的节点</span></pre></td></tr><tr><td data-num=\"337\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"338\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"339\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"340\"></td><td><pre>        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"341\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"342\"></td><td><pre></pre></td></tr><tr><td data-num=\"343\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"344\"></td><td><pre>     * 递归删除节点</pre></td></tr><tr><td data-num=\"345\"></td><td><pre>     * 1. 如果删除的节点是叶子节点，则删除该节点</pre></td></tr><tr><td data-num=\"346\"></td><td><pre>     * 2. 如果删除的节点是非叶子结点，则删除该子树</pre></td></tr><tr><td data-num=\"347\"></td><td><pre>     * @param no</pre></td></tr><tr><td data-num=\"348\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"349\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"350\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"351\"></td><td><pre>         * 思路：</pre></td></tr><tr><td data-num=\"352\"></td><td><pre>         * 1. 因为我们的二叉树是单向的，所以我们是判断当前节点的子节点是否需要删除节点，而不能去判断当前这个节点是不是需要删除节点</pre></td></tr><tr><td data-num=\"353\"></td><td><pre>         * 2. 如果当前节点的左子节点不为空，并且左子节点就是要删除节点，就将 this.left = null; 并且就返回 (结束递归删除)</pre></td></tr><tr><td data-num=\"354\"></td><td><pre>         * 3. 如果当前节点的右子节点不为空，并且右子节点就是要删除节点，就将 this.right = null; 并且就返回 (结束递归删除)</pre></td></tr><tr><td data-num=\"355\"></td><td><pre>         * 4. 如果第 2 和第 3 步没有删除节点，那么我们就需要向左子树进行递归删除</pre></td></tr><tr><td data-num=\"356\"></td><td><pre>         * 5. 如果第 4 步也没有删除节点，则应当向右子树进行递归删除</pre></td></tr><tr><td data-num=\"357\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"358\"></td><td><pre>         <span class=\"token comment\">// 2. 如果当前节点的左子节点不为空，并且左子节点就是要删除节点，就将 this.left = null; 并且就返回 (结束递归删除)</span></pre></td></tr><tr><td data-num=\"359\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"360\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"361\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"362\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"363\"></td><td><pre>        <span class=\"token comment\">// 3. 如果当前节点的右子节点不为空，并且右子节点就是要删除节点，就将 this.right = null; 并且就返回 (结束递归删除)</span></pre></td></tr><tr><td data-num=\"364\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>no <span class=\"token operator\">==</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"365\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"366\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"367\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"368\"></td><td><pre>        <span class=\"token comment\">// 4. 如果第 2 和第 3 步没有删除节点，那么我们就需要向左子树进行递归删除</span></pre></td></tr><tr><td data-num=\"369\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"370\"></td><td><pre>             <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"371\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"372\"></td><td><pre>         <span class=\"token comment\">// 5. 如果第 4 步也没有删除节点，则应当向右子树进行递归删除</span></pre></td></tr><tr><td data-num=\"373\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"374\"></td><td><pre>             <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">delNode</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"375\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"376\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"377\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码讲解：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230630174738464.png\" alt=\"image-20230630174738464\" /></p>\n<h3 id=\"顺序存储二叉树\"><a class=\"anchor\" href=\"#顺序存储二叉树\">#</a> <mark>顺序存储</mark>二叉树</h3>\n<p><strong>基本说明</strong>：</p>\n<p>从数据存储来看，<mark>数组存储方式</mark>和<mark>树存储方式</mark>可以<mark>相互转换</mark>，即<mark>数组可以转换成树</mark>，<mark>树也可以转换成数组</mark>，看下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230630192358216.png\" alt=\"image-20230630192358216\" /></p>\n<p><strong>概述</strong>：</p>\n<p>顺序存储使用<mark>数组的形式实现</mark>；由于<mark>非完全二叉树会导致数组中出现空缺</mark>，<mark>有的位置不能填上数字</mark>，所以顺序存储二叉树通常情况下只考虑<mark>完全二叉树</mark>。</p>\n<p><strong>原理</strong>：</p>\n<p><mark>顺序存储在数组中</mark>是按照<mark>第一层第二层依次往下存储</mark>的，遍历方式也有<mark>前序遍历</mark>，<mark>中序遍历</mark>，<mark>后序遍历</mark>。</p>\n<p><strong>要求</strong>：</p>\n<ol>\n<li>上图的二叉树的节点，要求以数组的方式来存放 arr:[1,2,3,4,5,6]</li>\n<li>要求在遍历数组 arr 时，仍然可以以  <mark>前序遍历</mark>，<mark>中序遍历</mark>，<mark>后序遍历</mark>的方式完成节点的遍历</li>\n</ol>\n<p><strong>顺序存储二叉树的特点</strong>：</p>\n<ol>\n<li>&lt;strong style=&quot;color:red&quot;&gt; 顺序二叉树通常只考虑 &lt;/strong&gt;<mark> 完全二叉树</mark></li>\n<li>第 n 个元素的左子节点为 <code>2*n+1</code></li>\n<li>第 n 个元素的右子节点为 <code>2*n+2</code></li>\n<li>第 n 个元素的父节点为 <code>(n-1)/2</code></li>\n<li>n：表示二叉树中的第几个元素的<mark>下标</mark>（<mark>按 0 开始编号如下图所示</mark>）</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230630192711961.png\" alt=\"image-20230630192711961\" /></p>\n<p>对上述的详细解释：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230630193107449.png\" alt=\"image-20230630193107449\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/6/3019:39</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayBinaryTreeDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ArrayBinaryTree</span> arrayBinaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBinaryTree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        arrayBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,4,5,3,6,7</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        arrayBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        arrayBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 实现顺序存储二叉树遍历</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayBinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储数据节点的数据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 重载 preOrder 方法为了调用方便</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 编写方法，完成顺序存储二叉树的前序遍历</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param index 表示数组的下标</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 向左递归遍历</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 向右递归遍历</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token function\">preOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 顺序二叉树中序遍历</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t <span class=\"token comment\">// 向左递归遍历</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre> </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>       <span class=\"token comment\">// 输出节点</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>       <span class=\"token comment\">// 向右递归遍历</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">// 顺序二叉树后序遍历</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 向左递归遍历</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">// 向右递归遍历</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token function\">postOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> index <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 输出节点</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\t\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<p>无论是 前序遍历，中序遍历，后序遍历，它们的索引都对应那个值</p>\n<pre><code>---------------------前序遍历---------------------\n&gt;&gt;&gt; 当前的下标为0\t元素为:1\n&gt;&gt;&gt; 当前的下标为1\t元素为:2\n&gt;&gt;&gt; 当前的下标为3\t元素为:4\n&gt;&gt;&gt; 当前的下标为4\t元素为:5\n&gt;&gt;&gt; 当前的下标为2\t元素为:3\n&gt;&gt;&gt; 当前的下标为5\t元素为:6\n&gt;&gt;&gt; 当前的下标为6\t元素为:7\n---------------------中序遍历---------------------\n&gt;&gt;&gt; 当前的下标为3\t元素为:4\n&gt;&gt;&gt; 当前的下标为1\t元素为:2\n&gt;&gt;&gt; 当前的下标为4\t元素为:5\n&gt;&gt;&gt; 当前的下标为0\t元素为:1\n&gt;&gt;&gt; 当前的下标为5\t元素为:6\n&gt;&gt;&gt; 当前的下标为2\t元素为:3\n&gt;&gt;&gt; 当前的下标为6\t元素为:7\n---------------------后序遍历---------------------\n&gt;&gt;&gt; 当前的下标为3\t元素为:4\n&gt;&gt;&gt; 当前的下标为4\t元素为:5\n&gt;&gt;&gt; 当前的下标为1\t元素为:2\n&gt;&gt;&gt; 当前的下标为5\t元素为:6\n&gt;&gt;&gt; 当前的下标为6\t元素为:7\n&gt;&gt;&gt; 当前的下标为2\t元素为:3\n&gt;&gt;&gt; 当前的下标为0\t元素为:1\n</code></pre>\n<h3 id=\"线索化二叉树\"><a class=\"anchor\" href=\"#线索化二叉树\">#</a> <mark>线索化</mark>二叉树</h3>\n<p><strong>先看一个问题</strong>：</p>\n<p>将数列 {1,3,6,8,10,14} 构建成一颗二叉树，n<sup> 数组长度</sup> + 1=7</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230630211156278.png\" alt=\"image-20230630211156278\" /></p>\n<p><strong>问题分析</strong>：</p>\n<ol>\n<li 8,3,10,1,14,6=\"\">当我们对上面的二叉树进行中序遍历时，数列为</li>\n<li>但是 6,8,10,14 这几个节点的 左右指针，并没有完全的利用上</li>\n<li>如果我们希望充分的利用各个节点的左右指针，让各个节点可以指向自己的前后节点，怎么办？</li>\n<li>解决方案 - <mark>线索化二叉树</mark></li>\n</ol>\n<p><strong>线索化二叉树基本介绍</strong></p>\n<ol>\n<li>\n<p>n 个节点的二叉链表中含有 n<sup> 数组元素个数</sup> + 1 [公式 2n-(n-1)=n+1] 个<mark>空指针域</mark>。利用<mark>二叉链表中</mark>的<mark>空指针域</mark>，存放指向 &lt;font style=&quot;color:skyblue&quot;&gt; 该节点 &lt;/font &gt; 在 &lt; font style=&quot;color:red&quot;&gt; 某种遍历次序 &lt;/font &gt; 下的<mark>前驱</mark>和<mark>后续</mark>节点的指针 (这种附加的指针称为 &quot;<mark> 线索</mark> &quot;)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230701100223283.png\" alt=\"image-20230701100223283\" /></p>\n</li>\n<li>\n<p>这种加上了线索的二叉链表称为<strong>线索链表</strong>，相应的二叉树称为<strong>线索二叉树</strong> (Threaded BinaryTree)。根据线索性质的不同，线索二叉树可分为<mark>前序线索二叉树</mark>，<mark>中序线索二叉树</mark>，<mark>后序线索二叉树</mark> <strong>三种</strong>。</p>\n</li>\n<li>\n<p>一个节点的<mark>前</mark>一个节点，称为<mark>前驱</mark>节点</p>\n</li>\n<li>\n<p>一个节点的<mark>后</mark>一个节点，称为<mark>后继</mark>节点</p>\n</li>\n</ol>\n<p><strong>线索二叉树引用案例</strong></p>\n<p 8,3,10,1,14,6=\"\"><strong>应用案例说明</strong>：将下面的二叉树，进行<strong>中序线索二叉树</strong>。中序遍历的数列为</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230701101834786.png\" alt=\"image-20230701101834786\" /></p>\n<p><strong>思路分析</strong>：</p>\n<p 8,3,10,1,14,6=\"\">中序遍历的结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230701101932874.png\" alt=\"image-20230701101932874\" /></p>\n<ul>\n<li>8 的后继节点为 3</li>\n<li>3 由于 <strong>左右节点都有元素，不能线索化</strong></li>\n<li>10 的前驱节点为 3 ，后继节点为 1</li>\n<li>1 不能线索化<sup> root 节点</sup></li>\n<li>14 的前驱节点为 1，后继节点为 6</li>\n<li>6 有左节点，有节点没有元素，不能线索化</li>\n</ul>\n<p>&lt;font style=&quot;color:red&quot;&gt;<strong> 引出问题</strong> &lt;/font&gt;：根据中序遍历结果：{8,3,10,1,14,6} 在图中 1 的前驱是 3 后继是 6 可是中序遍历的<mark>结果不一样</mark></p>\n<p><strong>说明：当线索化二叉树后，Node 节点的 属性 left 和 right，有如下情况</strong>：</p>\n<ol>\n<li>left 指向的是左子树，也可能是指向的前驱节点，比如①节点 left 指向的左子树，而⑩节点的 left 指向的就是前驱节点</li>\n<li>right 指向的是右子树，也可能是指向后继节点，比如 ①节点 right 指向的是右子树，而⑩节点的 right 指向的是后继节点</li>\n</ol>\n<p><strong>代码实现</strong>：</p>\n<p><strong>下面的代码，有几个地方需要注意</strong>：</p>\n<ul>\n<li>\n<p>HeroNode 就是一个 简单的二叉树节点，不同的是多了两个 type 属性：</p>\n<ul>\n<li><strong>leftType</strong>：左节点的类型：0 表示 [<mark>左子树</mark>]，1 表示 [<mark>前驱节点</mark>]</li>\n<li><strong>rightType</strong>：右节点的类型：0 表示 [<mark>右子树</mark>]，1 表示 [<mark>后继节点</mark>]</li>\n</ul>\n</li>\n<li>\n<p>&lt;font style=&quot;color:red&quot;&gt;<strong> 为什么需要</strong> &lt;/font&gt;？</p>\n<ul>\n<li>上面原理讲解了，left 或者 right 会有<mark>两种身份</mark>，需要一个<mark>额外的属性来指明</mark></li>\n</ul>\n</li>\n<li>\n<p>threadNodes：线索化二叉树<strong>方法</strong></p>\n<ul>\n<li>是将一颗<mark>二叉树</mark>，进行<mark>线索化标记</mark>。<mark>只是将可以线索化的节点进行赋值</mark>。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>mrcode<span class=\"token punctuation\">.</span>study<span class=\"token punctuation\">.</span>dsalgtutorialdemo<span class=\"token punctuation\">.</span>datastructure<span class=\"token punctuation\">.</span>tree</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 线索化二叉树</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedBinaryTreeTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         * 左节点的类型：0：左子树，1：前驱节点</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> leftType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         * 右节点的类型：0：右子树，1：后继节点</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> rightType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedBinaryTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode</span> pre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保留上一个节点</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         * 线索化二叉树：以 中序的方式线索化</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         * 重载方法方便调用而已</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadeNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 从 root 开始遍历，然后 线索化</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadeNodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 进行中序线索化二叉树的方法</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadeNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 中序遍历顺序：先左、自己、再右</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 向左递归到最后</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token function\">threadeNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 难点就是在这里，如何线索化自己</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 当自己的 left 节点为空，则设置为前驱节点</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 因为要设置后继节点，只有回到自己的后继节点的时候，才能把自己设置为前一个的后继节点</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 当前一个节点的 right 为空时，则需要自己是后继节点</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">// 数列： 1,3,6,8,10,14</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">// 中序： 8,3,10,1,14,6</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">// 这里最好结合图示的二叉树来看，容易理解</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 因为中序遍历，先遍历左边，所以 8 是第一个输出的节点</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// 当 node = 8 时，pre 还没有被赋值过，则为空。这是正确的，因为 8 就是第一个节点</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 当 8 处理完成之后，处理 3 时</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">// 当 node = 3 时，pre 被赋值为 8 了。</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">threadeNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadeNodesTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"宋江\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> n3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"无用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> n6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"卢俊\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> n8 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"林冲2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> n10 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"林冲3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> n14 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"林冲4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> n3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        n1<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> n6<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        n3<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> n8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        n3<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> n10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        n6<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span> n14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token class-name\">ThreadedBinaryTree</span> tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        tree<span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        tree<span class=\"token punctuation\">.</span><span class=\"token function\">threadeNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token comment\">// 验证：</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> left <span class=\"token operator\">=</span> n10<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token class-name\">HeroNode</span> right <span class=\"token operator\">=</span> n10<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 号节点的前驱节点：\"</span> <span class=\"token operator\">+</span> left<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 号节点的后继节点：\"</span> <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<pre><code>10 号节点的前驱节点：3\n10 号节点的后继节点：1\n</code></pre>\n<p><strong>如果看代码注释看不明白的话，下面来解释</strong>：</p>\n<ul>\n<li>\n<p>线索化的时候，就是要按照 <strong>中序遍历</strong> 的顺序，去找可以线索化的节点</p>\n<p><strong>中序遍历顺序</strong>：先左，自己，再右</p>\n<p>我们主要的代码是在 <strong>自己这一块</strong></p>\n</li>\n<li>\n<p>确定前一个节点 pre</p>\n<p>这个 pre 很难理解，对照下图进行理解</p>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20201202230643686.f3691332.png\" alt=\"image-20201202230643686\" /></p>\n<pre><code>// 数列： 1,3,6,8,10,14\n// 中序： 8,3,10,1,14,6\n\n// 因为中序遍历，先遍历左边，所以 8 是第一个输出的节点\n// 当 node = 8 时，pre 还没有被赋值过，则为空。这是正确的，因为 8 就是第一个节点\n// 当 8 处理完成之后，处理 3 时\n// 当 node = 3 时，pre 被赋值为 8 了。\n</code></pre>\n<ul>\n<li>\n<p><strong>设置前驱节点</strong></p>\n<p>难点的讲解在于 pre，这里就简单了</p>\n<p>如果当 node = 8 时，pre 还是 null，因为 8 就是中序的第一个节点。因此 8 没有前驱</p>\n<p>如果当 node = 3 时，pre = 8，那么 3 是不符合线索化要求的，因为 8 是 3 的 left</p>\n</li>\n<li>\n<p><strong>设置后继节点</strong></p>\n<p>接上面的逻辑。</p>\n<p>如果当 node = 8 时，本来 该给 8 设置它的后继节点，但是此时根本就获取不到节点 3 ，因为节点是单向的。</p>\n<p>如果利用前一个节点 pre。</p>\n<p>当 node = 3 时， pre = 8 ，这时就可以为节点  8 处理它的后继节点了，<strong>因为根据中序的顺序</strong>，<strong>左</strong>，<strong>自己</strong>，<strong>后</strong>。<strong>那么自己一定是前一个的后继</strong>。只要前一个 right 为 null ，就符合线索化。</p>\n</li>\n</ul>\n<p>上述最难的 3 个点说明，请对照上图查看，先看一遍代码，再看说明。然后去 debug 你就懂了。</p>\n<h3 id=\"遍历线索化二叉树\"><a class=\"anchor\" href=\"#遍历线索化二叉树\">#</a> <mark>遍历</mark>线索化二叉树</h3>\n<p><strong>说明</strong>：对前面的中序线索化的二叉树，进行<mark>遍历</mark></p>\n<p><strong>分析</strong>：因为线索化后，各个节点指向有变化，因此 &lt;strong style=&quot;color:red&quot;&gt; 原来的遍历方式不能使用 &lt;/strong&gt;, 这时需要使用<mark>新的方式</mark> &lt;strong&gt; 遍历线索化二叉树 &lt;/strong&gt;, 各个节点可以通过<mark>线型方式遍历</mark>，因此<mark>无需使用递归方式</mark>，这样也<mark>提高了遍历的效率</mark>，&lt;strong&gt; 遍历的<mark>次序</mark>应当和<mark>中序遍历</mark>保持<mark>一致</mark> &lt;/strong&gt;。</p>\n<p>&lt;strong style=&quot;color:red&quot;&gt; 注意 &lt;/strong&gt;：使用原来的方式中序遍历线索化二叉树则会造成 &lt; font style=&quot;color:red&quot;&gt; 堆栈溢出 &lt;/font&gt;.</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/413:02</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedBinaryTreeDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        node1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 测试线索化</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">ThreadedBinaryTree01</span> threadedBinaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedBinaryTree01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 设置 root 节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 调用线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">//TODO 使用遍历二叉树的方式来中序遍历线索化后的二叉树则会造成堆栈溢出</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//        threadedBinaryTree.infixOrder();</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 使用中序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 定义 ThreadedBinaryTree 实现了线索化功能的二叉树</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedBinaryTree01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 为了实现线索化，需要创建指向当前节点的前驱节点的指针</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 在递归进行线索化时，pre 总是保留前一个节点</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 重载方法 方便调用</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * 遍历线索化二叉树</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 定义一个变量，存储当前遍历的节点，从 root 开始</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>             * 循环的找到 leftType == 1 的节点，第一个找到就是 8 节点</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>             * 后面随着遍历而变化，因为当 leftType == 1 时，说明该节点是按照线索化</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>             * 处理后的有效节点</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">// 打印当前这个节点</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 如果当前节点的右指针指向的是后继节点，就一直输出</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token comment\">// 获取到当前节点的后继节点</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 替换这个遍历的节点</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     * 编写对二叉树进行中序线索化的方法</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * @param node 就是当前需要线索化的节点</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">// 如果 node == null，不能进行线索化</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">//(一) 先线索化左子树</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token function\">threadedNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">//(二) 线索化当前节点</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">// 处理当前节点的前驱节点</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 将当前节点的左指针执行前驱节点</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token comment\">// 修改左指针类型标记为前驱节点</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">// 处理后继节点</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token comment\">// 将当前 node 节点设置 pre 右指针的后继节点</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token comment\">// 修改右指针类型标记为前驱节点</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// 将当前节点赋值给 pre 节点 (形成前后关系)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">//(三) 先线索化右子树</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token function\">threadedNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 中序遍历二叉树 (TODO 注意：不能使用遍历线索化后的二叉树)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token comment\">// 左节点</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token comment\">// 右节点</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>     * 说明：</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>     * 1. 如果 leftType == 0 表示指向的是左子树，如果 1 则表示指向前驱节点</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>     * 2. 如果 rightType == 0 表示指向的是右子树，如果 1 表示指向后继节点</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> leftType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> rightType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode01&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"前序遍历线索化二叉树\"><a class=\"anchor\" href=\"#前序遍历线索化二叉树\">#</a> <mark>前序遍历</mark>线索化二叉树</h3>\n<p>二叉树 实现线索化二叉树</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>节点 实现：无</p>\n<p>遍历代码线索化二叉树：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 手动创建二叉树</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>node1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 测试线索化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">ThreadedBinaryTree01</span> threadedBinaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedBinaryTree01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 设置 root 节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 调用前序线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 使用前序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">listPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>HeroNode01&#123;no=1, name='tom'&#125;\nHeroNode01&#123;no=3, name='jack'&#125;\nHeroNode01&#123;no=8, name='mary'&#125;\nHeroNode01&#123;no=10, name='king'&#125;\nHeroNode01&#123;no=6, name='smith'&#125;\nHeroNode01&#123;no=14, name='dim'&#125;\n</code></pre>\n<h3 id=\"中序遍历线索化二叉树\"><a class=\"anchor\" href=\"#中序遍历线索化二叉树\">#</a> <mark>中序遍历</mark>线索化二叉树</h3>\n<p>二叉树 实现线索化二叉树</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 如果 node == null，不能进行线索化</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">//(一) 先线索化左子树</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">//(二) 线索化当前节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 处理当前节点的前驱节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 将当前节点的左指针执行前驱节点</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 修改左指针类型标记为前驱节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 处理后继节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 将当前 node 节点设置 pre 右指针的后继节点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 修改右指针类型标记为前驱节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token comment\">// 将当前节点赋值给 pre 节点 (形成前后关系)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">//(三) 先线索化右子树</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>节点 实现 ：无</p>\n<p>遍历线索化二叉树</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listInfoxOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 定义一个变量，存储当前遍历的节点，从 root 开始</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             * 循环的找到 leftType == 1 的节点，第一个找到就是 8 节点</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             * 后面随着遍历而变化，因为当 leftType == 1 时，说明该节点是按照线索化</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             * 处理后的有效节点</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">// 打印当前这个节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 如果当前节点的右指针指向的是后继节点，就一直输出</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token comment\">// 获取到当前节点的后继节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 替换这个遍历的节点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 手动创建二叉树</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>node1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 测试线索化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">ThreadedBinaryTree01</span> threadedBinaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedBinaryTree01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 设置 root 节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 调用中序线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 使用中序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">listInfoxOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">&#123;</span>no<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token char\">'mary'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">&#123;</span>no<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token char\">'jack'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">&#123;</span>no<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token char\">'king'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">&#123;</span>no<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token char\">'tom'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">&#123;</span>no<span class=\"token operator\">=</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token char\">'dim'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">&#123;</span>no<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token char\">'smith'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"后序遍历线索化二叉树\"><a class=\"anchor\" href=\"#后序遍历线索化二叉树\">#</a> <mark>后序遍历</mark>线索化二叉树</h3>\n<p>二叉树  实现线索化二叉树</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 线索化左子树</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 线索化右子树</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 线索化当前节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 前序遍历添加父节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>节点  实现：添加父节点</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 左节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 右节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 说明：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 1. 如果 leftType == 0 表示指向的是左子树，如果 1 则表示指向前驱节点</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 2. 如果 rightType == 0 表示指向的是右子树，如果 1 表示指向后继节点</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> leftType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> rightType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 添加父节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 前序遍历添加父节点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//2. 向左遍历</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//3. 向右遍历</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode01&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>遍历线索化二叉树：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">HeroNode01</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 右节点是线索</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token comment\">// 如果上个处理的节点是当前节点的右节点</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> pre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>               <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 如果从左节点的进入则找到有子树的最左节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>               node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">HeroNode01</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 手动创建二叉树</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>node1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 测试线索化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">ThreadedBinaryTree01</span> threadedBinaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedBinaryTree01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 设置 root 节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 为节点遍历添加父节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 调用后序线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 使用后序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">listPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<pre><code>HeroNode01&#123;no=8, name='mary'&#125;\nHeroNode01&#123;no=10, name='king'&#125;\nHeroNode01&#123;no=3, name='jack'&#125;\nHeroNode01&#123;no=14, name='dim'&#125;\nHeroNode01&#123;no=6, name='smith'&#125;\nHeroNode01&#123;no=1, name='tom'&#125;\n</code></pre>\n<h3 id=\"完整代码\"><a class=\"anchor\" href=\"#完整代码\">#</a> 完整代码：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author 窦凯欣</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @2023/7/413:02</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @comment</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedBinaryTreeDemo01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"smith\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"mary\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeroNode01</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dim\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 手动创建二叉树</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        node1<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 测试线索化</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">ThreadedBinaryTree01</span> threadedBinaryTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadedBinaryTree01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 设置 root 节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 为节点遍历添加父节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 调用中序线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//        threadedBinaryTree.threadedInfixNodes();</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 调用前序线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//        threadedBinaryTree.threadedNodesPreOrder();</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 调用后序线索化二叉树的方法进行线索化</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//TODO 使用遍历二叉树的方式来中序遍历线索化后的二叉树则会造成堆栈溢出</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//        threadedBinaryTree.infixOrder();</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 使用中序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//        threadedBinaryTree.listInfoxOrder();</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 使用前序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//        threadedBinaryTree.listPreOrder();</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 使用后序遍历线索化的方法来遍历线索化二叉树</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        threadedBinaryTree<span class=\"token punctuation\">.</span><span class=\"token function\">listPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 定义 ThreadedBinaryTree 实现了线索化功能的二叉树</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadedBinaryTree01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * 为了实现线索化，需要创建指向当前节点的前驱节点的指针</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * 在递归进行线索化时，pre 总是保留前一个节点</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     * 前序遍历线索化二叉树</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>     * 中序遍历线索化二叉树</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listInfoxOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 定义一个变量，存储当前遍历的节点，从 root 开始</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>             * 循环的找到 leftType == 1 的节点，第一个找到就是 8 节点</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>             * 后面随着遍历而变化，因为当 leftType == 1 时，说明该节点是按照线索化</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>             * 处理后的有效节点</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token comment\">// 打印当前这个节点</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token comment\">// 如果当前节点的右指针指向的是后继节点，就一直输出</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token comment\">// 获取到当前节点的后继节点</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token comment\">// 替换这个遍历的节点</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token class-name\">HeroNode01</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token comment\">// 右节点是线索</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                <span class=\"token comment\">// 如果上个处理的节点是当前节点的右节点</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> pre<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                    pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                    node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 如果从左节点的进入则找到有子树的最左节点</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                    node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                        node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>     * 编写对二叉树进行中序线索化的方法</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>     * @param node 就是当前需要线索化的节点</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token comment\">// 如果 node == null，不能进行线索化</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token comment\">//(一) 先线索化左子树</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>        <span class=\"token comment\">//(二) 线索化当前节点</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token comment\">// 处理当前节点的前驱节点</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token comment\">// 将当前节点的左指针执行前驱节点</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>            <span class=\"token comment\">// 修改左指针类型标记为前驱节点</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>        <span class=\"token comment\">// 处理后继节点</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token comment\">// 将当前 node 节点设置 pre 右指针的后继节点</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>            <span class=\"token comment\">// 修改右指针类型标记为前驱节点</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token comment\">// 将当前节点赋值给 pre 节点 (形成前后关系)</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token comment\">//(三) 先线索化右子树</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token function\">threadedInfixNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>        pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            <span class=\"token function\">threadedNodesPreOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre></pre></td></tr><tr><td data-num=\"215\"></td><td><pre></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>        <span class=\"token comment\">// 线索化左子树</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>        <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>        <span class=\"token comment\">// 线索化右子树</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        <span class=\"token function\">threadedNodesPostOrder</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token comment\">// 线索化当前节点</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>            node<span class=\"token punctuation\">.</span>leftType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>            pre<span class=\"token punctuation\">.</span>rightType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>        pre <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>    <span class=\"token comment\">// 前序遍历添加父节点</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>    <span class=\"token comment\">// 中序遍历二叉树 (TODO 注意：不能使用遍历线索化后的二叉树)</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"二叉树为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre><span class=\"token comment\">// 创建 HeroNode 节点</span></pre></td></tr><tr><td data-num=\"257\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>    <span class=\"token comment\">// 左节点</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>    <span class=\"token comment\">// 右节点</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"267\"></td><td><pre>     * 说明：</pre></td></tr><tr><td data-num=\"268\"></td><td><pre>     * 1. 如果 leftType == 0 表示指向的是左子树，如果 1 则表示指向前驱节点</pre></td></tr><tr><td data-num=\"269\"></td><td><pre>     * 2. 如果 rightType == 0 表示指向的是右子树，如果 1 表示指向后继节点</pre></td></tr><tr><td data-num=\"270\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> leftType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> rightType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HeroNode01</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HeroNode01</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>no <span class=\"token operator\">=</span> no<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre></pre></td></tr><tr><td data-num=\"289\"></td><td><pre>    <span class=\"token comment\">// 中序遍历</span></pre></td></tr><tr><td data-num=\"290\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"291\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"292\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"293\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"294\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"295\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"296\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">infixOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"297\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"298\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"299\"></td><td><pre></pre></td></tr><tr><td data-num=\"300\"></td><td><pre>    <span class=\"token comment\">// 前序遍历添加父节点</span></pre></td></tr><tr><td data-num=\"301\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"302\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"303\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"304\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"305\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"306\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"307\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"308\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"309\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"310\"></td><td><pre></pre></td></tr><tr><td data-num=\"311\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//2. 向左遍历</span></pre></td></tr><tr><td data-num=\"312\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"313\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"314\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//3. 向右遍历</span></pre></td></tr><tr><td data-num=\"315\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">preOrderAddPar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"316\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"317\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"318\"></td><td><pre></pre></td></tr><tr><td data-num=\"319\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"320\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"321\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"HeroNode01&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"322\"></td><td><pre>                <span class=\"token string\">\"no=\"</span> <span class=\"token operator\">+</span> no <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"323\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"324\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"325\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"326\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A810%E4%B8%AD%E7%AE%97%E6%B3%95/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B8%B8%E7%94%A810%E4%B8%AD%E7%AE%97%E6%B3%95/",
            "title": "数据结构与算法-程序员常用的10中算法",
            "date_published": "2024-01-05T01:05:09.995Z",
            "content_html": "<h2 id=\"程序员常用的10中算法\"><a class=\"anchor\" href=\"#程序员常用的10中算法\">#</a> 程序员常用的 10 中算法</h2>\n<h3 id=\"二分查找非递归\"><a class=\"anchor\" href=\"#二分查找非递归\">#</a> 二分查找 (非递归)</h3>\n<h4 id=\"二分查找非递归介绍\"><a class=\"anchor\" href=\"#二分查找非递归介绍\">#</a> 二分查找 (非递归) 介绍</h4>\n<p>前面我们讲过了二分查找算法，是使用递归的方式 (非递归也写了因为会所以提前写了)。下面我们讲解二分查找算法的非递归方式。</p>\n<p>二分查找法只适用于从有序的数列中进行查找 (比如数组和字母等)，将数列排序后再进行查找。</p>\n<p>二分查找法的运行时间为对数数据 O (log<sub>2</sub>N)，即查找到需要的目标位置最多只需要 log<sub>2</sub>N 步，假设从 [0,99] 的队列 (100 个数，即 n=100) 中寻到目标数 30，则需要查找步数为 log<sub>2</sub>100，即最多需要查找 7 次 (2^6 &lt; 100 &lt; 2 ^ 7)</p>\n<h4 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<p>数组 {1,3, 8, 10, 11, 67, 100}，编程实现二分查找，要求使用非递归的方式完成。</p>\n<p>思路分析：</p>\n<p>判断中间值 mid 来进行折半查找操作</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307141539864.png\" alt=\"image-20230714153923559\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchNoRecur</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">searchErFen</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 二分查找的非递归实现</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param arr 目标数组，数组有序且升序排序</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @param value 要查找的目标值</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @return 返回目标值的下表</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">searchErFen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 起始指针</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 末尾指针</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 循环</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 每次执行折半处理 计算出 数列的中间位置进行查找目标值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> last<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 判断中间的值是否小于目标值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 如果中间值小于目标值则将指针向前移动</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                last <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 判断中间值是否大于目标值</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 如果中间值大于了目标值则将指针向后移动</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 两者都没有执行则说明找到了目标值直接返回</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 如果没有找到则返回 - 1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分治算法\"><a class=\"anchor\" href=\"#分治算法\">#</a> 分治算法</h3>\n<h4 id=\"分治算法介绍\"><a class=\"anchor\" href=\"#分治算法介绍\">#</a> 分治算法介绍</h4>\n<p>分治法是一种很重要的算法。字面上的解释是 &quot;分而治之&quot;，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题 ... 直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法 (&lt;font style=&quot;color:blue&quot;&gt; 快速排序 &lt;/font&gt;，&lt;font style=&quot;color:blue&quot;&gt; 归并排序 &lt;/font&gt;)，傅里叶变换 (快速傅里叶变化)...</p>\n<h4 id=\"分治算法的基本步骤\"><a class=\"anchor\" href=\"#分治算法的基本步骤\">#</a> 分治算法的基本步骤</h4>\n<p><strong>分治法在每一层递归上都有三个步骤</strong>：</p>\n<ol>\n<li><mark>分解</mark>：将原问题分解为若干个规模较小，相互独立。与原问题形式相同的子问题。</li>\n<li><mark>解决</mark>：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题。</li>\n<li><mark>合并</mark>：将各个子问题的解合并为原问题的解。</li>\n</ol>\n<p><strong>分治 (Divide-and-Conquer (P)) 算法设计模式如下</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307141559273.png\" alt=\"image-20230714155912742\" /></p>\n<p>其中 |P| 表示问题 P 的规模；n0 为一阈值，表示当问题 p 的规模不超过 n0 时，问题已容易直接接触，不必再继续分解。ADHOC (P) 是该分治法中的基本子算法，用于直接解小规模的问题 p，因此，当 p 的规模不超过 n0 时直接用算法 ADHOC (P) 求解。算法 MERGE (y1,y2...,yk) 是该分治法中的合并子算法，用于将 p 的子问题 p1,p2,...pk 的相应的解 y1,y2,....yk 合并为 p 的解。</p>\n<h4 id=\"分治算法最佳实践汉诺塔\"><a class=\"anchor\" href=\"#分治算法最佳实践汉诺塔\">#</a> 分治算法最佳实践 —— 汉诺塔</h4>\n<p><strong>汉诺塔的传说</strong></p>\n<p>汉诺塔：汉诺塔 (又称河内塔) 问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摆着 64 片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始大小顺序重新摆放在另一跟柱子上，并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>\n<p>加入每秒钟一次，共需多长时间呢？移完这些金片需要 5845.54 亿年以上，太阳系的预期寿命据说也就是数百亿年。直的超过了 5845.54 亿年，地球上的一切生命，连同梵塔，届宇等，都早已经灰飞烟灭。</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hanoitower</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">hanoiTower</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token char\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 汉诺塔移动的方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hanoiTower</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 如果只有一个盘</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第1个盘从 \"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" -->> \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 如果我们有 n >= 2 情况，我们总是可以看做是两个盘</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">//1. 最下边的一个盘</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">//2. 上面的所有盘</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 一，先吧，最上面的所有盘 A->B, 移动过程中会使用到 c</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">hanoiTower</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 二，吧最下面的盘 A -> C</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\"个盘从 \"</span> <span class=\"token operator\">+</span> a <span class=\"token operator\">+</span> <span class=\"token string\">\" -->> \"</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 三，吧 B 塔的所有盘 从 B -> C, 移动过程使用到 A 塔</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">hanoiTower</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"动态规划算法\"><a class=\"anchor\" href=\"#动态规划算法\">#</a> 动态规划算法</h3>\n<p>应用场景 —— 背包问题</p>\n<p>背包问题：有一个背包，容量为 4 磅，现有如下物品。</p>\n<table>\n<thead>\n<tr>\n<th>物品</th>\n<th>重量</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>吉他 (G)</td>\n<td>1</td>\n<td>1500</td>\n</tr>\n<tr>\n<td>音响 (S)</td>\n<td>4</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>电脑 (L)</td>\n<td>3</td>\n<td>2000</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>要求达到的目标为装入的背包的总价值最大，并且重量不超出</li>\n<li>要求装入的物品不能重复</li>\n</ol>\n<h4 id=\"动态规划算法介绍\"><a class=\"anchor\" href=\"#动态规划算法介绍\">#</a> 动态规划算法介绍</h4>\n<p>1 动态规划 (Dynamic Programming) 算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解决的处理算法</p>\n<p>2 动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成诺干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p>\n<p>3 与分治法不同的是，<mark>适合用于动态规划求解的问题，经分解得到子问题往往不是相互独立的</mark>。(即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解)</p>\n<p>4 动态规划可以通过<mark>填表的方式</mark>来逐步推进，得到最优解。</p>\n<h4 id=\"动态规划算法最佳实践背包问题\"><a class=\"anchor\" href=\"#动态规划算法最佳实践背包问题\">#</a> 动态规划算法最佳实践 —— 背包问题</h4>\n<p><strong>思路分析和图解</strong></p>\n<ul>\n<li>\n<p>背包问题主要是指一个给定容量的背包，若干具有一定价值和重量的物品，如何选择物品放入背包使用物品的价值最大。其中又分 01 背包<sup>每件物品都不可重复</sup> 和 完全背包 (完全背包指的是：每种物品都有无限件可用)</p>\n</li>\n<li>\n<p>这里的问题属于 01 背包 ，即每一个物品最多放一个。而<mark>无限背包可以转化为 01 背包</mark>。</p>\n</li>\n<li>\n<p>算法的主要思想，利用动态规划来解决。每次遍历到的第 i 个物品，根据 w [i] 和 v [i] 来确定是否需要将物品放入背包中。即对于给定的 n 个物品，设 v [i]，w [i] 分别为第 i 个物品的价值和重量，C 为背包的容量。再令 <code>v[i][j]</code>  表示在前 i 个物品中能够装入容量为 j 的背包中的最大价值。则我们有下面的结果：</p>\n</li>\n</ul>\n<p><strong>图解示意图</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307141959508.png\" alt=\"image-20230714195929888\" /></p>\n<p>1  <code>v[i][0] = v[0][j] = 0;</code>  表示 填入表 第一行 和 第一列 是 0</p>\n<p>2 当  <code>w[i - 1] &gt; j</code>  时 -&gt;： <code>v[i][j] = v[i - 1][j]</code>  当准备加入新增的商品的容量大于 当前背包的容量时，就直接使用上一个单元格的装入策略 i - 1 是因为程序中 i 是从 1 开始的数组下标从 0 开始。</p>\n<p>3 当  <code>j &gt;= w[i]</code>  时： <code>v[i][j] = max &#123;v[i - 1][j],v[i - 1][j - w[i]]&#125;</code></p>\n<p>当准备加入的新增的商品的容量大小等于当前背包 的容量，转入的方式如下：</p>\n<p><code>v[i - 1][j]</code> ：就是上一个单元格的装入的最大值</p>\n<p><code>val[i]</code> ：表示当前商品的价值</p>\n<p><code>v[i - 1][j - w[i]]</code> ：装入 i - 1 商品，到剩余空间 j - w [i] 的最大值</p>\n<p>当 <code>j &gt;= w[i]</code>  时： <code>v[i][j] = max &#123;v[i - 1][j],val[i] + v[i - 1][j - w[i]]&#125;</code> ;</p>\n<p>解释 <code>j &gt;= w[i]</code>  公式的含义：如果新的商品装不进去那么就采用原先的 <code>v[i][j] = v[i - 1][j]</code>  装入策略。如果商品可以装进去那么就要看哪一个更大 <code>v[i][j] = max&#123;v[i - 1][j],val[i] + v[i - 1][j - w[i]]&#125;</code>  是 <code>v[i - 1][j]</code>  更大呢还是 <code>val[i] + v[i - 1][j - w[i]]</code>  把新加的商品加入以后再去加上剩余空间对应的最大值两个的和看哪个更大，取最大的</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KnapsackProblem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> w <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 物品的重量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 物品的价格</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 背包的容量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token comment\">// 物品的个数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//n+1 因为第一行中都是 0 不算第一行，m+1 因为第一列都是 0 不算第一列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//v [i][j] 表示在前 i 个物品中能够装入容量为 j 的背包中的最大价值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 为了记录放入商品的 情况，我们定义一个二维数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 初始化第一行和第一列，这里在本程序中，可以不去处理，因为默认是 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将第一列设置为 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将第一行设置 0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 根据前面得到的公式来动态规划处理 i, 从 1 开始因为第一行不做处理</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//i +1 第一行不做处理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//j +1 第一列不做处理</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 公式</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> j<span class=\"token punctuation\">)</span><span class=\"token comment\">// 因为程序是 i, 是从 1 开始的，因此原来公式中的 w [i] 修改成 w [i - 1]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token comment\">// 说明：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token comment\">// 因为 i 从 1 开始的，因此公式需要调整成</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">//v[i][j] = Math.max(v[i - 1][j], val[i - 1] + v[i - 1][j - w[i - 1]]);</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 为了记录商品存放到背包的情况，不能直接的使用上面的公式，需要使用 if-else 来体现公式</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> val<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> w<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token comment\">// 吧当前的情况记录到 path 数组中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 输出查看情况</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 输出最后我们是放入的哪些商品</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">//        for (int i = 0; i &lt; path.length; i++) &#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//            for (int j = 0; j &lt; path[i].length; j++)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">//                if (path[i][j] == 1)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//                    System.out.printf (\"第 % d 个商品放入到背包\", i);</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">//            System.out.println();</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 行的最大下标</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 列的最大小标</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 从 path 的最后开始找</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第>> %d &lt;&lt;个商品放入到背包\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                j <span class=\"token operator\">-=</span> w<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            i <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>0 0 0 0 0 \n0 1500 1500 1500 1500 \n0 1500 1500 1500 3000 \n0 1500 1500 2000 3500 \n================================\n第&gt;&gt; 3 &lt;&lt;个商品放入到背包\n第&gt;&gt; 1 &lt;&lt;个商品放入到背包\n</code></pre>\n<p>先看代码，如果看了一会儿还是不太懂就看下图：对代码的图解</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307151050040.png\" alt=\"image-20230715105010336\" /></p>\n<h3 id=\"kmp算法\"><a class=\"anchor\" href=\"#kmp算法\">#</a> KMP 算法</h3>\n<h4 id=\"应用场景字符串匹配问题\"><a class=\"anchor\" href=\"#应用场景字符串匹配问题\">#</a> 应用场景 —— 字符串匹配问题</h4>\n<p><strong>字符串匹配问题</strong>：</p>\n<ol>\n<li>有一个字符串 str = &quot;硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅谷你好&quot; , 和一个子串 str2 = &quot;尚硅谷你尚硅谷你&quot;</li>\n<li><strong>现在要判断 str1 是否包含有 str2</strong> ，如果存在，就返回第一次出现的位置，如果没有则返回 -1</li>\n</ol>\n<h4 id=\"暴力匹配算法\"><a class=\"anchor\" href=\"#暴力匹配算法\">#</a> 暴力匹配算法</h4>\n<p>如果用暴力匹配的思路，并假设现在 str1 匹配到 i 位置，子串 str2 匹配到 j 位置，则有：</p>\n<ol>\n<li>如果当前字符匹配成功 (即 str1 [i] == str2 [j])，则 i++，j++，继续匹配下一个字符</li>\n<li>如果匹配失败 (即 str1 [i] != str2 [j])，令 i = i - (j - 1)，j = 0。相当于每次匹配失败时，i 回溯，j 被置为 0</li>\n<li>用暴力方法解决的话就会有大量的回溯，每次只移动一位，若是不匹配，移动到下一位接着判断，浪费了大量的时间。(不可行！)</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>↓ i <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"      尚硅谷你尚硅你\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t\t\t\t\t↑ j <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>发现 空格≠你，则 i 被回溯：i <span class=\"token operator\">=</span> i - <span class=\"token punctuation\">(</span>j-1<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">:</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> - <span class=\"token punctuation\">(</span><span class=\"token number\">6</span>-1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span> - <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t\t ↓ 回溯到这里，i<span class=\"token operator\">=</span><span class=\"token number\">5</span>\t\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"        尚硅谷你尚硅你\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t    ↑ j <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>为什么要回溯到 <span class=\"token number\">5</span> 的位置？当 <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">4</span> 时，直到 <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>，才不匹配</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>i 回溯时，相当于匹配失败，只前进 <span class=\"token number\">1</span> 个字符串，然后再重新匹配。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> 如果不回溯 <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>如果失败的时候不回溯到最前面，直接从失败的地方开始匹配</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>       \t\t\t\t\t\t           ↓ i <span class=\"token operator\">=</span> <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"                 尚硅谷你尚硅你\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\t\t\t\t           ↑ j <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>那么下一次再继续匹配，则从 <span class=\"token number\">18</span> 开始了，就永远都匹配不上：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       \t\t\t\t\t\t             ↓ i <span class=\"token operator\">=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"                             尚硅谷你尚硅你\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t\t\t\t            \t\t\t  ↑ j <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span> 回溯匹配 - 成功 <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>       \t\t\t\t\t\t        ↓ i <span class=\"token operator\">=</span> <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"                        尚硅谷你尚硅你\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t\t\t\t\t\t\t\t\t\t\t↑ j <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr></table></figure><p><strong>可以看到</strong>：暴力方法解决会有 <mark>大量的回溯</mark> ，每次只移动一位，若是不匹配，移动到下一位接着判断匹配，浪费了大量的时间。</p>\n<p><strong>暴力匹配算法实现</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViolenceMath</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"硅硅谷 尚硅谷你尚硅 尚硅谷你尚硅谷你尚硅你好\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"尚硅谷你尚硅你\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">violenceMath</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index = \"</span><span class=\"token operator\">+</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 暴力匹配算法实现</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">violenceMath</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s1 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s2 <span class=\"token operator\">=</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> s1Len <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> s2Len <span class=\"token operator\">=</span> s2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 索引指向 s1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//j 索引指向 s2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> s1Len <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> s2Len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 保证匹配时，不越界</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 匹配成功</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 没有匹配成功</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                i <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 判断是否匹配成功</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> s2Len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>index = 15\n</code></pre>\n<h4 id=\"kmp算法介绍\"><a class=\"anchor\" href=\"#kmp算法介绍\">#</a> KMP 算法介绍</h4>\n<p>1 KMP 是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法。</p>\n<p>2 knuth-Morris-Pratt 字符串查找算法，简称为 &quot;KMP 算法&quot;，常用与在一个文本串 S 内查找一个模式串 P 的出现位置，这个算法由 Donald knuth，Vaughan Pratt，James H. Morris 三人于 1977 年联发表，故取这三人的姓氏命名此算法。</p>\n<p>3 MKP 方法算法就利用之前判断过信息，通过一个 next 数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过 next 数组找到，前面匹配过的位置，省去了大量的计算时间</p>\n<p>4 参考文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vWnVvQW5kRnV0dXJlR2lybC9wLzkwMjgyODcuaHRtbA==\">https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</span></p>\n<h4 id=\"kmp算法最佳应用字符串匹配问题\"><a class=\"anchor\" href=\"#kmp算法最佳应用字符串匹配问题\">#</a> KMP 算法最佳应用 —— 字符串匹配问题</h4>\n<p><strong>字符串匹配问题</strong>：</p>\n<p>1 有一个字符串 str1 = &quot;BBC ABCDAB ABCDABCDABDE&quot;，和一个子串 str2 = &quot;ABCDABD&quot;</p>\n<p>2 现在要判断 str1 是否包含有 str2，如果存在，就返回第一次出现的位置，如果没有则返回 - 1</p>\n<p>3 要求：使用 KMP 算法完成判断，不能使用简单的暴力匹配算法</p>\n<p><strong>思路分析图解</strong></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t部分匹配值表的图解</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307151600018.png\" alt=\"image-20230715160040538\" /></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\tkmp 搜索算法图解</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307151602724.png\" alt=\"image-20230715160200447\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KMPAlgorithm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"BBC ABCDAB ABCDABCDABDE\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDABCD\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token function\">kmpNext</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0, 0, 0, 0, 1, 2, 0]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">kmpSearch</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">,</span> str2<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index = \"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//index = 15</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * kmp 搜索算法</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param str1 原字符串</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param str2 子串</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param next 部分匹配表，子串对应的部分匹配表</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @return 如果是 -1 说明没有匹配到，否则返回第一个匹配到的位置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">kmpSearch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 遍历</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 需要处理 str1.charAt (i) != str2.charAt (j)，去调整 j 的大小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">//Kmp 算法核心点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 获取到一个字符串 (子串) 的部分匹配值表</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param dest</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">kmpNext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> dest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 创建一个 next 数组保存部分匹配值</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>dest<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果字符串长度为 1, 部分匹配值就是 0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dest<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 当 dest.charAt (i) == dest.charAt (j) 我们需要从 next [j - 1] 获取新的 j</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 直到我们发现有 dest.charAt (i) == dest.charAt (j) 成立才退出</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 这是 kmp 算法的核心点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> dest<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> dest<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 回溯</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// 当 dest.charAt (i) == dest.charAt (j) 满足时，部分匹配值就是 +1</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> dest<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>[0, 0, 0, 0, 1, 2, 3, 4]\nindex = 11\n</code></pre>\n<h3 id=\"贪心算法\"><a class=\"anchor\" href=\"#贪心算法\">#</a> 贪心算法</h3>\n<h4 id=\"应用场景集合覆盖问题\"><a class=\"anchor\" href=\"#应用场景集合覆盖问题\">#</a> 应用场景 —— 集合覆盖问题</h4>\n<p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。</p>\n<p><strong>如何选择最少的广播台</strong>，让所有的地区都可以接收到信号？</p>\n<table>\n<thead>\n<tr>\n<th>广播台</th>\n<th>覆盖地区</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>K1</td>\n<td>&quot;北京&quot;, &quot;上海&quot;, &quot;天津&quot;</td>\n</tr>\n<tr>\n<td>K2</td>\n<td>&quot;广州&quot;, &quot;北京&quot;, &quot;深圳&quot;</td>\n</tr>\n<tr>\n<td>K3</td>\n<td>&quot;成都&quot;, &quot;上海&quot;, &quot;杭州&quot;</td>\n</tr>\n<tr>\n<td>K4</td>\n<td>&quot;上海&quot;, &quot;天津&quot;</td>\n</tr>\n<tr>\n<td>K5</td>\n<td>&quot;杭州&quot;, &quot;大连&quot;</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"贪心算法介绍\"><a class=\"anchor\" href=\"#贪心算法介绍\">#</a> 贪心算法介绍</h4>\n<p>1 贪心算法 (贪婪算法) 是指在对问题进行求解时，在每一步选择中都采取最好或者最优 (即最有利) 的选择，从而希望能够导致结果是最好或者最优的算法。</p>\n<p>2 贪心算法所得到的结果<mark>不一定是最优的结果</mark> (有时候会是最优解)，但是都是相对近似 (接近) 最优解的结果。</p>\n<h4 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h4>\n<p>如何找出覆盖所有地区的广播台的集合呢，使用穷举法实现，列出每个可能的广播台的集合，这被称为幂集。假设总的有 n 个广播台，则广播台的组合总共有 2<sup>n</sup>-1 个，假设每秒可以计算 10 个子集，如图：</p>\n<table>\n<thead>\n<tr>\n<th>广播台数量 n</th>\n<th>子集总数 2ⁿ</th>\n<th>需要的时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>5</td>\n<td>32</td>\n<td>3.2 秒</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1024</td>\n<td>102.4 秒</td>\n</tr>\n<tr>\n<td>32</td>\n<td>4294967296</td>\n<td>13.6 年</td>\n</tr>\n<tr>\n<td>100</td>\n<td>1.26*100³º</td>\n<td>4x10²³ 年</td>\n</tr>\n</tbody>\n</table>\n<p><strong>由此可见</strong>：在进行组合的场景下，使用组合效率是很低的。</p>\n<h4 id=\"使用贪心算法效率高\"><a class=\"anchor\" href=\"#使用贪心算法效率高\">#</a> 使用贪心算法，效率高：</h4>\n<p>目前并没有算法可以快速计算得到准备的值，使用贪心算法，则可以得到非常接近的解，并且效率高。选择策略上，因为需要覆盖全部地区的最小集合：</p>\n<ol>\n<li>遍历所有的广播电台，找到一个覆盖了最多 &lt;font style=&quot;color:red&quot;&gt; 未覆盖的地区 &lt;/font &gt; 的电台 (此电台可能包含一些已覆盖的地区，但没有关系)</li>\n<li>将这个电台加入到一个集合中 (比如 ArrayList)，想办法把该电台覆盖的地区在下次比较时去掉。</li>\n<li>重复第 1 步直到覆盖了全部的地区。</li>\n</ol>\n<p>图解：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307152217484.png\" alt=\"image-20230715221702246\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GreedyAlgorithm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建广播电台，放入到 HashMap</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> broadcasts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 将各个电台放入到 broadcasts</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashSet1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        hashSet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        hashSet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        hashSet1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"天津\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashSet2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        hashSet2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"广州\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        hashSet2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        hashSet2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"深圳\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashSet3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        hashSet3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成都\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        hashSet3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        hashSet3<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杭州\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashSet4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        hashSet4<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        hashSet4<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"天津\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashSet5 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        hashSet5<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杭州\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        hashSet5<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"大连\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 将所有电台加入到 Map 集合中</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"K1\"</span><span class=\"token punctuation\">,</span> hashSet1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"K2\"</span><span class=\"token punctuation\">,</span> hashSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"K3\"</span><span class=\"token punctuation\">,</span> hashSet3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"K4\"</span><span class=\"token punctuation\">,</span> hashSet4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"K5\"</span><span class=\"token punctuation\">,</span> hashSet5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> allAreas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>allAreas<span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"上海\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"天津\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"广州\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"深圳\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"成都\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"杭州\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"大连\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 创建一个 ArrayList 存放选择的电台集合</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> selects <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 定义临时集合保存在遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> tempSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 定义 maxKey 保存在一次遍历过程中，能够覆盖的最多位覆盖的地区对应的电台的 Key</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">String</span> maxKey <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 如果 maxKey 不为 null 则加入到 selects 中</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>allAreas<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果 allAreas 不为 0, 则表示还没有覆盖到所有的地区</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            maxKey <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                tempSet<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> areas <span class=\"token operator\">=</span> broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                tempSet<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>areas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 求出 tempSet 和 allAreas 集合的交集，交集会赋给 tempSet</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                tempSet<span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>allAreas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token comment\">// 如果当前集合包含的未覆盖地区的数量比 maxKey 指向的集合未覆盖的地区还要多</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">// 就需要重置 maxKey</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tempSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>maxKey <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> tempSet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    maxKey <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">//maxKey != null，就应该将 maxKey 加入 selects</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxKey <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                selects<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>maxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 将 maxKey 指向的广播电台覆盖的地区，从 allAreas 去掉</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                allAreas<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span>broadcasts<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"得到的选择结果是: \"</span> <span class=\"token operator\">+</span> selects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[k1,k2,k3,k5]</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"贪心算法注意事项和细节\"><a class=\"anchor\" href=\"#贪心算法注意事项和细节\">#</a> 贪心算法注意事项和细节</h4>\n<p>1 贪心算法所得到的结果不一定是最优的结果 (有时候会是最优解)，但是都是相对近似 (接近) 最优解的结果。</p>\n<p>2 比如上题的算法选出的是 K1，K2，K3，K5，符合覆盖了全部的地区但是我们发现 K2，K3，K4，K5，也可以覆盖全部地区，如果 K2 的使用成本低于 K1 那么上题的 K1，K2，K3，K5，虽然满足条件，但并不是最优解。</p>\n<h3 id=\"普利姆算法\"><a class=\"anchor\" href=\"#普利姆算法\">#</a> 普利姆算法</h3>\n<p>应用场景和问题：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307160930413.png\" alt=\"image-20230716093030683\" /></p>\n<p>1 有胜利乡有 7 个村庄 (A,B,C,D,E,F,G)，现在需要修路把 7 个村庄连通。</p>\n<p>2 各个村庄的距离用边线表示 (权)，比如 A - B 距离 5 公里。</p>\n<p>3 问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短？</p>\n<p><strong>思路</strong>：</p>\n<p>​\t将 10 条边，链接即可，但是总的里程数不是最小。</p>\n<p><strong>正确的思路</strong>：</p>\n<p>​\t就是尽可能的选择少的路线，并且每条路线最小，保证总里程数最少。</p>\n<h4 id=\"最小生成树\"><a class=\"anchor\" href=\"#最小生成树\">#</a> 最小生成树</h4>\n<p>修路问题本质就是最小生成树问题，先介绍一下何为最小生成树 (Minimum Cost Spanning Tree)，简称 MST。</p>\n<p>1 给定一个带权的无向连通图，如何选取一棵生成树，使树上所有边上权的总和为最小，这叫最小生成树</p>\n<p>2 N 个顶点，一定有 N-1 条边</p>\n<p>3 包含全部顶点</p>\n<p>4 N-1 条边都在图中</p>\n<p>5 举例说明 (如图)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307160934701.png\" alt=\"image-20230716093418628\" /></p>\n<p>6 求最小生成树的算法主要是<mark>普利姆算法</mark>和<mark>克鲁斯卡尔算法</mark></p>\n<h4 id=\"普利姆算法介绍\"><a class=\"anchor\" href=\"#普利姆算法介绍\">#</a> 普利姆算法介绍</h4>\n<p>1 普利姆 (Prim) 算法求最小生成树，也就是在包含 n 个顶点的连通图中，找出只有 (n-1) 条边包含所有 n 个顶点的连通子图，也就是所谓的<mark>极小连通子图</mark></p>\n<p>2 普利姆的算法如下：</p>\n<ol>\n<li>设 G=(V,E) 是连通网。T=(U,D) 是最小生成树。V,U 是顶点集合。E,D 是边的集合。</li>\n<li>若从顶点 u 开始构造最小生成树，则从集合 V 中取出顶点 u 放入集合 U 中，标记顶点 v 的 visited [u] = 1</li>\n<li>若集合 U 中顶点 ui 与集合 V-U 中的顶点 vj 之间存在边，则寻找这些边中权值最小的边，但不能构成回路，将顶点 vj 加入集合 U 中，将边 (ui,vj) 加入集合 D 中，标记 visited [vj] = 1</li>\n<li>重复步骤②，直到 U 与 V 相等，即所有顶点都被标记为访问过，此时 D 中有 n-1 条边</li>\n<li><mark>提示</mark>：单独看步骤很难理解，我们通过代码来讲解，比较好理解。</li>\n</ol>\n<h4 id=\"普利姆算法图解\"><a class=\"anchor\" href=\"#普利姆算法图解\">#</a> 普利姆算法图解</h4>\n<p>上面的文字描述很难理解，下面是图解分析</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307161023485.png\" alt=\"image-20230716102343503\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrimAlgorithm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 测试图是否创建成功</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'G'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> vertx <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 邻接矩阵的关系使用二维数组表示，10000 这个大数，表示两个点不连通</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 创建 MGraph 对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">MGraph</span> mGraph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MGraph</span><span class=\"token punctuation\">(</span>vertx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建一个 MiniTree 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">MiniTree</span> minTree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        minTree<span class=\"token punctuation\">.</span><span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span>mGraph<span class=\"token punctuation\">,</span> vertx<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        minTree<span class=\"token punctuation\">.</span><span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span>mGraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 测试普利姆算法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        minTree<span class=\"token punctuation\">.</span><span class=\"token function\">prim</span><span class=\"token punctuation\">(</span>mGraph<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 创建最小生成树</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MiniTree</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 创建图的邻接矩阵</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param graph  图对象</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param vertx  图对应的顶点个数</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @param data   图的各个顶点的值</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @param weight 图的邻接矩阵</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createGraph</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> vertx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertx<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 顶点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            graph<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertx<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                graph<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * 显示图的邻接矩阵</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * @param graph</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showGraph</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MGraph</span> graph<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> itemp <span class=\"token operator\">:</span> graph<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>itemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * 编写 prim 算法，得到最小生成树</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @param graph 图</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * @param v     表示从图的第几个顶点开始生成 'A' -> 0 , 'B' -> 1 ...</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 标记节点 (顶点) 是否被访问过</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>vertx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">//visited [] 默认元素的值都是 0，表示没有访问过，Java 中默认为 0 所以不能特意进行次操作</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">//for(int i = 0;i &lt; graph.vertx;i ++)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//visited[i] = 0;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 把当前节点标记为已访问</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">//h1,h2 记录两个顶点的下标</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">int</span> h1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">int</span> h2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 将 miniweight 初始成一个大数，后面在遍历过程中，会被替换</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> miniWeight <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 因为有 graph.vertx 顶点，普利姆算法结束后，有 graph.vertx - 1 边</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> graph<span class=\"token punctuation\">.</span>vertx<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token comment\">// 遍历当前顶点可连通的所有的顶点</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">// 确定每一次生成的子图，和哪个节点的距离最近</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> graph<span class=\"token punctuation\">.</span>vertx<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//i 节点表示被访问过的节点</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> graph<span class=\"token punctuation\">.</span>vertx<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//j 节点表示没有被访问过的节点</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> visited<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> graph<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> miniWeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                        <span class=\"token comment\">// 替换 miniweight (寻找已经访问过的节点和为访问过的节点间的权值最小的边)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                        miniWeight <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                        h1 <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        h2 <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">// 找到一条边是最小</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"边 &lt;\"</span> <span class=\"token operator\">+</span> graph<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>h1<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> graph<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>h2<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"> 权值: \"</span> <span class=\"token operator\">+</span> miniWeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">// 将当前这个节点标记为已访问过</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            visited<span class=\"token punctuation\">[</span>h2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 将 miniWeight 重新设置为 最大值</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            miniWeight <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MGraph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">int</span> vertx<span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示图的节点个数</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放节点数据</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> weight<span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放边，就是邻接矩阵</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MGraph</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> vertx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertx <span class=\"token operator\">=</span> vertx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>vertx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        weight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>vertx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>vertx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>[10000, 5, 7, 10000, 10000, 10000, 2]\n[5, 10000, 10000, 9, 10000, 10000, 3]\n[7, 10000, 10000, 10000, 8, 10000, 10000]\n[10000, 9, 10000, 10000, 10000, 4, 10000]\n[10000, 10000, 8, 10000, 10000, 5, 4]\n[10000, 10000, 10000, 4, 5, 10000, 6]\n[2, 3, 10000, 10000, 4, 6, 10000]\n边 &lt;A,G&gt; 权值: 2\n边 &lt;G,B&gt; 权值: 3\n边 &lt;G,E&gt; 权值: 4\n边 &lt;E,F&gt; 权值: 5\n边 &lt;F,D&gt; 权值: 4\n边 &lt;A,C&gt; 权值: 7\n</code></pre>\n<h3 id=\"克鲁斯卡尔算法\"><a class=\"anchor\" href=\"#克鲁斯卡尔算法\">#</a> 克鲁斯卡尔算法</h3>\n<p><strong>公交站问题</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307161125011.png\" alt=\"image-20230716112527142\" /></p>\n<p>1 某城市新增 7 个站点 (A,B,C,D,E,F,G)，现在需要修路把 7 个站点连通</p>\n<p>2 各个站点的距离用边线表示 (权)，比如 A-B 距离 12 公里</p>\n<p>3 问：如何修路保证各个站点都能连通，并且总的修建公路总里程最短？</p>\n<h4 id=\"克鲁斯卡尔介绍\"><a class=\"anchor\" href=\"#克鲁斯卡尔介绍\">#</a> 克鲁斯卡尔介绍</h4>\n<ol>\n<li>克鲁斯卡尔 (Kruskal) 算法，是用来求加权连通图的最小生成树的算法。</li>\n<li><strong>基本思想</strong>：\n<ul>\n<li>按照权值从小到大的顺序选择 n-1 条边，并保证 n-1 条边不构成回路</li>\n</ul>\n</li>\n<li><strong>具体做法</strong>：\n<ul>\n<li>首先构造一个只含 n 个顶点的森林，然后依权值从小到大连通网中选择边加入到森林中，并使森林中不产生回路，直至森森变成一颗树为止。</li>\n</ul>\n</li>\n</ol>\n<p>在含有 n 个顶点的连通图中选择 n-1 条边，构成一颗极小连通子图，并使该连通子图中 n-1 条边上权值之和达到最小，则称其为连通网的最小生成树。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307161339514.png\" alt=\"image-20230716133935680\" /></p>\n<p>例如，对于如上图 G4 所示的联通网可以有多颗权值总和不相同的生成树。</p>\n<h4 id=\"克鲁斯卡尔算法图解\"><a class=\"anchor\" href=\"#克鲁斯卡尔算法图解\">#</a> 克鲁斯卡尔算法图解</h4>\n<p>以上图 G4 为例，来对克鲁斯卡尔进行演示 (假设，用数组 R 保存最小生成树结果)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307161342469.png\" alt=\"image-20230716134223900\" /></p>\n<p>第 1 步：将边 &lt;E,F&gt; 加入 R 中</p>\n<ul>\n<li>边 &lt;E,F&gt; 的权值最小，因此将它加入到最小生成树结果 R 中。</li>\n</ul>\n<p>第 2 步：将边 &lt;C,D&gt; 加入 R 中</p>\n<ul>\n<li>上一步操作后，边 &lt;C,D&gt; 的权值最小，因此将它加入到最小生成树结果 R 中。</li>\n</ul>\n<p>第 3 步：将边 &lt;D,E&gt; 加入 R 中</p>\n<ul>\n<li>上一步操作后，边 &lt;D,E&gt; 的权值最小，因此将它加入到最小生成树结果 R 中。</li>\n</ul>\n<p>第 4 步：将边 &lt;B,F&gt; 加入 R 中</p>\n<ul>\n<li>上一步操作后，边 &lt;C,E&gt; 的权值最小，但 &lt; C,E &gt; 会和已有的边构成回路；因此，跳过 &lt; C,E&gt;。同理，跳过边 &lt; C,F&gt;。将边 &lt; B,F &gt; 加入到最小生成树结果 R 中。</li>\n</ul>\n<p>第 5 步：将边 &lt;E,G&gt; 加入 R 中</p>\n<ul>\n<li>上一步操作后，边 &lt;E,G&gt; 的权值最小，因此将它加入到最小生成树结果 R 中</li>\n</ul>\n<p>第 6 步：将边 &lt;A,B&gt; 加入 R 中</p>\n<ul>\n<li>上一步操作后，边 &lt;F,G&gt; 的权值最小，但 &lt; F,G &gt; 会和已有的边构成回路；因此，跳过边 &lt; F,G&gt;。同理，跳过边 &lt; F,G&gt;。同理，跳过边 &lt; B,C&gt;。将边 &lt; A,B &gt; 加入到最小生成树结果 R 中。</li>\n</ul>\n<p>此时，最小生成树构造完成！它包括的边依次是：&lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; &lt;B,F&gt; &lt;E,G&gt; &lt;A,B&gt;。</p>\n<h4 id=\"克鲁斯卡尔算法分析\"><a class=\"anchor\" href=\"#克鲁斯卡尔算法分析\">#</a> 克鲁斯卡尔算法分析</h4>\n<p>根据前面介绍的克鲁斯卡尔算法的基本思想和做法，我们能够了解到，克鲁斯卡尔算法重点需要解决的以下两个问题：</p>\n<p><strong>问题一</strong>：对图的所有边按照权值大小进行排序</p>\n<p><strong>问题二</strong>：将边添加到最小生成树中时，怎么样判断是否形成了回路。</p>\n<p>问题一很好解决，采用排序算法进行排序即可。</p>\n<p>问题二，处理方式是：记录顶点在 &quot;最小生成树&quot; 中的终点，顶点的终点是 &quot;在最小生成树中与它连通的最大顶点&quot;。然后每次需要将一条边添加到最小生成树时，判断该边的两个顶点的重点是否重合，重合的 话则会构成回路。</p>\n<h4 id=\"如何判断是否构成回路举例说明如图\"><a class=\"anchor\" href=\"#如何判断是否构成回路举例说明如图\">#</a> 如何判断是否构成回路 —— 举例说明 (如图)</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307161513317.png\" alt=\"image-20230716151306831\" /></p>\n<p>在将 &lt;E,F&gt; &lt;C,D&gt; &lt;D,E&gt; 加入到最小生成树 R 中之后，这几条边的顶点就都有了终点：</p>\n<ol>\n<li>C 的终点是 F</li>\n<li>D 的终点是 F</li>\n<li>E 的终点是 F</li>\n<li>F 的终点是 F</li>\n</ol>\n<p>关于终点的说明：</p>\n<ol>\n<li>这就是将所有顶点按照从小到大的顺序排列好之后；某个顶点的终点就是 &quot;与它连通的最大顶点&quot;。</li>\n<li>因此，接下来，虽然 &lt;C,E&gt; 是权值最小的边。但是 C 和 E 的终点都是 F，即它们的终点相同，因此，将 &lt; C,E &gt; 加入最小生成树的话，会形成回路。这就是判断回路的方式。也就是说，<strong>我们加入的 &lt;font style=&quot;color:blue&quot;&gt; 边 &lt;/font &gt; 的 &lt; font style=&quot;color:blue&quot;&gt; 两个顶点 &lt;/font &gt; 不能 &lt; font style=&quot;color:red&quot;&gt; 都指向同一个终点 &lt;/font&gt;，否则将构成回路</strong>。</li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Kruskal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> edgeNum<span class=\"token punctuation\">;</span><span class=\"token comment\">// 边的个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexs<span class=\"token punctuation\">;</span><span class=\"token comment\">// 顶点数目</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">;</span><span class=\"token comment\">// 邻接矩阵</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INF</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 使用 INF 表示两个顶点不能连通</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Kruskal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 初始化定点数和边的个数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> vlen <span class=\"token operator\">=</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 初始化顶点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>vlen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 拷贝的方式，使得构造函数中的 vertexs 和成员字段 vertexs 互不影响</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vertexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> vertexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 初始化边</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>vlen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>vlen<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 统计边的条数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vlen<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vlen<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    edgeNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示最后结果数组的索引</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ends <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>edgeNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用于保存 \"已有最小生成树\" 中的每个顶点在最小生成树中的终点</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 创建结果数组，保存最后的最小生成树</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rets <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span>edgeNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 获取图中 所有的边的集合，一共有 12 边</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges <span class=\"token operator\">=</span> <span class=\"token function\">getEdges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图的边的集合= \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 共 \"</span> <span class=\"token operator\">+</span> edges<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//12</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 按照边的权值大小进行排序 (从小到大)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">sortEdges</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 遍历 edges 数组，将边添加到最小生成树中时，判断是准备加入的边是否形成了回路，如果没有，就加入 rets，否则不能加入</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> edgeNum<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 获取到第 i 条边的第一个顶点</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">int</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 获取到第 i 条边的第二个顶点</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">int</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 获取 p1 这个顶点在已有最小生成树中的终点</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span>ends<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 获取 p2 这个顶点在已有最小生成树中的终点</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span>ends<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 是否构成回路</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">!=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token comment\">// 设置 m 在 \"已有最小生成树\" 中的终点</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                ends<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">// 有一条边加入到 rets 数组中</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                rets<span class=\"token punctuation\">[</span>index <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------最小生成树为----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>rets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 打印邻接矩阵</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"邻接矩阵为\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%12d\"</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 对边进行排序处理，冒泡排序处理</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sortEdges</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> edges<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> edges<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> edges<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token class-name\">EData</span> temp <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    edges<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    edges<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     * @param ch 顶点的值，比如 'A','B'</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * @return 返回 ch 顶点对应的下标，如果找不到返回 - 1</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vertexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>     * comment: 获取图中边，放到 EData [] 数组中，后面我们需要遍历该数组</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     * 是通过 matrix 邻接矩阵来获取</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     * EData 形式 [['A','B',12],['B','F',7],...]</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getEdges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EData</span><span class=\"token punctuation\">[</span>edgeNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> vertexs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                    edges<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EData</span><span class=\"token punctuation\">(</span>vertexs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vertexs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>     * comment: 获取下标为 i 的顶点的终点，用于后面判断两个顶点的终点是否相同</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>     * @param ends 数组就是记录了各个顶点对应的终点是哪个，ends 数组是在遍历过程中，逐步形成的 (不是一次形成的)</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     * @param i    表示传入的顶点对应的下标</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>     * @return 返回的就是 下标为 i 的这个顶点对应的终点的下标</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ends<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ends<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            i <span class=\"token operator\">=</span> ends<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vertexs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'G'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token comment\">// 克鲁斯卡尔算法的邻接矩阵</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">int</span> matrix<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token comment\">/*A*/</span><span class=\"token operator\">/</span><span class=\"token operator\">*</span><span class=\"token class-name\">B</span><span class=\"token operator\">*</span><span class=\"token comment\">//*C*//*D*//*E*//*F*//*G*/</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token comment\">/*A*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token comment\">/*B*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                <span class=\"token comment\">/*C*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token comment\">/*D*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token comment\">/*E*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                <span class=\"token comment\">/*F*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token comment\">/*G*/</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">INF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">// 大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token comment\">// 创建对象</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token class-name\">Kruskal</span> krusKal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Kruskal</span><span class=\"token punctuation\">(</span>vertexs<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        krusKal<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        krusKal<span class=\"token punctuation\">.</span><span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\">// 创建一个类 EData, 它的对象实力就表示一条边</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">char</span> start<span class=\"token punctuation\">;</span><span class=\"token comment\">// 边的一个点</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token keyword\">char</span> end<span class=\"token punctuation\">;</span><span class=\"token comment\">// 边的另外一个点</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span><span class=\"token comment\">// 边的权值</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">EData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"EData&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                 <span class=\"token string\">\"&lt;\"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                <span class=\"token string\">\" , \"</span> <span class=\"token operator\">+</span> end <span class=\"token operator\">+</span> <span class=\"token string\">\">\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                <span class=\"token string\">\" , weight=\"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<pre><code>邻接矩阵为\n\n           0          12  2147483647  2147483647  2147483647          16          14\n          12           0          10  2147483647  2147483647           7  2147483647\n  2147483647          10           0           3           5           6  2147483647\n  2147483647  2147483647           3           0           4  2147483647  2147483647\n  2147483647  2147483647           5           4           0           2           8\n          16           7           6  2147483647           2           0           9\n          14  2147483647  2147483647  2147483647           8           9           0\n图的边的集合= [EData&#123;&lt;A , B&gt; , weight=12&#125;, EData&#123;&lt;A , F&gt; , weight=16&#125;, EData&#123;&lt;A , G&gt; , weight=14&#125;, EData&#123;&lt;B , C&gt; , weight=10&#125;, EData&#123;&lt;B , F&gt; , weight=7&#125;, EData&#123;&lt;C , D&gt; , weight=3&#125;, EData&#123;&lt;C , E&gt; , weight=5&#125;, EData&#123;&lt;C , F&gt; , weight=6&#125;, EData&#123;&lt;D , E&gt; , weight=4&#125;, EData&#123;&lt;E , F&gt; , weight=2&#125;, EData&#123;&lt;E , G&gt; , weight=8&#125;, EData&#123;&lt;F , G&gt; , weight=9&#125;] 共 12\n----------------最小生成树为----------------\nEData&#123;&lt;E , F&gt; , weight=2&#125;\nEData&#123;&lt;C , D&gt; , weight=3&#125;\nEData&#123;&lt;D , E&gt; , weight=4&#125;\nEData&#123;&lt;B , F&gt; , weight=7&#125;\nEData&#123;&lt;E , G&gt; , weight=8&#125;\nEData&#123;&lt;A , B&gt; , weight=12&#125;\n</code></pre>\n<h3 id=\"迪杰斯特拉算法\"><a class=\"anchor\" href=\"#迪杰斯特拉算法\">#</a> 迪杰斯特拉算法</h3>\n<p>应用场景问题：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307162057769.png\" alt=\"image-20230716205732320\" /></p>\n<ol>\n<li>战争时期，胜利乡有 7 个村庄 (A,B,C,D,E,F,G)，现在有六个邮差，从 G 点出发，需要分别把邮件分别送到 A,B,C,D,E,F 六个村庄</li>\n<li>各个村庄的距离用边线表示 (权)，比如 A-B 距离 5 公里</li>\n<li>问：如何计算出 G 村庄到 其它各个村庄的最短距离？</li>\n<li>如果从其它点出发到各个点的最短距离又是多少？</li>\n</ol>\n<h4 id=\"迪杰斯特拉dijkstra算法介绍\"><a class=\"anchor\" href=\"#迪杰斯特拉dijkstra算法介绍\">#</a> 迪杰斯特拉 (Dijkstra) 算法介绍</h4>\n<p>迪杰斯特拉 (Dijkstra) 算法是<strong>典型的最短路径算法</strong>，用于计算一个节点到其它节点的最短路径。它的主要特点是以起始点为中心向外层层扩展 (<mark>广度优先搜索思想</mark>)，直到扩展到终点为止。</p>\n<h4 id=\"迪杰斯特拉dijkstra算法过程\"><a class=\"anchor\" href=\"#迪杰斯特拉dijkstra算法过程\">#</a> 迪杰斯特拉 (Dijkstra) 算法过程</h4>\n<p>设置出发顶点为 v，顶点集合 V {v1,v2,vi,...}，v 到 V 中各个顶点的距离构成距离集合 Dis，Dis {d1,d2,di,...}，Dis 集合记录着 v 到图中各个顶点的距离 (到自身可以看作 0，v 到 vi 距离对应为 di)</p>\n<p>1 从 Dis 中选择值最小的 di 并移除 Dis 集合，同时移出 V 集合中对应的顶点 vi，此时的 v 到 vi 即位最短路径</p>\n<p>2 更新 Dis 集合，更新规则为：比较 v 到 V 集合中顶点的距离值，与 v 通过 vi 到 V 集合中顶点的距离值，保留值较小的一个 (同时也应该更新顶点的前驱节点为 vi，表明是通过 vi 到达的)</p>\n<p>3 重复执行两步骤，直到最短路径顶点为目标顶点即可结束。</p>\n<p>​</p>\n",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%9F%A5%E6%89%BE-%E5%93%88%E5%B8%8C%E8%A1%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-%E6%9F%A5%E6%89%BE-%E5%93%88%E5%B8%8C%E8%A1%A8/",
            "title": "数据结构与算法-排序-查找-哈希表",
            "date_published": "2024-01-05T01:03:03.655Z",
            "content_html": "<h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<p>基本介绍</p>\n<p>冒泡排序（Bubble Sorting）的基本思想是：通过对待</p>\n<p>排序序列从前向后（从下标较小的元素开始）, 依次比较</p>\n<p>相邻元素的值，若发现逆序则交换，使值较大</p>\n<p>的元素逐渐从前移向后部，就象水底下的气泡一样逐渐</p>\n<p>向上冒。</p>\n<p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下</p>\n<p>来没有进行过交换，就说明序列有序，因此要在排序过程中设置</p>\n<p>一个标志 flag 判断元素是否进行过交换。从而减少不必要的比较。(这里说的优化，可以在冒泡排序写好后，在进行)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161900791.png\" alt=\"\" /></p>\n<p>演示冒泡过程的例子 (图解)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161900022.png\" alt=\"\" /></p>\n<p>冒泡排序应用实例</p>\n<p>我们举一个具体的案例来说明冒泡法。我们将五个无序的数：3, 9, -1, 10, -2  使用冒泡排序法将其排成一个从小到大的有序数列。</p>\n<p>图解：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161900920.png\" alt=\"\" /></p>\n<p>代码实现：</p>\n<p>先将排序的结构拆分了写，步骤如下：</p>\n<p>每次进行排序的时候都需要将长度 - 1 - n 因为排序后范围总是要缩小的否则就会一直来回的排序。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一趟排序结果：\"</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二趟排序结果：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第三趟排序结果：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>简化代码：将排序的过程结合为嵌套循环来完成冒泡排序：</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 标识变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 冒泡排序 的时间复杂度为 O (n^2)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token comment\">// 如果进行过交换则将标识变量赋值为 true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"趟，的排序结果为: \"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 判断标识变量进行对应的操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 在一趟排序中，一次交换都没有发生过</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 如果发生过交换则进入 else 中，将 flag 重置进行下次判断</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h3>\n<p><strong>基本介绍</strong></p>\n<p>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到排序的目的。</p>\n<p><strong>选择排序思想</strong>:</p>\n<p>选择排序（select sorting）也是一种简单的排序方法。它的<strong>基本思想</strong>是：第一次从 arr [0] <code>~</code> arr [n-1] 中选取最小值，与 arr [0] 交换，第二次从 arr [1] <code>~</code> arr [n-1] 中选取最小值，与 arr [1] 交换，第三次从 arr [2] <code>~</code> arr [n-1] 中选取最小值，与 arr [2] 交换，…，第 i 次从 arr [i-1]~arr [n-1] 中选取最小值，与 arr [i-1] 交换，…, 第 n-1 次从 arr [n-2]~arr [n-1] 中选取最小值，与 arr [n-2] 交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p>\n<p><strong>选择排序思路分析图</strong> *:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161901514.png\" alt=\"\" /><br />\n101, 34, 119, 1</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">selectionSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">/* 判断数组为空或为一个元素的情况，即边界检查 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">/* 每次要进行比较的两个数，的前面那个数的下标 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">//min 变量保存该趟比较过程中，最小元素所对应的索引，</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 先假设前面的元素为最小元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">int</span> minIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">/* 每趟比较，将前面的元素与其后的元素逐个比较 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token comment\">// 如果后面的元素小，将后面元素的索引极为最小值的索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            minIndex <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 然后交换此次查找到的最小值和原始的最小值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> minIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>选择排序的优化</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    max <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    min <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 最大值放在最右端</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                min <span class=\"token operator\">=</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 最下值放在最左端</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            left <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            right <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h3>\n<p><strong>插入排序法介绍</strong>：</p>\n<p>插入式排序属于内部排序法，是对于预排序的元素以插入的方式找寻元素的适当位置，以达到排序的目的。</p>\n<p><strong>插入排序法思想</strong>:</p>\n<p>插入排序（Insertion Sorting）的<strong>基本思想</strong>是：把 n 个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p>\n<p><strong>插入排序思路图</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161901111.png\" alt=\"\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 需要使用 j 循环值来进行位置互换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> ar<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 取一个值进行比较</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//j = i - 1 循环 0 等于或到 j 的数值，j 也就是 i-1 的值，判断是否满足交换条件执行则 j-- </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ar<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> tmp<span class=\"token punctuation\">;</span>j <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 将大的元素赋值到索引前</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            ar<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 将元素小的赋值到索引后，因为 j-- j 循环变量在满足条件执行方法体时不会及时执行 j--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ar<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优化 - 折半插入排序</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 循环的起始数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 循环的循环数值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        high <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 取第 i 个元素赋值到 tmp 中进行比较</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/* 找到合适的插入位置 high+1，如果中间位置元素</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * 比要插入元素大，则查找区域向低半区移动，否</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         * 则向高半区移动</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 从前面的元素开始判断到 temp 的元素如果不满足则直接进行下一次循环</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/* 每次执行将 low 与长度相加的值除 2 得出 mid 指针位置 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 判断 mid 的索引位置的值 是否 大于 temp 的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 满足交换条件，指针位置 - 1, 缩短判断范围</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 不满足交换条件 指针位置 + 1, 缩短判断范围</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/*high+1 后的元素后移 */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 经过上面判断 i-1 为 temp 后一位的位置，从 high 循环到 i</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">>=</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">/* 将元素插入到指定位置 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>优化 - 路插入排序</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 临时数组 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempArr <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tempArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*first 和 last 分别指临时数组 tempArr 中排好序的元素的第一个和最后一个位置 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>first <span class=\"token operator\">=</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">/*j 是调整系数 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">></span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      j <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">/*tempArr 中间元素的位置 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">+</span>last<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">/*arr [i] 应该插入在 tempArr 的前半部分 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> tempArr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">/*j 指向 tempArr 数组中的第一个元素 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      j <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">/*first 前移，取余是为了实现循环数组效果 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      first <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">/* 待插元素大于 j 所指元素 */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> tempArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token comment\">/*j 所指元素前移，取余是为了实现循环数组效果 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         tempArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token comment\">/*j 指向下一个元素 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         j <span class=\"token operator\">=</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">/* 移动结束，待插元素插在 tempArr [j] 前 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      tempArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">/*arr [i] 应该插入在 tempArr 的后半部分 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">/*j 指向 tempArr 数组中的最后一个元素 */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      j <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">/*last 后移， 指向插入后的最后一个元素 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      last<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">/* 待插元素小于 j 所指元素 */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> tempArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         <span class=\"token comment\">/*j 所指元素后移 */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         tempArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempArr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         <span class=\"token comment\">/*j 指向上一个元素 */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">;</span>         </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">/* 移动结束，待插元素插在 tempArr [j] 后 */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      tempArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">/* 把在 tempArr 中排好序的元素依次赋给 arr*/</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                    </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempArr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h3>\n<p><strong>简单插入排序存在的问题</strong></p>\n<p>我们看简单的插入排序可能存在的问题.</p>\n<p>数组 arr = {2,3,4,5,6,1} 这时需要插入的数 1 (最小), 这样的过程是：</p>\n<p 2,3,4,5,6,6=\"\"></p>\n<p 2,3,4,5,5,6=\"\"></p>\n<p 2,3,4,4,5,6=\"\"></p>\n<p 2,3,3,4,5,6=\"\"></p>\n<p 2,2,3,4,5,6=\"\"></p>\n<p 1,2,3,4,5,6=\"\"></p>\n<p><strong>结论</strong>：当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响.</p>\n<p>希尔排序法介绍</p>\n<p>希尔排序是希尔（Donald Shell）于 1959 年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序。</p>\n<p>希尔排序法基本思想</p>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止</p>\n<p>希尔排序法  的示意图</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161901589.png\" alt=\"\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161901412.png\" alt=\"\" /></p>\n<p>代码实现：</p>\n<p><mark>交换法</mark>（效率较低）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">art</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">art</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 每次执行外循环将数组的 长度 / 2 分开</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> len<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>gap <span class=\"token operator\">=</span> gap<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 从 / 2 的长度开始循环数组全部从 / 2 后的长度开始循环到数组长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 将从 / 2 的长度开始进行遍历</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 判断循环 判断 j 是否大于等于 0 和 数组前后元素的大小</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> gap <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 调用排序方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 当 j-gap 还是满足 if 判断条件那么就看第二个条件是否满足如果满足则再次进行交换位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                j <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ar<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ar<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ar<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ar<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>移动法</mark>（效率比交换高很多很多）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 希尔排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>gap <span class=\"token operator\">=</span> gap <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span>  i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token comment\">// 使用插入排序的思路</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> gap <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> temp <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            j <span class=\"token operator\">-=</span> gap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h3>\n<p><strong>快速排序法介绍</strong>:</p>\n<p>快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<p><strong>快速排序法示意图</strong>:</p>\n<p>以每个递归分支的最后一个元素为基准进行排序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902712.png\" alt=\"\" /></p>\n<p>以每个递归分支的最中间的元素为基准进行排序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902376.png\" alt=\"\" /></p>\n<p>代码实现:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span><span class=\"token comment\">// 左下标</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span><span class=\"token comment\">// 右下标</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 中间下标</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 临时交换值变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//while 循环的目的是让比 pivot 值小放到左边比 pivot 值大的放到右边</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 在 pivot 的左边一直找，找到大于 pivot 值，才退出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                low <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 在 pivot 的右边一直找，找到小于 pivot 值，才退出</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                max <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 如果 low >= max 说明 pivot 的左右两边的值，已经按照左边全部是</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 小于等于 pivot 的值，右边全部是大于等于 pivot 的值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">>=</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 交换</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 如果交换完后，发现这个 arr [low] == pivot 值 相等 则 max -- ，前移</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                max <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 如果交换完后，发现这个 arr [max] == pivot 值 相等 则 low ++ ，后移</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                low <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 如果 low == max, 必须 low ++ , max -- , 否则会出现堆栈溢出</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">==</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                low <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                max <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">></span> low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h3>\n<p><strong>归并排序介绍</strong>:</p>\n<p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分 (divide) 成一些小的问题然后递归求解，而治 (conquer) 的阶段则将分的阶段得到的各答案 &quot;修补&quot; 在一起，即分而治之)。</p>\n<p><strong>归并排序思想示意图 1 - 基本思想</strong>:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902386.png\" alt=\"\" /></p>\n<p><strong>说明</strong>:</p>\n<p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程。</p>\n<p><strong>归并排序思想示意图 2 - 合并相邻有序子序列</strong>:</p>\n<p>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将 [4,5,7,8] 和 [1,2,3,6] 两个已经有序的子序列，合并为最终序列 [1,2,3,4,5,6,7,8]，来看下实现步骤</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902315.png\" alt=\"\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuibingSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 归并排序需要一个额外空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 分 + 合方法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param arr</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param left</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param right</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param temp</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 中间索引</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 向左递归进行分解</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 向右递归进行分解</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 合并</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>mid<span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 合并方法</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @param arr 排序的原始数据</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @param left 左边有序序列的初始索引</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @param mid 中间索引</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param right 右边索引</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @param temp 做中转的数组</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化 i，左边有序序列的初始索引</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始化 j，右边有序序列的初始索引</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指向 temp 数组的当前索引</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         * (一)</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         * 先把左右两边 (有序) 的数据按照规则填充到 temp 数组</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         * 直到左右两边的有序序列，有一边处理完毕为止</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>             * 如果左边有序序列的当前元素，小于等于右边有序的当前元素</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>             * 即将左边的当前元素，拷贝到 temp 数组</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>             * 然后 t ++ i ++</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                t <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                t <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>         * (二)</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>         * 把有剩余数据的一边的数据依次全部填充到 temp</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 左边的有序序列还有剩余的元素，就全部填充到 temp</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            t <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 右边的有序序列还有剩余的元素，就全部填充到 temp</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            t <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>         * (三)</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>         * 将 temp 数组的元素拷贝到 arr</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>         * 注意：并不是每次都拷贝所有的数据</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">int</span> tempLeft <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         * 第一次合并 tempLeft = 0, right = 1</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         * 第二次合并 tempLeft = 2 right = 3</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>         * 第三次合并 tempLeft = 0 right = 3</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>         * 最后一次 tempLeft = 0 right = 7</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>tempLeft <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>tempLeft<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            t <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            tempLeft <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h3>\n<p><strong>基数排序 (桶排序) 介绍</strong>:</p>\n<ol>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUYlQkElRTYlOTUlQjAlRTYlOEUlOTIlRTUlQkElOEYvNzg3NTQ5OA==\">基</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUYlQkElRTYlOTUlQjAlRTYlOEUlOTIlRTUlQkElOEYvNzg3NTQ5OA==\">数排序</span>（radix sort）属于 “分配式排序”（distribution sort），又称 “桶子法”（bucket sort）或 bin sort，顾名思义，它是通过键值的各个位的值，将要排序的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlODMlRTclQjQlQTAlRTUlODglODYlRTklODUlOEQvMjEwNzQxOQ==\">元素分配</span>至某些 “桶” 中，达到排序的作用</p>\n</li>\n<li>\n<p>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</p>\n</li>\n<li>\n<p>基数排序 (Radix Sort) 是<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9za3l3YW5nMTIzNDUvcC8zNjAyNzM3Lmh0bWw=\">桶排序</span>的扩展</p>\n</li>\n<li>\n<p>基数排序是 1887 年赫尔曼・何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p>\n</li>\n</ol>\n<p><strong>基数排序基本思想</strong></p>\n<ol>\n<li>\n<p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p>\n</li>\n<li>\n<p>这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤</p>\n</li>\n</ol>\n<p><strong>基数排序图文说明</strong></p>\n<p>将数组 {53, 3, 542, 748, 14, 214} 使用基数排序，进行升序排序。</p>\n<p>第 1 轮排序 [按照个位排序]:</p>\n<p>说明： 事先准备 10 个数组 (10 个桶)， 0-9 分别对应 位数的 0-9</p>\n<ol>\n<li>将 各个数，按照个位大小 放入到 对应的 各个数组中</li>\n<li>然后从 0-9 个数组 / 桶，依次，按照加入元素的先后顺序取出</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902994.png\" alt=\"\" /></p>\n<p>示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902405.png\" alt=\"\" /></p>\n<p>分解代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JichuSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">542</span><span class=\"token punctuation\">,</span><span class=\"token number\">748</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">214</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 基数排序方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         * 第一轮（针对每个元素的个位进行排序处理）</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * 定义一个二维数组，表示 10 个桶，每个桶就是一个一维数组</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         * 说明：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         * 1. 二维数组包含 10 个一维数组</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         * 2. 为了防止在放入数值的时候，数据溢出，则每个一维数组（桶），大小定义为 arr.length</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         * 3. 名明确，基础排序是使用空间换时间的经典算法</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * 为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶的每次放入的数据个数</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         * 可以这么理解:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         * 比如：bucketElementCounts [0], 记录的就是 bucket [0] 桶的放入数据个数</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucketElementCounts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 第一轮（针对每个元素的个位进行排序处理）</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 取出每个元素的个位的值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">int</span> digitOfElement <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 放入到对应的桶中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            bucket<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 按照这个桶的顺序（一维数组的下标依次取出数据，放入原来数组）</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 遍历每一桶，并将桶中的数据，放入到原数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 如果桶中，有数据，我们才放入原数组</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 循环该桶即第 k 个桶（即第 k 个一维数组），放入</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>l <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>l <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 取出元素放入到 arr</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一轮排序结果：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">//======================================</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 第二轮 (针对十位进行排序)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 取出每个元素的十位的值</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">int</span> digitOfElement <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 放入到对应的桶中</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            bucket<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 按照这个桶的顺序（一维数组的下标依次取出数据，放入原来数组）</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 遍历每一桶，并将桶中的数据，放入到原数组</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 如果桶中，有数据，我们才放入原数组</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token comment\">// 循环该桶即第 k 个桶（即第 k 个一维数组），放入</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>l <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>l <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token comment\">// 取出元素放入到 arr</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二轮排序结果：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">//==========================================</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 第三轮 (针对百位进行排序)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 取出每个元素的百位的值</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">int</span> digitOfElement <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">// 放入到对应的桶中</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            bucket<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// 按照这个桶的顺序（一维数组的下标依次取出数据，放入原来数组）</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 遍历每一桶，并将桶中的数据，放入到原数组</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>k <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">// 如果桶中，有数据，我们才放入原数组</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token comment\">// 循环该桶即第 k 个桶（即第 k 个一维数组），放入</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>l <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>l <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                    <span class=\"token comment\">// 取出元素放入到 arr</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第三轮排序结果：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>规律：每轮求数值的位数值一直在改变其它不变</p>\n<p>基数排序实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JichuSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">542</span><span class=\"token punctuation\">,</span> <span class=\"token number\">748</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">214</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 基数排序方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 根据前面的推到过程，我们可以得到最终的基数排序代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//1. 得到数组中最大的数的位数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 假设第一个元素就是最大为数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 得到最大数是几位数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> maxLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * 第一轮（针对每个元素的个位进行排序处理）</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         * 定义一个二维数组，表示 10 个桶，每个桶就是一个一维数组</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         * 说明：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         * 1. 二维数组包含 10 个一维数组</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         * 2. 为了防止在放入数值的时候，数据溢出，则每个一维数组（桶），大小定义为 arr.length</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         * 3. 名明确，基础排序是使用空间换时间的经典算法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         * 为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶的每次放入的数据个数</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         * 可以这么理解:</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         * 比如：bucketElementCounts [0], 记录的就是 bucket [0] 桶的放入数据个数</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bucketElementCounts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 第一轮（针对每个元素的个位进行排序处理）</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 取出每个元素的个位的值</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">int</span> digitOfElement <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 放入到对应的桶中</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                bucket<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                bucketElementCounts<span class=\"token punctuation\">[</span>digitOfElement<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 按照这个桶的顺序（一维数组的下标依次取出数据，放入原来数组）</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 遍历每一桶，并将桶中的数据，放入到原数组</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token comment\">// 如果桶中，有数据，我们才放入原数组</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token comment\">// 循环该桶即第 k 个桶（即第 k 个一维数组），放入</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token comment\">// 取出元素放入到 arr</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        arr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                bucketElementCounts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"轮排序结果：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"常用排序算法总结和对比\"><a class=\"anchor\" href=\"#常用排序算法总结和对比\">#</a> 常用排序算法总结和对比</h3>\n<p>常用排序算法对比</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902636.png\" alt=\"\" /></p>\n<p><strong>相关术语解释</strong>：</p>\n<ol>\n<li>稳定：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面；</li>\n<li>不稳定：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面；</li>\n<li>内排序：所有排序操作都在内存中完成；</li>\n<li>外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>\n<li>时间复杂度： 一个算法执行所耗费的时间。</li>\n<li>空间复杂度：运行完一个程序所需内存的大小。</li>\n<li><mark>n</mark>: 数据规模</li>\n<li><mark>k</mark>: “桶” 的个数</li>\n<li><mark>In-place</mark>: 不占用额外内存</li>\n<li><mark>Out-place</mark>: 占用额外内存</li>\n</ol>\n<h2 id=\"查找算法\"><a class=\"anchor\" href=\"#查找算法\">#</a> 查找算法</h2>\n<p><strong>查找算法介绍</strong></p>\n<p>在 java 中，我们常用的查找有四种:</p>\n<ol>\n<li>顺序 (线性) 查找</li>\n<li>二分查找 / 折半查找</li>\n<li>插值查找</li>\n<li>斐波那契查找</li>\n</ol>\n<h3 id=\"线性查找算法\"><a class=\"anchor\" href=\"#线性查找算法\">#</a> 线性查找算法</h3>\n<p>&lt;font style=&quot;color:red&quot;&gt; 要求数组是一个有序的数组 &lt;/font&gt;.</p>\n<p>有一个数列： {1,8, 10, 89, 1000, 1234} ，判断数列中是否包含此名称【顺序查找】  要求：如果找到了，就提示找到，并给出下标值。</p>\n<p>思路：如果查找到全部符合条件的值。[思路分析.]</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902359.png\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">lineSearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lineSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>4\n</code></pre>\n<h3 id=\"二分查找算法\"><a class=\"anchor\" href=\"#二分查找算法\">#</a> 二分查找算法</h3>\n<p><strong>二分查找</strong>：</p>\n<p>&lt;font style=&quot;color:red&quot;&gt; 要求数组是一个有序的数组 &lt;/font&gt;.</p>\n<p>请对一个有序数组进行二分查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示 &quot;没有这个数&quot;。</p>\n<p>课后思考题： {1,8, 10, 89, 1000, 1000，1234} 当一个有序数组中，有多个相同的数值时，如何将所有的数值都查找到，比如这里的 1000.</p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Binary_search</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 二分查找</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> trans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> first <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 判断 目标值是否小于索引 0 的值，目标值是否大于索引长度的值，长度</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trans <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> trans <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> first <span class=\"token operator\">></span> last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 判断循环</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">&lt;=</span> last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 将长度除 2 的值赋值给 mid, 起始位置，访问数组中间的数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">+</span> last<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 判断数字是否小了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> trans<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 如果小了则让 last - 1 然后再次除 2 判断数字的大小</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                last <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//else 只执行一个结果</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 判断数字是否大了</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> trans<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 如果数字大了则 first + 1 然后再次除 2 判断数字的大了，每次都是一半一半的进行试探的判断</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                first <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//else 只执行一个结果</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// 如果两个判断不满足则执行返回值当前的索引位置就是目标值</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 如果全程没有找到则返回 -1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>递归实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Chazhao01</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1234</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> i1 <span class=\"token operator\">=</span> <span class=\"token function\">binarySearch1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"多个值的下标：\"</span><span class=\"token operator\">+</span>i1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param arr 数组</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param left 左边的索引</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param right 右边的索引</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param value 要查找的值</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @return 如果找到就返回下标，否则返回 - 1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> midValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> midValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> midValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">binarySearch1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> midValue <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> midValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 向右递归</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> midValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 向左递归</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>             * 思路分析</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>             * 1. 在找到 mid 索引值，不要马上返回</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>             * 2. 向 mid 索引值的左边扫描，将所有满足 value 的元素下标加入集合中</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>             * 3. 向 mid 索引值的右边扫描，将所有满足 value 的元素下标加入集合中</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>             * 4. 将集合返回</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 向 mid 索引值的左边扫描，将所有满足 value 的元素的下标加入集合中</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 结束</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 否则，将 temp 放入到集合中</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token comment\">//temp 左移</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                temp <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            temp <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>temp <span class=\"token operator\">></span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                temp <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插值查找算法\"><a class=\"anchor\" href=\"#插值查找算法\">#</a> 插值查找算法</h3>\n<p><strong>插值查找原理介绍</strong>:</p>\n<ol>\n<li>\n<p>插值查找算法类似于二分查找，不同的是插值查找每次从自适应 mid 处开始查找。</p>\n</li>\n<li>\n<p>将折半查找中的求 mid 索引的公式，low 表示左边索引 left, high 表示右边索引 right.  key 就是前面我们讲的 findVal<br />\n<img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902056.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>int mid = low + (high - low)  <code>*</code>  (key - arr[low]) / (arr[high] -arr[low]) ;/<em> 插值索引</em> /<br />\n 对应前面的代码公式：<br />\nint mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</p>\n</li>\n<li>\n<p>举例说明插值查找算法 1-100 的数组</p>\n</li>\n</ol>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertValueSearch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">insertValuesearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @param arr 数组</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param left 左边索引</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param right 右边索引</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param value 查找值</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @return 如果找到，返回对应下标，没有返回 -1</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">insertValuesearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         * 注意：value &lt; arr [0] 和 value > arr [arr.length - 1] 必须需要</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         * 否则我们得到的 mid 可能越界</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * arr.length - 1 &lt; right 判断传入的 right 值是否大于了传入数组的长度</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right <span class=\"token operator\">||</span> value <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 求 mid 的值 称为自适应写法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> midVal <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> midVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 向右边递归</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">insertValuesearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>right<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> midVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 向左边递归</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">insertValuesearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>left<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 插入查找注意事项 &lt;/font&gt;：</p>\n<ol>\n<li>对于数据量较大，<strong>关键字分布比较均匀</strong>的查找表来说，采用<strong>插值查找</strong>，<strong> 速度较快</strong>.</li>\n<li>关键字分布不均匀的情况下，该方法不一定比折半查找要好</li>\n</ol>\n<h3 id=\"斐波那契黄金分割法查找算法\"><a class=\"anchor\" href=\"#斐波那契黄金分割法查找算法\">#</a> 斐波那契 (黄金分割法) 查找算法</h3>\n<p><strong>斐波那契 (黄金分割法) 查找基本介绍</strong>:</p>\n<ol>\n<li>\n<p>黄金分割点是指把一条<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkElQkYlRTYlQUUlQjUvODY3OTgwMg==\">线段</span>分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8wLjYxOA==\"> 0.618</span>。由于按此比例设计的造型十分美丽，因此称为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklQkIlODQlRTklODclOTElRTUlODglODYlRTUlODklQjIvMTE1ODk2\">黄金分割</span>，也称为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQjglQUQlRTUlQTQlOTYlRTYlQUYlOTQvNzU5MDkzOQ==\">中外比</span>。这是一个神奇的数字，会带来意向不大的效果。</p>\n</li>\n<li>\n<p>斐波那契数列  {1, 1, 2, 3, 5, 8, 13, 21, 34, 55} 发现斐波那契数列的两个相邻数 的比例，无限接近 黄金分割值 0.618</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902110.png\" alt=\"\" /></p>\n<p>斐波那契 (黄金分割法) 查找算法</p>\n<p><strong>斐波那契 (黄金分割法) 原理</strong>:</p>\n<p>斐波那契查找原理与前两种相似，仅仅  改变了中间结点（mid）的位置，mid 不  再是中间或插值得到，而是位于黄金分  割点附近，即 mid=low+F (k-1)-1  （F 代表斐波那契数列），如下图所示<br />\n对 F (k-1)-1 的理解：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161902101.png\" alt=\"\" /></p>\n<ol>\n<li>由斐波那契数列 F [k]=F [k-1]+F [k-2] 的性质，可以得到 （F [k]-1）=（F [k-1]-1）+（F [k-2]-1）+1 。该式说明：只要顺序表的长度为 F [k]-1，则可以将该表分成长度为 F [k-1]-1 和 F [k-2]-1 的两段，即如上图所示。从而中间位置为 mid=low+F (k-1)-1</li>\n<li>类似的，每一子段也可以用相同的方式分割</li>\n<li>但顺序表长度 n 不一定刚好等于 F [k]-1，所以需要将原来的顺序表长度 n 增加至 F [k]-1。这里的 k 值只要能使得 F [k]-1 恰好大于或等于 n 即可，由以下代码得到，顺序表长度增加后，新增的位置（从 n+1 到 F [k]-1 位置），都赋为 n 位置的值即可。</li>\n</ol>\n<p><strong>斐波那契查找应用案例</strong>：</p>\n<p>请对一个有序数组进行斐波那契查找 {1,8, 10, 89, 1000, 1234} ，输入一个数看看该数组是否存在此数，并且求出下标，如果没有就提示 &quot;没有这个数&quot;。</p>\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FibonnacciSearch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1234</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">fibSearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index : \"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 因为后面我们 mid = low + f [k - 1] - 1; 需要使用到斐波那契数列，因此我们需要先获取到一个斐波那契数列</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 非递归方法得到一个斐波那契数列</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        f<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> maxSize<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 编写斐波那契数列查找算法</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 使用递归方式编写算法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param a 数组</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param key 我们需要查找的关键值</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @return 返回对应的下标，如果没有返回 - 1</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fibSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 表示斐波那契数列分割数值的下标</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存放 mid 的值</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> f <span class=\"token operator\">=</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//f[k] = 1,1,2,3,5,8 (8 - 1 = 7) ==> false k == 5</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>high <span class=\"token operator\">></span> f<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            k <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         * 因为 f [k] 值可能大于 a 的长度，因此我们需要使用 Arrays 类，构造一个新数组，并指向 a []</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         * 不足的部分会使用 0 填充</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         * [1, 8, 10, 89, 1000, 1234, 0, 0]</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         * 实际上需求使用 a 数组最后的数填充 temp</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         * 举例：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         * temp = &#123;1,8, 10, 89, 1000, 1234&#125; => &#123;1,8, 10, 89, 1000, 1234,1234,1234&#125;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> temp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            temp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 使用 while 来循环处理，找到我们的数 key</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            mid <span class=\"token operator\">=</span> low <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;</span> temp\t<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                 * 为什么是 k--</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                 * 说明：</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                 * 1. 全部元素 = 前面的元素 + 后面元素</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                 * 2.f [k] = f [k - 1] + f [k - 2];</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                 * 因为前面有 f [k - 1] 个元素，所以可以继续拆分 f [k - 1] = f [k - 2] + f [k - 3]</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                 * 即在 f [k - 1] 的前面继续查找 k --</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                 * 即下次循环 mid = f [k - 1 - 1] - 1</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">></span> temp<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 我们应该继续向数组的后面查找 (右边)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                 * 为什么是 k -= 2;</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                 * 说明：</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                 * 1. 全部元素 = 前面元素 + 后面元素</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                 * 2.f [k] = f [k - 1]  + f [k - 2]</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                 * 3. 因为后面我们有 f [k - 2] 所以可以继续拆分 f [k - 1] = f [k - 3] + f [k - 4]</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                 * 4. 即在 f [k - 2] 的前面进行查找 k -= 2</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                 * 5. 即下次循环 mid = f [k - 1 - 2] - 1</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                k <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token comment\">// 需要确定，返回的是哪个下标</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token keyword\">return</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"哈希表\"><a class=\"anchor\" href=\"#哈希表\">#</a> 哈希表</h2>\n<p><strong>看一个实际需求，google 公司的一个上机题</strong>:</p>\n<p>有一个公司，当有新的员工来报道时，要求将该员工的信息加入 (id, 性别，年龄，住址..), 当输入该员工的 id 时，要求查找到该员工的 所有信息.</p>\n<p>要求：不使用数据库，尽量节省内存，速度越快越好  =&gt;  <mark>哈希表</mark> (散列)</p>\n<p><strong>哈希表的基本介绍</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQTMlRTUlODglOTclRTglQTElQTg=\">散列表</span>（Hash table，也叫<strong>哈希表</strong>），是根据关键码值 (Key value) 而直接进行访问的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTYlOEQlQUUlRTclQkIlOTMlRTYlOUUlODQvMTQ1MA==\">数据结构</span>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQTMlRTUlODglOTclRTUlODclQkQlRTYlOTUlQjA=\">散列函数</span>，存放记录的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQjAlRTclQkIlODQ=\">数组</span>叫做<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQTMlRTUlODglOTclRTglQTElQTg=\">散列</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTUlQTMlRTUlODglOTclRTglQTElQTg=\">表</span>。</p>\n<p>15  111 % 15</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903974.png\" alt=\"\" /></p>\n<p><strong>哈希表 (散列)- 应用实例</strong></p>\n<p><strong>google 公司的一个上机题</strong>:</p>\n<p>有一个公司，当有新的员工来报道时，要求将该员工的信息加入 (id, 性别，年龄，名字，住址..), 当输入该员工的 id 时，要求查找到该员工的 所有信息.</p>\n<p>要求:</p>\n<p>不使用数据库，速度越快越好 =&gt; <mark>哈希表</mark> (散列)</p>\n<p>添加时，保证按照 id 从低到高插入  [课后思考：如果 id 不是从 低到高插入，但要求各条链表仍是从低到高，怎么解决？]</p>\n<ol>\n<li>使用链表来实现哈希表，该链表不带表头  [即：链表的第一个结点就存放雇员信息]</li>\n<li>思路分析并画出示意图</li>\n<li>代码实现 [增删改查 (显示所有员工，按 id 查询)]</li>\n</ol>\n<p>示意图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309161903704.png\" alt=\"\" /></p>\n<p>代码实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTableDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">HashTable</span> hashTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token char\">' '</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l(list) 查看所有雇员信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a(add) 添加雇员信息到链表\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s(select) 根据id查找指定雇员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d(delet) 根据id删除指定雇员信息,并返回信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D(delet) 根据id删除指定雇员信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e(exit) 退出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=======================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            ch <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'s'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要查找的雇员id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">int</span> id1 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    hashTable<span class=\"token punctuation\">.</span><span class=\"token function\">findEmpById</span><span class=\"token punctuation\">(</span>id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'l'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    hashTable<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'a'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入名称\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">Emp</span> emp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    hashTable<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'d'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要删除的雇员id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token keyword\">int</span> id2 <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token class-name\">Emp</span> emp1 <span class=\"token operator\">=</span> hashTable<span class=\"token punctuation\">.</span><span class=\"token function\">delEmp</span><span class=\"token punctuation\">(</span>id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>\\tData:\\t%s\\n\"</span><span class=\"token punctuation\">,</span>emp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'D'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要删除的雇员id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token keyword\">int</span> vlaue <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        hashTable<span class=\"token punctuation\">.</span><span class=\"token function\">delEmp01</span><span class=\"token punctuation\">(</span>vlaue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token char\">'e'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    sc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"选择存在项\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">// 创建 HashTable 管理多条链表</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EmpLinkedList</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> empLinkedListArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// 表示共有多少条链表 (链表的大小)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 构造器，初始化链表</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 初始化 size 值</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 初始化数组大小</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        empLinkedListArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmpLinkedList</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">//TODO 注意：每一个链表都需要初始化否则报错空指针异常</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            empLinkedListArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmpLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 添加雇员</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// 根据员工的 id，得到该员工应当添加到哪条链表</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">hashFun</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token comment\">// 将 emp 添加到对应的链表中</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        empLinkedListArray<span class=\"token punctuation\">[</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 遍历所有的链表 (遍历 HashTable)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            empLinkedListArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token comment\">// 编写散列函数，使用一个简单取模法</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashFun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">return</span> id <span class=\"token operator\">%</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">// 根据 id 查找雇员</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findEmpById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">hashFun</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token class-name\">Emp</span> emp <span class=\"token operator\">=</span> empLinkedListArray<span class=\"token punctuation\">[</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>emp <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在第%d个链表中查找到 的雇员信息如下：\\n>>> id: %d\\n>>> name: %s\"</span><span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>emp<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抱歉>\"</span><span class=\"token operator\">+</span>num<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;链表中没有找到任何信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Emp</span> <span class=\"token function\">delEmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">hashFun</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">Emp</span> del <span class=\"token operator\">=</span> empLinkedListArray<span class=\"token punctuation\">[</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">return</span> del<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delEmp01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">hashFun</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        empLinkedListArray<span class=\"token punctuation\">[</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">del01</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">// 表示一个雇员</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Emp</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Emp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Emp&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                <span class=\"token string\">\"id=\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\">// 表示链表</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">EmpLinkedList</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token comment\">// 头指针，执行第一个 Emp，因此我们这个链表的 head 是直接指向第一个 Emp</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Emp</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     * 添加雇员到链表</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>     * 说明：</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>     * 1. 假设，当添加雇员时，id 是自增长，即 id 的分配总是从小到大</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>     * 因此我们将该雇员直接加入到本链表的最后即可</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>     * @param emp</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Emp</span> emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">// 如果是添加第一个雇员</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            head <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token comment\">// 如果不是第一个雇员，则使用一个辅助指针，帮助定位到最后</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token class-name\">Emp</span> curEmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token comment\">// 说明到链表最后</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token comment\">// 指针后移</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            curEmp <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token comment\">// 退出时直接将 tmp 加入到链表即可</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        curEmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>     * 遍历链表的雇员信 a</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> no<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第>\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>no <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"&lt;个链表为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*-==第>\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>no <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"&lt;个链表中的雇员的信息为==-*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>        <span class=\"token class-name\">Emp</span> curEmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>> id: %d \\n>>> name: %s\"</span><span class=\"token punctuation\">,</span>curEmp<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>curEmp<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>            <span class=\"token comment\">// 判断是否遍历到链表的最后</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>            <span class=\"token comment\">// 指针后移</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>            curEmp <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>    <span class=\"token comment\">// 根据 id 查找雇员信息</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Emp</span> <span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>        <span class=\"token class-name\">Emp</span> curEmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"204\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>            curEmp <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>            <span class=\"token keyword\">return</span> curEmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>    <span class=\"token comment\">// 根据 id 删除雇员，并返回删除的雇员信息</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Emp</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>\"</span><span class=\"token operator\">+</span>id<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;链表为空删除无效\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre>        <span class=\"token comment\">// 赋值指针</span></pre></td></tr><tr><td data-num=\"226\"></td><td><pre>        <span class=\"token class-name\">Emp</span> curEmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"227\"></td><td><pre>        <span class=\"token comment\">// 记录上一个位置指针</span></pre></td></tr><tr><td data-num=\"228\"></td><td><pre>        <span class=\"token class-name\">Emp</span> pre <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"229\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"230\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"231\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"232\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"233\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"234\"></td><td><pre>                curEmp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"235\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"236\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"237\"></td><td><pre>            <span class=\"token comment\">// 将当前节点赋值给 pre</span></pre></td></tr><tr><td data-num=\"238\"></td><td><pre>            pre <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"239\"></td><td><pre>            <span class=\"token comment\">//curEmp 节点向后移动</span></pre></td></tr><tr><td data-num=\"240\"></td><td><pre>            curEmp <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"241\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"242\"></td><td><pre>        <span class=\"token comment\">// 判断当前节点是否为 null</span></pre></td></tr><tr><td data-num=\"243\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"244\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"245\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"246\"></td><td><pre>        <span class=\"token comment\">// 判断头节点是否和当前节点相同</span></pre></td></tr><tr><td data-num=\"247\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> curEmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"248\"></td><td><pre>            <span class=\"token comment\">// 将 curEmp.next 元素赋值给头节点</span></pre></td></tr><tr><td data-num=\"249\"></td><td><pre>            head <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"250\"></td><td><pre>            <span class=\"token keyword\">return</span> curEmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"251\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"252\"></td><td><pre>        <span class=\"token comment\">// 将赋值的元素再赋值给 pre 的 next</span></pre></td></tr><tr><td data-num=\"253\"></td><td><pre>        pre<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"254\"></td><td><pre>        <span class=\"token keyword\">return</span> curEmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"255\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"256\"></td><td><pre></pre></td></tr><tr><td data-num=\"257\"></td><td><pre>    <span class=\"token comment\">// 根据 id 删除雇员</span></pre></td></tr><tr><td data-num=\"258\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">del01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"259\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"260\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">>>\"</span><span class=\"token operator\">+</span>id<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;链表为空删除无效\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"261\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"262\"></td><td><pre>        <span class=\"token class-name\">Emp</span> curEmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"263\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"264\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"265\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"266\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"267\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"268\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"269\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"270\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"271\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"272\"></td><td><pre>            curEmp <span class=\"token operator\">=</span> curEmp<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"273\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"274\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"275\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该\"</span><span class=\"token operator\">+</span>id<span class=\"token operator\">+</span><span class=\"token string\">\"雇员删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"276\"></td><td><pre>            <span class=\"token comment\">// 判断下一个 next 节点是否为 null</span></pre></td></tr><tr><td data-num=\"277\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curEmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"278\"></td><td><pre>                <span class=\"token comment\">// 如果下一个 next 就是 null 那么就说明了这是第一个元素直接将头元素赋值为 null 即可</span></pre></td></tr><tr><td data-num=\"279\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"280\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"281\"></td><td><pre>                <span class=\"token comment\">// 否则将下一个元素赋值为 null</span></pre></td></tr><tr><td data-num=\"282\"></td><td><pre>                curEmp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"283\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"284\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"285\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您输入的雇员可能本来就不存在\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"286\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"287\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"288\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E4%BB%8B%E7%BB%8D/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/data-structures-and-algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E4%BB%8B%E7%BB%8D/",
            "title": "数据结构与算法的介绍",
            "date_published": "2024-01-05T01:00:04.724Z",
            "content_html": "<h2 id=\"数据结构和算法的重要性\"><a class=\"anchor\" href=\"#数据结构和算法的重要性\">#</a> 数据结构和算法的重要性🎄</h2>\n<blockquote>\n<ol>\n<li><mark>算法是程序的灵魂</mark>，优秀的程序可以在海量数据计算时，依然保持高速计算</li>\n<li>一般来讲，程序会使用了内存计算框架 (比如 Spark) 和缓存技术 (比如 Redis 等) 来优化程序，再深入的思考一下，这些计算框架和缓存技术，它的核心功能是哪个部分呢？</li>\n<li>拿实际工作经历来说，在 Unix 下开发服务器程序，功能是要支持上千万人同时在线，在上线前，做内测，一切 OK 后，可上线后，服务器就支撑不住了，公司的 CTO 对代码进行优化，再次上线，坚如磐石，你就能感受到程序是有灵魂的，就是算法。</li>\n<li>目前程序员面试的门槛越来越高，<mark>很多一线 IT 公司 (大厂)</mark>，<mark>都会有数据结构和算法面试题</mark> (负责的告诉你，肯定有的)</li>\n<li>&lt;font style=&quot;color:red&quot;&gt; 如果你不想永远都是代码工人，那就花时间来研究下数据结构和算法 &lt;/font&gt;。</li>\n</ol>\n</blockquote>\n<h2 id=\"数据结构和算法的概述\"><a class=\"anchor\" href=\"#数据结构和算法的概述\">#</a> 数据结构和算法的概述</h2>\n<p><strong>数据结构和算法的关系</strong>。</p>\n<ul>\n<li><mark>数据 (Data) 结构 (Structure)<mark> 是一门研究组织</mark>数据</mark>方式的学科，有了编程语言也就有了数据结构，学好数据结构可以编写出更加漂亮，更加有效率的代码。</li>\n<li>要学好数据结构就要多多考虑如何将生活中遇到的问题，用程序去实现解决。</li>\n<li>程序 = <mark>数据结构</mark> + 算法</li>\n<li><mark>数据结构</mark>是<mark>算法的基础</mark>，换言之，想要<mark>学好算法</mark>，需要把<mark>数据结构学到位</mark>。</li>\n<li>思维概括：学数据结构和算法只是打个基础，并不是学会了就能写出好的程序，比方说你会数组那么就会归并算法了吗？并不会所以什么东西都是需要学的不会的就学。在学会一个算法的基础上去营造一个新的算法就是进步</li>\n</ul>\n<p><strong>数据结构和算法的联系</strong>：</p>\n<ul>\n<li>简单的一些问题就用数据结构</li>\n<li>比较复杂的问题就实用数据结构 + 算法</li>\n</ul>\n<ol>\n<li>修路问题 =&gt; 最小生成树 (加权值)[数据结构] + 普利姆算法</li>\n<li>最短路径问题 =&gt; 图 + 费罗伊德算法</li>\n<li>汉若塔 =&gt; 分支算法</li>\n<li>八皇后问题 =&gt; 回溯法</li>\n</ol>\n<h2 id=\"线性结构和非线性结构\"><a class=\"anchor\" href=\"#线性结构和非线性结构\">#</a> 线性结构和非线性结构</h2>\n<h3 id=\"线性结构\"><a class=\"anchor\" href=\"#线性结构\">#</a> 线性结构</h3>\n<ol>\n<li>线性结构作为最常用的数据结构，其特点是<mark>数据元素之间存在一对一的线性关系</mark>。</li>\n<li>线性结构有两种不同的存储结构，即<mark>顺序存储结构 (<strong>数组</strong>)<mark> 和</mark>链式存储结构 (<strong>链表</strong>)</mark>。顺序存储的线性表称为顺序表，顺序表中的<mark>存储元素 (地址) 是连续</mark>的。</li>\n<li>链式存储的线性表称为链表，链表中的<mark>存储元素不一定是连续</mark>的，元素节点中存放数据元素以及相邻元素的地址信息</li>\n<li>线性结构常见的有：<mark>数组，队列，链表和栈</mark>。</li>\n</ol>\n<h3 id=\"非线性结构\"><a class=\"anchor\" href=\"#非线性结构\">#</a> 非线性结构</h3>\n<p>非线性结构，数学用语，其<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklODAlQkIlRTglQkUlOTEvNTQz\">逻辑</span>特征是一个结点元素可能有多个直接前驱和多个直接后继。</p>\n<p>非线性结构包括：二维数组，多维数组，广义表，树结构，图结构</p>\n",
            "tags": [
                "计算机学科",
                "数据结构与算法",
                "Java",
                "Java",
                "计算机学科",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/",
            "title": "回文链表",
            "date_published": "2024-01-04T09:27:45.551Z",
            "content_html": "<h1 id=\"回文链表\"><a class=\"anchor\" href=\"#回文链表\">#</a> 回文链表</h1>\n<p>给你一个单链表的头节点  <code>head</code>  ，请你判断该链表是否为回文链表。如果是，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401041636881.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：head = [1,2,2,1]\n输出：true\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401041636873.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：head = [1,2]\n输出：false\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表中节点数目在范围 <code>[1, 105]</code>  内</li>\n<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n</ul>\n<h2 id=\"方法1快慢指针\"><a class=\"anchor\" href=\"#方法1快慢指针\">#</a> 方法 1：快慢指针</h2>\n<p><strong>思路分析</strong>：</p>\n<p>先找到链表的中间点：</p>\n<ul>\n<li>如果是偶数就是中间靠右的 2</li>\n</ul>\n<pre><code>1\t2\t2\t1\n</code></pre>\n<p>找到中间点后我们将其后面的节点进行反转</p>\n<pre><code># 中间节点后面的元素\n2\t1\n# 进行反转\n1\t2\n</code></pre>\n<p>用反转后的链表跟原始链表进行逐一比较，如果这后半个链表遍历完了大家都相同那么就是 回文</p>\n<pre><code># 原始链表\n1\t2\t2\t1\n# 遍历，后面半个链表进行比较是否相同，相同就是 回文\n1\t2\n</code></pre>\n<p>如果是如下的链表的话，分析结果：</p>\n<pre><code>1\t2\t3\t1\n</code></pre>\n<p>取中间值的后半个链表，然后进行反转</p>\n<pre><code>3\t1\n# 反转\n1\t3\n</code></pre>\n<p>进行比较，当比较 2 与 3 的时候结果不相同 返回 false 不是一个回文链表</p>\n<pre><code>1\t2\t3\t1\n1\t3\n</code></pre>\n<p>如果链表是奇数的情况也是一样的，比如下面的分析结果：</p>\n<pre><code>1\t2\t3\t2\t1\n</code></pre>\n<p>取中间节点的后半个链表，然后进行反转</p>\n<pre><code>3\t2\t1\n# 反转\n1\t2\t3\n</code></pre>\n<p>比较 ，相同返回 true 是 回文链表</p>\n<pre><code>1\t2\t3\t2\t1\n1\t2\t3\n</code></pre>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>我们需要使用到，取链表中间节点，反转链表，判断是否是回文</li>\n</ul>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token class-name\">ListNode</span> mid <span class=\"token operator\">=</span> <span class=\"token function\">mid</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">ListNode</span> reverse <span class=\"token operator\">=</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>reverse <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> head<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          reverse <span class=\"token operator\">=</span> reverse<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> o1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">ListNode</span> n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token class-name\">ListNode</span> p <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> n1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">return</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>优化后的代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 慢指针</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 快指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 新链表</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> o1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 旧链表</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 快指针停止条件为 本身或者 next 为 null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 慢指针一次走一步</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 快指针一次走两步</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 反转链表</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            o1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            n1 <span class=\"token operator\">=</span> o1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            o1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 奇数，选取后一个节点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> p1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            n1 <span class=\"token operator\">=</span> n1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "编程题",
                "Java",
                "快慢指针"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/",
            "title": "链表的中间节点",
            "date_published": "2024-01-04T08:33:41.619Z",
            "content_html": "<h1 id=\"链表的中间节点\"><a class=\"anchor\" href=\"#链表的中间节点\">#</a> 链表的中间节点</h1>\n<p>给你单链表的头结点  <code>head</code>  ，请你找出并返回链表的中间结点。</p>\n<p>如果有两个中间结点，则返回第二个中间结点。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401041003579.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：head = [1,2,3,4,5]\n输出：[3,4,5]\n解释：链表只有一个中间结点，值为 3 。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401041003602.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：head = [1,2,3,4,5,6]\n输出：[4,5,6]\n解释：该链表有两个中间结点，值分别为 3 和 4 ，返回第二个结点。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>链表的结点数范围是  <code>[1, 100]</code></li>\n<li><code>1 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"方法1快慢指针\"><a class=\"anchor\" href=\"#方法1快慢指针\">#</a> 方法 1：快慢指针</h2>\n<p>如果说我现在有链表如下，是奇数个。那么中间的节点就是 3</p>\n<pre><code>p2\np1\n1\t2\t3\t4\t5\tnull\n</code></pre>\n<p>还有下面是偶数个的情况：</p>\n<p>此时中间节点好像是 3，又好像是 4。但是题目要求是找靠右的 那么就是 4 了</p>\n<pre><code>p2\np1\n1\t2\t3\t4\t5\t6\tnull\n</code></pre>\n<p>此时让慢指针 p1 一次走一步，让快指针 p2 一次走 两步，下面是执行过程：</p>\n<p>第一轮循环：p1 走一步，p2 走两步</p>\n<pre><code>\t\tp2\n\tp1\n1\t2\t3\t4\t5\tnull\n</code></pre>\n<p>没有走到头就重复该过程 p1 走一步，p2 走两步</p>\n<pre><code>\t\t\t\tp2\n\t\tp1\n1\t2\t3\t4\t5\tnull\n</code></pre>\n<p>此时 p2 的 next 为 nulll 了就停止，而现在 p1 所在的位置就是当前链表的中间节点了</p>\n<p>这是奇数的情况，那偶数呢？</p>\n<p>分析如下：</p>\n<p>第一轮</p>\n<pre><code>\t\tp2\n\tp1\n1\t2\t3\t4\t5\t6\tnull\n</code></pre>\n<p>第二轮</p>\n<pre><code>\t\t\t\tp2\n\t\tp1\n1\t2\t3\t4\t5\t6\tnull\n</code></pre>\n<p>第三轮</p>\n<pre><code>\t\t\t\t\t\tp2\n\t\t\tp1\n1\t2\t3\t4\t5\t6\tnull\n</code></pre>\n<p>此时 p2 本身就是 null 了就停止，而当前 p1 就是偶数个链表的中间节点了</p>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>每次 p1 一次走一步，p2 一次走两步。当 p2 的 next 或者 p2 的本身就是 null 时就停止移动，然后 p1 的当前位置就是中间节点</li>\n</ul>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">middleNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p1 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p2 <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "编程题",
                "Java",
                "快慢指针"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%90%88%E5%B9%B6K%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/",
            "title": "合并K个升序链表",
            "date_published": "2024-01-04T01:56:14.220Z",
            "content_html": "<h1 id=\"合并k个升序链表\"><a class=\"anchor\" href=\"#合并k个升序链表\">#</a> 合并 K 个升序链表</h1>\n<p>给你一个链表数组，每个链表都已经按升序排列。</p>\n<p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：lists = [[1,4,5],[1,3,4],[2,6]]\n输出：[1,1,2,3,4,4,5,6]\n解释：链表数组如下：\n[\n  1-&gt;4-&gt;5,\n  1-&gt;3-&gt;4,\n  2-&gt;6\n]\n将它们合并到一个有序链表中得到。\n1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：lists = []\n输出：[]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：lists = [[]]\n输出：[]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>k == lists.length</code></li>\n<li><code>0 &lt;= k &lt;= 10^4</code></li>\n<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>\n<li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li>\n<li><code>lists[i]</code>  按 <strong>升序</strong> 排列</li>\n<li><code>lists[i].length</code>  的总和不超过  <code>10^4</code></li>\n</ul>\n<p><strong>思路分析</strong>：</p>\n<p>多个节点合并，我们可以先看做是两个两个进行合并排序来简化问题并解决</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401032056809.png\" alt=\"image-20240103205628725\" /></p>\n<p>最终的合并结果如下图所示：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401032107504.png\" alt=\"image-20240103210710426\" /></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeKLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">splitar</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lists<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> p2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">return</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          p1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token keyword\">return</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 返回合并后的链表，i,j 代表左右边界</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">splitar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> lists<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 中间点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 从 i=0，到 m=2 拆分左边的合并链表</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token class-name\">ListNode</span> left <span class=\"token operator\">=</span> <span class=\"token function\">splitar</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// 从 m+1=3，到 j = 长度 - 1  拆分右边的合并链表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token class-name\">ListNode</span> right <span class=\"token operator\">=</span> <span class=\"token function\">splitar</span><span class=\"token punctuation\">(</span>lists<span class=\"token punctuation\">,</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "编程题",
                "Java",
                "分而治之"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/",
            "title": "合并两个有序链表",
            "date_published": "2024-01-03T11:28:42.009Z",
            "content_html": "<h1 id=\"合并两个有序链表\"><a class=\"anchor\" href=\"#合并两个有序链表\">#</a> 合并两个有序链表</h1>\n<p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031127336.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：l1 = [1,2,4], l2 = [1,3,4]\n输出：[1,1,2,3,4,4]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：l1 = [], l2 = []\n输出：[]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：l1 = [], l2 = [0]\n输出：[0]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>两个链表的节点数目范围是  <code>[0, 50]</code></li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n<li><code>l1</code>  和  <code>l2</code>  均按 <strong>非递减顺序</strong> 排列</li>\n</ul>\n<h2 id=\"方法1\"><a class=\"anchor\" href=\"#方法1\">#</a> 方法 1</h2>\n<ul>\n<li>谁小，把谁链给 p，p 和小的都向后平移一位</li>\n<li>当 p1，p2 有一个为 Null，退出循环，把不为 null 的链给 p</li>\n</ul>\n<pre><code>    p1\n1 3 8 9 null\n</code></pre>\n<pre><code>\tp2\n2 4 null\n</code></pre>\n<pre><code>  p\ns 1\n</code></pre>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            p1 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            p2 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"方法2\"><a class=\"anchor\" href=\"#方法2\">#</a> 方法 2</h2>\n<p>递归函数应该返回</p>\n<ul>\n<li>更小的那个链表节点，并把它剩余节点与另一个链表再次递归</li>\n<li>返回之前，更新此节点的 next</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">1.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t<span class=\"token number\">2.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t\t<span class=\"token number\">3.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> \t\t\t\t<span class=\"token number\">4.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   \t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> p1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token keyword\">return</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> p2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          p1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token keyword\">return</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          p2<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">mergeTwoLists</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token keyword\">return</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "编程题",
                "Java",
                "递归",
                "双指针"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/hexo/shoka/%E9%85%8D%E7%BD%AEshoka%E4%B8%BB%E9%A2%98/",
            "title": "配置shoka主题，以及解决依赖版本问题导致的代码块显示问题",
            "date_published": "2024-01-03T11:07:38.327Z",
            "content_html": "<h1 id=\"配置shoka主题\"><a class=\"anchor\" href=\"#配置shoka主题\">#</a> 配置 shoka 主题</h1>\n<p><strong>前提</strong>：配置好 hexo，会有版本问题下面再解决</p>\n<ol>\n<li>\n<p>访问 github 拉取 shoka 主题代码</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">https</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//github.com/amehime/hexo-theme-shoka</span></span></pre></td></tr></table></figure></li>\n<li>\n<p>或者直接使用如下命令拉取项目</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><p>需要知道的几点：</p>\n<ol>\n<li>shoka 拉取下来后里面有一个 example 目录，这个目录里面都是例子代码，并不会配置了对项目生效的 😪</li>\n<li>其中 example 下的 package.json 是 hexo 目录中的 package.json 的参考文件，_config.yml 是 hexo 目录中的 <code>_config.yml</code>  参考文件， <code>_config.shoka.yml</code>  是 shok 中的 <code>_config.yml</code>  参考文件。注意不要混淆！</li>\n<li>建议将 shoka 中的 example 中的配置文件与 hexo 的配置文件内容放到 hexo 的配置文件中，避免重复的设置项 不然会报错的</li>\n</ol>\n</li>\n<li>\n<p>拉取下来 shoka 项目后确认这个项目放到的位置是在 hexo 的 themes 目录中</p>\n</li>\n<li>\n<p>修改 hexo 的_config.yml 文件，将里面的主题项修改为 shoka</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Plugins: http://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Themes: http://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr></table></figure><p>配置完成后基本上 shoka 这个主题就应用上去了，我们就可以去配置 shoka 的_config.yml 配置了</p>\n</li>\n<li>\n<p>安装依赖的插件：</p>\n<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>npm 地址</th>\n<th>功能</th>\n<th>依赖程度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo-renderer-multi-markdown-it</td>\n<td>链接</td>\n<td>md 文件渲染器，压缩 css/js/html</td>\n<td>必需</td>\n</tr>\n<tr>\n<td>hexo-autoprefixer</td>\n<td>链接</td>\n<td>给生成的 css 文件们添加浏览器前缀</td>\n<td>必需</td>\n</tr>\n<tr>\n<td>hexo-algoliasearch</td>\n<td>链接</td>\n<td>站内搜索功能</td>\n<td>搜索按钮失灵</td>\n</tr>\n<tr>\n<td>hexo-symbols-count-time</td>\n<td>链接</td>\n<td>文章或站点字数及阅读时间统计</td>\n<td>统计没有</td>\n</tr>\n<tr>\n<td>hexo-feed</td>\n<td>链接</td>\n<td>生成 Feed 文件</td>\n<td>Feed 文件没有</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>hexo-renderer-multi-markdown-it   ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tdWx0aS1tYXJrZG93bi1pdA==\">https://www.npmjs.com/package/hexo-renderer-multi-markdown-it</span></li>\n<li>hexo-autoprefixer : <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvcHJlZml4ZXI=\">https://www.npmjs.com/package/hexo-autoprefixer</span></li>\n<li>hexo-algoliasearch ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hbGdvbGlhc2VhcmNo\">https://www.npmjs.com/package/hexo-algoliasearch</span></li>\n<li>hexo-symbols-count-time ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=\">https://www.npmjs.com/package/hexo-symbols-count-time</span></li>\n<li>hexo-feed ：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1mZWVk\">https://www.npmjs.com/package/hexo-feed</span></li>\n</ul>\n</li>\n<li>\n<p>如果直接下载上面的插件可能导致 页面的 代码块 显示有问题 这是 版本问题所导致的解决问题如下：修改 package.json 文件</p>\n</li>\n<li>\n<p>修改 hexo 的 package.json 的文件内容，将 shoka 的 example 目录中的 package.json 文件的内容拷贝到 hexo 的 package.json 中即可</p>\n</li>\n<li>\n<p>修改完 package.json 文件内容后执行下面的命令降级 hexo</p>\n<ul>\n<li>\n<p>重新全局安装 hexo 5.4.2</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo@5.4.2</pre></td></tr></table></figure></li>\n<li>\n<p>然后在 hexo 目录下更新依赖</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure></li>\n<li>\n<p>然后重新生成就可以解决问题了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s</pre></td></tr></table></figure><p>注意：浏览器可能有缓存，记得刷新缓存</p>\n</li>\n</ul>\n</li>\n<li>\n<p>然后将 shoka 中的 example\\source 目录中的  <code>_data</code>  ，assets， friends 这几个目录放到 hexo 的 source 目录中，注意你要配置友情链接可以看 friends 目录中的说明，这个目录就是友情链接的配置文件，其余的如下：</p>\n</li>\n<li>\n<p>什么是 about，friends，links？就是如下图</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031903220.png\" alt=\"image-20240103190306102\" /></p>\n<ul>\n<li>\n<p>about：关于 的页面配置，在 hexo 的 source 目录中创建 about 目录里面创建 index.md 文件，在里面写 helloworld 然后重新生成 hexo s 打开网页后点击关于查看 会显示 hello world 字样</p>\n</li>\n<li>\n<p>links：链接 的配置同样的在 hexo 的 source 目录中创建 links 目录然后里面创建 index.md 文件用于配置链接的页面</p>\n</li>\n<li>\n<p><code>_post</code> ：里面是配置 .md 笔记的，在该目录中创建 目录分类 比如 java 目录里面存放 java 的笔记 易于管理 并且 创建 java 目录后我们需要在 hexo 的 <code>_config.yml</code>  文件中进行 category_map 的配置格式如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">计算机学科</span><span class=\"token punctuation\">:</span> computer<span class=\"token punctuation\">-</span>science</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">数据结构与算法</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">-</span>structures<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>algorithms</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">编程题</span><span class=\"token punctuation\">:</span> programming<span class=\"token punctuation\">-</span>questions</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">Java</span><span class=\"token punctuation\">:</span> java</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span> js</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span> web</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">video</span><span class=\"token punctuation\">:</span> video</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">movie</span><span class=\"token punctuation\">:</span> movie</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">Tvdrama</span><span class=\"token punctuation\">:</span> Tvdrama</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">animation</span><span class=\"token punctuation\">:</span> animation</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token key atrule\">Reality</span><span class=\"token punctuation\">:</span> Reality</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">问题总汇</span><span class=\"token punctuation\">:</span> bug</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span> css</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token key atrule\">vue</span><span class=\"token punctuation\">:</span> vue</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">vue3</span><span class=\"token punctuation\">:</span> vue3</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> databse</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span> mongodb</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">mysql</span><span class=\"token punctuation\">:</span> mysql</pre></td></tr></table></figure></li>\n<li>\n<p><strong>注意</strong>：下面还有一个 tag_map 的配置项，这里并不是配置标签的不要被误导了，标签是在笔记文件中的 YAML Front Matter 里面配置的 tag 选项 具体格式如下：</p>\n<pre><code class=\"language-.md笔记文章\">---\ntitle: 这是文章的标题\ncategories:\n\t- [分类,分类,分类]\ntags:\n\t- 标签\n    - 标签\n---\n\nhello world,这里是我的笔记内容\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>其它的配置就看个人喜好来配置就好了，至此基本的配置完毕！</p>\n</li>\n</ol>\n",
            "tags": [
                "hexo",
                "shoka",
                "shoka",
                "hexo"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/database/mongodb/MongoDB%E9%9B%86%E7%BE%A4%E5%92%8C%E5%AE%89%E5%85%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/database/mongodb/MongoDB%E9%9B%86%E7%BE%A4%E5%92%8C%E5%AE%89%E5%85%A8/",
            "title": "MongoDB集群和安全",
            "date_published": "2024-01-03T09:06:12.059Z",
            "content_html": "<h1 id=\"mongodb集群和安全\"><a class=\"anchor\" href=\"#mongodb集群和安全\">#</a> MongoDB 集群和安全</h1>\n<p>学习目标：</p>\n<ul>\n<li>MongoDB 的副本集：操作，主要概念，故障转移，选举规则</li>\n<li>MongoDB 的分片集群：概念，有点，操作，分片策略，故障转移</li>\n<li>MongoDB 的安全认证</li>\n</ul>\n<h2 id=\"副本集-replica-sets\"><a class=\"anchor\" href=\"#副本集-replica-sets\">#</a> 副本集 - Replica Sets</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>MongoDB 中的副本集 (Replica Set) 是一组维护相同数据集的 mongod 服务，副本集可提供冗余和高可用性，是所有生产部署的基础。</p>\n<p>也可以说，副本集类似于有自动故障恢复功能的主从集群，通俗的讲就是多台机器进行同一数据的异步同步，从而使多台机器拥有同一数据的多个副本，并且当主库宕掉时在不需要用户干预的情况下自动切换其它备份服务器做主库，而且还可以利用副本服务器做只读服务器，实现读写分离，提高负载</p>\n<p>1. 冗余和数据可用性</p>\n<p>复制提供冗余并提高数据可用性，通过在不同数据库服务器上提供多个数据副本，复制可提供一定级别的容错功能，以防丢失单个数据库服务器。</p>\n<p>在某些情况下，复制可以提供增加的读取性能，因为客户端可以将读取操作发送到不同的服务上，在不同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性，您还可以为专用目的维护其它副本，例如灾难恢复，报告或备份。</p>\n<p>2.MongoDB 中的复制</p>\n<p>副本集是一组维护相同数据集的 mongod 实例，副本集包含了多个数据承载节点和可选的一个仲载节点，在承载数据节点中，一个且仅一个成员被视为主节点，而其它节点被视为次要（从）节点。<br />\n主节点接受所有写操作，副本集只能有一个主要能够确认具有 {w:&quot;most&quot;} 写入关注的写入；虽然在某些情况下，另一个 mongod 实例可能暂时认为自己也是主要的，主要记录其操作日志中的数据集的所有更改，即 oplog。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031657901.png\" alt=\"image-20230605120258300\" /></p>\n<p>辅助 (副本) 节点复制主节点的 oplog 并将操作应用于其数据集，以使辅助节点的数据集反射主节点的数据集，如果主要人员不在，则符合条件的中学将举行选举以选出新的主要人员</p>\n<p>3. 主从复制和副本集区别</p>\n<p>主从集群和副本集最大的区别就是副本集没有固定的 &quot;主节点&quot;；整个集群会选出一个 &quot;主节点&quot;，当其挂掉后，又在剩下的从节点中选中其它节点为 &quot;主节点&quot;，副本集总有一个活跃点 (主，primary) 和一个或多个备份节点 (从，secondary)。</p>\n<h2 id=\"副本集的三个角色\"><a class=\"anchor\" href=\"#副本集的三个角色\">#</a> 副本集的三个角色</h2>\n<p>副本集有两种类型三种角色</p>\n<p>两种类型：</p>\n<ul>\n<li>主节点 (primary) 类型：数据操作的主要连接点，可读写。</li>\n<li>次要 (辅助，从) 节点 (Secondaries) 类型：数据冗余备份节点，可以读或选举</li>\n</ul>\n<p>三种角色</p>\n<p>主要成员 (Primary)：主要接受所有写操作，就是主节点</p>\n<p>副本成员 (Replicate)：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作 (但需要配置)。是默认的一种从节点类型</p>\n<p>仲裁者 (Arbiter)：不保留任何数据的副本，只具有投票选举作用，当然也可以将仲载服务器维护为副本集的一部分，即副本成员同时也是仲载者，也是一种从节点类型</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031656412.png\" alt=\"image-20230605121334168\" /></p>\n<p>一<mark>主</mark>一<mark>副</mark>一<mark>仲载</mark></p>\n<h2 id=\"副本集的创建\"><a class=\"anchor\" href=\"#副本集的创建\">#</a> 副本集的创建</h2>\n<h3 id=\"第一步创建主节点\"><a class=\"anchor\" href=\"#第一步创建主节点\">#</a> 第一步创建主节点</h3>\n<p>建立存放数据和日志的目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#----------myrs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#主节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/replica_sets/myrs_27017/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/replica_sets/myrs_27017/data/db</pre></td></tr></table></figure><p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /mongodb/replica_sets/myrs_27017/mongod.conf</pre></td></tr></table></figure><p>往配置文件中写入配置信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">systemLog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> file</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27017/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token key atrule\">logAppend</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token key atrule\">dbPath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27017/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token key atrule\">journal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">processManagement</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token key atrule\">fork</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token key atrule\">pidFilePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27017/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">net</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token key atrule\">bindIp</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">,</span>192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">replication</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token key atrule\">replSetName</span><span class=\"token punctuation\">:</span> myrs</pre></td></tr></table></figure><h3 id=\"第二步创建副本节点\"><a class=\"anchor\" href=\"#第二步创建副本节点\">#</a> 第二步：创建副本节点</h3>\n<p>建立存放目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#----------myrs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#主节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/replica_sets/myrs_27018/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/replica_sets/myrs_27018/data/db</pre></td></tr></table></figure><p>新建或修改配置文件:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /mongodb/replica_sets/myrs_27018/mongod.conf</pre></td></tr></table></figure><p>往配置文件中写入配置信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">systemLog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> file</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27018/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token key atrule\">logAppend</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token key atrule\">dbPath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27018/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token key atrule\">journal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">processManagement</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token key atrule\">fork</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token key atrule\">pidFilePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27018/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">net</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token key atrule\">bindIp</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">,</span>192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">27018</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">replication</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token key atrule\">replSetName</span><span class=\"token punctuation\">:</span> myrs</pre></td></tr></table></figure><h3 id=\"第三步创建仲载节点\"><a class=\"anchor\" href=\"#第三步创建仲载节点\">#</a> 第三步：创建仲载节点</h3>\n<p>建立存放目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#----------myrs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#主节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/replica_sets/myrs_27019/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/replica_sets/myrs_27019/data/db</pre></td></tr></table></figure><p>新建或修改配置文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /mongodb/replica_sets/myrs_27019/mongod.conf</pre></td></tr></table></figure><p>往配置中写入配置信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">systemLog</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> file</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27019/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token key atrule\">logAppend</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token key atrule\">dbPath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27019/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token key atrule\">journal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">processManagement</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token key atrule\">fork</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token key atrule\">pidFilePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/mongodb/replica_sets/myrs_27019/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">net</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token key atrule\">bindIp</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">,</span>192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">27019</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">replication</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> <span class=\"token key atrule\">replSetName</span><span class=\"token punctuation\">:</span> myrs</pre></td></tr></table></figure><p>启动节点</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">5300</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>forked process: <span class=\"token number\">5367</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>forked process: <span class=\"token number\">5434</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~%</pre></td></tr></table></figure><p>查看 mongod 进程</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">5300</span>      <span class=\"token number\">1</span>  <span class=\"token number\">4</span> 03:05 ?        00:00:04 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">5367</span>      <span class=\"token number\">1</span>  <span class=\"token number\">5</span> 03:05 ?        00:00:04 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">5434</span>      <span class=\"token number\">1</span>  <span class=\"token number\">8</span> 03:05 ?        00:00:05 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~%</pre></td></tr></table></figure><h3 id=\"第四步初始化配置副本集和主节点\"><a class=\"anchor\" href=\"#第四步初始化配置副本集和主节点\">#</a> 第四步：初始化配置副本集和主节点</h3>\n<p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点 (27017 节点)：</p>\n<p>在 mongodb 的 bin 目录下执行命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span>Linux主机地址 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>E:<span class=\"token punctuation\">\\</span>MongoDB<span class=\"token punctuation\">\\</span>mongodb-win32-x86_64-windows-5.0.17<span class=\"token punctuation\">\\</span>bin<span class=\"token operator\">></span>mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MongoDB shell version v5.0.17</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>connecting to: mongodb://192.168.244.142:27017/?compressors<span class=\"token operator\">=</span>disabled<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">gssapiServiceName</span><span class=\"token operator\">=</span>mongodb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Implicit session: session <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"id\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"7149483c-b50d-4e69-8086-b2c913d293e3\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>MongoDB server version: <span class=\"token number\">5.0</span>.18</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Warning: the <span class=\"token string\">\"mongo\"</span> shell has been superseded by <span class=\"token string\">\"mongosh\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">which</span> delivers improved usability and compatibility.The <span class=\"token string\">\"mongo\"</span> shell has been deprecated and will be removed <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>an upcoming release.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>For installation instructions, see</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>https://docs.mongodb.com/mongodb-shell/install/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>The server generated these startup warnings when booting:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T03:05:22.021-04:00: Access control is not enabled <span class=\"token keyword\">for</span> the database. Read and <span class=\"token function\">write</span> access to data and configuration is unrestricted</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T03:05:22.021-04:00: /sys/kernel/mm/transparent_hugepage/enabled is <span class=\"token string\">'always'</span><span class=\"token builtin class-name\">.</span> We suggest setting it to <span class=\"token string\">'never'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T03:05:22.021-04:00: /sys/kernel/mm/transparent_hugepage/defrag is <span class=\"token string\">'always'</span><span class=\"token builtin class-name\">.</span> We suggest setting it to <span class=\"token string\">'never'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T03:05:22.021-04:00: Soft rlimits <span class=\"token keyword\">for</span> <span class=\"token function\">open</span> <span class=\"token function\">file</span> descriptors too low</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T03:05:22.021-04:00:         currentValue: <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T03:05:22.021-04:00:         recommendedMinimum: <span class=\"token number\">64000</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>uncaught exception: Error: listDatabases failed:<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edab0454f9ab55a0c8f43\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master and slaveOk=false\"</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13435</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryNoSecondaryOk\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>_getErrorWithCode@src/mongo/shell/utils.js:25:13</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Mongo.prototype.getDBs/<span class=\"token operator\">&lt;</span>@src/mongo/shell/mongo.js:145:19</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Mongo.prototype.getDBs@src/mongo/shell/mongo.js:97:12</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>shellHelper.show@src/mongo/shell/utils.js:956:13</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>shellHelper@src/mongo/shell/utils.js:838:15</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>@<span class=\"token punctuation\">(</span>shellhelp2<span class=\"token punctuation\">)</span>:1:1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>uncaught exception: Error: listCollections failed: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edab0454f9ab55a0c8f43\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master and slaveOk=false\"</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13435</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryNoSecondaryOk\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>_getErrorWithCode@src/mongo/shell/utils.js:25:13</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>DB.prototype._getCollectionInfosCommand@src/mongo/shell/db.js:723:15</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>DB.prototype.getCollectionInfos@src/mongo/shell/db.js:771:16</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>shellHelper.show@src/mongo/shell/utils.js:943:9</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>shellHelper@src/mongo/shell/utils.js:838:15</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>@<span class=\"token punctuation\">(</span>shellhelp2<span class=\"token punctuation\">)</span>:1:1</pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>结果，连接上之后，很多命令无法使用，比如 <code>show dbs，show tables</code>  等，必须初始化副本集才行</p>\n<p>准备初始化新的副本集：</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rs.initiate<span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>选项：</p>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">示例</caption>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>configuration</td>\n<td>document</td>\n<td>Optional.A document that specifiles configuration for the new replicaset. if a configuration is not specifiled,MongoDB uses a default replicaset configuration</td>\n</tr>\n</tbody>\n</table>\n<p>使用默认的配置来初始化副本集：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rs.initiate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>执行结果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> rs.<span class=\"token function-name function\">initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"info2\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"no configuration specified. Using a default configuration for the set\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"me\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<ol>\n<li>&quot;ok&quot; 的值为 1，说明创建成功</li>\n<li>命令行提示符发生变化，变成了一个从节点角色，此时默认不能读写，稍等片刻，回车，变成主节点。</li>\n</ol>\n<h3 id=\"第五步查看副本集的配置内容\"><a class=\"anchor\" href=\"#第五步查看副本集的配置内容\">#</a> 第五步：查看副本集的配置内容</h3>\n<p>说明：</p>\n<p>返回包含当前副本集配置的文档</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rs.conf<span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：</p>\n<p><code>rs.config()</code>  是该方法的别名</p>\n<p>configuration：可选，如果没有位置，则使用默认主节点配置</p>\n<p>[示例]</p>\n<p>在 27017 上执行副本集中当前节点的默认节点配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"protocolVersion\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"writeConcernMajorityJournalDefault\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string\">\"settings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"chainingAllowed\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2000</span>,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"heartbeatTimeoutSecs\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"catchUpTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token string\">\"catchUpTakeoverDelayMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">30000</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token string\">\"getLastErrorModes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token string\">\"getLastErrorDefaults\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token string\">\"wtimeout\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">\"replicaSetId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edd5c454f9ab55a0c8fbf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li><code>&quot;_id&quot;:&quot;myrs&quot;</code> ：副本集的配置数据存储的主键值，默认就是副本集的名字</li>\n<li><code>&quot;members&quot;</code> ：副本集成员数组，此时只有一个： <code>&quot;host&quot;:&quot;180.76.159.126:27017&quot;</code> ，该成员不是仲载节点 <code>&quot;arbiterOnly&quot;:false</code> ，优先级 (权重值)： <code>&quot;priority&quot;:1</code></li>\n<li><code>&quot;settings&quot;</code> ：副本集的参数配置。</li>\n</ol>\n<p>提示：副本集配置的查看命令，本质是查询的是 <code>system.replset</code>  的表中的数据</p>\n<h3 id=\"第六步查看副本集状态\"><a class=\"anchor\" href=\"#第六步查看副本集状态\">#</a> 第六步：查看副本集状态</h3>\n<p>检查副本集状态</p>\n<p>说明：</p>\n<p>返回包含状态信息的文档 ，此输出使用从副本集的其它成员发送的心跳包中获得的数据反映副本集的当前状态。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rs.status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>[示例]</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"set\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"date\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:48.740Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"myState\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"majorityVoteCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"writeMajorityCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"votingMembersCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"writableVotingMembersCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"optimes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"lastCommittedOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"lastCommittedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:45.336Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token string\">\"readConcernMajorityOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"appliedOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"durableOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:45.336Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:45.336Z\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"lastStableRecoveryTimestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036455</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"electionCandidateMetrics\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">\"lastElectionReason\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"electionTimeout\"</span>,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token string\">\"lastElectionDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.057Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token string\">\"electionTerm\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token string\">\"lastCommittedOpTimeAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"lastSeenOpTimeAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"numVotesNeeded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"priorityAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"newTermStartDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.091Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"wMajorityWriteAvailabilityDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.106Z\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token string\">\"health\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token string\">\"stateStr\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"PRIMARY\"</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token string\">\"uptime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1348</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token string\">\"optime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token string\">\"optimeDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:45Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:45.336Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:27:45.336Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                        <span class=\"token string\">\"infoMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token string\">\"electionTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        <span class=\"token string\">\"electionDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        <span class=\"token string\">\"configVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token string\">\"configTerm\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        <span class=\"token string\">\"self\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686036465</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li><code>&quot;set&quot;:&quot;myrs&quot;</code> ：副本集的名字</li>\n<li><code>&quot;myState&quot;:1</code> ：说明状态正常</li>\n<li><code>&quot;members&quot;</code> ：副本集成员数组，此时只有一个： <code>&quot;name&quot;:192.168.244.142:27017</code> ，该成员的角色是 <code>&quot;stateStr&quot;:&quot;PRIMARY&quot;</code> ，该节点是健康的： <code>&quot;health&quot;:1</code></li>\n</ol>\n<h3 id=\"第七步添加副本从节点\"><a class=\"anchor\" href=\"#第七步添加副本从节点\">#</a> 第七步：添加副本从节点</h3>\n<p>在主节点添加从节点，将其它成员加入到副本集</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rs.add<span class=\"token punctuation\">(</span>host,arbiterOnly<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>选项：</p>\n<table>\n<thead>\n<tr>\n<th>Paraemter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>host</td>\n<td>string or document</td>\n<td>要添加到副本集的新成员，指定为字符串或配置文档。1. 如果是一个字符串，则需要指定新成员的主机名和可选的端口号。2. 如果是一个文档，请指定在 members 数组中找到的副本集成员配置文档，您必须在成员配置文档中指定主机字段，有关文档配置字段的说明，详见下方文档：&quot;主机成员的配置文档&quot;</td>\n</tr>\n<tr>\n<td>arbiterOnly</td>\n<td>boolean</td>\n<td>可选的。仅在 &lt;host&gt; 值为字符串时适用。如果为 true，则添加的主机是仲载者</td>\n</tr>\n</tbody>\n</table>\n<p>主机成员的配置文档：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t_id: <span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\thost: <span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span>,\t\t//required</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tarbiterOnly: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tbuildIndexes: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\thidden: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tpriority: <span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttags: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tslaveDelay: <span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tvotes: <span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>[示例]</p>\n<p>将 27018 的副本节点添加到副本集中：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27018\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037410</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037410</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li><code>&quot;ok&quot;:1</code> ：说明添加成功。</li>\n</ol>\n<p>查看副本集状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"set\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"date\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:19.794Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"myState\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"majorityVoteCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"writeMajorityCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"votingMembersCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"writableVotingMembersCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"optimes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"lastCommittedOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"lastCommittedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token string\">\"readConcernMajorityOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"appliedOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"durableOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"lastStableRecoveryTimestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037605</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"electionCandidateMetrics\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">\"lastElectionReason\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"electionTimeout\"</span>,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token string\">\"lastElectionDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.057Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token string\">\"electionTerm\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token string\">\"lastCommittedOpTimeAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"lastSeenOpTimeAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"numVotesNeeded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"priorityAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"newTermStartDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.091Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"wMajorityWriteAvailabilityDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.106Z\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token string\">\"health\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token string\">\"stateStr\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"PRIMARY\"</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token string\">\"uptime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2519</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token string\">\"optime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token string\">\"optimeDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                        <span class=\"token string\">\"infoMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token string\">\"electionTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        <span class=\"token string\">\"electionDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        <span class=\"token string\">\"configVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token string\">\"configTerm\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        <span class=\"token string\">\"self\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27018\"</span>,</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token string\">\"health\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                        <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                        <span class=\"token string\">\"stateStr\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"SECONDARY\"</span>,</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token string\">\"uptime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">229</span>,</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token string\">\"optime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                        <span class=\"token string\">\"optimeDurable\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                        <span class=\"token string\">\"optimeDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                        <span class=\"token string\">\"optimeDurableDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                        <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                        <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:15.489Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeat\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:18.948Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatRecv\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:47:19.436Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                        <span class=\"token string\">\"pingMs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                        <span class=\"token string\">\"infoMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                        <span class=\"token string\">\"configVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                        <span class=\"token string\">\"configTerm\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686037635</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"第八步添加仲载从节点\"><a class=\"anchor\" href=\"#第八步添加仲载从节点\">#</a> 第八步：添加仲载从节点</h3>\n<p>添加一个仲载节点到副本集</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rs.addArb<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>将 27019 的仲载节点添加到副本集中：</p>\n<p>如果执行命令后没有反应解决办法如下：在主节点中:mys:PRIMARY 执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.adminCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"setDefaultRWConcern\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,<span class=\"token string\">\"defaultWriteConcern\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.addArb<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27019\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038253</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038253</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li><code>&quot;ok&quot;:1</code> ：说明添加成功</li>\n</ol>\n<p>查看副本集情况：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27018\"</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27019\"</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token string\">\"protocolVersion\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token string\">\"writeConcernMajorityJournalDefault\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token string\">\"settings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token string\">\"chainingAllowed\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2000</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"heartbeatTimeoutSecs\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token string\">\"catchUpTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token string\">\"catchUpTakeoverDelayMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">30000</span>,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token string\">\"getLastErrorModes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\"getLastErrorDefaults\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token string\">\"wtimeout\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token string\">\"replicaSetId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edd5c454f9ab55a0c8fbf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>&quot;arbiterOnly&quot; : true, 说明是仲载节点</p>\n<p>查看状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"set\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"date\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:25.601Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"myState\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"majorityVoteCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"writeMajorityCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"votingMembersCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"writableVotingMembersCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"optimes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"lastCommittedOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"lastCommittedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token string\">\"readConcernMajorityOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token string\">\"appliedOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token string\">\"durableOpTime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"lastStableRecoveryTimestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038625</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token string\">\"electionCandidateMetrics\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">\"lastElectionReason\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"electionTimeout\"</span>,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token string\">\"lastElectionDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.057Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token string\">\"electionTerm\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token string\">\"lastCommittedOpTimeAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"lastSeenOpTimeAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span>-1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"numVotesNeeded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"priorityAtElection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"newTermStartDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.091Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"wMajorityWriteAvailabilityDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45.106Z\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token string\">\"health\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token string\">\"stateStr\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"PRIMARY\"</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token string\">\"uptime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3545</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token string\">\"optime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token string\">\"optimeDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                        <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                        <span class=\"token string\">\"infoMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token string\">\"electionTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686035805</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                        <span class=\"token string\">\"electionDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T07:16:45Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                        <span class=\"token string\">\"configVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>,</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token string\">\"configTerm\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        <span class=\"token string\">\"self\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27018\"</span>,</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token string\">\"health\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                        <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                        <span class=\"token string\">\"stateStr\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"SECONDARY\"</span>,</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token string\">\"uptime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1254</span>,</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token string\">\"optime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                        <span class=\"token string\">\"optimeDurable\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                                <span class=\"token string\">\"ts\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                                <span class=\"token string\">\"t\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                        <span class=\"token string\">\"optimeDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                        <span class=\"token string\">\"optimeDurableDate\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                        <span class=\"token string\">\"lastAppliedWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                        <span class=\"token string\">\"lastDurableWallTime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:15.625Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeat\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:24.037Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatRecv\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:24.064Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                        <span class=\"token string\">\"pingMs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                        <span class=\"token string\">\"infoMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                        <span class=\"token string\">\"configVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>,</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                        <span class=\"token string\">\"configTerm\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                        <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27019\"</span>,</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                        <span class=\"token string\">\"health\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                        <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">7</span>,</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                        <span class=\"token string\">\"stateStr\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ARBITER\"</span>,</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                        <span class=\"token string\">\"uptime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">412</span>,</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeat\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:24.012Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatRecv\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-06T08:04:24.055Z\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                        <span class=\"token string\">\"pingMs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                        <span class=\"token string\">\"lastHeartbeatMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                        <span class=\"token string\">\"syncSourceHost\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                        <span class=\"token string\">\"syncSourceId\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                        <span class=\"token string\">\"infoMessage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>,</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                        <span class=\"token string\">\"configVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>,</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                        <span class=\"token string\">\"configTerm\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686038655</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>PRIMARY：主节点，SECONDARY：从节点，ARBITER：仲载节点</p>\n<h2 id=\"副本集的数据读写操作\"><a class=\"anchor\" href=\"#副本集的数据读写操作\">#</a> 副本集的数据读写操作</h2>\n<p>目标：测试三个不同角色的节点的数据读写情况</p>\n<p>登录主节点 27017，写入和读取数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>config  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">local</span>   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> try<span class=\"token punctuation\">&#123;</span>db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"张三\"</span>,<span class=\"token string\">\"age\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>print<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nInserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647ee966333697b12ce7258a\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"张三\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"18\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>登录从节点 27018</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uncaught exception: Error: listDatabases failed:<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edabd93b3e543a0258e7d\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master and slaveOk=false\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13435</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryNoSecondaryOk\"</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686039005</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686039005</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>_getErrorWithCode@src/mongo/shell/utils.js:25:13</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Mongo.prototype.getDBs/<span class=\"token operator\">&lt;</span>@src/mongo/shell/mongo.js:145:19</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Mongo.prototype.getDBs@src/mongo/shell/mongo.js:97:12</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>shellHelper.show@src/mongo/shell/utils.js:956:13</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>shellHelper@src/mongo/shell/utils.js:838:15</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>@<span class=\"token punctuation\">(</span>shellhelp2<span class=\"token punctuation\">)</span>:1:1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>发现，不能读取集合的数据。当前从节点只是一个备份，不是奴隶节点，无法读取数据，写当然更不行，因为默认情况下，从节点是没有读写权限的，可以增加读的权限，但需要进行设置。</p>\n<p>设置读操作权限：</p>\n<p>说明：</p>\n<p>设置为奴隶节点，允许在从成员上运行读的操作</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> rs.slaveOk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#或</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> rs.slaveOk<span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#新版本中上面命令可能被弃用了，使用下面命令即可</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rs.secondaryOk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：</p>\n<p>该命令是 db.getMongo ().setSlaveOk () 的简化命令。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> rs.secondaryOk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>admin      <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>articledb  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>config     <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">local</span>      <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647ee966333697b12ce7258a\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"张三\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"18\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到可以将主节点插入的数据同步过来</p>\n<p>但仍然不允许插入  <code> &quot;errmsg&quot; : &quot;not master&quot;</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> try<span class=\"token punctuation\">&#123;</span>db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"李四\"</span>,<span class=\"token string\">\"age\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"20\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>print<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WriteCommandError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edabd93b3e543a0258e7d\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10107</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotWritablePrimary\"</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686039875</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686039875</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>现在可实现了读写分离，让主插入数据，让从来读取数据</p>\n<p>如果要取消奴隶节点的读取权限：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> rs.secondaryOk<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> rs.secondaryOk<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>uncaught exception: Error: listDatabases failed:<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edabd93b3e543a0258e7d\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master and slaveOk=false\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13435</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryNoSecondaryOk\"</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686039975</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686039975</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>_getErrorWithCode@src/mongo/shell/utils.js:25:13</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Mongo.prototype.getDBs/<span class=\"token operator\">&lt;</span>@src/mongo/shell/mongo.js:145:19</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Mongo.prototype.getDBs@src/mongo/shell/mongo.js:97:12</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>shellHelper.show@src/mongo/shell/utils.js:956:13</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>shellHelper@src/mongo/shell/utils.js:838:15</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>@<span class=\"token punctuation\">(</span>shellhelp2<span class=\"token punctuation\">)</span>:1:1</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>仲载者节点，不存放任何业务数据的 (存放的是一些配置信息)，可以登录查看，就算设置了 <code>rs.secondaryOk()</code>  同样还是看不到数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:ARBITER<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uncaught exception: Error: listDatabases failed:<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edaca021ba0c72e879407\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master and slaveOk=false\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13435</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryNoSecondaryOk\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>_getErrorWithCode@src/mongo/shell/utils.js:25:13</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Mongo.prototype.getDBs/<span class=\"token operator\">&lt;</span>@src/mongo/shell/mongo.js:145:19</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Mongo.prototype.getDBs@src/mongo/shell/mongo.js:97:12</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>shellHelper.show@src/mongo/shell/utils.js:956:13</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>shellHelper@src/mongo/shell/utils.js:838:15</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>@<span class=\"token punctuation\">(</span>shellhelp2<span class=\"token punctuation\">)</span>:1:1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>myrs:ARBITER<span class=\"token operator\">></span></pre></td></tr></table></figure><p>我们想要查看的话就会提示不是 slaveOk 不能读取，但是我们设置仲载可读呢</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:ARBITER<span class=\"token operator\">></span> rs.secondaryOk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:ARBITER<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>uncaught exception: Error: listDatabases failed:<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edaca021ba0c72e879407\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"node is not in primary or recovering state\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13436</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryOrSecondary\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>_getErrorWithCode@src/mongo/shell/utils.js:25:13</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Mongo.prototype.getDBs/<span class=\"token operator\">&lt;</span>@src/mongo/shell/mongo.js:145:19</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Mongo.prototype.getDBs@src/mongo/shell/mongo.js:97:12</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>shellHelper.show@src/mongo/shell/utils.js:956:13</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>shellHelper@src/mongo/shell/utils.js:838:15</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>@<span class=\"token punctuation\">(</span>shellhelp2<span class=\"token punctuation\">)</span>:1:1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>myrs:ARBITER<span class=\"token operator\">></span></pre></td></tr></table></figure><p>报错提示翻译：节点未处于主状态或正在恢复状态</p>\n<h2 id=\"主节点的选举原则\"><a class=\"anchor\" href=\"#主节点的选举原则\">#</a> 主节点的选举原则</h2>\n<p>MongoDB 在副本集中，会自动进行主节点的选举，主节点选举的触发条件：</p>\n<ol>\n<li>节点故障</li>\n<li>主节点网络不可达 (默认心跳信息为 10 秒)</li>\n<li>人工干预 (rs.stepDown (600))</li>\n</ol>\n<p>一旦触发选举，就要根据一定规则来选主节点</p>\n<p>选举规则是根据票数来决定谁获胜：</p>\n<ul>\n<li>\n<p>票数最高，且获得了 &quot;大多数&quot; 成员的投票支持的节点获胜</p>\n<p>&quot;大多数&quot; 的定义为：假设复制集内投票成员数量为 N，则大多数为 N/2 + 1，例如：3 个投票成员，则大多数的值是 2，当复制集内存活成员数量不足大多数时，整个复制集将无法选举出 Primary，复制集将无法提供写服务，处于只读状态</p>\n</li>\n<li>\n<p>若投票数相同，且都获得了 &quot;大多数&quot; 成员的投票支持的，数据新的节点获胜。</p>\n<p>数据的新旧是通过操作日志 oplog 来对比的</p>\n</li>\n</ul>\n<p>在获得票数的时候，优先级 (priority) 参数影响重大。</p>\n<p>可以通过设置优先级 (priority) 来设置额外票数，优先级即权重，取值为 0~1000，相当于可额外增加 0 <code>~</code> 1000 的票数，优先级的值越大，就越可能获得多数成员的投票 (votes) 数。指定较高的值可使成员更有资格成员主要成员，更低的值可使成员更不符合条件</p>\n<p>默认情况下，优先级的值是 1</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27017\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27018\"</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27019\"</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token string\">\"protocolVersion\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token string\">\"writeConcernMajorityJournalDefault\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token string\">\"settings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token string\">\"chainingAllowed\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2000</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"heartbeatTimeoutSecs\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token string\">\"catchUpTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token string\">\"catchUpTakeoverDelayMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">30000</span>,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token string\">\"getLastErrorModes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\"getLastErrorDefaults\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        <span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token string\">\"wtimeout\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token string\">\"replicaSetId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647edd5c454f9ab55a0c8fbf\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>除了仲载节点其它 priority (优先级) 都是 1，仲载不能读写数据它只是一个参与投票的人，仲载不可能为王</p>\n<p>(要注意是，官方说了，仲载节点的优先级必须是 0，不能是别的值，即不具备选举权，但具有投票权)</p>\n<h3 id=\"修改优先级\"><a class=\"anchor\" href=\"#修改优先级\">#</a> 修改优先级</h3>\n<p>比如，下面提升从节点的优先级：</p>\n<ol>\n<li>\n<p>先将配置导入 cfg 变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> <span class=\"token assign-left variable\">cfg</span><span class=\"token operator\">=</span>rs.conf<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>然后修改值 (ID 号默认从 0 开始)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> cfg.members<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>.priority<span class=\"token operator\">=</span><span class=\"token number\">2</span></pre></td></tr></table></figure><p>稍等片刻会重新开始选举</p>\n</li>\n</ol>\n<h2 id=\"故障测试\"><a class=\"anchor\" href=\"#故障测试\">#</a> 故障测试</h2>\n<h3 id=\"副本节点故障测试\"><a class=\"anchor\" href=\"#副本节点故障测试\">#</a> 副本节点故障测试</h3>\n<p>关闭 27018 副本节点：</p>\n<p>发现，主节点和仲载节点对 27018 的心跳失败。因为主节点还在，因此，没有触发投票选举。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">5300</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:07:30 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">5367</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:07:57 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">5434</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:06:20 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-2</span> <span class=\"token number\">5367</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dkx0       <span class=\"token number\">5300</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:07:31 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dkx0       <span class=\"token number\">5367</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:07:58 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dkx0       <span class=\"token number\">5434</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:06:20 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dkx0       <span class=\"token number\">5300</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:07:31 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dkx0       <span class=\"token number\">5434</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:06:21 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~%</pre></td></tr></table></figure><p>kill -2 没有及时杀掉，证明了 - 2 是等待任务完成自动杀掉而不是暴力杀掉的。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>从节点被杀掉后按几下回车看下反应，已经没反应了。</p>\n<p>如果此时，在主节点写入数据。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"3\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"马保国\"</span>,<span class=\"token string\">\"age\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"22\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>再启动从节点并赋予可读权限，会发现，主节点写入的数据，会自动同步给从节点。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> rs.secondaryOk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647ee966333697b12ce7258a\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"张三\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"18\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"马保国\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"22\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647f48485710428bcfbf9dbf\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"李四\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"23\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"23\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到数据同步过来了 &quot;马保国&quot;</p>\n<h3 id=\"主节点故障测试\"><a class=\"anchor\" href=\"#主节点故障测试\">#</a> 主节点故障测试</h3>\n<p>关闭 27017 节点</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-2</span> <span class=\"token number\">5300</span>                   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">5434</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:05 ?        00:06:34 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0      <span class=\"token number\">29707</span>      <span class=\"token number\">1</span>  <span class=\"token number\">3</span> <span class=\"token number\">11</span>:01 ?        00:00:06 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~%</pre></td></tr></table></figure><p>发现，从节点和仲载节点对 27017 的心跳失败，当失败超过 10 秒，此时因为没有了主节点，会自动发起投票。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>27017 节点已挂</p>\n<p>而副本节点只有 27018，因此，候选人只有一个就是 27018，开始投票。</p>\n<p>27019 向 27018 投了一票，27018 本身自带一票，因此共两票，超过了 &quot;大多数&quot;</p>\n<p>27019 是仲载节点，没有选举权，27018 不向其投票，其票数是 0.</p>\n<p>最终结果，27018 成为主节点，具备读写功能。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>回车刷新状态</p>\n<p>在 27018 写入数据查看。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"4\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"弟中之弟\"</span>,<span class=\"token string\">\"age\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647ee966333697b12ce7258a\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"张三\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"18\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"马保国\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"22\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647f48485710428bcfbf9dbf\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"李四\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"23\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"23\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"4\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"弟中之弟\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>再启动 27017 节点，发现 27017 变成了从节点，27018 仍保持主节点。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~% /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">30161</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@192<span class=\"token punctuation\">]</span>~%</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>E:<span class=\"token punctuation\">\\</span>MongoDB<span class=\"token punctuation\">\\</span>mongodb-win32-x86_64-windows-5.0.17<span class=\"token punctuation\">\\</span>bin<span class=\"token operator\">></span>mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MongoDB server version: <span class=\"token number\">5.0</span>.18</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Warning: the <span class=\"token string\">\"mongo\"</span> shell has been superseded by <span class=\"token string\">\"mongosh\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">which</span> delivers improved usability and compatibility.The <span class=\"token string\">\"mongo\"</span> shell has been deprecated and will be removed <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>an upcoming release.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>For installation instructions, see</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>https://docs.mongodb.com/mongodb-shell/install/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>The server generated these startup warnings when booting:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T11:07:33.780-04:00: Access control is not enabled <span class=\"token keyword\">for</span> the database. Read and <span class=\"token function\">write</span> access to data and configuration is unrestricted</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T11:07:33.781-04:00: /sys/kernel/mm/transparent_hugepage/enabled is <span class=\"token string\">'always'</span><span class=\"token builtin class-name\">.</span> We suggest setting it to <span class=\"token string\">'never'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T11:07:33.781-04:00: /sys/kernel/mm/transparent_hugepage/defrag is <span class=\"token string\">'always'</span><span class=\"token builtin class-name\">.</span> We suggest setting it to <span class=\"token string\">'never'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T11:07:33.781-04:00: Soft rlimits <span class=\"token keyword\">for</span> <span class=\"token function\">open</span> <span class=\"token function\">file</span> descriptors too low</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T11:07:33.781-04:00:         currentValue: <span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token number\">2023</span>-06-06T11:07:33.781-04:00:         recommendedMinimum: <span class=\"token number\">64000</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>登录 27017 节点，发现是从节点了需要赋予可读权限，数据自动从 27018 同步。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Error: error: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"topologyVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"processId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647f4bb2f95feeec6c69242c\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"counter\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"not master and slaveOk=false\"</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">13435</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"NotPrimaryNoSecondaryOk\"</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686064102</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686064102</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> rs.secondaryOk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647ee966333697b12ce7258a\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"张三\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"18\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647f48485710428bcfbf9dbf\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"李四\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"23\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"23\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"马保国\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"22\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"4\"</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"弟中之弟\"</span>, <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>myrs:SECONDARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>从而实现了高可用。</p>\n<h3 id=\"仲载节点和主节点故障\"><a class=\"anchor\" href=\"#仲载节点和主节点故障\">#</a> 仲载节点和主节点故障</h3>\n<p>先关掉仲载节点 27019</p>\n<p>关掉现在的主节点 27018</p>\n<p>登录 27017 后，发现，27017 仍然是从节点，副本集中没有主节点了，导致此时，副本集是只读状态，无法写入</p>\n<p>为啥不选举了？因为 27017 的票数，没有获得大多数，既没有大于等于 2，它只有默认的一票 (优先级是 1)</p>\n<p>如果要出发选举，随便加入一个成员即可。</p>\n<ul>\n<li>如果只加入 27019 仲载节点，则主节点一定是 27017，因为没得选了，仲载节点不参与选举，但参与投票</li>\n<li>如果只加入 27018，会发起选举，因为 27017 和 27018 都是两票，按照谁数据新，谁当主节点。</li>\n</ul>\n<h3 id=\"仲载节点和从节点故障\"><a class=\"anchor\" href=\"#仲载节点和从节点故障\">#</a> 仲载节点和从节点故障</h3>\n<p>先关掉仲载节点 27019</p>\n<p>关掉现在的副本节点 27018</p>\n<p>10 秒后，27017 主节点自动降级为副本节点 (服务降级)</p>\n<p>副本集不可写数据了，已经故障了。</p>\n<h2 id=\"compass连接副本集\"><a class=\"anchor\" href=\"#compass连接副本集\">#</a> Compass 连接副本集</h2>\n<p>如果使用云服务器需要修改配置中的主节点 IP</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var config <span class=\"token operator\">=</span> rs.config<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> config.members<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>.host<span class=\"token operator\">=</span><span class=\"token string\">\"192.168.244.142:27017\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> rs.reconfig<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>compass 连接：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031658537.png\" alt=\"image-20230606234834193\" /></p>\n<p>输入后直接连接即可。</p>\n<p>注意：</p>\n<p>但是在 Compass 中即便连接的是 secondary 从节点但是还是可以插入数据的。</p>\n<h2 id=\"springdatamongodb连接副本集\"><a class=\"anchor\" href=\"#springdatamongodb连接副本集\">#</a> SpringDataMongoDB 连接副本集</h2>\n<p>副本集语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongodb://host1,host2,host3/?connect<span class=\"token operator\">=</span>replicaSet<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">secondaryOk</span><span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">replicaSet</span><span class=\"token operator\">=</span>副本集名字</pre></td></tr></table></figure><p>其中：</p>\n<ul>\n<li>secondaryOk=true：开启副本节点读的功能，实现读写分离。</li>\n<li>connect=replicaSet：自动到副本集中选择读写的主机，如果 secondaryOk 是打开的，则实现了读写分离</li>\n</ul>\n<p>[示例]</p>\n<p>连接 replica set 三台服务器 (端口 27017，27018，和 27019)，直接连接第一个服务器，无论是 replica set 一部分或者主服务器或者从服务器，写入操作应用在主服务器并且分布查询到从服务器。</p>\n<p>修改配置文件：application.yml</p>\n<p>连接副本集的时候就只能使用 uri 的格式了</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">#数据源配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">#主机地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">#host: 192.168.244.142</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">#数据库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">#database: articledb</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">#端口号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">#port: 27017</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">#也可以使用 uri 连接</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">#uri: mongodb://192.168.244.142:27017/articledb</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">#副本集的连接字符串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        mongodb<span class=\"token punctuation\">:</span>//192.168.244.142<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span><span class=\"token punctuation\">,</span>192.168.244.142<span class=\"token punctuation\">:</span><span class=\"token number\">27018</span><span class=\"token punctuation\">,</span>192.168.244.142<span class=\"token punctuation\">:</span>27019/articledb<span class=\"token punctuation\">?</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connect=replicaSet<span class=\"token important\">&amp;secondaryOk=true&amp;replicaSet=myrs</span></pre></td></tr></table></figure><p>测试是否可用：查询全部数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> commentService<span class=\"token punctuation\">.</span><span class=\"token function\">findCommentList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comment</span> i<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">RUN</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">647</span>ee966333697b12ce7258a<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">647f</span><span class=\"token number\">48485710428</span>bcfbf9dbf<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">647f</span><span class=\"token number\">5445f</span><span class=\"token number\">81</span>b0775f8f31924<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">647f</span><span class=\"token number\">54</span>b24cf08bc145fd6995<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>id 能查出来就证明可用，其它为 null 是因为实体类与表结构</p>\n<p>注意：</p>\n<p>主机必须是副本集中所有的主机，包括主节点，副本节点，仲载节点。</p>\n<h2 id=\"分片集群-sharded-cluster\"><a class=\"anchor\" href=\"#分片集群-sharded-cluster\">#</a> 分片集群 - Sharded Cluster</h2>\n<h3 id=\"分片概念\"><a class=\"anchor\" href=\"#分片概念\">#</a> 分片概念</h3>\n<p>分片 (sharding) 是一种跨多台机器分布数据的方法，MongoDB 使用分片来支持具有非常大的数据集和高吞吐量操作的部署。</p>\n<p>换句话说：分片 (sharding) 是指将数据拆分，将其分散存在不同的机器上的过程，有时也用分区 (partitioning) 来表示这个概念，将数据分散道不同的机器上，不需要功能强大的大型计算机就可以存储更多的数据，处理更多的负载。</p>\n<p>具有大型数据集或吞吐量应用程序的数据库系统可以会挑战单个服务器的容量，例如，高查询率会耗尽服务器的 CPU 容量，工作集大小大于系统的 RAM 会强调磁盘驱动的 I/O 容量</p>\n<p>有两种解决系统增长的办法：垂直扩展和水平扩展。</p>\n<p>垂直扩展意味着增加单个服务器的容量，例如使用更强大的 CPU，添加更多 RAM 或增加存储空间量。可用技术的局限性可能会限制单个机器对于给定工作负载而言而言足够强大，此外，基于云 的提供商基于可用的硬件配置具有硬性上限，结果，垂直缩放有实际的最大值</p>\n<p>水平扩展意味着划分系统数据集并加载多个服务器，添加其他服务器以根据需要增加容量，虽然单个机器的总题速度或容量可能不高，但每台机器处理整个工作负载的子集，可能提供比单个高速大容量服务器更高的效率，扩展部署容量只需要根据需要添加额外的服务器，这可能比单个机器的高端硬件的总体成本更低，权衡是基础架构和部署维护的复杂性增加。</p>\n<p>MongoDB 支持通过分片进行水平扩展。</p>\n<h3 id=\"分片集群包含的组件\"><a class=\"anchor\" href=\"#分片集群包含的组件\">#</a> 分片集群包含的组件</h3>\n<p>MongoDB 分片集群包含以下组件：</p>\n<ul>\n<li>分片 (存储)：每个分片包含分片数据的子集，每个分片都可以部署为副本集</li>\n<li>mongos (路由)：mongos 充当查询路由器，在客户端应用程序和分片集群之间提供接口</li>\n<li>config server (&quot;调度&quot; 的配置)：配置服务器存储群集的元数据和配置设置，从 MongoDB3.4 开始，必须将配置服务器部署为副本集 (CSRS)</li>\n</ul>\n<p>下图描述了分片集群中组件的交互：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031659686.png\" alt=\"image-20230607171021552\" /></p>\n<p>MongoDB 在集合级别对数据库进行分片，将集合数据分布在集群中的分片上</p>\n<p>27018 if mongod is a shared member</p>\n<p>27019 if mongod is a config server member</p>\n<h3 id=\"分片集群架构目标\"><a class=\"anchor\" href=\"#分片集群架构目标\">#</a> 分片集群架构目标</h3>\n<p>两个分片节点副本集 (3+3) + 一个配置节点副本集 (3) + 两个路由节点 (2) ，共 11 个服务节点。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031659822.png\" alt=\"image-20230607171256122\" /></p>\n<h3 id=\"分片存储节点副本集的创建\"><a class=\"anchor\" href=\"#分片存储节点副本集的创建\">#</a> 分片 (存储) 节点副本集的创建</h3>\n<p>所有的配置文件都直接放到 sharded_cluster 的相应的子目录下，默认配置文件名字：mongod.conf</p>\n<h3 id=\"第一套副本集\"><a class=\"anchor\" href=\"#第一套副本集\">#</a> 第一套副本集</h3>\n<p>准备存放数据和日志的目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27018/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27018/data/db <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27118/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27118/data/db <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27218/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27218/data/db</pre></td></tr></table></figure><p><mark>第一个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</pre></td></tr></table></figure><p>配置文件内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27018/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27018/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27018/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs01</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: shardsvr</pre></td></tr></table></figure><p>sharding.clusterRole：</p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>configsvr</td>\n<td>Start this instance as a config server. The instance starts on port 27019 by default</td>\n</tr>\n<tr>\n<td>shardsvr</td>\n<td>Start this instance as a shard. The instance starts on port 27018 by default</td>\n</tr>\n</tbody>\n</table>\n<p>注意：</p>\n<p>设置 sharding.clusterRole 需要 mongod 实例运行复制，要将实例部署为副本即成员，请使用 replSetName 设置并制定副本集的名称。</p>\n<p><mark>第二个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</pre></td></tr></table></figure><p>配置文件内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27118/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27118/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27118/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27118</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs01</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: shardsvr</pre></td></tr></table></figure><p><mark>第三个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</pre></td></tr></table></figure><p>配置文件内容：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27218/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27218/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27218/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27218</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs01</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: shardsvr</pre></td></tr></table></figure><p>启动第一套副本集：一主一副一仲载</p>\n<p>依次启动三个 mongod 服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  / /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">2821</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  / /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>forked process: <span class=\"token number\">2894</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>➜  / /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>forked process: <span class=\"token number\">2963</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>➜  /</pre></td></tr></table></figure><p>查看启动进程情况：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  / <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">2821</span>      <span class=\"token number\">1</span>  <span class=\"token number\">7</span> 06:55 ?        00:00:03 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">2894</span>      <span class=\"token number\">1</span> <span class=\"token number\">10</span> 06:55 ?        00:00:02 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">2963</span>      <span class=\"token number\">1</span> <span class=\"token number\">16</span> 06:56 ?        00:00:02 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  /</pre></td></tr></table></figure><p>1. 初始化副本集和创建主节点：</p>\n<p>使用客户端命令连接任意一个节点，但这里尽量要连接主节点：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongo  <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27018</span></pre></td></tr></table></figure><p>执行初始化副本集命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> rs.<span class=\"token function-name function\">initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"info2\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"no configuration specified. Using a default configuration for the set\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"me\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27018\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myshardrs01:SECONDARY<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>添加从节点和仲载节点：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27118\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27218\"</span>,true<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查看副本集的配置情况：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27018\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token string\">\"slaveDelay\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27118\"</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token string\">\"slaveDelay\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27218\"</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token string\">\"slaveDelay\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token string\">\"protocolVersion\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token string\">\"writeConcernMajorityJournalDefault\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token string\">\"settings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token string\">\"chainingAllowed\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2000</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token string\">\"heartbeatTimeoutSecs\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token string\">\"catchUpTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token string\">\"catchUpTakeoverDelayMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">30000</span>,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token string\">\"getLastErrorModes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token string\">\"getLastErrorDefaults\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token string\">\"wtimeout\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token string\">\"replicaSetId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"648128e18751ababd297a5f4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"第二套副本集\"><a class=\"anchor\" href=\"#第二套副本集\">#</a> 第二套副本集</h3>\n<p>创建存放数据和日志的目录：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27318/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27318/data/db <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27418/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27418/data/db <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27518/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27518/data/db</pre></td></tr></table></figure><p><mark>第一个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27318/mongod.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27318/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27318/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27318/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27318</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs02</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: shardsvr</pre></td></tr></table></figure><p><mark>第二个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27418/mongod.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27418/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27418/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27418/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27418</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs02</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: shardsvr</pre></td></tr></table></figure><p><mark>第三个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27518/mongod.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27518/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27518/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27518/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27518</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs02</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: shardsvr</pre></td></tr></table></figure><p>启动服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27318/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">5200</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27418/mongod.conf </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>forked process: <span class=\"token number\">5268</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27518/mongod.conf </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>forked process: <span class=\"token number\">5337</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>查看进程：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">2291</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">20</span>:57 ?        00:00:52 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">2368</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">20</span>:57 ?        00:01:11 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">2443</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">20</span>:57 ?        00:01:08 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dkx0       <span class=\"token number\">5200</span>      <span class=\"token number\">1</span>  <span class=\"token number\">4</span> <span class=\"token number\">21</span>:42 ?        00:00:03 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27318/mongod.conf</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dkx0       <span class=\"token number\">5268</span>      <span class=\"token number\">1</span>  <span class=\"token number\">5</span> <span class=\"token number\">21</span>:42 ?        00:00:03 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27418/mongod.conf</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dkx0       <span class=\"token number\">5337</span>      <span class=\"token number\">1</span>  <span class=\"token number\">5</span> <span class=\"token number\">21</span>:43 ?        00:00:02 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27518/mongod.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>初始化副本集和创建主节点：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27318</span></pre></td></tr></table></figure><p>初始化副本集：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> rs.<span class=\"token function-name function\">initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"info2\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"no configuration specified. Using a default configuration for the set\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"me\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27318\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myshardrs02:SECONDARY<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>添加从节点和仲载节点：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27418\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27518\"</span>,true<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查看状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27318\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token string\">\"slaveDelay\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27418\"</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token string\">\"slaveDelay\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27518\"</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token string\">\"slaveDelay\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token string\">\"protocolVersion\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token string\">\"writeConcernMajorityJournalDefault\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token string\">\"settings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token string\">\"chainingAllowed\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2000</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token string\">\"heartbeatTimeoutSecs\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token string\">\"catchUpTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token string\">\"catchUpTakeoverDelayMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">30000</span>,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token string\">\"getLastErrorModes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token string\">\"getLastErrorDefaults\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t\t<span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token string\">\"wtimeout\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token string\">\"replicaSetId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"648132fed44efefc463628be\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>到此两个分片副本集就搭建完成了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031659810.png\" alt=\"image-20230608095125494\" /></p>\n<p>下面搭建配置服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031659497.png\" alt=\"image-20230608095211835\" /></p>\n<h3 id=\"配置节点副本集的创建\"><a class=\"anchor\" href=\"#配置节点副本集的创建\">#</a> 配置节点副本集的创建</h3>\n<p>创建存放数据和日志的目录：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27019/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27019/data/db <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27119/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27119/data/db <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27219/log <span class=\"token punctuation\">\\</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs01_27219/data/db</pre></td></tr></table></figure><p><mark>第一个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27019/mongod.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27019/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27019/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27019/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27019</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: configsvr</pre></td></tr></table></figure><p><mark>第二个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27119/mongod.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27119/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27119/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27119/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27119</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: configsvr</pre></td></tr></table></figure><p><mark>第三个服务</mark></p>\n<p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs01_27219/mongod.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27219/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27219/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs01_27219/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> port: <span class=\"token number\">27219</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>replication:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token comment\">#副本集的名称</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> replSetName: myshardrs</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> <span class=\"token comment\">#分片角色</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> clusterRole: configsvr</pre></td></tr></table></figure><p>启动服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27019/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">7659</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27119/mongod.conf </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>forked process: <span class=\"token number\">7736</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27219/mongod.conf </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>forked process: <span class=\"token number\">7808</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>查看进程：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#分片副本集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">2291</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">20</span>:57 ?        00:01:36 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">2368</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">20</span>:57 ?        00:01:55 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dkx0       <span class=\"token number\">2443</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">20</span>:57 ?        00:01:40 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dkx0       <span class=\"token number\">5200</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">21</span>:42 ?        00:00:48 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27318/mongod.conf</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dkx0       <span class=\"token number\">5268</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">21</span>:42 ?        00:00:49 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27418/mongod.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dkx0       <span class=\"token number\">5337</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">21</span>:43 ?        00:00:38 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27518/mongod.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#配置副本集</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dkx0       <span class=\"token number\">7659</span>      <span class=\"token number\">1</span>  <span class=\"token number\">3</span> <span class=\"token number\">22</span>:19 ?        00:00:08 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27019/mongod.conf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dkx0       <span class=\"token number\">7736</span>      <span class=\"token number\">1</span>  <span class=\"token number\">3</span> <span class=\"token number\">22</span>:19 ?        00:00:07 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27119/mongod.conf</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>dkx0       <span class=\"token number\">7808</span>      <span class=\"token number\">1</span>  <span class=\"token number\">3</span> <span class=\"token number\">22</span>:19 ?        00:00:07 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27219/mongod.conf</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>初始化配置服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> rs.<span class=\"token function-name function\">initiate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"info2\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"no configuration specified. Using a default configuration for the set\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"me\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27019\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$gleStats</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token string\">\"lastOpTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686191196</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token string\">\"electionId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"000000000000000000000000\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"lastCommittedOpTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686191196</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>myshardrs:SECONDARY<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>myshardrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>添加从节点，配置服务中没有仲载节点：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27119\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myshardrs:PRIMARY<span class=\"token operator\">></span> rs.add<span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.244.142:27219\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查看状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs:PRIMARY<span class=\"token operator\">></span> rs.<span class=\"token function-name function\">conf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"term\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"members\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27019\"</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27119\"</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"192.168.244.142:27219\"</span>,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token string\">\"arbiterOnly\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t<span class=\"token string\">\"buildIndexes\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token string\">\"hidden\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token string\">\"priority\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t<span class=\"token string\">\"tags\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token string\">\"secondaryDelaySecs\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token string\">\"votes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">]</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token string\">\"configsvr\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t<span class=\"token string\">\"protocolVersion\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token string\">\"writeConcernMajorityJournalDefault\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t<span class=\"token string\">\"settings\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token string\">\"chainingAllowed\"</span> <span class=\"token builtin class-name\">:</span> true,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t<span class=\"token string\">\"heartbeatIntervalMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2000</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token string\">\"heartbeatTimeoutSecs\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token string\">\"electionTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>,</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token string\">\"catchUpTimeoutMillis\"</span> <span class=\"token builtin class-name\">:</span> -1,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token string\">\"catchUpTakeoverDelayMillis\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">30000</span>,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token string\">\"getLastErrorModes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token string\">\"getLastErrorDefaults\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token string\">\"w\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t<span class=\"token string\">\"wtimeout\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t<span class=\"token string\">\"replicaSetId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"64813c5c4c6469e9d2fe9264\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>myshardrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031700512.png\" alt=\"image-20230608102950142\" /></p>\n<p>配置服务搭建完成！</p>\n<p>分片和配置副本集服务都搭建完成了下面搭建路由节点服务，注意它使用的不是 mongod 服务了而是 mongos 服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031700137.png\" alt=\"image-20230608103603425\" /></p>\n<h3 id=\"路由节点的创建和操作\"><a class=\"anchor\" href=\"#路由节点的创建和操作\">#</a> 路由节点的创建和操作</h3>\n<h4 id=\"第一个路由节点的创建和连接\"><a class=\"anchor\" href=\"#第一个路由节点的创建和连接\">#</a> 第一个路由节点的创建和连接</h4>\n<p>路由的主要作用就是分发不会存储具体的数据，所以不需要 data 目录</p>\n<p>创建存放数据和日志的目录：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜ ~ <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs_27017/log</pre></td></tr></table></figure><p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs_27017/mongos.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs_27017/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs_27017/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> port: <span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">#指定配置节点副本集</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token comment\">#        副本集名称 / 主机地址与端口号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> configDB: myconfigrs/192.168.244.142:27019,192.168.244.142:27119,192.168.244.142:27219</pre></td></tr></table></figure><p>启动服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongos <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs_27017/mongos.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">10092</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>查看进程：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#分片副本集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">2291</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">20</span>:57 ?        00:02:07 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">2368</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">20</span>:57 ?        00:02:26 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dkx0       <span class=\"token number\">2443</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">20</span>:57 ?        00:02:02 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dkx0       <span class=\"token number\">5200</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">21</span>:42 ?        00:01:19 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27318/mongod.conf</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dkx0       <span class=\"token number\">5268</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">21</span>:42 ?        00:01:19 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27418/mongod.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dkx0       <span class=\"token number\">5337</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> <span class=\"token number\">21</span>:43 ?        00:01:00 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27518/mongod.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#配置服务副本集</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dkx0       <span class=\"token number\">7659</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">22</span>:19 ?        00:00:53 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27019/mongod.conf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dkx0       <span class=\"token number\">7736</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">22</span>:19 ?        00:00:54 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27119/mongod.conf</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>dkx0       <span class=\"token number\">7808</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> <span class=\"token number\">22</span>:19 ?        00:00:53 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27219/mongod.conf</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#路由副本集</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>dkx0      <span class=\"token number\">10092</span>      <span class=\"token number\">1</span>  <span class=\"token number\">0</span> <span class=\"token number\">22</span>:53 ?        00:00:00 /usr/local/mongodb/bin/mongos <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs_27017/mongos.conf</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>连接客户端：还是同样的操作，但是命令符提示为：mongos</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>MongoDB shell version v5.0.18</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>connecting to: mongodb://192.168.244.142:27017/?compressors<span class=\"token operator\">=</span>disabled<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">gssapiServiceName</span><span class=\"token operator\">=</span>mongodb</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Implicit session: session <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"id\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"f9216227-99d6-4270-bb3e-b47ab59e205b\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>MongoDB server version: <span class=\"token number\">5.0</span>.18</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Warning: the <span class=\"token string\">\"mongo\"</span> shell has been superseded by <span class=\"token string\">\"mongosh\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">which</span> delivers improved usability and compatibility.The <span class=\"token string\">\"mongo\"</span> shell has been deprecated and will be removed <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>an upcoming release.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>For installation instructions, see</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>https://docs.mongodb.com/mongodb-shell/install/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>The server generated these startup warnings when booting: </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token number\">2023</span>-06-07T22:53:18.509-04:00: Access control is not enabled <span class=\"token keyword\">for</span> the database. Read and <span class=\"token function\">write</span> access to data and configuration is unrestricted</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>此时，能查看数据库，但是不能写入数据否则报错：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>config  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>mongos<span class=\"token operator\">></span> use aabb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>switched to db aabb</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mongos<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>aabb</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mongos<span class=\"token operator\">></span> db.aa.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"刘桑\"</span>,<span class=\"token string\">\"age\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"22\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>WriteCommandError<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"errmsg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Database aabb could not be created :: caused by :: No shards found\"</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"code\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">70</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token string\">\"codeName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ShardNotFound\"</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193139</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193139</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>报错信息：Database aabb could not be created :: caused by :: No shards found</p>\n<p>翻译：无法创建数据库 aabb ：： 由 ：： 未找到分片</p>\n<p>解释：</p>\n<blockquote>\n<p>我们新建路由节点的时候配置文件中只指定了配置服务副本集如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#指定配置节点副本集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#        副本集名称 / 主机地址与端口号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> configDB: myconfigrs/192.168.244.142:27019,192.168.244.142:27119,192.168.244.142:27219</pre></td></tr></table></figure><p>mongos 启动的时候指定了副本集代表路由和配置服务是联通的，但是没有分片不能存储数据，因为最终存储数据是分片</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031700965.png\" alt=\"image-20230608110542590\" /></p>\n<h4 id=\"在路由节点上进行分片配置操作\"><a class=\"anchor\" href=\"#在路由节点上进行分片配置操作\">#</a> 在路由节点上进行分片配置操作</h4>\n<p>使用命令添加分片：</p>\n<p>1. 添加分片：</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sh.addShard<span class=\"token punctuation\">(</span><span class=\"token string\">\"IP:Port\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>将第一套分片副本集添加进来：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.addShard<span class=\"token punctuation\">(</span><span class=\"token string\">\"myshardrs01/192.168.244.142:27018,192.168.244.142:27118,192.168.244.142:27218\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"shardAdded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193852</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193852</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>继续将第二套分片副本集添加进来：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.addShard<span class=\"token punctuation\">(</span><span class=\"token string\">\"myshardrs02/192.168.244.142:27318,192.168.244.142:27418,192.168.244.142:27518\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"shardAdded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看状态：可以看到 shards 中有两个分片副本集了</p>\n<p>&quot;host&quot; : &quot;myshardrs01/192.168.244.142:27018,192.168.244.142:27118&quot; 没有把仲载节点加进来</p>\n<p>因为仲载不存储数据所以分片的时候没必要知道它，但是使用 sh.addShard 的时候还是必须带上的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--- Sharding Status --- </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sharding version: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token string\">\"minCompatibleVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token string\">\"currentVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">6</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token string\">\"clusterId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"64813c5c4c6469e9d2fe9269\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  shards:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01/192.168.244.142:27018,192.168.244.142:27118\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02/192.168.244.142:27318,192.168.244.142:27418\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  active mongoses:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"5.0.18\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  autosplit:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  balancer:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Currently running: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Failed balancer rounds <span class=\"token keyword\">in</span> last <span class=\"token number\">5</span> attempts: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Migration results <span class=\"token keyword\">for</span> the last <span class=\"token number\">24</span> hours: </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">55</span> <span class=\"token builtin class-name\">:</span> Success</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  databases:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> false,  <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"uuid\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"b94e53c7-d498-49b8-8965-1aafcab2df18\"</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"timestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"lastMod\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                config.system.sessions</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">969</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">55</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        too many chunks to print, use verbose <span class=\"token keyword\">if</span> you want to force print</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<p>如果添加分片失败，需要先手动移除分片，检查添加分片的信息正确性后，再次添加分片</p>\n<p>移除分片参考：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>use admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db.runcommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>removeShard:<span class=\"token string\">\"myshardrs02\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意： 如果只剩下最后一个 shard，是无法删除的</p>\n<p>移除时会自动转移分片数据，需要一个时间过程</p>\n<p>完成后，再次执行删除分片命令才能真正删除</p>\n<p>2. 开启分片功能：sh.enableSharding (&quot;库名&quot;)，sh.shardCollection (&quot;库名。集合名&quot;,{&quot;key&quot;:1}&quot;)</p>\n<p>在 mongos 上的 articledb 数据库配置 sharding:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.enableSharding<span class=\"token punctuation\">(</span><span class=\"token string\">\"articledb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194695</span>, <span class=\"token number\">38</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194695</span>, <span class=\"token number\">38</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看分片状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--- Sharding Status --- </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sharding version: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token string\">\"minCompatibleVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token string\">\"currentVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">6</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token string\">\"clusterId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"64813c5c4c6469e9d2fe9269\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  shards:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01/192.168.244.142:27018,192.168.244.142:27118\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02/192.168.244.142:27318,192.168.244.142:27418\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  active mongoses:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"5.0.18\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  autosplit:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  balancer:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Currently running: no</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Failed balancer rounds <span class=\"token keyword\">in</span> last <span class=\"token number\">5</span> attempts: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Migration results <span class=\"token keyword\">for</span> the last <span class=\"token number\">24</span> hours: </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">480</span> <span class=\"token builtin class-name\">:</span> Success</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  databases:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> true,  <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"uuid\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"b94e53c7-d498-49b8-8965-1aafcab2df18\"</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"timestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"lastMod\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                config.system.sessions</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">544</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">480</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        too many chunks to print, use verbose <span class=\"token keyword\">if</span> you want to force print</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>3. 集合分片</p>\n<p>对集合分片，你必须使用 sh.shardCollection () 方法指定集合的分片键。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sh.shardCollection<span class=\"token punctuation\">(</span>namespace,key,unique<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>namespace</td>\n<td>string</td>\n<td>要 (分片) 共享的目标集合的命名空间，格式：&lt;database&gt;.&lt;collection&gt;</td>\n</tr>\n<tr>\n<td>key</td>\n<td>document</td>\n<td>用作分片键的索引规范文档，shard 键决定 MongoDB 如何在 shard 之间分发文档，除非集合为空，否则索引必须在 shard collection 命令之前存在，如果集合为空，则 MongoDB 在对集合进行分片之前创建索引，前提是支持分片键的索引不存在，简单的说：由包含字段和该字段的索引遍历方向的文档组成</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>boolean</td>\n<td>当值为 true 情况下，片键字段上会限制为确保是唯一索引，哈希策略片键不支持唯一索引，默认是 false</td>\n</tr>\n</tbody>\n</table>\n<p>对集合进行分片时，你需要选择一个片键 (Shard key),shard key 是每条记录都必须包含的，且建立了索引的单个字段或复合字段，MongoDB 按照片键将数据划分到不同的数据块中，并将数据块 均衡的分不到所有分片中，为了按照片键划分数据库 MongoDB 使用基于哈希的分片方式 (随机平均分配) 或者基于范围的分片方式 (数值大小分配)</p>\n<p>用什么字段当片键都可以，如：nickname 作为片键，但一定是必填字段</p>\n<p><mark>注意</mark>：MongoDB 只能通过一个字段给某个集合分片不能说一个集合即按哈希有按范围分片</p>\n<p>分片规则一：哈希策略</p>\n<p>对于基于哈希的分片，MongoDB 计算一个字段的哈希值，并用这个哈希值来创建数据块</p>\n<p>在使用基于哈希分片的系统中，拥有 &quot;相近&quot; 片键的文档，很可能不会存储在同一个数据块中，因此数据的分离性更好一些。</p>\n<p>使用 nickname 作为片键，根据其值的哈希值进行数据分片</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.shardCollection<span class=\"token punctuation\">(</span><span class=\"token string\">\"articledb.comment\"</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"hashed\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"collectionsharded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb.comment\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686196321</span>, <span class=\"token number\">36</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686196321</span>, <span class=\"token number\">32</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看状态：</p>\n<p>shard key: {&quot;nickname&quot; : &quot;hashed&quot;} 分片策略哈希</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--- Sharding Status --- </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sharding version: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token string\">\"minCompatibleVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token string\">\"currentVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">6</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token string\">\"clusterId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"64813c5c4c6469e9d2fe9269\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  shards:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01/192.168.244.142:27018,192.168.244.142:27118\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02/192.168.244.142:27318,192.168.244.142:27418\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  active mongoses:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"5.0.18\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  autosplit:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  balancer:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Currently running: no</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Failed balancer rounds <span class=\"token keyword\">in</span> last <span class=\"token number\">5</span> attempts: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Migration results <span class=\"token keyword\">for</span> the last <span class=\"token number\">24</span> hours: </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">512</span> <span class=\"token builtin class-name\">:</span> Success</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  databases:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> true,  <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"uuid\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"b94e53c7-d498-49b8-8965-1aafcab2df18\"</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"timestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"lastMod\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                articledb.comment</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hashed\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$minKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"-4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"-4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs02 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$maxKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs02 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                config.system.sessions</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        too many chunks to print, use verbose <span class=\"token keyword\">if</span> you want to force print</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<p>报错：please create an index that starts with the shard key before sharding</p>\n<p>解决方式：判断分支是查找是否有可用的索引存在，当无可用的索引，并且表不为空时，就会出现这个错误信息。</p>\n<p>分片规则二：值范围策略</p>\n<p>对于基于范围的分片，MongoDB 按照片键的范围把数据分成不同部分，假设有一个数字的片键：想象一个从负无穷到正无穷的直线，每一个片键的值都在直线上画了一个点。MongoDB 把这条直线划分为更短的不重叠的片段，并称之为数据块，每个数据块包含了片键在一定范围内的数据。</p>\n<p>在使用片键做范围划分的系统中，拥有 &quot;相近&quot; 片键的文档很可能存储在同一个数据块中，因此也会存储在同一个分片中。</p>\n<p>如果使用作者年龄字段作为片键，按照点赞数的值进行分片：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.shardCollection<span class=\"token punctuation\">(</span><span class=\"token string\">\"articledb.author\"</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"age\"</span>:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token string\">\"collectionsharded\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb.author\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"<span class=\"token variable\">$clusterTime</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token string\">\"clusterTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686196802</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token string\">\"signature\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"hash\"</span> <span class=\"token builtin class-name\">:</span> BinData<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>,<span class=\"token string\">\"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\"</span><span class=\"token punctuation\">)</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token string\">\"keyId\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"operationTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686196802</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看状态：</p>\n<p age:1=\"\">shard key:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--- Sharding Status --- </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sharding version: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token string\">\"minCompatibleVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token string\">\"currentVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">6</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token string\">\"clusterId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"64813c5c4c6469e9d2fe9269\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  shards:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01/192.168.244.142:27018,192.168.244.142:27118\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02/192.168.244.142:27318,192.168.244.142:27418\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  active mongoses:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"5.0.18\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  autosplit:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  balancer:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Currently running: no</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Failed balancer rounds <span class=\"token keyword\">in</span> last <span class=\"token number\">5</span> attempts: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Migration results <span class=\"token keyword\">for</span> the last <span class=\"token number\">24</span> hours: </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">512</span> <span class=\"token builtin class-name\">:</span> Success</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  databases:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> true,  <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"uuid\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"b94e53c7-d498-49b8-8965-1aafcab2df18\"</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"timestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"lastMod\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                articledb.author</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$minKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$maxKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                articledb.comment</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hashed\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$minKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"-4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"-4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs02 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$maxKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs02 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                config.system.sessions</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        too many chunks to print, use verbose <span class=\"token keyword\">if</span> you want to force print</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>注意的是：</p>\n<ol>\n<li>一个集合只能指定一个片键，否则报错</li>\n<li>一旦对一个集合分片，分片键和分片值就不可改变，如：不能给集合选择不同的分片键，不能更新分片键的值</li>\n<li>根据 age 索引进行分配数据</li>\n</ol>\n<p>基于范围的分片方式与基于哈希的分片方式性能对比：</p>\n<p>基于范围的分片方式提供了更高效的范围查询，给定一个片键的范围，分发路由可以很简单的确定哪个数据块存储了请求需要的数据，并将请求转发到相应的分片中</p>\n<p>不过，基于范围的分片会导致数据在不同分片上的不均衡，有时候，带来的消极作用会大于查询性能的积极作用，比如，如果片键所在的字段是线性增长的，一定时间内的所有请求都会落到某个固定的数据块中，最终导致分布在同一个分片中，在这种情况下，一小部分分片承载了集群大部分的数据，系统并不能很好的进行扩展</p>\n<p>与此相比，基于哈希的分片方式已范围查询性能的损失为代价，保证了集群中数据的均衡，哈希值的随机性使数据随机分布在每个数据块中，因此也随机分布在不同分片中，但是也正由于随机性，一个范围查询很难确定应该请求哪些分片，通常为了返回需要的结果，需要请求所有分片</p>\n<p>如无特殊情况，一般推荐使用 Hash Sharding。</p>\n<p>而使用_id 作为片键是一个不错的选择，因为它是必有得，你可以使用数据文档 <code>_id</code>  的哈希作为片键。</p>\n<p>这个方案能够使读和写都能够平均分布，并且它能够保证每个文档都有不同的片键所以数据块能够很精细</p>\n<p>似乎还是不够完美，因为这样的话对多个文档的查询必将命中所有的分片，虽说如此，这也是一种比较好的方案了。</p>\n<p>理想化的 shard key 可以让 document 均匀的在集群分布：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031700375.png\" alt=\"image-20230608121323081\" /></p>\n<p>显示集群的详细信息：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> db.printShardingStatus<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> db.printShardingStatus<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--- Sharding Status --- </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sharding version: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token string\">\"minCompatibleVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">5</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token string\">\"currentVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">6</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token string\">\"clusterId\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"64813c5c4c6469e9d2fe9269\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  shards:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01/192.168.244.142:27018,192.168.244.142:27118\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02\"</span>,  <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs02/192.168.244.142:27318,192.168.244.142:27418\"</span>,  <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,  <span class=\"token string\">\"topologyTime\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686194172</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  active mongoses:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"5.0.18\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  autosplit:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  balancer:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Currently enabled: <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        Currently running: no</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        Failed balancer rounds <span class=\"token keyword\">in</span> last <span class=\"token number\">5</span> attempts: <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Migration results <span class=\"token keyword\">for</span> the last <span class=\"token number\">24</span> hours: </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token number\">512</span> <span class=\"token builtin class-name\">:</span> Success</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  databases:</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myshardrs01\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> true,  <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"uuid\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"b94e53c7-d498-49b8-8965-1aafcab2df18\"</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"timestamp\"</span> <span class=\"token builtin class-name\">:</span> Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1686193851</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>,  <span class=\"token string\">\"lastMod\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                articledb.author</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$minKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$maxKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                articledb.comment</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"hashed\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$minKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"-4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"-4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs02 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> NumberLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"4611686018427387902\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$maxKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs02 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>  <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"primary\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"config\"</span>,  <span class=\"token string\">\"partitioned\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                config.system.sessions</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                                myshardrs02\t<span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        too many chunks to print, use verbose <span class=\"token keyword\">if</span> you want to force print</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看均衡器是否工作 (需要重新均衡时系统才会自动启动，不用管它)：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.isBalancerRunning<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看当前 Balancer 状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> sh.getBalancerState<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"分片后插入数据测试\"><a class=\"anchor\" href=\"#分片后插入数据测试\">#</a> 分片后插入数据测试</h3>\n<p>测试一 (哈希规则)：登录 mongos 后，向 comment 循环插入 1000 条数据做测试：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongos<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mongos<span class=\"token operator\">></span> for<span class=\"token punctuation\">(</span>let <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span>:i+<span class=\"token string\">\"\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"BoBo\"</span>+i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nInserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mongos<span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：js 的语法，因为 mongo 的 shell 是一个 javaScript 的 shell</p>\n<p>注意：从路由上插入的数据，必须包含片键，否则无法插入</p>\n<p>分别登陆两个片的主节点，统计文档数量</p>\n<p>第一个分片副本集：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">507</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>myshardrs01:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>第二个分片副本集：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">493</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>myshardrs02:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到，1000 条数据近似均匀的分不到了 2 个 shard 上，是根据片键的哈希值分配的。</p>\n<p>这种分配方式非常易于水平扩展：一旦数据存储需要更大空间，可以直接再增加分片即可，同时提升了性能使用 db.comment.stats () 查看单个集合的完整情况，mongos 执行该命令可以查看该集合的数据分片的情况。</p>\n<p>使用 sh.status () 查看本库内所有集合的分片信息。</p>\n<hr />\n<p>测试二 (值范围规则)：登录 mongos 后，向 comment 循环插入 1000 条数据做测试：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongos<span class=\"token operator\">></span> for<span class=\"token punctuation\">(</span>let <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span><span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>db.author.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"BoBoBo\"</span>+i,<span class=\"token string\">\"age\"</span>:NumberInt<span class=\"token punctuation\">(</span>i%120<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nInserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mongos<span class=\"token operator\">></span> db.author.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>插入成功后，仍然要分别查看两个分片副本集的数据情况。</p>\n<p>分片效果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>articledb.author</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                        shard key: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                        unique: <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                        balancing: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        chunks:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                myshardrs01\t<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$minKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> --<span class=\"token operator\">>></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"age\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"<span class=\"token variable\">$maxKey</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span> on <span class=\"token builtin class-name\">:</span> myshardrs01 Timestamp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：</p>\n<p>如果查看状态发现没有分片，则可能是由于以下原因造成了：</p>\n<ol>\n<li>\n<p>系统繁忙，正在分片中。</p>\n</li>\n<li>\n<p>数据块 (chunk) 没有填满，默认的数据块尺寸 (chunksize) 是 64M，填满后才会考虑向其它片的数据块填充数据，因此，为了测试，可以将其改小，这里改为 1M，操作如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> use config</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db config</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongos<span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>config</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mongos<span class=\"token operator\">></span> db.settings.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"chunksize\"</span>,value:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nMatched\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"nUpserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"nModified\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"chunksize\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mongos<span class=\"token operator\">></span></pre></td></tr></table></figure><p>测试完改回来：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongos<span class=\"token operator\">></span> db.settings.save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"chunksize\"</span>,value:64<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：要先改小，再设置分片，为了测试，可以先删除集合，重新建立集合的分片策略，再插入数据测试即可。</p>\n</li>\n</ol>\n<h3 id=\"再增加一个路由节点\"><a class=\"anchor\" href=\"#再增加一个路由节点\">#</a> 再增加一个路由节点</h3>\n<p>目录:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /mongodb/sharded_cluster/myshardrs_27117/log</pre></td></tr></table></figure><p>新建或修改配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">vim</span> /mongodb/sharded_cluster/myshardrs_27117/mongos.conf</pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs_27117/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">#指定用于保存 mongos 或 mongod 进程的进行 ID 的文件位置，其中 mongos 或 mongod 将写入其 PID</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> pidFilePath: <span class=\"token string\">\"/mongodb/sharded_cluster/myshardrs_27117/log/mongod.pid\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> port: <span class=\"token number\">27117</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sharding:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token comment\">#指定配置节点副本集</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token comment\">#        副本集名称 / 主机地址与端口号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> configDB: myconfigrs/192.168.244.142:27019,192.168.244.142:27119,192.168.244.142:27219</pre></td></tr></table></figure><p>启动 mongos2：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongos <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs_27117/mongos.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">27750</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>使用 Mongo 客户端登录 27117，发现，第二个路由无需配置，因为分片配置都保存到了配置服务器中了</p>\n<h2 id=\"compass连接分片集群\"><a class=\"anchor\" href=\"#compass连接分片集群\">#</a> Compass 连接分片集群</h2>\n<p>直接连接路由</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031700753.png\" alt=\"image-20230608143006151\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031700972.png\" alt=\"image-20230608143031512\" /></p>\n<h2 id=\"springdatamongodb连接分片集群\"><a class=\"anchor\" href=\"#springdatamongodb连接分片集群\">#</a> SpringDataMongoDB 连接分片集群</h2>\n<p>Java 客户端常用的是 SpringDataMongoDB，其连接的是 mongos 路由，配置和单机 mongod 的配置是一样的。</p>\n<p>多个路由的时候的 SpringDataMongoDB 的客户端配置参考如下：</p>\n<p>直接连接路由节点即可</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#数据源配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">#主机地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">#host: 192.168.244.142</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">#数据库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">#database: articledb</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">#端口号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">#port: 27017</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">#也可以使用 uri 连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">#uri: mongodb://192.168.244.142:27017/articledb</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">#副本集的连接字符串</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">#uri:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">#mongodb://192.168.244.142:27017,192.168.244.142:27018,192.168.244.142:27019/articledb?</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">#connect=replicaSet&amp;secondaryOk=true&amp;replicaSet=myrs</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">#连接路由字符串</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> mongodb<span class=\"token punctuation\">:</span>//192.168.244.142<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span><span class=\"token punctuation\">,</span>192.168.244.142<span class=\"token punctuation\">:</span>27117/articledb</pre></td></tr></table></figure><p>通过日志发现，写入数据的时候，会选择一个路由写入：</p>\n<h2 id=\"安全认证\"><a class=\"anchor\" href=\"#安全认证\">#</a> 安全认证</h2>\n<h3 id=\"mongodb的用户和角色权限简介\"><a class=\"anchor\" href=\"#mongodb的用户和角色权限简介\">#</a> MongoDB 的用户和角色权限简介</h3>\n<p>默认情况下，MongoDB 实例启动运行时是没有启用用户访问权限控制的，也就是说，在实例本机服务器上都可以随意连接到实例进行各种操作，MongoDB 不会对连接客户端进行用户验证，这是非常危险的。</p>\n<p>mongoDB 官网上说，为了能保障 mongodb 的安全可以做以下几个步骤：</p>\n<ol>\n<li>使用新的端口，默认的 27017 端口如果一旦知道了 ip 就能连接上，不太安全</li>\n<li>设置 mongodb 的网络环境，最好将 mongodb 部署到公司服务器内网，这样外网是访问不到的，公司内部访问使用 vpn 等</li>\n<li>开启安全认证，认证要同时设置服务器之间的内部认证方式，同时要设置客户端连接到集群的账号密码认证方式</li>\n</ol>\n<p>为了强制开启用户访问控制 (用户验证)，则需要在 MongoDB 实例启动时使用选项 --auth 或在指定启动配置文件中添加选项 auth=true</p>\n<p>在开始之前需要了解一下概念</p>\n<ol>\n<li>启用访问控制：</li>\n</ol>\n<p>MongoDB 使用的是基于角色的访问控制 (Role-Based Access Control,RBAC) 来管理用户対实例的访问，通过对用户授予一个或多个角色来控制用户访问数据库资源的权限和数据库操作的权限，在对用户分配角色之前，用户无法访问实例。</p>\n<p>在实例启动时添加选项 --auth 或指定启动配置文件中添加选项 auth=true</p>\n<ol start=\"2\">\n<li>角色：</li>\n</ol>\n<p>在 MongoDB 中通过角色对用户授予相应数据库资源的操作权限，每个角色当中的权限可以显式指定，也可以通过继承其它角色的权限，或者两都存在的权限</p>\n<ol start=\"3\">\n<li>权限：</li>\n</ol>\n<p>权限由指定的数据库资源 (resource) 以及允许在指定资源上进行的操作 (action) 组成。</p>\n<ol>\n<li>资源 (resource) 包括：数据库，集合，部分集合和集群；</li>\n<li>操作 (action) 包括：对资源进行的增，删，改，查 (CRUD) 操作。</li>\n</ol>\n<p>在角色定义时可以包含一个或多个已存在的角色，新创建的角色会继承包含的角色所有的权限，在同一个数据库中，新创建角色可以继承其它角色的权限，在 admin 数据库中创建的角色可以继承在其它任意数据库中角色的权限。</p>\n<p>关于角色权限的查看，可以通过如下命令查询：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查询所有角色权限 (仅用户自定义角色)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> db.runCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>rolesInfo:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#查询所有用户角色权限 (包含内置角色)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.runCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>rolesInfo:1,showBuiltinRoles:true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#查询当前数据库中的某角色的权限</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.runCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>rolesInfo:<span class=\"token string\">\"&lt;rolename>\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#查询其它数据库中指定的角色权限</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> db.runCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>rolesInfo:<span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">\"&lt;rolename>\"</span>,db:<span class=\"token string\">\"&lt;database>\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#查询多个角色权限</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span> db.runCommand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>rolesInfo:<span class=\"token punctuation\">[</span><span class=\"token string\">\"rolename\"</span>,<span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">\"&lt;rolename>\"</span>,db:<span class=\"token string\">\"database\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>常用的内置角色：</p>\n<ul>\n<li>数据库用户角色：read，readWrite；</li>\n<li>所有数据库用户角色：readAnyDatabase，readWriteAnyDatabase，userAdminAnyDatabase，dbAdminAnyDatabase</li>\n<li>数据库管理角色：dbAdmin，dbOwner，userAdmin；</li>\n<li>集群管理角色：clusterAdmin，clusterManager，clusterMonitor，hostManager；</li>\n<li>备份恢复角色：backup，restore；</li>\n<li>超级用户角色：root</li>\n<li>内部角色：system</li>\n</ul>\n<p>角色说明：</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>权限描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>read</td>\n<td>可以读取指定数据库中任何数据</td>\n</tr>\n<tr>\n<td>readWrite</td>\n<td>可以读写指定数据库中任何数据，包括创建，重命名，删除集合</td>\n</tr>\n<tr>\n<td>readAnyDatabase</td>\n<td>可以读取所有数据库中任何数据 (除了数据库 config 和 loacl 之外)</td>\n</tr>\n<tr>\n<td>readWriteAnyDatabase</td>\n<td>可以读写所有数据库中任何数据 (除了数据库 config 和 local 之外)</td>\n</tr>\n<tr>\n<td>userAdminAnyDatabase</td>\n<td>可以在指定数据库创建和修改用户 (除了数据库 config 和 local 之外)</td>\n</tr>\n<tr>\n<td>dbAdminAnyDatabase</td>\n<td>可以读取任何数据库以及对数据库进行清理，修改，压缩，获取统计信息，执行检查等操作 (除了数据库 config 和 local 之外)</td>\n</tr>\n<tr>\n<td>dbAdmin</td>\n<td>可以读取指定数据库以及对数据库进行清理，修怪，压缩，获取统计信息，执行检查等操作。</td>\n</tr>\n<tr>\n<td>userAdmin</td>\n<td>可以在指定数据库创建和修改用户</td>\n</tr>\n<tr>\n<td>clusterAdmin</td>\n<td>可以对整个集群或数据库系统进行管理操作</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>备份 MongoDB 数据最小的权限</td>\n</tr>\n<tr>\n<td>restore</td>\n<td>从备份文件中还原恢复 MongoDB 数据 (除了 system.profile 集合) 的权限。</td>\n</tr>\n<tr>\n<td>root</td>\n<td>超级账号，超级权限</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"单实例环境\"><a class=\"anchor\" href=\"#单实例环境\">#</a> 单实例环境</h2>\n<p>目标：对单实例的 MongoDB 服务开启安全认证，这里的单实例指定是未开启副本集或分片的 MongoDB 实例。</p>\n<h3 id=\"关闭已开启的服务可选\"><a class=\"anchor\" href=\"#关闭已开启的服务可选\">#</a> 关闭已开启的服务 (可选)</h3>\n<p>增加 mongod 的单实例的安全认证功能，可以在服务搭建的时候直接添加，也可以在之前搭建好的服务上添加。</p>\n<p>本文使用之前搭建好的服务，因此，先停止之前的服务</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">2291</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> Jun07 ?        00:09:22 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">2368</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> Jun07 ?        00:09:19 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">2443</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> Jun07 ?        00:05:27 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dkx0       <span class=\"token number\">5200</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> Jun07 ?        00:07:06 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27318/mongod.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dkx0       <span class=\"token number\">5268</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> Jun07 ?        00:06:37 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27418/mongod.conf</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dkx0       <span class=\"token number\">5337</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> Jun07 ?        00:04:25 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27518/mongod.conf</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dkx0       <span class=\"token number\">7659</span>      <span class=\"token number\">1</span>  <span class=\"token number\">3</span> Jun07 ?        00:09:26 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27019/mongod.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dkx0       <span class=\"token number\">7736</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> Jun07 ?        00:08:15 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27119/mongod.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dkx0       <span class=\"token number\">7808</span>      <span class=\"token number\">1</span>  <span class=\"token number\">2</span> Jun07 ?        00:08:11 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs01_27219/mongod.conf</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dkx0      <span class=\"token number\">10092</span>      <span class=\"token number\">1</span>  <span class=\"token number\">0</span> Jun07 ?        00:02:23 /usr/local/mongodb/bin/mongos <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs_27017/mongos.conf</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dkx0      <span class=\"token number\">27750</span>      <span class=\"token number\">1</span>  <span class=\"token number\">0</span> 02:22 ?        00:00:31 /usr/local/mongodb/bin/mongos <span class=\"token parameter variable\">-f</span> /mongodb/sharded_cluster/myshardrs_27117/mongos.conf</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>停止服务的方式有两种：快速关闭和标准关闭，下面依次说明：</p>\n<ol>\n<li>快速关闭方式 (快速，简单，数据可能会出错)</li>\n</ol>\n<p>目标：通过系统的 kill 命令直接杀死进程：</p>\n<p>杀完要检查一下，避免有的没有杀掉。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#通过进程编号关闭节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>➜  ~ <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-2</span> <span class=\"token number\">2291</span> <span class=\"token number\">2368</span> <span class=\"token number\">2443</span> <span class=\"token number\">5200</span> <span class=\"token number\">5268</span> <span class=\"token number\">5337</span> <span class=\"token number\">7659</span> <span class=\"token number\">7736</span> <span class=\"token number\">7808</span> <span class=\"token number\">10092</span> <span class=\"token number\">27750</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>[补充]</p>\n<p>如果一旦是因为数据损坏，则需要进行如下操作：</p>\n<ol>\n<li>\n<p>删除 lock 文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> /mongodb/single/data/db/*.lock</pre></td></tr></table></figure></li>\n<li>\n<p>修复数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">--repair</span> <span class=\"token parameter variable\">--dbpath</span><span class=\"token operator\">=</span>/mongodb/single/data/db</pre></td></tr></table></figure><p>2. 标准的关闭方法 (数据不容易出错，但是麻烦)</p>\n<p>目标：通过 mongo 客户端中的 shutdownServer 命令来关闭服务</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.shutdownServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"添加用户和权限\"><a class=\"anchor\" href=\"#添加用户和权限\">#</a> 添加用户和权限</h3>\n<p>​    1. 先按照普通无授权认证的配置，来配置服务端的配置文件 /mongodb/single/mongod.conf：(参考，复用之前的)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token string\">\"/mongodb/single/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/single/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> bindIp: localhost,192.168.244.142</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> port: <span class=\"token number\">27017</span></pre></td></tr></table></figure><p>2. 按之前为开启认证的方式 (不添加 --auth 参数) 来启动 MongoDB 服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">34342</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>提示：</p>\n<p>在操作用户时，启动 mongod 服务时尽量不要开启授权</p>\n<p>3. 使用 Mongo 客户端登录：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr></table></figure><p>4. 创建两个管理员用户，一个是系统的超级管理员 myroot，一个是 admin 库的管理用户 myadmin：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#切换到 admin 库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> use admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#创建系统超级用户 myroot，设置密码 123456，设置角色 root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"myroot\"</span>,pwd:<span class=\"token string\">\"123456\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"role\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"root\"</span>,<span class=\"token string\">\"db\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#或 上面指定了集合下面默认是当前所在集合都是 admin</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"myroot\"</span>,pwd:<span class=\"token string\">\"123456\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Successfully added user: <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myroot\"</span>, <span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#创建专门用来管理 admin 库的账号 myadmin，只用来作为用户权限的管理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"myadmin\"</span>,pwd:<span class=\"token string\">\"123456\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">\"userAdminAnyDatabase\"</span>,db:<span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Successfully added user: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myadmin\"</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token string\">\"role\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userAdminAnyDatabase\"</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#查看已经创建了的用户的情况：</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">></span> db.system.users.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin.myroot\"</span>, <span class=\"token string\">\"userId\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"9ecafd01-cef1-43a4-85ad-4ec21e905f81\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myroot\"</span>, <span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span>, <span class=\"token string\">\"credentials\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SCRAM-SHA-1\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"iterationCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>, <span class=\"token string\">\"salt\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"LefHopC8WY3knLfOVz56iw==\"</span>, <span class=\"token string\">\"storedKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"fFDpj6y1AZCw60aOTM8fBXzUwBc=\"</span>, <span class=\"token string\">\"serverKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"YvTH+hyBHN1XThjYnrotc57/hgs=\"</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"SCRAM-SHA-256\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"iterationCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">15000</span>, <span class=\"token string\">\"salt\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"35I31t2xZ5NIK0wrw0LZajRGtnY8B8YLwjHfgg==\"</span>, <span class=\"token string\">\"storedKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"iy3/8WvkxrNDcKPJmFQ7rTAXxNvzDtjK7uMxzUkhgJ4=\"</span>, <span class=\"token string\">\"serverKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"V8Nhn6pBt50M5UsUNBNDGfaOU23f+CLYcYLnxBRTRy0=\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"role\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"root\"</span>, <span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin.myadmin\"</span>, <span class=\"token string\">\"userId\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"c8145c3a-b1a1-4be2-a226-39e067cbe9b0\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myadmin\"</span>, <span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span>, <span class=\"token string\">\"credentials\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SCRAM-SHA-1\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"iterationCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>, <span class=\"token string\">\"salt\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Gc9gasfekYv2F9njhAd/Sg==\"</span>, <span class=\"token string\">\"storedKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"vy3mzY/oer2ONiUO8nV0DRrLwUg=\"</span>, <span class=\"token string\">\"serverKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"oVgCRHfLt/HW4PslM3QCghvVHZ4=\"</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"SCRAM-SHA-256\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"iterationCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">15000</span>, <span class=\"token string\">\"salt\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"vXE6XCPtMv2ErDmXM/21KlbiTlEQEQ89rmcIgQ==\"</span>, <span class=\"token string\">\"storedKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"MexKD1eAYxvws8ANYtvNPdDZajNTAjfJphlIDtvPn80=\"</span>, <span class=\"token string\">\"serverKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Zzp84uYSusKlbNoMmTi/rPvskHl531RQDjQIjcdDGkY=\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"role\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userAdminAnyDatabase\"</span>, <span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#删除用户</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">></span> db.dropUser<span class=\"token punctuation\">(</span><span class=\"token string\">\"myadmin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">></span> db.system.users.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin.myroot\"</span>, <span class=\"token string\">\"userId\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"9ecafd01-cef1-43a4-85ad-4ec21e905f81\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"myroot\"</span>, <span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span>, <span class=\"token string\">\"credentials\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"SCRAM-SHA-1\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"iterationCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10000</span>, <span class=\"token string\">\"salt\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"LefHopC8WY3knLfOVz56iw==\"</span>, <span class=\"token string\">\"storedKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"fFDpj6y1AZCw60aOTM8fBXzUwBc=\"</span>, <span class=\"token string\">\"serverKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"YvTH+hyBHN1XThjYnrotc57/hgs=\"</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"SCRAM-SHA-256\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"iterationCount\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">15000</span>, <span class=\"token string\">\"salt\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"35I31t2xZ5NIK0wrw0LZajRGtnY8B8YLwjHfgg==\"</span>, <span class=\"token string\">\"storedKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"iy3/8WvkxrNDcKPJmFQ7rTAXxNvzDtjK7uMxzUkhgJ4=\"</span>, <span class=\"token string\">\"serverKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"V8Nhn6pBt50M5UsUNBNDGfaOU23f+CLYcYLnxBRTRy0=\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"role\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"root\"</span>, <span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"admin\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#修改密码</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">></span> db.changeUserPassword<span class=\"token punctuation\">(</span><span class=\"token string\">\"myroot\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<ol>\n<li>本案例创建了两个用户，分别对应超管和专门用来管理用户的角色，事实上，你只需要一个用户即可。如果你对安全要求很高，防止超管泄露，则不要创建超管用户。</li>\n<li>和其它数据库 (MySQL) 一样，权限的管理都差不多一样，也是将用户和权限信息保存到数据库对应的表中。MongoDB 存储所有的用户信息在 admin 数据库的集合 system.users 中，保存用户名，密码和数据库信息。</li>\n<li role:userAdminAnyDatabase,db:=\"\">如果不指定数据库，则创建的指定的权限的用户在所有的数据库上有效，如</li>\n</ol>\n<p>认证测试：</p>\n<p>测试添加的用户是否正确：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> use admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#输入错误密码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"myroot\"</span>,<span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Error: Authentication failed.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#输入正确密码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"myroot\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>创建普通用户</p>\n<p>创建普通用户可以在没有开启认证的时候添加，也可以在开启认证之后添加，但开启认证之后，必须使用有操作 admin 库的用户登录认证后才能操作，底层都是将用户信息保存在了 admin 数据库的集合 system.users 中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#创建用户，拥有 articledb 数据库的读写权限 readWrite，密码是 123456</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"bobo\"</span>,pwd:<span class=\"token string\">\"123456\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">\"readWrite\"</span>,<span class=\"token string\">\"db\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"articledb\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Successfully added user: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobo\"</span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token string\">\"role\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"readWrite\"</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#测试是否可用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"bobo\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<p>如果开启了认证后，登录的客户端的用户必须使用 admin 库的角色，如拥有 root 角色的 myadmin 用户，再通过 myadmin 用户去创建其它角色的用户</p>\n<h3 id=\"服务端开启认证和客户端连接登录\"><a class=\"anchor\" href=\"#服务端开启认证和客户端连接登录\">#</a> 服务端开启认证和客户端连接登录</h3>\n<ol>\n<li>\n<p>关闭已经启动的服务</p>\n</li>\n<li>\n<p>使用 linux 命令杀死进程：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0      <span class=\"token number\">34342</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:53 ?        00:00:29 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0      <span class=\"token number\">34546</span>  <span class=\"token number\">34416</span>  <span class=\"token number\">0</span> 03:55 pts/1    00:00:00 /usr/local/mongodb/bin/mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>➜  ~ <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-2</span> <span class=\"token number\">34342</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~</pre></td></tr></table></figure></li>\n<li>\n<p>在 mongo 客户端中使用 shutdownServer 命令来关闭</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.shutdownServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">shutdown</span> <span class=\"token builtin class-name\">command</span> only works with the admin database<span class=\"token punctuation\">;</span> try <span class=\"token string\">'use admin'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> use admin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>switched to db admin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> db.shutdownServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>server should be down<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>需要几个条件：</p>\n<ul>\n<li>必须是在 admin 库下执行该关闭命令</li>\n<li>如果没有认证，必须是从 localhost 登录的，才能执行关闭服务命令</li>\n<li>非 localhost 得，通过远程登录，必须有登录且必须登录用户有对 admin 操作权限才可以。</li>\n</ul>\n<p>2. 以开启认证的方式启动服务</p>\n<p>有两种方式开启权限认证启动服务：一种是参数方式，一种是配置文件方式 (推荐)。</p>\n<p>1. 参数方式</p>\n<p>在启动时指定参数 --auth，如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf <span class=\"token parameter variable\">--auth</span></pre></td></tr></table></figure><p>2. 配置文件方式</p>\n<p>在 single/mongod.conf 配置文件中加入:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>security:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#开启授权认证</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> authorization: enabled</pre></td></tr></table></figure><p>启动时可不加 --auth 参数该方式避免忘记加 --auth 导致不安全问题发生：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf</pre></td></tr></table></figure><p>启动服务并连接客户端查看效果：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">36759</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~ </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.244.142 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>MongoDB shell version v5.0.18</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>connecting to: mongodb://192.168.244.142:27017/?compressors<span class=\"token operator\">=</span>disabled<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">gssapiServiceName</span><span class=\"token operator\">=</span>mongodb</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Implicit session: session <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"id\"</span> <span class=\"token builtin class-name\">:</span> UUID<span class=\"token punctuation\">(</span><span class=\"token string\">\"ea29ccf7-9d79-4fc5-9615-b26267842fd8\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>MongoDB server version: <span class=\"token number\">5.0</span>.18</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Warning: the <span class=\"token string\">\"mongo\"</span> shell has been superseded by <span class=\"token string\">\"mongosh\"</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">which</span> delivers improved usability and compatibility.The <span class=\"token string\">\"mongo\"</span> shell has been deprecated and will be removed <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>an upcoming release.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>For installation instructions, see</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>https://docs.mongodb.com/mongodb-shell/install/</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Warning: unable to run listCollections, attempting to approximate collection names by parsing connectionStatus</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到不能访问任何数据</p>\n</li>\n</ol>\n<p>登录 myroot 用户：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> use admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>switched to db admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"myroot\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>admin      <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>articledb  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>config     <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">local</span>      <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>登录 bobo 普通用户：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"bobo\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Error: Authentication failed.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"bobo\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>articledb  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>comment</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p><mark>注意</mark>：哪个用户权限属于哪个集合就需要 use 到该集合中执行 db.auth 命令才行</p>\n<h3 id=\"springdatamongodb连接认证\"><a class=\"anchor\" href=\"#springdatamongodb连接认证\">#</a> SpringDataMongoDB 连接认证</h3>\n<p>使用用户名和密码连接到 MongoDB 服务器，你必须使用 <code>username:password@hostname/dbname</code>  格式， <code>username</code>  为用户名， <code>password</code>  为密码</p>\n<p>目标：使用用户 bobo 使用密码 123456 连接到 MongoDB 服务上。</p>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#数据源配置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token comment\">#主机地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token comment\">#host: 192.168.244.142</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token comment\">#数据库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token comment\">#database: articledb</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token comment\">#默认端口号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">#port: 27017</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">#账号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token comment\">#username: bobo</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">#密码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token comment\">#password: 123456</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token comment\">#单机有认证的情况下，也是用字符串连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> mongodb<span class=\"token punctuation\">:</span>//bobo<span class=\"token punctuation\">:</span>123456@192.168.244.142<span class=\"token punctuation\">:</span>27017/articledb</pre></td></tr></table></figure><p>提示：</p>\n<p>分别测试用户名密码正确以及不正确的情况.</p>\n<p>Compass 连接需要指定用户名和密码否则连接不上</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031701928.png\" alt=\"image-20230608165514763\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031701801.png\" alt=\"image-20230608165613122\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031701100.png\" alt=\"image-20230608165629084\" /></p>\n<h2 id=\"副本集环境\"><a class=\"anchor\" href=\"#副本集环境\">#</a> 副本集环境</h2>\n<h3 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h3>\n<p>对于搭建好的 mongodb 副本集，为了安全，启动安全认证，使用账号密码登。</p>\n<p>副本集环境使用之前搭建好的，架构如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031701536.png\" alt=\"image-20230608165821185\" /></p>\n<h3 id=\"关闭已开启的副本集服务\"><a class=\"anchor\" href=\"#关闭已开启的副本集服务\">#</a> 关闭已开启的副本集服务</h3>\n<h3 id=\"通过主节点添加一个管理员账号\"><a class=\"anchor\" href=\"#通过主节点添加一个管理员账号\">#</a> 通过主节点添加一个管理员账号</h3>\n<p>只需要在主节点上添加用户，副本集会自动同步</p>\n<p>开启认证之前，创建超管用户：myroot，密码：123456</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> use admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"myroot\"</span>,pwd:<span class=\"token string\">\"123456\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>详细操作见单实例环境的 <code>添加用户和权限</code> 的相关操作。</p>\n<p>提示：</p>\n<p>该步骤也可以在开启认证之后，但需要通过 localhost 登录才允许添加用户，用户数据也会自动同步到副本集，后续再创建其它用户，都可以使用该超管用户创建。</p>\n<h3 id=\"创建副本集认证的key文件\"><a class=\"anchor\" href=\"#创建副本集认证的key文件\">#</a> 创建副本集认证的 key 文件</h3>\n<p>第一步：生成一个 key 文件当当前文件夹中</p>\n<p>可以使用任何方法生成密钥文件，例如：以下操作使用 openssl 生成密码文件，然后使用 chmod 来 更改文件权限，仅为文件所有者提供读取权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ openssl rand <span class=\"token parameter variable\">-base64</span> <span class=\"token number\">90</span> <span class=\"token parameter variable\">-out</span> ./mongo.keyfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">chmod</span> <span class=\"token number\">400</span> ./mongo.keyfile</pre></td></tr></table></figure><p>提示：</p>\n<p>所有副本集节点都必须要用同一份 keyfile，一般是在一台机器上生成，然后拷贝到其它机器上，且必须有读的权限，否则将来会报错：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>permissions on /mongodb/replica_sets/myrs_27017/mongo.keyfile are too</pre></td></tr></table></figure><p>一定要保证密钥文件一致，文件位置随便，但是为了方便查找，建议每台机器都放到一个固定位置，都放到和配置文件一起的目录中</p>\n<p>这里将该文件分别拷贝到多个目录中：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">cp</span> mongo.keyfile /mongodb/replica_sets/myrs_27017</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">cp</span> mongo.keyfile /mongodb/replica_sets/myrs_27018</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">cp</span> mongo.keyfile /mongodb/replica_sets/myrs_27019</pre></td></tr></table></figure><h3 id=\"修改配置文件指定keyfile\"><a class=\"anchor\" href=\"#修改配置文件指定keyfile\">#</a> 修改配置文件指定 keyfile</h3>\n<p>分别编辑几个服务的 mongod.conf 文件，添加相关内容：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#keyfile 签权文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key atrule\">keyFile</span><span class=\"token punctuation\">:</span> /mongodb/replica_sets/myrs_27017/mongo.keyfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">#开启认证方式运行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token key atrule\">authorization</span><span class=\"token punctuation\">:</span> enabled</pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#keyfile 签权文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key atrule\">keyFile</span><span class=\"token punctuation\">:</span> /mongodb/replica_sets/myrs_27018/mongo.keyfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">#开启认证方式运行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token key atrule\">authorization</span><span class=\"token punctuation\">:</span> enabled</pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">#keyfile 签权文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token key atrule\">keyFile</span><span class=\"token punctuation\">:</span> /mongodb/replica_sets/myrs_27019/mongo.keyfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">#开启认证方式运行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token key atrule\">authorization</span><span class=\"token punctuation\">:</span> enabled</pre></td></tr></table></figure><h3 id=\"重新启动副本集\"><a class=\"anchor\" href=\"#重新启动副本集\">#</a> 重新启动副本集</h3>\n<p>如果副本集是开启状态，则先分别关闭副本集中的每个 mongod，从次节点开始，直到副本集的所有成员都离线，包括任何仲载者，主节点必须是最后一个成员关闭以避免潜在的回滚。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-2</span> <span class=\"token number\">2453</span> <span class=\"token number\">2224</span> <span class=\"token number\">2110</span> <span class=\"token number\">2013</span></pre></td></tr></table></figure><p>分别启动副本集节点：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">3960</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>forked process: <span class=\"token number\">4043</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>➜  ~ /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>forked process: <span class=\"token number\">4144</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>查看进程：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>➜  ~ <span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">3960</span>      <span class=\"token number\">1</span>  <span class=\"token number\">9</span> <span class=\"token number\">22</span>:44 ?        00:00:03 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27017/log/mongod.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dkx0       <span class=\"token number\">4043</span>      <span class=\"token number\">1</span> <span class=\"token number\">10</span> <span class=\"token number\">22</span>:44 ?        00:00:03 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27018/log/mongod.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dkx0       <span class=\"token number\">4144</span>      <span class=\"token number\">1</span> <span class=\"token number\">11</span> <span class=\"token number\">22</span>:44 ?        00:00:02 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/replica_sets/myrs_27019/log/mongod.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>➜  ~</pre></td></tr></table></figure><p>登录 myroot 用户查看</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> use admin</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>switched to db admin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.auth<span class=\"token punctuation\">(</span><span class=\"token string\">\"myroot\"</span>,<span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>admin      <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>articledb  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>config     <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">local</span>      <span class=\"token number\">0</span>.001GB</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">test</span>       <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"在主节点上添加普通账号\"><a class=\"anchor\" href=\"#在主节点上添加普通账号\">#</a> 在主节点上添加普通账号</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#添加普通用户管理 articledb 集合</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span> db.createUser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>user:<span class=\"token string\">\"bobo\"</span>,pwd:<span class=\"token string\">\"123456\"</span>,roles:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>role:<span class=\"token string\">\"readWrite\"</span>,db:<span class=\"token string\">\"articledb\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Successfully added user: <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"user\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"bobo\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"roles\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token string\">\"role\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"readWrite\"</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token string\">\"db\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>myrs:PRIMARY<span class=\"token operator\">></span></pre></td></tr></table></figure><p>重新连接，使用普通用户 bobo 重新登录，查看数据</p>\n<p>注意：也要使用 rs.status () 命令查看副本集是否健康</p>\n<h3 id=\"springdatamongodb连接副本集-2\"><a class=\"anchor\" href=\"#springdatamongodb连接副本集-2\">#</a> SpringDataMongoDB 连接副本集</h3>\n<p>使用用户名和密码连接到 MongoDB 服务器，必须使用 <code>username:password@hostname/dbname</code>  格式</p>\n<p>目标：使用用户 bobo 使用密码 123456 连接到 mongoDB 服务上</p>\n<p>application.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#数据源配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">#主机地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">#host: 192.168.244.142</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">#数据库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">#database: articledb</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">#端口号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">#port: 27017</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">#也可以使用 uri 连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">#uri: mongodb://192.168.244.142:27017/articledb</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">#副本集的连接字符串</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        mongodb<span class=\"token punctuation\">:</span>//bobo<span class=\"token punctuation\">:</span>123456@192.168.244.142<span class=\"token punctuation\">:</span><span class=\"token number\">27017</span><span class=\"token punctuation\">,</span>192.168.244.142<span class=\"token punctuation\">:</span><span class=\"token number\">27018</span><span class=\"token punctuation\">,</span>192.168.244.142<span class=\"token punctuation\">:</span>27019/articledb<span class=\"token punctuation\">?</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        connect=replicaSet<span class=\"token important\">&amp;secondaryOk=true&amp;replicaSet=myrs</span></pre></td></tr></table></figure><h3 id=\"分片集群环境扩展\"><a class=\"anchor\" href=\"#分片集群环境扩展\">#</a> 分片集群环境 (扩展)</h3>\n<h4 id=\"关闭已开启的集群服务\"><a class=\"anchor\" href=\"#关闭已开启的集群服务\">#</a> 关闭已开启的集群服务</h4>\n<p>分片集群环境下的安全认证和副本集环境下基本上一样。</p>\n<p>但分片集群的服务器环境和架构较为复杂，建议在搭建分片集群的时候，直接加入安全认证和服务器间的签权，如果之前有数据，可先将之前的数据备份出来，再还原回去</p>\n<p>本文使用之前搭建好的集群服务，因此，先停止之前的集群服务</p>\n<p>依次杀死 mongod 路由，配置副本集服务，分片副本服务，从次节点开始，直到所有成员都离线，副本集杀的时候，建议先杀仲载者，再杀副本节点，最后是主节点，以避免潜在的回滚，杀完检查一下</p>\n",
            "tags": [
                "计算机学科",
                "database",
                "mongodb",
                "计算机学科",
                "database",
                "mongodb"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/database/mongodb/MongoDB%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E7%94%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/database/mongodb/MongoDB%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E7%94%A8/",
            "title": "MongoDB的安装及启用",
            "date_published": "2024-01-03T09:06:12.053Z",
            "content_html": "<blockquote>\n<p>MongoDB 是一个开源，高性能，无模式的文档行数据库，NoSQL 数据库产品的一种，是最像关系型数据库的非关系型数据库</p>\n</blockquote>\n<h2 id=\"什么时候使用mongodb\"><a class=\"anchor\" href=\"#什么时候使用mongodb\">#</a> <strong>什么时候使用 MongoDB</strong> .</h2>\n<ul>\n<li>淘宝用户数据\n<ul>\n<li>存储位置：数据库<br />\n特征：永久性存储，修改频度极低</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1BpZ1BpZ0xldHNHby9pbWVhZ2VzL21hc3Rlci8yMDI0MDEwMzE2NTQ0OTQucG5n\">https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031654494.png</span>&quot; alt=&quot;image-20230508172121935&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<ul>\n<li>游戏装备数据，游戏道具数据\n<ul>\n<li>存储位置：数据库，MongoDB</li>\n<li>特征：永久性存储与临时存储相结合，修改频度较高</li>\n</ul>\n</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1BpZ1BpZ0xldHNHby9pbWVhZ2VzL21hc3Rlci8yMDI0MDEwMzE2NTQ1NjQucG5n\">https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031654564.png</span>&quot; alt=&quot;image-20230508172300193&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>可以记录一些数据库，并且这个数据有很高的修改频率这种数据不太适合进数据库，而比较适合进 MongoDB 中</p>\n<h2 id=\"mongodb的下载\"><a class=\"anchor\" href=\"#mongodb的下载\">#</a> MongoDB 的下载</h2>\n<p>进入官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vdHJ5L2Rvd25sb2FkL2NvbW11bml0eS1rdWJlcm5ldGVzLW9wZXJhdG9y\">MongoDB</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031654073.png\" alt=\"image-20230514194355932\" /></p>\n<p>下载完成后进行解压:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031654323.png\" alt=\"image-20230514194620731\" /></p>\n<p>进入解压后的文件夹中查看结构：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031654953.png\" alt=\"image-20230514194734924\" /></p>\n<p>在 MongoDB 解压后的路面中创建一个存储数据的文件夹:data</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655399.png\" alt=\"image-20230514194931585\" /></p>\n<p>在创建一个数据存储相关的文件:db</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655089.png\" alt=\"image-20230514195004382\" /></p>\n<p>在 bin 中 MongoDB 的执行文件是: mongod.exe</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655736.png\" alt=\"image-20230514195231717\" /></p>\n<p>在 MongoDB 目录中打开在当前位置下的 Terminal (终端)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655531.png\" alt=\"image-20230514195607777\" /></p>\n<p>在 Terminal 中输入指令：mongod [指定存储位置] --dbpath=../data/db , 完整的指令如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongod <span class=\"token parameter variable\">--dbpath</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/data/db</pre></td></tr></table></figure><p>执行指令后的情况如下：这是相关数据的创建过程，犹如启动 Redis 中的 redis-server 一样</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655165.png\" alt=\"image-20230514195504118\" /></p>\n<p>默认端口号为：27017</p>\n<p>再查看 db 文件夹下的情况如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655245.png\" alt=\"image-20230514195841419\" /></p>\n<h2 id=\"进入到mongodb中\"><a class=\"anchor\" href=\"#进入到mongodb中\">#</a> 进入到 MongoDB 中</h2>\n<p>到 MongoDB 的 bin 目录下，执行指令：mongo 启动 MongoDB</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongo</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031655792.png\" alt=\"image-20230514200129070\" /></p>\n<h2 id=\"方式2配置文件方式启动服务重要\"><a class=\"anchor\" href=\"#方式2配置文件方式启动服务重要\">#</a> 方式 2：配置文件方式启动服务 (重要)</h2>\n<p>部署项目使用该方式，以上的启动方式便以调试使用</p>\n<p>在解压目录中新建 config 文件夹，该文件夹新建配置文件 mongod.conf，内容参考如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031656962.png\" alt=\"image-20230603091350281\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031656079.png\" alt=\"image-20230603091719879\" /></p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance sotres its data.Default value is \"\\data\\db\" on Windows.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token key atrule\">dbPath</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>配置路径，也就是到db目录的绝对路径<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意：</p>\n<p>配置文件中如果使用双引号，比如路径地址，自动会将双引号的内容转义，如果不转义，则会报错：</p>\n<pre><code>error-parsing-yaml-config-file-yaml-cpp-error-at-line-3-column-15-unknown-escape-character-d\n</code></pre>\n<p>解决：</p>\n<ol>\n<li>对 <code>\\</code>  换成 <code>/</code>  或 <code>//</code></li>\n<li>如果路径中没有空格，则无需加引号</li>\n<li>配置文件中不能以 Tab 分割字段</li>\n</ol>\n<p>解决：</p>\n<p>将其转换成空格。</p>\n<p>启动方式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongod <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">..</span>/config/mongod.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongod <span class=\"token parameter variable\">--config</span> <span class=\"token punctuation\">..</span>/config/mongod.conf</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031656411.png\" alt=\"image-20230603094012602\" /></p>\n<p>更多参数配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">systemLong</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> file</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mondod mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>mongod.log文件绝对路径地址<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token key atrule\">logAppend</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token key atrule\">journal</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance storage its data.Default value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token key atrule\">dbPath</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>配置路径，也就是到db目录的绝对路径<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">net</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token comment\">#bindIp: 127.0.0.1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key atrule\">setParameter</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token key atrule\">enableLocalhostAuthBypass</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr></table></figure><h2 id=\"shell连接mongo命令\"><a class=\"anchor\" href=\"#shell连接mongo命令\">#</a> Shell 连接 (mongo 命令)</h2>\n<p>在命令提示符输入以下 Shell 命令即可完成登录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mongo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mongo <span class=\"token parameter variable\">--host</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">--port</span><span class=\"token operator\">=</span><span class=\"token number\">27017</span></pre></td></tr></table></figure><p>查看已经有的数据库</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show databases</pre></td></tr></table></figure><p>退出 mongodb</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><p>更多参数可以通过帮助查看：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> mongo <span class=\"token parameter variable\">--help</span></pre></td></tr></table></figure><p>提示：</p>\n<p>MongoDB javascript Shell 是一个基于 javascript 的解释器，故是支持 js 程序的。</p>\n<h2 id=\"linux系统中的安装启动和连接\"><a class=\"anchor\" href=\"#linux系统中的安装启动和连接\">#</a> Linux 系统中的安装启动和连接</h2>\n<p>目标：在 Linux 中部署一个单机的 MongoDB，作为生产环境下使用。</p>\n<p>提示：和 Windows 下操作差不多。</p>\n<p>步骤如下：</p>\n<ol>\n<li>先到官网下载压缩包：mongodb-linux-x86_64-4.0.10.tgz</li>\n<li>上传压缩包到 Linux 中 ，解压到当前目录</li>\n</ol>\n<pre><code>tar -xvf mongodb-linux-x86_64-4.0.10.tgz\n</code></pre>\n<ol start=\"3\">\n<li>移动解压后的文件夹到指定的目录中：</li>\n</ol>\n<pre><code>mv mongodb-linxu-x86_64-4.0.10 /usr/local/mongodb\n</code></pre>\n<ol start=\"4\">\n<li>新建几个目录，分别用来存储数据和日志：</li>\n</ol>\n<pre><code>#数据存储目录\nmkdir -p /mongodb/single/data/db\n#日志存储目录\nmkdir -p /mongodb/single/log\n</code></pre>\n<ol start=\"5\">\n<li>新建并修改配置文件</li>\n</ol>\n<pre><code>vi /mongodb/single/mongod.conf\n</code></pre>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemLog:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">#MongoDB 发送所有日志输出的目标指定为文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">#The path of the log file to which mongod or mongos should send all diagnostic logging information</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> destination: <span class=\"token function\">file</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">#mongod 或 mongos 应向其发送所有诊断日志记录信息的日志文件的路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> path: <span class=\"token punctuation\">[</span>mongod.log绝对路径<span class=\"token punctuation\">]</span>比如：<span class=\"token string\">\"/mongodb/single/log/mongod.log\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">#当 mongos 或 mongod 实例重新启动时，mongos 或 mongod 会将新条目附加到现有日志文件的末尾。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> logAppend: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>storage:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">#mongod 实例存储其数据的目录。storage.dbPath 设置仅适用于 mongod。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token comment\">#The directory where the mongod instance stores its data.Defaul value is \"/data/db\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> dbPath: <span class=\"token string\">\"/mongodb/single/data/db\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> journal:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#启用或禁用持久性日志以确保数据文件保持有效和可恢复</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  enabled: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>processManagement:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#启用在后台运行 mongos 或 mongod 进程的守护进程模式。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  fork: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>net:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">#服务实例绑定 IP，默认是 localhost</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  bindIp: localhost192.168.0.2</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">#bindIp</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">#绑定的端口，默认是 27017</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  port: <span class=\"token number\">27017</span></pre></td></tr></table></figure><p>6. 启动 MongoDB 服务</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@localhost<span class=\"token punctuation\">]</span>/% /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>about to fork child process, waiting <span class=\"token keyword\">until</span> server is ready <span class=\"token keyword\">for</span> connections.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forked process: <span class=\"token number\">2708</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>child process started successfully, parent exiting</pre></td></tr></table></figure><p>注意：</p>\n<p>如果启动后不是 successfully，则是启动失败了。原因基本上就是配置文件有问题</p>\n<p>通过进程来查看服务是否启动了：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx0@localhost<span class=\"token punctuation\">]</span>/% <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span><span class=\"token function\">grep</span> mongod<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx0       <span class=\"token number\">2708</span>      <span class=\"token number\">1</span>  <span class=\"token number\">1</span> 03:30 ?        00:00:05 /usr/local/mongodb/bin/mongod <span class=\"token parameter variable\">-f</span> /mongodb/single/log/mongod.conf</pre></td></tr></table></figure><p>7. 分别使用 mongo 命令和 compass 工具来连接测试</p>\n<p>提示：如果远程连接不上，需要配置防火墙放行，或直接关闭 Linux 防火墙</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看防火墙状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl status firewalld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#临时关闭防火墙</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl stop firewalld</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#开机禁止启动防火墙</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>systemctl disable firewalld</pre></td></tr></table></figure><p>8. 停止关闭服务</p>\n<p>停止服务的方式有两种：快速关闭和标准关闭，下面依次说明：</p>\n<p>一，快速关闭方法 (快速，简单，数据可能会出错)</p>\n<p>目标：通过系统的 kill -9 命令直接杀死进程</p>\n<p>杀完要检查一下，避免有的没有杀掉</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#通过进程编号关闭节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-2</span> <span class=\"token number\">54410</span></pre></td></tr></table></figure><p>[补充]</p>\n<p>如果一旦是因为数据损坏，则需要进行如下操作：</p>\n<p>1. 删除 lock 文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> /mongodb/single/data/db/*.lock</pre></td></tr></table></figure><p>2. 修复数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/local/mongdb/bin/mongod <span class=\"token parameter variable\">--repair</span> <span class=\"token parameter variable\">--dbpath</span><span class=\"token operator\">=</span>/mongodb/single/data/db</pre></td></tr></table></figure><p>二，标准的关闭方法 (数据不容易出错，但麻烦)</p>\n<p>目标：通过 mongo 客户端中的 shutdownServer 命令来关闭服务。</p>\n<p>主要的操作步骤参考如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#客户端登录服务，注意，这里通过 localhost 登录，如果需要远程登录，必须先登录认证才行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mongo <span class=\"token parameter variable\">--port</span> <span class=\"token number\">27016</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#切换到 admin 库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>use admin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#关闭服务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db.shutdownServer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>连接 linux 中的 mongo，指定 IP 和端口号即可。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031656672.png\" alt=\"image-20230603154442420\" /></p>\n",
            "tags": [
                "计算机学科",
                "database",
                "mongodb",
                "计算机学科",
                "database",
                "mongodb"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/database/mongodb/MongoDB%E5%85%A5%E9%97%A8/",
            "url": "https://pigpigletsgo.github.io/computer-science/database/mongodb/MongoDB%E5%85%A5%E9%97%A8/",
            "title": "MongoDB入门",
            "date_published": "2024-01-03T09:06:00.072Z",
            "content_html": "<h2 id=\"mongodb相关概念\"><a class=\"anchor\" href=\"#mongodb相关概念\">#</a> MongoDB 相关概念</h2>\n<h3 id=\"业务应用场景\"><a class=\"anchor\" href=\"#业务应用场景\">#</a> 业务应用场景</h3>\n<p>传统的关系型数据库 (如 MySQL)，在数据库操作的 &quot;三高&quot; 需求以及应对 Web2.0 的网站需求，显得力不从心</p>\n<p><strong>解释</strong>：&quot;三高&quot; <strong>需求</strong>：</p>\n<ul>\n<li>High performance - 对数据库高并发读写的需求。</li>\n<li>Huge Storage - 对海量数据的高效率存储和访问的需求。</li>\n<li>High Scalabillity &amp;&amp; High Availability - 对数据库的高可扩展性和高可用性的需求。</li>\n</ul>\n<p>而 MongoDB 可应对 &quot;三高&quot; 需求。</p>\n<p><strong>具体的应用场景如</strong>：</p>\n<ol>\n<li>社交场景，使用 MongoDB 存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人，地点等功能。</li>\n<li>游戏场景，使用 MongoDB 存储游戏用户信息，用户的装备，积分等直接以内嵌文档的形式存储，方便查询，高效率存储和访问。</li>\n<li>物流场景，使用 MongoDB 存储订单信息，订单状态在运送过程中会不断更新，以 MongoDB 内嵌数据的形式来存储，一次查询就能将订单所有的变更读取出来。</li>\n<li>物联网场景，使用 MongoDB 存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。</li>\n<li>视频直播，使用 MongoDB 存储用户信息，点赞互动信息等。</li>\n</ol>\n<p>这些应用场景中，数据操作方面的共同特点是：</p>\n<ol>\n<li>数据量大</li>\n<li>写入操作频繁 (读写很频繁)</li>\n<li>价值较低的数据，对事物要求性不高</li>\n</ol>\n<p>对于这样的数据，我们更适合使用 MongoDB 来实现数据的存储</p>\n<h3 id=\"什么时候选择mongodb\"><a class=\"anchor\" href=\"#什么时候选择mongodb\">#</a> 什么时候选择 MongoDB</h3>\n<p>在构架选型上，除了上述的三个特点外，如果你还犹豫是否选择它，可以考虑以下的一些问题：</p>\n<p>应用不需要事务以及复杂 join 支持</p>\n<p>新应用，需求会变，数据模型无法确定，想快速迭代开发</p>\n<p>应用需要 2000~3000 以上的读写 QPS (更高也可以)</p>\n<p>应用需要 TB 甚至 PB 级别数据存储</p>\n<p>应用要求存储的数据不丢失</p>\n<p>应用需要 99.999% 高可用</p>\n<p>应用需要大量的地理位置查询，文本查询</p>\n<p>如果上述有 1 个符合，可以考虑 MongoDB，2 个以及的符合，选择 MongoDB 绝不会后悔</p>\n<p>思考：如果用 MySQL 呢？</p>\n<p>答：相对 MySQL，可以以更低的成本解决问题 (包括学习，开发，运维等成本)</p>\n<h3 id=\"mongodb简介\"><a class=\"anchor\" href=\"#mongodb简介\">#</a> MongoDB 简介</h3>\n<p>MongoDB 是一个开源，高性能，无模式的文档型数据库，当初的设计就是用于简化开发和方便扩展，是 NoSQL 数据库产品的一种，是最像关系型数据库 (MySQL) 的非关系型数据库。</p>\n<p>它支持的数据结构非常松散，是一种类似于 JSON 的格式叫 BSON，所以它既可以存储比较复杂的数据类型，有相当灵活。</p>\n<p>MongoDB 中的记录是一个文档，它是一个由字段和值对 (field:value) 组成的数据结构，MongoDB 文档类似于 JSON 对象，即一个文档认为就是一个对象，字段的数据类型是字符串，它的值除了使用基本的一些类型外，还可以包括其它文档，普通数组和文档数组。</p>\n<h2 id=\"体系结构\"><a class=\"anchor\" href=\"#体系结构\">#</a> 体系结构</h2>\n<p>MySQL 和 MongoDB 对比</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031701137.png\" alt=\"image-20230602204736615\" /></p>\n<table>\n<thead>\n<tr>\n<th>SQL 术语 / 概念</th>\n<th>MongoDB 术语 / 概念</th>\n<th>解释 / 说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>database</td>\n<td>databse</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表 / 集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>数据记录行 / 文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>数据字段 (列)/ 域 (字段)</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>table joins</td>\n<td></td>\n<td>表连接，MongoDB 不支持</td>\n</tr>\n<tr>\n<td></td>\n<td>嵌入文档</td>\n<td>MongoDB 通过嵌入式文档来替代多表连接</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键，MongoDB 自动将_id 字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据模型\"><a class=\"anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p>MongoDB 的最小存储单位就是文档 (document) 对象，文档 (document) 对象对应于关系型数据库的行，数据在 MongoDB 中以 BSON (Binary-JSON) 文档的格式存储在磁盘上。</p>\n<p>BSON (Binary Serialized Document Format) 是一种类似 json 的一种二进制形式的存储格式，简称 Binary JSON。</p>\n<p>BSON 和 JSON 一样，支持内嵌的文档对象和数组对象，但是 BSON 有 JSON 没有的一些数据类型，如 Date 和 BinData 类型。</p>\n<p>BSON 采用了类似于 C 语言结构体的名称，对表示方法，支持内嵌的文档对象和数组对象，具有轻量性，可遍历性，高效性的三个特点，可以有效描述非结构化数据的结构化数据。这种格式的有点是灵活性高，但它的缺点是空间利用率不是很理想。</p>\n<p>Bson 中，除了基本的 JSON 类型：string，integer，boolean，double，null，array 和 object，mongo 还是用了特殊的数据类型，这些类型包括 date，object，binary，data，regular，expression 和 code。每一个驱动都以特定语言的方式实现了这些类型，查看你的驱动的文档来获取详细信息。</p>\n<p>BSON 数据类型参考列表：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr x:foobar=\"\">\n<td>字符串</td>\n<td>UTF-8 字符串都可以表示为字符串类型的数据</td>\n<td></td>\n</tr>\n<tr x:ObjectId()=\"\">\n<td>对象 id</td>\n<td>对象 id 是文档的 12 字节的唯一 ID</td>\n<td></td>\n</tr>\n<tr>\n<td>布尔值</td>\n<td>真或者假：true 或者 false</td>\n<td>{&quot;x&quot;:true}+</td>\n</tr>\n<tr x:[a,b,c]=\"\">\n<td>数组</td>\n<td>值的集合或者列表可以表示成数组</td>\n<td></td>\n</tr>\n<tr>\n<td>32 位整数</td>\n<td>类型不可用，JavaScript 仅支持 64 位浮点数，所以 32 位整数会被自动转换</td>\n<td>shell 是不支持该类型的，shell 中默认会转换成 64 位浮点数</td>\n</tr>\n<tr x:3.14159,y:3=\"\">\n<td>64 位浮点数</td>\n<td>shell 中的数字就是一种类型</td>\n<td></td>\n</tr>\n<tr x:null=\"\">\n<td>null</td>\n<td>表示空值或者未定义的对象</td>\n<td></td>\n</tr>\n<tr x:undefined=\"\">\n<td>undefined</td>\n<td>文档中也可以使用未定义类型</td>\n<td></td>\n</tr>\n<tr>\n<td>符号</td>\n<td>shell 不支持，shell 会将数据库中的符号类型的数据自动转换成字符串</td>\n<td></td>\n</tr>\n<tr x:foobari=\"\">\n<td>正则表达式</td>\n<td>文档中可以包含正则表达式，采用 JavaScript 的正则表达式</td>\n<td></td>\n</tr>\n<tr>\n<td>代码</td>\n<td>文档中还可以包含 JavaScript 代码</td>\n<td>{&quot;x&quot;:function(){/* .... */}}</td>\n</tr>\n<tr>\n<td>二进制数据</td>\n<td>二进制数据可以由任意字节的串组成，不过 shell 中无法使用</td>\n<td></td>\n</tr>\n<tr>\n<td>最大值 / 最小值</td>\n<td>BSON 包括一个特殊类型，表示可能的最大值 shell 中没有这个类型</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>提示：</p>\n<p>shell 默认使用 64 位浮点值。{&quot;x&quot;:3.14} 或 {&quot;x&quot;:3}。对于整型值，可以使用 NumberInt (4 个字节符号整数) 或 NumberLong (8 字节符号整数)，{&quot;x&quot;:NumberInt (&quot;3&quot;){&quot;x&quot;:NumberLong (&quot;3&quot;)}}</p>\n<h2 id=\"mongodb的特点\"><a class=\"anchor\" href=\"#mongodb的特点\">#</a> MongoDB 的特点</h2>\n<p>MongoDB 主要有如下特点：</p>\n<p>1. 高性能</p>\n<p>MongoDB 提供高性能的数据持久性，特别是对嵌入式数据模型的支持减少了数据库系统上的 I/O 活动。</p>\n<p>索引支持更快的查询，并且可以包含来自嵌入式文档和数组的键。(文本索引解决搜索的要求，TTL 索引解决历史数据自动过期的需求，地理位置索引可用于构建各种 O2O 应用)</p>\n<p>mmapv1，wiredtiger，mongorocks (rocksdb)，in-memory 等多引擎支持满足各种场景需求。</p>\n<p>Gridfs 解决文件存储的需求。</p>\n<p>2. 高可用性</p>\n<p>MongoDB 的复制工具成为副本集 (replica set)，它可提供自动故障转移和数据冗余。</p>\n<p>3. 高扩展性</p>\n<p>MongoDB 提供了水平可扩展性作为其核心功能的一部分。</p>\n<p>分片将数据分布在一组集群的机器上。(海量数据存储，服务能力水平扩展)</p>\n<p>从 3.4 开始，MongoDB 支持基于片创建数据区域，在一个平衡的集群中，MongoDB 将一个区域所覆盖的读写只定向到该区域内的那些片。</p>\n<p>4. 丰富的查询支持</p>\n<p>MongoDB 支持丰富的查询语言，支持读和写操作 (CRUD)，比如数据聚合，文本搜索和地理空间查询等。</p>\n<p>5. 其它特点：如无模式 (动态模式)，灵活的文档模型</p>\n<h2 id=\"基本常用命令\"><a class=\"anchor\" href=\"#基本常用命令\">#</a> 基本常用命令</h2>\n<h3 id=\"案例需求\"><a class=\"anchor\" href=\"#案例需求\">#</a> 案例需求：</h3>\n<p>存放文章评论的数据存放到 MongoDB 中，数据结构参考如下：</p>\n<p>数据库：articledb</p>\n<table>\n<thead>\n<tr>\n<th>专栏文章评论</th>\n<th>comment</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字段名称</td>\n<td>字段含义</td>\n<td>字段类型</td>\n<td>备注</td>\n</tr>\n<tr>\n<td>_id</td>\n<td>ID</td>\n<td>ObjectId 或 String</td>\n<td>Mongo 的主键的字段</td>\n</tr>\n<tr>\n<td>articleid</td>\n<td>文章 ID</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>content</td>\n<td>评论内容</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>userid</td>\n<td>评论人 ID</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>nickname</td>\n<td>评论人昵称</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>createdatetime</td>\n<td>评论的日期时间</td>\n<td>Date</td>\n<td></td>\n</tr>\n<tr>\n<td>likenum</td>\n<td>点赞数</td>\n<td>int32</td>\n<td></td>\n</tr>\n<tr>\n<td>replynum</td>\n<td>回复数</td>\n<td>int32</td>\n<td></td>\n</tr>\n<tr>\n<td>state</td>\n<td>状态</td>\n<td>String</td>\n<td>0：不可见，1：可见</td>\n</tr>\n<tr>\n<td>parentid</td>\n<td>上级 ID</td>\n<td>String</td>\n<td>如果为 0 表示文章的顶级评论</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数据库操作\"><a class=\"anchor\" href=\"#数据库操作\">#</a> 数据库操作</h2>\n<h3 id=\"选择和创建数据库\"><a class=\"anchor\" href=\"#选择和创建数据库\">#</a> 选择和创建数据库</h3>\n<p>选择和创建数据库的语法格式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> use 数据库名称</pre></td></tr></table></figure><p>如果数据库不存在则自动创建，例如，以下语句创建 spitdb 数据库：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> use articledb</pre></td></tr></table></figure><p>查看有权限查看的所有数据库命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> show databases</pre></td></tr></table></figure><blockquote>\n<p>注意：在 MongoDB 中，集合只有在内容插入后才会创建！就是说，创建集合 (数据表) 后要再插入一个文档 (记录)，集合才会真正创建。</p>\n</blockquote>\n<p>查看当前正在使用的数据库命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db</pre></td></tr></table></figure><p>MongoDB 中默认的数据库为 test，如果你没有选择数据库，集合将存放在 test 数据库中。</p>\n<p>另外：</p>\n<p>数据库名可以是满足以下条件的任意 UTF-8 字符串。</p>\n<ul>\n<li>不能是空字符串 (&quot;&quot;)</li>\n<li>不得含有 ' '(空格)，.，$，/，\\，和 \\0 (空字符)</li>\n<li>应全部小写</li>\n<li>最多 64 字节</li>\n</ul>\n<p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库</p>\n<ul>\n<li>admin：从权限的角度来看，这是 &quot;roor&quot; 数据库，要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器</li>\n<li>local：这个数据库的数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>\n<li>config：当 Mongo 用于分片设置时，config 数据库在内部使用，用于保存分片的相关信息</li>\n</ul>\n<p>创建数据库：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>config  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">local</span>   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> use articledb</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>switched to db articledb</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> show dbs</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>admin   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>config  <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">local</span>   <span class=\"token number\">0</span>.000GB</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以看到检查数据库时并没有 articledb 这是为什么呢，看如下解释：</p>\n<blockquote>\n<p>MongoDB 的存储分为两部分：当使用 use articledb 创建数据库时存放到了内存中了，没有持久化到磁盘所以使用 show dbs 是看不到的，当 articledb 中有一个集合的时候，不是一个空的数据库的时候就会自动持久化到磁盘中</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031701895.png\" alt=\"image-20230603161134922\" /></p>\n<p>查看当前所在的数据库：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>articledb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"数据库的删除\"><a class=\"anchor\" href=\"#数据库的删除\">#</a> 数据库的删除</h3>\n<p>MongoDB 删除数据库的语法格式如下：在要删除的数据库中执行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.dropDatabase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：主要用来删除已经持久化的数据库</p>\n<h3 id=\"集合操作\"><a class=\"anchor\" href=\"#集合操作\">#</a> 集合操作</h3>\n<p>集合，类似关系型数据库中的表</p>\n<p>可以显示的创建，也可以隐式的创建</p>\n<h3 id=\"集合的显示创建\"><a class=\"anchor\" href=\"#集合的显示创建\">#</a> 集合的显示创建</h3>\n<p>基本语法格式：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.createCollection<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数说明：</p>\n<ul>\n<li>name：要创建的集合名称</li>\n</ul>\n<p>例如：创建一个名为 mycollection 的普通集合</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.createCollection<span class=\"token punctuation\">(</span><span class=\"token string\">\"mycollection\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查看当前数据库中的表：show tables 命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show collections</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr></table></figure><p>集合的命名规范：</p>\n<ul>\n<li>集合名不能是空字符串</li>\n<li>集合名不能含有 \\0 字符 (空字符)，这个字符表示集合名的结尾</li>\n<li>集合名不能以 &quot;system.&quot; 开头，这是为系统集合保留的前缀</li>\n<li>用户创建的集合名字不能含有保留字符，有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符，除非你要访问这种系统创建的集合，否则千万不要在名字里出现 $</li>\n</ul>\n<h3 id=\"集合的隐式创建\"><a class=\"anchor\" href=\"#集合的隐式创建\">#</a> 集合的隐式创建</h3>\n<p>当向一个集合插入一个文档的时候，如果集合不存在，则会自动创建集合。</p>\n<p>详见文档的插入 章节。</p>\n<p>提示：通常我们使用隐式创建文档即可。</p>\n<h3 id=\"集合的删除\"><a class=\"anchor\" href=\"#集合的删除\">#</a> 集合的删除</h3>\n<p>集合的删除语法格式如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.集合.drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>返回值</strong></p>\n<p>如果成功删除选定集合，则 drop () 方法返回 true，否则返回 false</p>\n<p>例如：要删除 mycollection 集合</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.mycollection.drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.name.drop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"文档基本crud\"><a class=\"anchor\" href=\"#文档基本crud\">#</a> 文档基本 CRUD</h2>\n<p>文档 (document) 的数据结构和 JSON 基本一样。</p>\n<p>所有存储在集合中的数据都是 BSON 格式</p>\n<h3 id=\"文档的插入\"><a class=\"anchor\" href=\"#文档的插入\">#</a> 文档的插入</h3>\n<h4 id=\"1单个文档插入\"><a class=\"anchor\" href=\"#1单个文档插入\">#</a> 1. 单个文档插入</h4>\n<p>使用 insert () 或 save () 方法向集合中插入文档，语法格式如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.insert<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>document or array of documents<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\twriteConcern: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tordered: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">示例</caption>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>document</td>\n<td>document or array</td>\n<td>要插入到集合中的文档或文档数组 (json 格式)</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>document</td>\n<td>Optional.A document expressing the write concern.Omit to use the&lt;br&gt;default write concern.See write <span class=\"exturl\" data-url=\"aHR0cDovL0NvbmNlcm4uRG8=\">Concern.Do</span> not explicitly set the write&lt;br&gt;concerrn for  the operation if run in a <span class=\"exturl\" data-url=\"aHR0cDovL3RyYW5zYWN0aW9uLlRv\">transaction.To</span> use write concern&lt;br&gt;with transactions,see Transactions and Write Concern</td>\n</tr>\n<tr>\n<td>orrderd</td>\n<td>boolean</td>\n<td>可选，如果为真，则按顺序插入数组中的文档 ，如果其中一个文档出现错误，MongoDB 将返回而不处理数组中其余文档，如果为假，则执行无序插入，如果其中一个文档出现错误，则继续处理数组中的主文档，在版本 2.6 + 中默认为 true</td>\n</tr>\n</tbody>\n</table>\n<p>要向 comment 的集合 (表) 中插入一条测试数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.insert<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10000\"</span>,<span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"今天天气真好\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1001\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Rose\"</span>,<span class=\"token string\">\"createdatetime\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"now Date()\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span>:null<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：</p>\n<ol>\n<li>comment 集合如果不存在，则会隐式创建</li>\n<li>mongo 中的数字，默认情况下是 double 类型，如果要存储整型，必须使用函数 NumberInt (整型数字)，否则取出来就有问题了</li>\n<li>插入当前日期使用 now Date ()</li>\n<li>插入的数据没有指定_id，会自动生成主键值</li>\n<li>如果某字段没有值，可以赋值为 null，或不写该字段</li>\n</ol>\n<p>执行后，如下，说明插入一个数据成功了。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nInserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在数据库中没有任何的集合：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>向一个不存在的集合插入数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>uncaught exception: Error: no object passed to insert<span class=\"token operator\">!</span> <span class=\"token builtin class-name\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DBCollection.prototype.insert@src/mongo/shell/collection.js:275:15</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>@<span class=\"token punctuation\">(</span>db.comment.insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1000\"</span>,<span class=\"token string\">\"content\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"今天天气真好\"</span>,<span class=\"token string\">\"useid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1001\"</span>,<span class=\"token string\">\"inckname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Rose\"</span>,<span class=\"token string\">\"createdatetime\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"now Date()\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span>:null<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>001<span class=\"token string\">\",\"</span>incknam<span class=\"token string\">\"&#125;)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WriteResult(&#123; \"</span>nInserted\" <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> show tables</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>comment</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看集合中插入的数据：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647b250656447c36332f1c37\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1000\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"今天天气真好\"</span>, <span class=\"token string\">\"useid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1001\"</span>, <span class=\"token string\">\"inckname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Rose\"</span>, <span class=\"token string\">\"createdatetime\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"now Date()\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>, <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> null <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>不存在的集合就被隐式的创建了。</p>\n<p><mark>注意</mark>：</p>\n<ol>\n<li>文档中 的键 / 值对是有序的</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其它几种数据类型 (甚至可以是整个嵌入的文档)</li>\n<li>MongoDB 区分类型和大小写</li>\n<li>MongoDB 的文档不能有重复的键</li>\n<li>文档的键是字符串，除了少数例外情况，键可以使用任意 UTF-8 字符</li>\n</ol>\n<p>文档键命名规范：</p>\n<ul>\n<li>键不能含有 \\0 (空字符)，这个字符用来表示键的结尾。</li>\n<li>. 和 $ 有特别的意义，只有在特定环境下才能使用</li>\n<li>以下划线 &quot;_&quot; 开头的键是保留的 (不是严格要求的)</li>\n</ul>\n<h4 id=\"2批量插入\"><a class=\"anchor\" href=\"#2批量插入\">#</a> 2. 批量插入</h4>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.insertMany<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>document <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>,<span class=\"token operator\">&lt;</span>document <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token punctuation\">]</span>,<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\twriteConcern: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tordered: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">示例</caption>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>document</td>\n<td>document</td>\n<td>要插入到集合中的文档或文档数组 (json 格式)</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>document</td>\n<td>Optional.A document expressing the write concern.Omit to use the default write <span class=\"exturl\" data-url=\"aHR0cDovL2NvbmNlcm4uRG8=\">concern.Do</span> not explicitly set the write concern for the operation if run in a transaction. To use write concern with&lt;br&gt;transactions,see Transactions and write concern</td>\n</tr>\n<tr>\n<td>ordered</td>\n<td>boolean</td>\n<td>可选，一个布尔值，指定 Mongod 示例执行有序插入还是无序插入，默认为 true</td>\n</tr>\n</tbody>\n</table>\n<p>批量插入多条文章评论：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.insertMany<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span>,<span class=\"token string\">\"contet\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"我们不应该把清晨浪费在手机上，健康很重要，一杯温水幸福你我他\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1002\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"相忘于江湖\"</span>,<span class=\"token string\">\"createdatatime\"</span>:new Date<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-08-05T22:08:15.522Z\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span>,<span class=\"token string\">\"contet\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"我夏天空腹喝凉开水，冬天喝温开水\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1005\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"伊人憔悴\"</span>,<span class=\"token string\">\"createdatatime\"</span>:new Date<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-08-05T22:58:51.485Z\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">888</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"3\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span>,<span class=\"token string\">\"contet\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"我一直喝凉开水，冬天夏天都喝\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1004\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"杰克船长\"</span>,<span class=\"token string\">\"createdatatime\"</span>:new Date<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-08-05T22:05:51.485Z\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">888</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：</p>\n<p>插入时指定了_id，则主键就是该值</p>\n<p>如果某条数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉</p>\n<p>因为批量插入由于数据较多容易出现失败，因为，可以使用 try catch 进行异常捕获处理，测试的时候可以不处理，如 (了解)：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> try<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdb.comment.insertMany<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span>,<span class=\"token string\">\"contet\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"我们不应该把清晨浪费在手机上，健康很重要，一杯温水幸福你我他\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1002\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"相忘于江湖\"</span>,<span class=\"token string\">\"createdatatime\"</span>:new Date<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-08-05T22:08:15.522Z\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span>,<span class=\"token string\">\"contet\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"我夏天空腹喝凉开水，冬天喝温开水\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1005\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"伊人憔悴\"</span>,<span class=\"token string\">\"createdatatime\"</span>:new Date<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-08-05T22:58:51.485Z\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">888</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"3\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span>,<span class=\"token string\">\"contet\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"我一直喝凉开水，冬天夏天都喝\"</span>,<span class=\"token string\">\"userid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1004\"</span>,<span class=\"token string\">\"nickname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"杰克船长\"</span>,<span class=\"token string\">\"createdatatime\"</span>:new Date<span class=\"token punctuation\">(</span><span class=\"token string\">\"2019-08-05T22:05:51.485Z\"</span>,<span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">888</span><span class=\"token punctuation\">)</span>,<span class=\"token string\">\"state\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span>catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tprint<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> try<span class=\"token punctuation\">&#123;</span>db.comment.insertMany<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"1\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"2\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"_id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"3\"</span>,<span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>catch<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>print<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"acknowledged\"</span> <span class=\"token builtin class-name\">:</span> true, <span class=\"token string\">\"insertedIds\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"3\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>测试 - 嫌麻烦添加了比较少的数据</li>\n</ul>\n<h2 id=\"文档的基本查询\"><a class=\"anchor\" href=\"#文档的基本查询\">#</a> 文档的基本查询</h2>\n<p>查询数据的语法格式如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.find<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>query<span class=\"token operator\">></span>,<span class=\"token punctuation\">[</span>projection<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">示例</caption>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>query</td>\n<td>document</td>\n<td>可选，使用查询运算符指定选择筛选器，若要返回集合中的所有文档，请省略此参数或传递空文档 ({})</td>\n</tr>\n<tr>\n<td>projection</td>\n<td>document</td>\n<td>可选，指定要在与查询筛选器匹配的文档中返回的字段 (投影)，诺要返回匹配文档中的所有字段，请省略此参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1查询所有\"><a class=\"anchor\" href=\"#1查询所有\">#</a> 1. 查询所有</h3>\n<p>如果我们要查询 spit 集合的所有文档，我们输入以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里你会发现每条文档会有一个叫_id 的字段，这个相当于我们原来关系型数据库中表的主键，当你在插入文档记录时没有 指定该字段，MongoDB 会自动创建，其类型是 ObjectID 类型</p>\n<p>如果我们在插入文档记录时指定该字段也可以，其类型可以是 ObjectID 类型，也可以是 MongoDB 支持的任意类型</p>\n<p>如果我想按一定条件来查询，比如我想查询 userid 为 1003 的记录，怎么办？很简单！只要在 find () 中添加参数即可，参数也是 json 格式，如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>></span>db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">'1003'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果你只需要返回符合条件的第一条数据，我们可以使用 findOne 命令来实现，语法和 find 一样。</p>\n<p>如：查询用户编号是 1003 的记录，但只最多返回符合条件的第一条记录：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.findOne<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"articleid\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>2. 投影查询 (Projection Query)</p>\n<p>如果要查询结果返回部分字段，则需要使用投影查询 (不显示所有字段，只显示指定的字段)</p>\n<p>如：查询结果只显示 <code>_id，aticleid，nickname</code></p>\n<pre><code>&gt; db.comment.find(&#123;aticleid:&quot;10001&quot;&#125;,&#123;aticleid:1,nickname:1&#125;)\n&#123; &quot;_id&quot; : &quot;1&quot;, &quot;aticleid&quot; : &quot;10001&quot;, &quot;nickname&quot; : &quot;Rose&quot; &#125;\n&gt;\n</code></pre>\n<p>默认 <code>_id</code>  会显示</p>\n<p>如：查询结果只显示，aticleid，nickname，不显示 <code>_id</code>  :</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>aticleid:<span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>aticleid:1,nickname:1,_id:0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"aticleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Rose\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>再例如：查询所有数据，但只显示_id，aticleid，nickname；</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>aticleid:1,nickname:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"aticleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Rose\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"文档的更新\"><a class=\"anchor\" href=\"#文档的更新\">#</a> 文档的更新</h2>\n<p>更新文档的语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db.collection.update<span class=\"token punctuation\">(</span>query,update,options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>db.collection.update<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>query<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>update<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tupsert: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tmulti: <span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\twriteConcern: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tcollation: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">></span>,</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tarrayFilters: <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>filterdocument<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>,<span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\thint: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">|</span>string<span class=\"token operator\">></span> //Available starting <span class=\"token keyword\">in</span> MongoDB <span class=\"token number\">4.2</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>query</td>\n<td>document</td>\n<td>更新的选择条件，可以使用与 find () 方法中相同的查询选择器，类似 sql update 查询内 where 后面的，在 3.0 版中进行了更改：当使用 upsert:true 执行 update () 时，如果查询使用点表示法存在_id 字段上指定条件，则 MongoDB 将拒绝插入新文档</td>\n</tr>\n<tr>\n<td>update</td>\n<td>document or pipeline</td>\n<td>要应用的修改，该值可以是：包含更新运算符表达式的文档，或仅包含 &lt;field1&gt;: &lt;value &gt; 对的替换文档，或在 MongoDB4.2 中启动聚合管道，管道可以由以下阶段组成：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>d</mi><mi>d</mi><mi>F</mi><mi>I</mi><mi>e</mi><mi>l</mi><mi>d</mi><mi>s</mi><mtext>及其别名</mtext><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">addFIelds及其别名`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">及</span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">别</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord\">‘</span></span></span></span> <code>set</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‘</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext>及其别名</mtext><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">`project及其别名`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">‘</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">及</span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">别</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord\">‘</span></span></span></span> <code>unset</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‘</mi><mi>r</mi><mi>e</mi><mi>p</mi><mi>l</mi><mi>a</mi><mi>c</mi><mi>e</mi><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mtext>及其别名</mtext><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">`replaceroot及其别名`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">及</span><span class=\"mord cjk_fallback\">其</span><span class=\"mord cjk_fallback\">别</span><span class=\"mord cjk_fallback\">名</span><span class=\"mord\">‘</span></span></span></span> <code>replaceWith，换句话说：它是update的对象和一些更新的操作符(如</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‘</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">`,`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">‘</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‘</span></span></span></span>`inc...) 等，也可以理解为 sql update 查询内 set 后面的值</td>\n</tr>\n<tr>\n<td>upsert</td>\n<td>boolean</td>\n<td>可选，如果设置为 true，则在没有与查询条件匹配的文档时创建新文档，默认值为 false，如果找不到匹配项，则不会插入新文档</td>\n</tr>\n<tr>\n<td>multi</td>\n<td>boolean</td>\n<td>可选，如果设置为 true，则更新符合查询条件的多个文档，如果设置为 false，则更新一个文档，默认值为 fasle</td>\n</tr>\n<tr>\n<td>writeConcern</td>\n<td>document</td>\n<td>可选，表示写问题的文档，抛出异常的级别</td>\n</tr>\n<tr>\n<td>collation</td>\n<td>document</td>\n<td>可选 &lt;br&gt; 指定要用于操作的校对规则 &lt; br &gt; 校对规则允许用户为字符串比较指定特定与语言的规则，例如字母大小写和重音标记的规则 &lt; br &gt; 校对规则选项具有以下语句：&lt;br &gt; 校对规则：{&lt;br &gt; 区域设置:&lt;string&gt;,&lt;br&gt;caseLevel:&lt;boolean&gt;,&lt;br&gt;caseFirst:&lt;string&gt;,&lt;br &gt; 强度:&lt;int&gt;,&lt;br&gt;numericordering:&lt;boolean&gt;,&lt;br &gt; 替代:&lt;string&gt;,&lt;br &gt; 最大变量:&lt;string&gt;,&lt;br &gt; 向后:&lt;boolean&gt;&lt;br&gt;}&lt;br &gt; 指定校对规则时，区域设置字段是必须得，所有其它校对规则字段都是可选的，有关字段的说明，请参阅校对规则文档 &lt; br &gt; 如果未指定校对规则，但集合具有默认校对规则 (请参见 db.createCollection ())，则该操作将使用为集合指定的校对规则。&lt;br &gt; 如果没有为集合或操作指定校对规则，MongoDB 将使用以前的版本中使用的简单二进制比较进行字符串比较，不能为一个操作指定多个校对规则，例如，不能为每个字段指定不同的校对规则，或者如果使用排序执行查找，则不能将一个校对规则用于查找，另一个校对规则用于排序 &lt; br&gt;3.4 版新增</td>\n</tr>\n<tr>\n<td>arrayFilters</td>\n<td>array</td>\n<td>可选，一个筛选文档数组，用于确定要为数组字段上的更新操作修改那些数组元素，在更新文档中，使用 [ <code>$</code> <a href=\"\"></a>{}] 筛选的位置运算符来定义标识符，然后咋子数组过滤器文档中应用，如果标识符未包含在更新文档中，则不能有标识符的数组筛选器文档，注意，&lt;identifier &gt; 必须以小写字母开头，并且只包含字母数字字符，您可以在更新文档中多次包含同一标识符：但是，对于 r 在更新文档中，每个不同的标识符 ( <code>$</code> [标识符]) 都必须指定一个对应的数组筛选器文档，也就是说，不能为同一个标识符指定多个数组筛选器文档，3.6 版 +</td>\n</tr>\n<tr>\n<td>hint</td>\n<td>Document or string</td>\n<td>可选，指定用于支持查询谓词的索引的文档或字符串，该选项可以采用索引规范文档或索引名称字符串，如果指定的索引不存在，则说明操作错误，例如：版本 4 中的 未更新操作指定提示</td>\n</tr>\n</tbody>\n</table>\n<p>提示：</p>\n<p>主要关注前四个参数即可</p>\n<p>[示例]</p>\n<h3 id=\"1覆盖的修改\"><a class=\"anchor\" href=\"#1覆盖的修改\">#</a> 1. 覆盖的修改</h3>\n<p>如果我们想修改_id 为 1 的记录，点赞量为 1001，输入以下语句</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:1<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nMatched\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"nUpserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"nModified\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#注意这里的_id 为 1 的我不小心设置为了数据型的，而_id 为 2 设置为字符串型更改时也要对应数据类型才能找得到</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1001</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">889</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>执行后，我们会发现，这条文档除了 likenum 字段其它字段都不见了</p>\n<h3 id=\"2局部修改\"><a class=\"anchor\" href=\"#2局部修改\">#</a> 2. 局部修改</h3>\n<p>为了解决这个问题，我们需要使用修改器 <code>$</code> set 来实现，命令如下：</p>\n<p>我们想修改_id 为 2 的记录，浏览量为 889，输入以下语句：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:2<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span>likenum:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">889</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"2\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span>likenum:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">889</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nMatched\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"nUpserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"nModified\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"刘桑\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">889</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"小花\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>这样就 OK 了</p>\n<h3 id=\"3批量的修改\"><a class=\"anchor\" href=\"#3批量的修改\">#</a> 3. 批量的修改</h3>\n<p>更新所有用户为 1003 的用户的昵称为 凯撒大帝</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#默认只修改第一条数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span>nickname:<span class=\"token string\">\"凯撒2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#修改所有符合条件的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span>nickname:<span class=\"token string\">\"凯撒大帝\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>multi:true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$set</span>:<span class=\"token punctuation\">&#123;</span>nickname:<span class=\"token string\">\"凯撒大帝\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>multi:true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nMatched\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">\"nUpserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"nModified\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">889</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<p>如果不加后面的参数，则只更新符合条件的第一条记录</p>\n<h3 id=\"3列值增长的修改\"><a class=\"anchor\" href=\"#3列值增长的修改\">#</a> 3. 列值增长的修改</h3>\n<p>如果我们想实现对某列值在原有值的基础上进行增加或减少，可以使用 <code>$</code> inc 运算符来实现。</p>\n<p>需求：对 3 号数据的点赞数，每次递增 1</p>\n<pre><code>&gt; db.comment.update(&#123;_id:1&#125;,&#123;$inc:&#123;likenum:NumberInt(1)&#125;&#125;)\n</code></pre>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:1<span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$inc</span>:<span class=\"token punctuation\">&#123;</span>likenum:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nMatched\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"nUpserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"nModified\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1002</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">889</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$inc</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"likenum\"</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>multi:true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nMatched\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">\"nUpserted\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>, <span class=\"token string\">\"nModified\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"删除文档\"><a class=\"anchor\" href=\"#删除文档\">#</a> 删除文档</h2>\n<p>删除文档的语法结构：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.remove<span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以下语句可以将数据全部删除，请慎用</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果删除_id=1 的记录，输入以下语句，删除条件有多个会删除多个</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.comment.remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nRemoved\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.comment.remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>WriteResult<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nRemoved\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"文档的分页查询\"><a class=\"anchor\" href=\"#文档的分页查询\">#</a> 文档的分页查询</h2>\n<h3 id=\"统计查询\"><a class=\"anchor\" href=\"#统计查询\">#</a> 统计查询</h3>\n<p>统计查询使用 count () 方法，语法如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.count<span class=\"token punctuation\">(</span>query,options<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">示例</caption>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>query</td>\n<td>document</td>\n<td>查询选择条件</td>\n</tr>\n<tr>\n<td>options</td>\n<td>document</td>\n<td>可选，用于修改统计数的额外选项</td>\n</tr>\n</tbody>\n</table>\n<p>1. 统计所有记录数：</p>\n<p>统计 comment 集合的所有的记录数：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>2. 按条件统计记录：</p>\n<p>例如：统计 userid 为 1003 的记录条数</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"1\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.comment.count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>_id:<span class=\"token string\">\"2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<p>默认情况下 count () 方法返回符合条件的全部记录条数</p>\n<h3 id=\"分页列表查询\"><a class=\"anchor\" href=\"#分页列表查询\">#</a> 分页列表查询</h3>\n<p>可以使用 limit () 方法来读取指定数量的数据，使用 skip () 方法来跳过指定数量的数据</p>\n<p>基本语法格式如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.COLLECTION_NAME.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span>NUMBER<span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span>NUMBER<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果你想返回指定条数的记录，可以在 find 方法后调用 limit 来返回结果 (TopN)，默认值 20，例如：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>skip 方法同样接受一个数字参数作为跳过的记录条数，(前 N 个不要)，默认值是 0</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>分页查询：需求：每页 2 个，第二页开始：跳过前两条数据，接着值显示 3 和 4 条数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#第一页</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#第二页</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#第三页</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.skip<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>.limit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"排序查询\"><a class=\"anchor\" href=\"#排序查询\">#</a> 排序查询</h2>\n<p>sort () 方法对数据进行排序，sort () 方法可以通过参数指定排序的字段，并使用 1 和 - 1 来指定排序方式，其中 1 为升序排列，而 - 1 是用于降序排列</p>\n<p>语法如下所示：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment_name.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>KEY:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.sort<span class=\"token punctuation\">(</span>排序方式<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>例如：</p>\n<p>对 userid 降序排列，并对访问量进行升序排列</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1,likenum:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>.sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:-1,likenum:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示：</p>\n<p>skip ()，limit ()，sort () 三个放在一起执行的时候，执行的顺序是先 sort () 然后是 skip () 最后是显示的 limit () 和命令编写顺序无关</p>\n<p>sort &gt; skip &gt; limit</p>\n<h2 id=\"文档的更多查询\"><a class=\"anchor\" href=\"#文档的更多查询\">#</a> 文档的更多查询</h2>\n<h3 id=\"正则的复杂条件查询\"><a class=\"anchor\" href=\"#正则的复杂条件查询\">#</a> 正则的复杂条件查询</h3>\n<p>MongoDB 的模糊查询是通过正则表达式的方式实现的，格式为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>field:/正则表达式/<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>字段:/正则表达式/<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：正则表达式是 js 的语法，直接量的写法</p>\n<p>例如：我要查询评论内容包含 &quot;开水&quot; 的所有文档，代码如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>content:/开水/<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10003\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">100</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>content:/开水/<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10003\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">100</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"123\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>如果要查询评论的内容中以 &quot;专家&quot; 开头的，代码如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>content:/^专家/<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>content:/^专家/<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"比较查询\"><a class=\"anchor\" href=\"#比较查询\">#</a> 比较查询</h2>\n<p>&lt;，&lt;=，&gt;，&gt;= 这个操作符也是很常用的，格式如下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#大于：field > vlaue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"field\"</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gt</span>:value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#小于：field &lt; value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"field\"</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lt</span>:value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#大于等于：field >= value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"field\"</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gte</span>:value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#小于等于：field &lt;= value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"field\"</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lte</span>:value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#不等于：field != value</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">></span> db.集合名称.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"field\"</span>:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$ne</span>:value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>示例：查询评论带你赞数量大于 700 的记录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gt</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gt</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"包含查询\"><a class=\"anchor\" href=\"#包含查询\">#</a> 包含查询</h2>\n<p>包含使用 $in 操作符</p>\n<p>示例：查询评论的集合中 userid 字段包含 1003 和 1004 的文档</p>\n<pre><code class=\"language-shll\">&gt; db.comment.find(&#123;userid:&#123;$in:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)\n</code></pre>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$in</span>:<span class=\"token punctuation\">[</span><span class=\"token string\">\"1003\"</span>,<span class=\"token string\">\"1004\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10003\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">100</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"条件连接查询\"><a class=\"anchor\" href=\"#条件连接查询\">#</a> 条件连接查询</h2>\n<p>我们如果需要查询同时满足两个以上条件，需要使用 $and 操作符将条件进行关联 (相当于 SQL 的 and)</p>\n<p>格式为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$and</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>示例：查询评论集合中 likenum 大于等于 700 并且小于 2000 的文档</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$and</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>lienum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gte</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lt</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$and</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$gte</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lt</span>:NumberInt<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>如果两个以上条件之间是或者的关系，我们使用操作符进行关联，与前面 and 的使用方式相同</p>\n<p>格式为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$or</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>示例：查询评论集合中 userid 为 1003，或者点赞数小于 1000 的文档记录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$or</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lt</span>:1000<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$or</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lt</span>:1000<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1003</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10003\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">100</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$and</span>:<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>likenum:<span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$lt</span>:1000<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10002\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">890</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒大帝\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"专家表明\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10003\"</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">100</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"开水\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"常用命令小结\"><a class=\"anchor\" href=\"#常用命令小结\">#</a> 常用命令小结</h2>\n<p>选择切换数据库：use articledb</p>\n<p>插入数据：db.comment.insert ({bson 数据})</p>\n<p>查询所有数据：db.comment.find ()</p>\n<p>条件查询数据：db.cmoment.find ({条件})</p>\n<p>查询符合条件的第一条记录：db.comment.findOne ({条件})</p>\n<p>查询符合条件的前几条记录：db.comment.find ({条件}).limit (条数)</p>\n<p>查询符合条件的跳过的记录：db.comment.find ({条件}).skip (条数)</p>\n<p>修改数据：db.comment.update ({条件},{修改后的数据}) 或 db.comment.update ({条件},{$set:{要修改部分的字段：数据}})</p>\n<p>修改数据并自增某字段值：db.comment.update ({条件},{$inc:{自增的字段：步进值}})</p>\n<p>删除数据：db.comment.remove ({条件})</p>\n<p>统计查询：db.comment.count ({条件})</p>\n<p>模糊查询：db.comment.find ({字段名:/ 正则表达式 /})</p>\n<p>条件比较运算：db.comment.find ({字段名:{$gt: 值}})</p>\n<p>包含查询：db.comment.find ({字段名:{ <code>$</code> in:[值 1, 值 2]}}) 或 db.comment.find ({字段名:{ <code>$</code> nin:[值 1, 值 2]}})</p>\n<p>条件连接查询：db.comment.find ({ <code>$</code> and:[{条件 1},{条件 2}]}) 或 db.comment.find ({ <code>$</code> or:[{条件 1},{条件 2}])</p>\n<h2 id=\"索引的类型\"><a class=\"anchor\" href=\"#索引的类型\">#</a> 索引的类型</h2>\n<h3 id=\"单字段索引\"><a class=\"anchor\" href=\"#单字段索引\">#</a> 单字段索引</h3>\n<p>MongoDB 支持在文档的单个字段上创建用户定义的升序 / 降序索引，称为单字段索引 (Single Field Index)</p>\n<p>对于单个字段索引的排序操作，索引键的排序顺序 (即升序或降序) 并不重要，因为 MongoDB 可以在任何方向上遍历索引</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031702130.png\" alt=\"image-20230604161713948\" /></p>\n<h3 id=\"其它索引\"><a class=\"anchor\" href=\"#其它索引\">#</a> 其它索引</h3>\n<p>地理空间索引 (Geospatial Index)，文本索引 (Text Indexes)，哈希索引 (Hashed Indexes)</p>\n<h4 id=\"地理空间索引geospatial-index\"><a class=\"anchor\" href=\"#地理空间索引geospatial-index\">#</a> 地理空间索引 (Geospatial Index)</h4>\n<p>为了支持对地理空间坐标数据的有效查询，MongoDB 提供了两种特殊的索引：返回结果是使用平面几何的二维索引和返回结果时使用球面几何的二维球面索引</p>\n<h4 id=\"文本索引text-indexes\"><a class=\"anchor\" href=\"#文本索引text-indexes\">#</a> 文本索引 (Text Indexes)</h4>\n<p>MongoDB 提供了一种文本索引类型，支持在集合中搜索字符串内容，这些文本索引不存储特定于语言的停止词 (例如：&quot;the&quot;，&quot;a&quot;，&quot;or&quot;)，而将集合中的此作为词干，只存储跟词。</p>\n<h4 id=\"哈希索引hashed-indexes\"><a class=\"anchor\" href=\"#哈希索引hashed-indexes\">#</a> 哈希索引 (Hashed Indexes)</h4>\n<p>为了支持基于散列的分片，MongoDB 提供了散列索引类型，它对字段值的散列进行索引，这些索引在其范围内的值分布更加随机，但只支持相等匹配，不支持基于范围的查询</p>\n<h3 id=\"索引的管理操作\"><a class=\"anchor\" href=\"#索引的管理操作\">#</a> 索引的管理操作</h3>\n<h4 id=\"索引的查看\"><a class=\"anchor\" href=\"#索引的查看\">#</a> 索引的查看</h4>\n<p>说明：</p>\n<p>返回一个集合中的所有索引的数组。</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提示：该语法命令运行要求是 MongoDB 3.0+</p>\n<p>[示例]</p>\n<p>查看 comment 集合中所有的索引情况</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"_id_\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>结果中显示的是默认_id 索引</p>\n<p>默认_id 索引：</p>\n<p>MongoDB 在创建集合的过程中，在_id 字段上创建一个唯一的索引，默认名字为 <code>_id_</code> ，该索引可防止客户端插入两个具有相同值的文档，您不能在 <code>_id</code>  字段上删除此索引</p>\n<p>注意：该索引是唯一索引，因此值不能重复，即_id 值不能重复的，在分片集群中，通常使用 <code>_id</code>  作为片键</p>\n<h3 id=\"索引的创建\"><a class=\"anchor\" href=\"#索引的创建\">#</a> 索引的创建</h3>\n<p>说明：</p>\n<p>在集合上创建索引</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.createIndex<span class=\"token punctuation\">(</span>keys.options<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keys</td>\n<td>document</td>\n<td>包含字段和值对的文档，其中字段是索引键，值描述该字段的索引类型，对于字段上的升序索引，请指定值 1；对于降序索引，请指定值 - 1；比如：{字段：1 或 - 1}，其中 1 为指定按升序创建索引，如果你想按降序创建索引指定为 - 1 即可。另外 MongoDB 支持几种不同的索引类型，包括文本，地理空间和哈希索引</td>\n</tr>\n<tr>\n<td>options</td>\n<td>document</td>\n<td>可选，包含一组控制索引创建的选项的文档，有关详细信息，请参见选项详情列表</td>\n</tr>\n</tbody>\n</table>\n<p>options (更多选项) 列表：</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>background</td>\n<td>Boolean</td>\n<td>键索引过程会阻塞其它数据库操作，background 可指定以后台方式创建索引，即增加 &quot;background&quot; 可选参数，&quot;background&quot; 默认值为 false</td>\n</tr>\n<tr>\n<td>unique</td>\n<td>Boolean</td>\n<td>建立的索引是否唯一，指定为 true 创建唯一索引，默认值为 false</td>\n</tr>\n<tr>\n<td>name</td>\n<td>string</td>\n<td>索引的名称，如果未指定，MongoDB 的通过连接索引的字段名和排序生成一个索引名称</td>\n</tr>\n<tr>\n<td>dropDups</td>\n<td>Boolean</td>\n<td>3.0 + 版本已经废弃，在建立唯一索引时是否删除重复记录，指定 true 创建唯一索引，默认值为 false</td>\n</tr>\n<tr>\n<td>sparse</td>\n<td>Boolean</td>\n<td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为 true 的话，在索引字段中不会查询出不包含对应字段的文档，默认值为 false</td>\n</tr>\n<tr>\n<td>expireAfterSeconds</td>\n<td>integer</td>\n<td>指定一个以秒为单位的数值，完成 TTL 设定，设定集合的生存时间</td>\n</tr>\n<tr>\n<td>v</td>\n<td>index&lt;br&gt;version</td>\n<td>索引的版本号，默认的索引版本取决于 mongod 创建索引时运行的版本</td>\n</tr>\n<tr>\n<td>weights</td>\n<td>document</td>\n<td>索引权重值，数值在 1 到 99.999 之间，表示该索引相对于其它索引字段得分权重</td>\n</tr>\n<tr>\n<td>default_language</td>\n<td>string</td>\n<td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表，默认为英语</td>\n</tr>\n</tbody>\n</table>\n<p>提示：</p>\n<p>注意在 3.0.0 版本前创建索引方法为： <code>db.collection.ensureIndex()</code> ，之后的版本使用了 <code>db.collection.createIndex()</code>  方法， <code>ensureIndex()</code>  还能用，但只是 <code>createIndex()</code>  的别名</p>\n<p>[示例]</p>\n<p>1. 单字段索引示例：对 <code>userid</code>  字段建立索引</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"numIndexesBefore\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"numIndexesAfter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"createdCollectionAutomatically\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>参数 1：按升序创建索引</p>\n<p>可以查看一下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"_id_\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>索引名字为： <code>userid_1</code></p>\n<p>compass 查看：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031702245.png\" alt=\"image-20230604171621927\" /></p>\n<p>复合索引：对 <code>userid</code>  和 <code>nickname</code>  同时建立复合 (Compound) 索引：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1,nickname:-1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1,nickname:-1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"numIndexesBefore\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"numIndexesAfter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"createdCollectionAutomatically\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看一下索引：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"_id_\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1_nickname_-1\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"索引的移除\"><a class=\"anchor\" href=\"#索引的移除\">#</a> 索引的移除</h3>\n<p>说明：可以移除指定的索引，或移除所有索引</p>\n<h4 id=\"一指定索引的移除\"><a class=\"anchor\" href=\"#一指定索引的移除\">#</a> 一，指定索引的移除</h4>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.dropIndex<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数：</p>\n<table>\n<caption id=\"\" style=\"caption-side: bottom\">示例</caption>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>index</td>\n<td>string or document</td>\n<td>指定要删除的索引，可以通过索引名称或索引规范文档指定索引，诺要删除文本索引，请指定索引名称</td>\n</tr>\n</tbody>\n</table>\n<p>删除 <code>comment</code>  集合中 <code>userid</code>  字段上的升序索引：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.dropIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>查看已经删除了</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"_id_\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1_nickname_-1\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">></span> db.comment.dropIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"nIndexesWas\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">3</span>, <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"_id_\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token parameter variable\">-1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1_nickname_-1\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"二所有索引的移除\"><a class=\"anchor\" href=\"#二所有索引的移除\">#</a> 二，所有索引的移除</h4>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.dropIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>[示例]</p>\n<p>删除 skip 集合中所有索引</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">dropIndexes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"nIndexesWas\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"msg\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"non-_id indexes dropped for collection\"</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>提示： <code>_id</code>  的字段的索引是无法删除的，只能删除非 <code>_id</code>  字段的索引</p>\n<p>查看索引：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.getIndexes<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"v\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>, <span class=\"token string\">\"key\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span>, <span class=\"token string\">\"name\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"_id_\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"索引的使用\"><a class=\"anchor\" href=\"#索引的使用\">#</a> 索引的使用</h3>\n<h4 id=\"执行计划\"><a class=\"anchor\" href=\"#执行计划\">#</a> 执行计划</h4>\n<p>分析查询性能 (Analyze Query Performance) 通常使用执行计划，(解释计划，Explin Plan) 来查看查询的情况，如查询耗费的时间，是否基于索引查询等</p>\n<p>那么，通常，我们想知道，建立的索引是否有效，效果如何，都需要通过执行计划查看</p>\n<p>语法：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.collection.find<span class=\"token punctuation\">(</span>query,options<span class=\"token punctuation\">)</span>.explain<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>[示例]</p>\n<p>查看根据 userid 查询数据的情况：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.<span class=\"token function-name function\">explain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"explainVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"queryPlanner\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"namespace\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb.comment\"</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"indexFilterSet\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"parsedQuery\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                <span class=\"token string\">\"<span class=\"token variable\">$eq</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"queryHash\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"37A12FC3\"</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"planCacheKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"4A7D843D\"</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token string\">\"maxIndexedOrSolutionsReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"maxIndexedAndSolutionsReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\"maxScansToExplodeReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"winningPlan\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">\"stage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"COLLSCAN\"</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token string\">\"filter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                        <span class=\"token string\">\"<span class=\"token variable\">$eq</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token string\">\"direction\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"forward\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token string\">\"rejectedPlans\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"command\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token string\">\"find\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"comment\"</span>,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token string\">\"filter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token string\">\"<span class=\"token variable\">$db</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token string\">\"serverInfo\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"localhost.localdomain\"</span>,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">\"port\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">27017</span>,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"5.0.18\"</span>,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token string\">\"gitVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"796abe56bfdbca6968ff570311bf72d93632825b\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token string\">\"serverParameters\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token string\">\"internalQueryFacetBufferSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token string\">\"internalQueryFacetMaxOutputDocSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"internalLookupStageIntermediateDocumentMaxSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\"internalDocumentSourceGroupMaxMemoryBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token string\">\"internalQueryMaxBlockingSortMemoryUsageBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token string\">\"internalQueryProhibitBlockingMergeOnMongoS\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"internalQueryMaxAddToSetBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"internalDocumentSourceSetWindowFieldsMaxMemoryBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看出来的结果是文档的扫描是 5 条记录，数据是 5 条，扫描也是 5 条就代表全文档扫描</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031702609.png\" alt=\"image-20230604214503129\" /></p>\n<p>想用上索引就需要给数据 加上索引</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.createIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:1<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"numIndexesBefore\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"numIndexesAfter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"createdCollectionAutomatically\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.<span class=\"token function-name function\">explain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"explainVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"queryPlanner\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"namespace\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb.comment\"</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"indexFilterSet\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"parsedQuery\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                <span class=\"token string\">\"<span class=\"token variable\">$eq</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"queryHash\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"37A12FC3\"</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"planCacheKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3B74CBDE\"</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token string\">\"maxIndexedOrSolutionsReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"maxIndexedAndSolutionsReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\"maxScansToExplodeReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"winningPlan\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">\"stage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"FETCH\"</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token string\">\"inputStage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                <span class=\"token string\">\"stage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"IXSCAN\"</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                <span class=\"token string\">\"keyPattern\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                <span class=\"token string\">\"indexName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1\"</span>,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                <span class=\"token string\">\"isMultiKey\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                <span class=\"token string\">\"multiKeyPaths\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                <span class=\"token string\">\"isUnique\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                                <span class=\"token string\">\"isSparse\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                                <span class=\"token string\">\"isPartial\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                <span class=\"token string\">\"indexVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                <span class=\"token string\">\"direction\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"forward\"</span>,</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                <span class=\"token string\">\"indexBounds\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                                <span class=\"token string\">\"[<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>1003<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>1003<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>]\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                                        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token string\">\"rejectedPlans\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token string\">\"command\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token string\">\"find\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"comment\"</span>,</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\"filter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"<span class=\"token variable\">$db</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token string\">\"serverInfo\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"localhost.localdomain\"</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"port\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">27017</span>,</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"5.0.18\"</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token string\">\"gitVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"796abe56bfdbca6968ff570311bf72d93632825b\"</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token string\">\"serverParameters\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token string\">\"internalQueryFacetBufferSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token string\">\"internalQueryFacetMaxOutputDocSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\"internalLookupStageIntermediateDocumentMaxSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token string\">\"internalDocumentSourceGroupMaxMemoryBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token string\">\"internalQueryMaxBlockingSortMemoryUsageBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token string\">\"internalQueryProhibitBlockingMergeOnMongoS\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token string\">\"internalQueryMaxAddToSetBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token string\">\"internalDocumentSourceSetWindowFieldsMaxMemoryBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>此时的 &quot;stage&quot; : &quot;FETCH&quot; 就变成了 FETCH</p>\n<p>此时文档的扫描就是 2 条数据了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031703658.png\" alt=\"image-20230604215307694\" /></p>\n<p>它是先通过 IXSCAN 查询索引里面的集合，索引也是一个小集合</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031703416.png\" alt=\"image-20230604215400607\" /></p>\n<p>再通过抓取，去抓取指定查回来的 2 条数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031703567.png\" alt=\"image-20230604215440187\" /></p>\n<h2 id=\"涵盖的查询\"><a class=\"anchor\" href=\"#涵盖的查询\">#</a> 涵盖的查询</h2>\n<p>Convered Queries</p>\n<p>当查询条件和查询的投影仅包含索引字段时，MongoDB 直接从索引返回结果，而不扫描任何文档或将文档带入内存，这些覆盖的查询可以非常有效</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031703796.png\" alt=\"image-20230604220253854\" /></p>\n<p>如果查询的数据在索引中已经有了就不会再去文档中去找了，而是直接从索引中 取</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031703030.png\" alt=\"image-20230604220509616\" /></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>userid:<span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span>userid:1,_id:0<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>.<span class=\"token function-name function\">explain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"explainVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"queryPlanner\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token string\">\"namespace\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb.comment\"</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"indexFilterSet\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"parsedQuery\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                <span class=\"token string\">\"<span class=\"token variable\">$eq</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"queryHash\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"8177476D\"</span>,</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"planCacheKey\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"F842FA57\"</span>,</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token string\">\"maxIndexedOrSolutionsReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"maxIndexedAndSolutionsReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\"maxScansToExplodeReached\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\"winningPlan\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token string\">\"stage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"PROJECTION_COVERED\"</span>,</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token string\">\"transformBy\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                                <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token string\">\"inputStage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                <span class=\"token string\">\"stage\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"IXSCAN\"</span>,</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                                <span class=\"token string\">\"keyPattern\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                <span class=\"token string\">\"indexName\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"userid_1\"</span>,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                <span class=\"token string\">\"isMultiKey\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                                <span class=\"token string\">\"multiKeyPaths\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                <span class=\"token string\">\"isUnique\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                <span class=\"token string\">\"isSparse\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                <span class=\"token string\">\"isPartial\"</span> <span class=\"token builtin class-name\">:</span> false,</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                <span class=\"token string\">\"indexVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">2</span>,</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                                <span class=\"token string\">\"direction\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"forward\"</span>,</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                                <span class=\"token string\">\"indexBounds\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                                                <span class=\"token string\">\"[<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>1003<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>, <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>1003<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>]\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                                        <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token string\">\"rejectedPlans\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token string\">\"command\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token string\">\"find\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"comment\"</span>,</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token string\">\"filter\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token string\">\"projection\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                        <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span>,</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token string\">\"<span class=\"token variable\">$db</span>\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"articledb\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token string\">\"serverInfo\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\"host\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"localhost.localdomain\"</span>,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token string\">\"port\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">27017</span>,</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token string\">\"version\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"5.0.18\"</span>,</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token string\">\"gitVersion\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"796abe56bfdbca6968ff570311bf72d93632825b\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token string\">\"serverParameters\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token string\">\"internalQueryFacetBufferSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token string\">\"internalQueryFacetMaxOutputDocSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token string\">\"internalLookupStageIntermediateDocumentMaxSizeBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token string\">\"internalDocumentSourceGroupMaxMemoryBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token string\">\"internalQueryMaxBlockingSortMemoryUsageBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token string\">\"internalQueryProhibitBlockingMergeOnMongoS\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">0</span>,</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token string\">\"internalQueryMaxAddToSetBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span>,</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token string\">\"internalDocumentSourceSetWindowFieldsMaxMemoryBytes\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">104857600</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token string\">\"ok\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"文章评论\"><a class=\"anchor\" href=\"#文章评论\">#</a> 文章评论</h2>\n<h3 id=\"需求分析\"><a class=\"anchor\" href=\"#需求分析\">#</a> 需求分析</h3>\n<p>某头条的文章评论业务如下：</p>\n<p>需要实现以下功能：</p>\n<ol>\n<li>基本增删改查 API</li>\n<li>根据文章 id 查询评论</li>\n<li>评论点赞</li>\n</ol>\n<h3 id=\"表结构分析\"><a class=\"anchor\" href=\"#表结构分析\">#</a> 表结构分析</h3>\n<p>数据库：articledb</p>\n<table>\n<thead>\n<tr>\n<th>专栏文章评论</th>\n<th>comment</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字段名称</td>\n<td>字段含义</td>\n<td>字段类型</td>\n<td>备注</td>\n</tr>\n<tr>\n<td>_id</td>\n<td>ID</td>\n<td>ObjectId 或 String</td>\n<td>Mongo 的主键的字段</td>\n</tr>\n<tr>\n<td>articleid</td>\n<td>文章 ID</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>content</td>\n<td>评论内容</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>userid</td>\n<td>评论人 ID</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>nickname</td>\n<td>评论人昵称</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>createdatetime</td>\n<td>评论的日期时间</td>\n<td>Date</td>\n<td></td>\n</tr>\n<tr>\n<td>likenum</td>\n<td>点赞数</td>\n<td>int32</td>\n<td></td>\n</tr>\n<tr>\n<td>replynum</td>\n<td>回复数</td>\n<td>int32</td>\n<td></td>\n</tr>\n<tr>\n<td>state</td>\n<td>状态</td>\n<td>String</td>\n<td>0: 不可见；1: 可见；</td>\n</tr>\n<tr>\n<td>parentid</td>\n<td>上级 ID</td>\n<td>String</td>\n<td>如果为 0 表示文章的顶级评论</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"技术选型\"><a class=\"anchor\" href=\"#技术选型\">#</a> 技术选型</h3>\n<p>mongodb-driver</p>\n<p>mongodb-driver 是 MongoDB 官方推出的 java 连接 mongoDB 的驱动包，相当于 JDBC 驱动，我们通过一个入门的案例来了解 mongodb-driver 的基本使用</p>\n<p>官方驱动说明和下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb25nb2RiLmdpdGh1Yi5pby9tb25nby1qYXZhLWRyaXZlci8=\">https://mongodb.github.io/mongo-java-driver/</span></p>\n<p>官方驱动示例文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb25nb2RiLmdpdGh1Yi5pby9tb25nby1qYXZhLWRyaXZlci8zLjgvZHJpdmVyL2dldHRpbmctc3RhcnRlZC9xdWljay1zdGFydC8=\">https://mongodb.github.io/mongo-java-driver/3.8/driver/getting-started/quick-start/</span></p>\n<h3 id=\"springdatamongodb\"><a class=\"anchor\" href=\"#springdatamongodb\">#</a> SpringDataMongoDB</h3>\n<p>SpringData 家族成员之一，用于操作 MongoDB 的持久层框架，封装了底层的 MongoDB-Driver</p>\n<p>官方主页：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGEtbW9uZ29kYi8=\">https://spring.io/projects/spring-data-mongodb/</span></p>\n<p>我们十次方项目的吐槽微服务就采用 SpringDataMongoDB 框架</p>\n<p>1. 创建好 SpringBoot 的项目结构</p>\n<p>2. 导入相关依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-mongodb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>3. 配置 mongodb 连接配置</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#数据源配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">mongodb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">#主机地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 192.168.244.142</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">#数据库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">database</span><span class=\"token punctuation\">:</span> articledb</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">#端口号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">27017</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\">#也可以使用 uri 连接</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">#uri: mongodb://192.168.244.142:27017/articledb</span></pre></td></tr></table></figure><p>4. 启动 SpringBoot 查看是否有报错</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031703699.png\" alt=\"image-20230605084426815\" /></p>\n<p>一切顺利</p>\n<h3 id=\"文章评论实体类的编写\"><a class=\"anchor\" href=\"#文章评论实体类的编写\">#</a> 文章评论实体类的编写</h3>\n<p>创建实体类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Id</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CompoundIndex</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Indexed</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Document</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>mapping<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDateTime</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 对应 collection 名</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Document</span><span class=\"token punctuation\">(</span>collection <span class=\"token operator\">=</span> <span class=\"token string\">\"comment\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 可以省略，如果省略，则默认使用类名小写映射集合</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 复合索引</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@CompoundIndex</span><span class=\"token punctuation\">(</span>def <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;'userid':1,'nickname':-1&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//    主键标识，该属性的值会自动对应 mongodb 的主键字段_id，如果该属性名就叫 id，则该注解可以省略，否则必须写</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">// 主键</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//    该属性对应 mongodb 的字段名字，如果一致，则无需该注解</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span><span class=\"token comment\">// 吐槽内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> publishtime<span class=\"token punctuation\">;</span><span class=\"token comment\">// 发布日期</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//    添加了一个单字段的索引</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Indexed</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userid<span class=\"token punctuation\">;</span><span class=\"token comment\">// 发布人 ID</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> nickname<span class=\"token punctuation\">;</span><span class=\"token comment\">// 昵称</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createdatatime<span class=\"token punctuation\">;</span><span class=\"token comment\">// 评论的日期时间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> likenum<span class=\"token punctuation\">;</span><span class=\"token comment\">// 点赞数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> replynum<span class=\"token punctuation\">;</span><span class=\"token comment\">// 回复数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> state<span class=\"token punctuation\">;</span><span class=\"token comment\">// 状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> parentid<span class=\"token punctuation\">;</span><span class=\"token comment\">// 上级 ID</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> articleid<span class=\"token punctuation\">;</span><span class=\"token comment\">// 文章 ID</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"文章评论的基本增删改查\"><a class=\"anchor\" href=\"#文章评论的基本增删改查\">#</a> 文章评论的基本增删改查</h3>\n<p>创建数据访问接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dkx<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MongoRepository</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 评论的持久层接口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CommentRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MongoRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 创建业务逻辑类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dkx<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CommentRepository</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dkx<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CommentRepository</span> commentRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 保存一个评论</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param comment</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comment</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         * 如果需要自定义主键，可以在这里指定主键；如果不指定主键，MongoDB 会自动生成主键</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         * 设置一些默认初始值。。。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * 调用 dao</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 更新评论</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param comment</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateComment</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comment</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 调用 dao</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 根据 id 删除评论</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @param id</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteCommentById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 调用 dao</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 查询所有评论</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findCommentList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     * 根据 id 查询评论</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @param id</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Comment</span> <span class=\"token function\">findCommentById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<p>获取全部数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span><span class=\"token punctuation\">(</span>classes <span class=\"token operator\">=</span> <span class=\"token class-name\">App</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CommentService</span> commentService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> commentService<span class=\"token punctuation\">.</span><span class=\"token function\">findCommentList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comment</span> i<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token constant\">RUN</span> <span class=\"token class-name\">Result</span> <span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span>多喝凉水<span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token class-name\">Sat</span> <span class=\"token class-name\">Jan</span> <span class=\"token number\">02</span> <span class=\"token number\">08</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token operator\">:</span><span class=\"token number\">00</span> <span class=\"token class-name\">CST</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token number\">1003</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span>山海经<span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token number\">2021</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">02</span><span class=\"token constant\">T08</span><span class=\"token operator\">:</span><span class=\"token number\">00</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token number\">10001</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token number\">1001</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>添加一条数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Comment</span> comment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我天天喝\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setPublishtime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setUserid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setNickname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"凯撒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setCreatedatatim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setLikenum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10003</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setReplynum</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setParentid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        comment<span class=\"token punctuation\">.</span><span class=\"token function\">setArticleid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        commentService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token constant\">RUN</span> <span class=\"token class-name\">Result</span> <span class=\"token class-name\">Check</span> <span class=\"token class-name\">Terminal</span> <span class=\"token class-name\">Mongo</span> <span class=\"token class-name\">DataStatement</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">></span> db<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"articleid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"多喝凉水\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"userid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"山海经\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdatatim\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-02T00:00:00Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"likenum\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"10001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replynum\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"state\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parentid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"publishtime\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-02T00:00:00Z\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"我天天喝\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"publishtime\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.397Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"userid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"凯撒\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdatatim\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.405Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"likenum\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replynum\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"state\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parentid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"articleid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_class\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"com.dkx.domain.Comment\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"根据上级id查询文章评论的分页列表\"><a class=\"anchor\" href=\"#根据上级id查询文章评论的分页列表\">#</a> 根据上级 ID 查询文章评论的分页列表</h3>\n<p>1.CommentRepository 新增方法定义</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>dkx<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Comment</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Page</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>domain<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pageable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>mongodb<span class=\"token punctuation\">.</span>repository<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MongoRepository</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 评论的持久层接口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CommentRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MongoRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//    方法名必须是 findBy 语法 Parentid 对应集合的字段的不能写错或者乱写都是不行的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByParentid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> parentid<span class=\"token punctuation\">,</span><span class=\"token class-name\">Pageable</span> pageable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 编写 service 代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 分页查询上级 ID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param parentid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param page</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param size</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findCommentListByParentid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> parentid<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByParentid</span><span class=\"token punctuation\">(</span>parentid<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PageRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>page <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 测试代码：</p>\n<p>先查看集合的数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> db.comment.<span class=\"token function-name function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1001\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"多喝凉水\"</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1003\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"山海经\"</span>, <span class=\"token string\">\"createdatatim\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-02T00:00:00Z\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"10001\"</span>, <span class=\"token string\">\"replynum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>, <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"parentid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"0\"</span>, <span class=\"token string\">\"publishtime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-01-02T00:00:00Z\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"2\"</span>, <span class=\"token string\">\"content\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"我天天喝\"</span>, <span class=\"token string\">\"publishtime\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.397Z\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1001\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"凯撒\"</span>, <span class=\"token string\">\"createdatatim\"</span> <span class=\"token builtin class-name\">:</span> ISODate<span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.405Z\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"likenum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">10003</span>, <span class=\"token string\">\"replynum\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token number\">4</span>, <span class=\"token string\">\"state\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"parentid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"articleid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1001\"</span>, <span class=\"token string\">\"_class\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"com.dkx.domain.Comment\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647d5340b50522086f5836bb\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1001\"</span>, <span class=\"token string\">\"parentid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"刘桑\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647d5340b50522086f5836bc\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1002\"</span>, <span class=\"token string\">\"parentid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"张三\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token builtin class-name\">:</span> ObjectId<span class=\"token punctuation\">(</span><span class=\"token string\">\"647d5340b50522086f5836bd\"</span><span class=\"token punctuation\">)</span>, <span class=\"token string\">\"userid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1004\"</span>, <span class=\"token string\">\"parentid\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1\"</span>, <span class=\"token string\">\"nickname\"</span> <span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"李四\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><p>parentid 为 1 的数据有 4 条，测试代码中传入查询 2 条数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> commentService<span class=\"token punctuation\">.</span><span class=\"token function\">findCommentListByParentid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comment</span> i<span class=\"token operator\">:</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">RUN</span> <span class=\"token class-name\">Result</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">=</span><span class=\"token number\">647d</span><span class=\"token number\">5340</span>b50522086f5836bb<span class=\"token punctuation\">,</span> content<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> publishtime<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> userid<span class=\"token operator\">=</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span> nickname<span class=\"token operator\">=</span>刘桑<span class=\"token punctuation\">,</span> createdatatim<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> likenum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> replynum<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> state<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> parentid<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> articleid<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"mongotemplate实现评论点赞\"><a class=\"anchor\" href=\"#mongotemplate实现评论点赞\">#</a> MongoTemplate 实现评论点赞</h3>\n<p>我们看一下以下点赞的临时示例代码：CommentService 新增 updateThumbup 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 点赞 - 效率低</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Param id</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateCommentThumbupToIncrementingOld</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Comment</span> comment <span class=\"token operator\">=</span> <span class=\"token class-name\">CommentRepository</span><span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   comment<span class=\"token punctuation\">.</span><span class=\"token function\">setLikenum</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">.</span><span class=\"token function\">getLikenum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">CommentRepository</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上方法虽然实现起来比较简单，但是执行效率并不高，因为我只需要将点赞数加 1 就可以了，没必要查询出所有字段修改后再更新所有字段 (蝴蝶效应)</p>\n<p>我们可以使用 MongoTemplate 类来实现对某列的操作</p>\n<p>1. 修改 CommentService</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">MongoTemplate</span> mongoTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateCommentLikenum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//        查询对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Query</span> query <span class=\"token operator\">=</span> <span class=\"token class-name\">Query</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Criteria</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//        更新对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token class-name\">Update</span> update <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">//        递增 $inc</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   update<span class=\"token punctuation\">.</span><span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"likenum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         * 参数 1：查询对象 query</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         * 参数 2：更新对象 update</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         * 参数 3：集合的名字或实体类的类型 Comment.class</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   mongoTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">updateFirst</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>update<span class=\"token punctuation\">,</span><span class=\"token string\">\"comment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2. 测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   commentService<span class=\"token punctuation\">.</span><span class=\"token function\">updateCommentLikenum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token constant\">RUN</span> <span class=\"token class-name\">Result</span> mongo <span class=\"token class-name\">Terminal</span> statment<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>修改前</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"我天天喝\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"publishtime\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.397Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"userid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"凯撒\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdatatim\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.405Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"likenum\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">10003</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replynum\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"state\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parentid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"articleid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_class\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"com.dkx.domain.Comment\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>修改后</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span> <span class=\"token string\">\"_id\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"content\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"我天天喝\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"publishtime\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.397Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"userid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nickname\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"凯撒\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"createdatatim\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">ISODate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2023-06-05T02:26:15.405Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"likenum\"</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">NumberLong</span><span class=\"token punctuation\">(</span><span class=\"token number\">10004</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"replynum\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"state\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"parentid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"articleid\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_class\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"com.dkx.domain.Comment\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "database",
                "mongodb",
                "计算机学科",
                "database",
                "mongodb"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/database/mysql/MySQL%E5%AE%89%E8%A3%85/",
            "url": "https://pigpigletsgo.github.io/computer-science/database/mysql/MySQL%E5%AE%89%E8%A3%85/",
            "title": "Windows安装MySQL",
            "date_published": "2024-01-03T07:12:35.618Z",
            "content_html": "<h2 id=\"windows安装mysql\"><a class=\"anchor\" href=\"#windows安装mysql\">#</a> Windows 安装 MySQL</h2>\n<ol>\n<li>首先找到 MySQL 的官网，点击下载后进入这个页面点击如下图所示</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031529779.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>有两个安装的路径它们的含义分别不同我们选择第二个离线安装</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531541.png\" alt=\"image-20240103153114444\" /></p>\n<ol start=\"3\">\n<li>这里我们直接点击下载</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531098.png\" alt=\"image_2022-12-03-23-07-06\" /></p>\n<ol start=\"4\">\n<li>\n<p>安装完成后我们进入下一个阶段：安装与配置</p>\n<ul>\n<li>\n<p>注意事项:</p>\n<ol>\n<li>确保电脑的 UserName (用户名) 中不含有中文，如果有需要重命名更改</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>右键安装包点击安装</p>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531431.png\" alt=\"image_2022-12-03-23-13-07\" /></p>\n<ol start=\"6\">\n<li>稍等片刻后就会出现这样的一个页面</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531334.png\" alt=\"image_2022-12-03-23-14-14\" /></p>\n<ul>\n<li>\n<p>Developer Default: 安装 MySQL 服务器以及开发 MySQL 所需的工具</p>\n</li>\n<li>\n<p>Server only: 仅安装 MySQL 服务器</p>\n</li>\n<li>\n<p>Client only: 仅安装客户端</p>\n</li>\n<li>\n<p>Full: 安装 MySQL 所有可用组件</p>\n</li>\n<li>\n<p>Custom:(经典) 自定义安装</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>我们点击 Custom 进行自定义安装</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534042.png\" alt=\"image_2022-12-03-23-18-32\" /></p>\n<p>可以看到它让我们选择所需的 MySQL 工具，但是我们怎么知道要怎么选择呢不着急这样操作</p>\n<ol>\n<li>点击 back 退回去，并选中第一个</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531954.png\" alt=\"image_2022-12-03-23-20-10\" /></p>\n<ol start=\"2\">\n<li>点击 next</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531061.png\" alt=\"image_2022-12-03-23-21-03\" /></p>\n<ol start=\"3\">\n<li>再点击 back 退回</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531888.png\" alt=\"image_2022-12-03-23-21-53\" /></p>\n<ol start=\"4\">\n<li>选中 Custom 后点击 Next</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031532709.png\" alt=\"image-20240103153205611\" /></p>\n<p>我们可以看到它既然帮我们自己选好了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531997.png\" alt=\"image_2022-12-03-23-23-00\" /></p>\n<p>进行下一步操作，点击右侧的工具进行添加路径</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031531352.png\" alt=\"image_2022-12-03-23-25-54\" /></p>\n<p>当然这两个路径需要自己提前创建好：D:\\MySQL 和 D:\\MySQLData</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031532910.png\" alt=\"image_2022-12-03-23-27-20\" /></p>\n<p>再进行下一个同样的操作</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031532202.png\" alt=\"image_2022-12-03-23-28-59\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533089.png\" alt=\"image_2022-12-03-23-30-11\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533608.png\" alt=\"image_2022-12-03-23-31-55\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534933.png\" alt=\"image_2022-12-03-23-32-34\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533340.png\" alt=\"image_2022-12-03-23-33-25\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533439.png\" alt=\"image_2022-12-03-23-34-27\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534929.png\" alt=\"image_2022-12-03-23-35-14\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533124.png\" alt=\"image_2022-12-03-23-35-47\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533800.png\" alt=\"image_2022-12-03-23-36-09\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533597.png\" alt=\"image_2022-12-03-23-36-33\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533473.png\" alt=\"image_2022-12-03-23-36-58\" /></p>\n<p>完成后点击 Next, 选择 yes</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533394.png\" alt=\"image_2022-12-03-23-40-10\" /></p>\n<p>点击 Execute</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533453.png\" alt=\"image_2022-12-03-23-40-46\" /></p>\n<p>完成后点击 next</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534750.png\" alt=\"image-20240103153445664\" /></p>\n<p>这里默认就行直接 next</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534789.png\" alt=\"image_2022-12-03-23-43-03\" /></p>\n<p>选择第二个</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533869.png\" alt=\"image_2022-12-03-23-44-10\" /></p>\n<p>设置管理员密码 一定要记住这个密码</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533750.png\" alt=\"image_2022-12-03-23-46-58\" /></p>\n<p>然后一路下一步就行了</p>\n<p>这里输入刚才设置的密码之后点击 check 验证然后通过 next</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533690.png\" alt=\"image_2022-12-03-23-49-38\" /></p>\n<p>安装成功后会弹出两个窗口我们关闭了，来查看下 MySQL 的目录</p>\n<p>这里是工具套件目录</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031533603.png\" alt=\"image_2022-12-03-23-52-12\" /></p>\n<p>这里是我们安装的 MySQL 数据库目录</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031535512.png\" alt=\"image-20240103153521470\" /></p>\n<p>我们可以切换到 D:\\MySQL\\MySQL Server8.0\\bin 这个目录下执行以下 cmd</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534739.png\" alt=\"image_2022-12-03-23-58-16\" /></p>\n<p>在 cmd 中输入 mysql -u root -p 然后输出刚才设置的密码就可以进入 mysql 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534708.png\" alt=\"image_2022-12-03-23-59-55\" /></p>\n<h2 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h2>\n<ol>\n<li>打开配置的页面，选择 path</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534905.png\" alt=\"image_2022-12-04-00-02-16\" /></p>\n<ol start=\"2\">\n<li>path 中新建输入 mysql 的 bin 目录的路径</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401031534873.png\" alt=\"image_2022-12-04-00-04-41\" /></p>\n<p>大功告成！查看下是否可以在 cmd 任意打开的位置都可以进入 mysql 了可以那么就是成功了</p>\n",
            "tags": [
                "计算机学科",
                "database",
                "mysql",
                "计算机学科",
                "mysql",
                "databse"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/%E7%BB%84%E5%90%88%E5%BC%8FAPI/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/%E7%BB%84%E5%90%88%E5%BC%8FAPI/",
            "title": "vue3-组合式API",
            "date_published": "2024-01-03T02:58:25.510Z",
            "content_html": "<h2 id=\"vue3的优势\"><a class=\"anchor\" href=\"#vue3的优势\">#</a> Vue3 的优势</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300855078.png\" alt=\"image-20230830085501915\" /></p>\n<ol>\n<li>\n<p>组合式 API</p>\n<ul>\n<li>之前写的 vue2 是选项是 API 那什么是选项是 API 呢，如下：</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300857157.png\" alt=\"image-20230830085720920\" /></p>\n<p>就是在整个配置项当中有一个一个选项 data (数据)，methods (函数)，computed (计算属性)，wattch (侦听器)。</p>\n<p><strong>特征</strong>：如果要实现一个功能，实际上我们需要分散式的将代码散落到各个配置项当中。</p>\n<ul>\n<li>vue3 当中改成了 Composition API\n<ul>\n<li>Composition API 提供数据再也不用到 data 当中 提供了，而是可以调用方法的时候提供。直接将我们同功能相关的内容进行 集合式的管理</li>\n<li><strong>好处</strong>：如果要改造某一块的功能假设有 8 百行代码，那么我们不需要关注其它 750 行代码在干嘛，只需要关注与该功能模块里面代码</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300901558.png\" alt=\"image-20230830090144717\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300907172.png\" alt=\"image-20230830090745930\" /></p>\n</li>\n</ol>\n<h2 id=\"认识create-vue\"><a class=\"anchor\" href=\"#认识create-vue\">#</a> 认识 create-vue</h2>\n<p>create-vue 是 Vue&lt;font title='red'&gt; 官方新的脚手架工具 &lt;/font&gt;，底层切换到了 &lt; font title='red'&gt;vite (下一代构架工具) &lt;/font&gt;，为开发提供极速响应</p>\n<h3 id=\"使用create-vue创建项目\"><a class=\"anchor\" href=\"#使用create-vue创建项目\">#</a> 使用 create-vue 创建项目</h3>\n<h5 id=\"1-前提环境条件\"><a class=\"anchor\" href=\"#1-前提环境条件\">#</a> 1 前提环境条件</h5>\n<p>已安装 &lt;span alt='solid'&gt;16.0 或更高版本 &lt;/span &gt; 的 Node.js</p>\n<p><code>node -v</code></p>\n<h5 id=\"2-创建一个vue应用\"><a class=\"anchor\" href=\"#2-创建一个vue应用\">#</a> 2 创建一个 Vue 应用</h5>\n<p><code>npm ini vue@latest</code></p>\n<p>这一指令将会安装并执行  create-vue</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300914324.png\" alt=\"image-20230830091415555\" /></p>\n<h5 id=\"3-启动vue应用\"><a class=\"anchor\" href=\"#3-启动vue应用\">#</a> 3 启动 vue 应用</h5>\n<p>cd 到 项目根目录下 执行命令： <code>npm install</code>  安装一下依赖</p>\n<p>执行命令启动项目： <code>npm run dev</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300930576.png\" alt=\"image-20230830093005405\" /></p>\n<p>访问地址查看是否成功的启动了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300930973.png\" alt=\"image-20230830093025788\" /></p>\n<h2 id=\"熟悉项目目录和关键文件\"><a class=\"anchor\" href=\"#熟悉项目目录和关键文件\">#</a> 熟悉项目目录和关键文件</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300936977.png\" alt=\"image-20230830093601804\" /></p>\n<p><strong>关键文件</strong>：</p>\n<ol>\n<li>\n<p>vite.config.js - 项目的配置文件  &lt;font title='red'&gt; 基于 vite 的配置 &lt;/font&gt;.</p>\n</li>\n<li>\n<p>package.json - 项目包文件 &lt;font title='red'&gt; 核心依赖项变成了 vue3.x 和 vite&lt;/font&gt;.</p>\n</li>\n<li>\n<p>main.js - 入口文件 &lt;font title='red'&gt;createApp 函数创建应用实例 &lt;/font&gt;.</p>\n</li>\n<li>\n<p>app.vue - 根组件 &lt;font title='red'&gt;SFC 单文件组件 script - template -style&lt;/font&gt;.</p>\n<p>变化一：脚本 script 和模版 template 顺序调整</p>\n<p>变化二：模版 template 不再要求唯一根元素</p>\n<p>变化三：脚本 script 添加 setup 标识支持组合式 API</p>\n</li>\n<li>\n<p>index.html - 单页入口 &lt;font title='red'&gt; 提供 id 为 app 的挂载点 &lt;/font&gt;.</p>\n</li>\n</ol>\n<p><strong>vscode 中两个不同的插件启用其中一个禁用其中一个</strong>。</p>\n<p>在 vscode 中 vue2 的插件是：Vetur</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300943446.png\" alt=\"image-20230830094319922\" /></p>\n<p>在 vscode 中 vue3 的插件是：Vue Language Features</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308300941687.png\" alt=\"image-20230830094154036\" /></p>\n<h1 id=\"组合式api\"><a class=\"anchor\" href=\"#组合式api\">#</a> 组合式 API</h1>\n<h2 id=\"组合式api-setup选项\"><a class=\"anchor\" href=\"#组合式api-setup选项\">#</a> 组合式 API - setup 选项</h2>\n<h4 id=\"setup选项的写法和执行时机\"><a class=\"anchor\" href=\"#setup选项的写法和执行时机\">#</a> setup 选项的写法和执行时机</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//setup</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//1. 执行时机，比 beforeCreate 还要早</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//2.setup 函数中，获取不到 this (this 是 undefined)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setup函数'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeCreate函数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301044889.png\" alt=\"image-20230830104401422\" /></p>\n<h2 id=\"setup选项中写代码的特点\"><a class=\"anchor\" href=\"#setup选项中写代码的特点\">#</a> setup 选项中写代码的特点</h2>\n<p>数据 和 函数，需要在 setup 最后 return，才能在模版中应用</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301045360.png\" alt=\"image-20230830104536353\" /></p>\n<p>明确了，在 setup 中写代码的特点需要 return 每次需要 return 太麻烦了。所以不得不提到 script setup 语法糖</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301056104.png\" alt=\"image-20230830105622676\" /></p>\n<h3 id=\"script-setup语法糖原理\"><a class=\"anchor\" href=\"#script-setup语法糖原理\">#</a> script setup 语法糖原理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301104037.png\" alt=\"image-20230830110456175\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>\n<p>setup 选项的执行时机？</p>\n<p>beforeCreate 钩子之前，自动执行</p>\n</li>\n<li>\n<p>setup 写代码的特点是什么？</p>\n<p>定义数据 + 函数 然后以对象方式 return</p>\n</li>\n<li>\n<p>script setup 解决了什么问题？</p>\n<p>经过语法糖的封装更简单的使用组合式 API</p>\n</li>\n<li>\n<p>setup 中的 this 还指向组件实例吗？</p>\n<p>指向 undefined</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"组合式api-reactive和ref函数\"><a class=\"anchor\" href=\"#组合式api-reactive和ref函数\">#</a> 组合式 API-reactive 和 ref 函数</h2>\n<h3 id=\"reactive\"><a class=\"anchor\" href=\"#reactive\">#</a> reactive()</h3>\n<p><strong>作用</strong>：接收 &lt;font title='red'&gt; 对象类型数据的参数传入 &lt;/font &gt; 并返回一个 &lt; font title='red'&gt; 响应式的对象 &lt;/font&gt;。</p>\n<p><strong>核心步骤</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 导入</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 执行函数 传入参数 变量接收</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span>对象类型数据<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>从 vue 包中 &lt;font title='red'&gt; 导入 reactive 函数 &lt;/font&gt;</li>\n<li>在 script setup 中 &lt;font title='red'&gt; 执行 reactive 函数 &lt;/font &gt; 并传入 &lt; font title='red'&gt; 类型为对象 &lt;/font &gt; 的初始值，并使用变量接收返回值</li>\n</ol>\n<p><strong>代码演示</strong>：App.vue</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//reactive: 接收一个对象类型的数据，返回一个响应式的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 问题：如果是简单类型，怎么办呢？</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reactive <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>setCount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>+1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301134330.png\" alt=\"image-20230830113421785\" /></p>\n<h3 id=\"ref\"><a class=\"anchor\" href=\"#ref\">#</a> ref()</h3>\n<p><strong>作用</strong>：接收 &lt;font title='red'&gt; 简单类型或者对象类型的数据 &lt;/font &gt; 传入并返回一个 &lt; font title='red'&gt; 响应式的对象 &lt;/font&gt;。</p>\n<p><strong>核心步骤</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 导入   </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 执行函数 传入参数 变量接收</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span>简单类型或者复杂类型数据<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>从 vue 包中 &lt;font title='red'&gt; 导入 ref 函数 &lt;/font&gt;。</li>\n<li>在 script setup 中 &lt;font title='red'&gt; 执行 ref 函数 &lt;/font &gt; 并传入初始值，使用 &lt; font title='red'&gt; 变量接收 &lt;/font&gt; ref 函数的返回值</li>\n</ol>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 推荐 &lt;/span&gt;：以后声明数据，统一使用 ref</p>\n</blockquote>\n<p><strong>代码演示</strong>：App.vue</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 2. ref: 接收简单类型 或 复杂类型，返回一个响应式的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 本质：是在原有传入数据的基础上，外层包了一层对象，包成了复杂类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 底层，包成复杂类型之后，再借助 reactive 实现的响应式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 注意点：因为包了一层对象，所以访问数据时需要通过.value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">&lt;!-- </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      在 script 中因为包了一层对象而访问数据需要.value</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      在 template 中.value 不需要加 (帮我们扒了一层) </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      推荐：以后声明数据，统一使用 ref</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>count++<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>[template]+1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>setCount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>[script setup]+1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>ref 对象的打印结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301306119.png\" alt=\"image-20230830130641491\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>\n<p>reactive 和 ref 函数的共同作用是什么？</p>\n<p>用函数调用的方式生成响应式数据</p>\n</li>\n<li>\n<p>reactive &lt;font title='red'&gt;vs&lt;/font&gt; ref ?</p>\n<ol>\n<li>reactive 不能处理简单类型的数据</li>\n<li>ref 参数类型支持更好但是必须通过 ==.value== 访问修改</li>\n<li>ref 函数的内部实现依赖于<mark> reactive</mark> 函数</li>\n</ol>\n</li>\n<li>\n<p>在实际工作中推荐使用哪个？</p>\n<p>推荐使用 ref 函数，更加灵活统一</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"组合式api-computed-计算属性函数\"><a class=\"anchor\" href=\"#组合式api-computed-计算属性函数\">#</a> 组合式 API - computed 计算属性函数</h2>\n<p>计算属性基本思想和 Vue2 的完全一致，组合式 API 下的计算属性 &lt;font title='red'&gt; 只是修改了写法 &lt;/font&gt;。</p>\n<p><strong>核心步骤</strong>:</p>\n<ol>\n<li>&lt;font title='red'&gt; 导入 &lt;/font&gt;computed 函数</li>\n<li>&lt;font title='red'&gt; 执行函数 &lt;/font &gt; 在回调参数中 &lt; font title='red'&gt;retrun 基于响应式数据做计算的值 &lt;/font&gt;，用 &lt; font title='red'&gt; 变量接收 &lt;/font&gt;。</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 导入</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> computed <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 执行函数 变量接收 在回调参数中 return 计算值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> computedState <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> 基于响应式数据做计算之后的值</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>代码演示</strong>：App.vue</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//const 计算属性 = computed (() => &#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//   return 计算返回的结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// &#125;)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> computed<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 声明数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 基于 list 派生一个计算属性，从 list 中过滤出 > 2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> computedList <span class=\"token operator\">=</span> <span class=\"token function\">computed</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 定义一个修改数组的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    list<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>原始数组:<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>计算后的数组:<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addFn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301339461.png\" alt=\"image-20230830133921670\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 最佳实践 &lt;/span&gt;.</p>\n<ol>\n<li>\n<p>计算属性中不应该有 “副作用”</p>\n<p>比如异步请求 / 修改 dom</p>\n</li>\n<li>\n<p>避免直接修改计算属性的值</p>\n<p>计算属性应该是只读的，特殊情况可以配置 get   set</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"组合式api-watch\"><a class=\"anchor\" href=\"#组合式api-watch\">#</a> 组合式 API - watch</h2>\n<h3 id=\"watch函数\"><a class=\"anchor\" href=\"#watch函数\">#</a> watch 函数</h3>\n<p><strong>作用</strong>：侦听 &lt;font title='red'&gt; 一个或者多个数据 &lt;/font &gt; 的变化，数据变化时执行回调函数</p>\n<p><strong>两个额外参数</strong>：</p>\n<ol>\n<li>immediate (立即执行)</li>\n<li>deep (深度侦听)</li>\n</ol>\n<h3 id=\"基础使用-侦听单个数据\"><a class=\"anchor\" href=\"#基础使用-侦听单个数据\">#</a> 基础使用 - 侦听单个数据</h3>\n<ol>\n<li>&lt;font title='red'&gt; 导入 watch&lt;/font &gt; 函数</li>\n<li>&lt;font title='red'&gt; 执行 watch 函数 &lt;/font &gt; 传入要侦听的响应式数据 (&lt;font title='red'&gt;res 对象 &lt;/font&gt;) 和回调函数</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//1. 导入 watch</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> watch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//2. 调用 watch 侦听变化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">count发生了变化，老值为</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>oldValue<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">，新值为</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>newValue<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"基础使用-侦听多个数据\"><a class=\"anchor\" href=\"#基础使用-侦听多个数据\">#</a> 基础使用 - 侦听多个数据</h3>\n<p>说明：同时侦听多个响应式数据的变化，不管哪个数据变化都需要</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> watch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cp'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 侦听多个数据源</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>newCount<span class=\"token punctuation\">,</span> newName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>oldCount<span class=\"token punctuation\">,</span> oldName<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count或者name变化了'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>newCount<span class=\"token punctuation\">,</span> newName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>oldCount<span class=\"token punctuation\">,</span> oldName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"immediate\"><a class=\"anchor\" href=\"#immediate\">#</a> immediate</h4>\n<p><strong>说明</strong>：在侦听器创建时 &lt;font title='red'&gt; 立即触发回调 &lt;/font&gt;，响应式数据变化之后继续执行 回调</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"deep\"><a class=\"anchor\" href=\"#deep\">#</a> deep</h4>\n<p><strong>作用</strong>：侦听复杂数据类型的改变</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明一个复杂数据类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>代码演示</strong>：App.vue</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> watch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> nickname <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">chanageCount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">chanageNickName</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    nickname<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 1. 监视单个数据的变化 监视 count 的变化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//   watch (ref 对象，(newValue, oldValue) => &#123; ... &#125;)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// watch(count, (newValue, oldValue) => &#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//   console.log (newValue, oldValue) // 开启 immediate 后 0 undefined</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// &#125;, &#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//   immediate: true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// &#125;)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 2. 监视多个数据的变化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">//watch ([ref 对象 1， ref 对象 2], (newArr, oldArr) => &#123; ... &#125;)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// watch([count, nickname], (newArr, oldArr) => &#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">//   console.log (newArr, oldArr) // 开启 immediate 后 (2) [0, ' 张三 '] []</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// &#125;, &#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">//   // 立刻执行</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">//   immediate: true,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// &#125;)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 声明一个复杂数据类型</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">const</span> userInfo <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小张'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 如果修改的只是对象内部的属性值那么这个对象并没有发生变化因而不会触发 watch 侦听函数</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//userInfo.value.name = ' 大张'</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 如果修改的是一整个对象那么 watch 侦听函数就会触发</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//userInfo.value = &#123;name: ' 大大大大张 ', age: 20&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    userInfo<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">//deep 深度监视，默认 watch 进行的是，浅层监视</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">//   const ref1 = ref (简单类型) 可以直接监视</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">//   const ref2 = ref (复杂类型) 监视不到复杂类型内部数据的变化</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>chanageCount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改数字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>chanageNickName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改名字<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>setUserInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>修改userInfo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"精确侦听对象的某个属性\"><a class=\"anchor\" href=\"#精确侦听对象的某个属性\">#</a> 精确侦听对象的某个属性</h3>\n<p><strong>需求</strong>：在不开启 deep 的前提下，侦听 age 的变化，只有 age 变化时才执行回调</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'cp'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> info<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age发生变化了'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>\n<p>作为 watch 函数的第一个参数，ref 对象需要添加 .value 吗？</p>\n<p>不需要，第一个参数就是传 ref 对象</p>\n</li>\n<li>\n<p>watch 只能侦听单个数据吗？</p>\n<p>单个  或者  多个</p>\n</li>\n<li>\n<p>不开启 deep，直接监视 复杂类型，修改属性，能触发回调吗？</p>\n<p>不能，默认是浅层侦听</p>\n</li>\n<li>\n<p>不开启 deep，精确侦听对象的某个属性？</p>\n<p>可以把第一个参数写成函数的写法，返回要监听的具体属性</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"组合式api-生命周期函数\"><a class=\"anchor\" href=\"#组合式api-生命周期函数\">#</a> 组合式 API - 生命周期函数</h2>\n<p>&lt;span alt='solid'&gt;Vue3 的生命周期 API (选项式 &lt;font title='red'&gt;VS&lt;/font&gt; 组合式)&lt;/span&gt;.</p>\n<p>&lt;center&gt; 对比图 &lt;/center&gt;</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301453052.png\" alt=\"image-20230830145333569\" /></p>\n<p><strong>代码演示</strong>：App.vue</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onMounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//beforeCreate 和 created 的相关代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 一律放在 setup 中执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请求发送，获取数据'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 一进入页面的请求</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">getList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 如果有些代码需要在 mounted 生命周期中执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mounted声明周期函数 - 逻辑1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 写成函数的调用方式，可以调用多次</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 调用一次提供一个钩子</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 并不会冲突，而是按照顺序依次执行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mounted声明周期函数 - 逻辑2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301508288.png\" alt=\"image-20230830150853812\" /></p>\n<h2 id=\"组合式api-父子通信\"><a class=\"anchor\" href=\"#组合式api-父子通信\">#</a> 组合式 API - 父子通信</h2>\n<h3 id=\"组合式api下的-父传子\"><a class=\"anchor\" href=\"#组合式api下的-父传子\">#</a> 组合式 API 下的  父传子</h3>\n<h4 id=\"基本思想\"><a class=\"anchor\" href=\"#基本思想\">#</a> 基本思想</h4>\n<ol>\n<li>父组件中给子组件绑定属性</li>\n<li>子组件内部通过 props 选项接收</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301512885.png\" alt=\"image-20230830151244355\" /></p>\n<p><strong>代码演示</strong>：</p>\n<p>子组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 子组件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 注意：由于写了 setup 所以无法直接配置 props 选项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 所以：此处需要借助于 \"编译器宏\" 函数接收子组件传递的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">car</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">money</span><span class=\"token operator\">:</span> Number</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>car<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 对于 props 传递过来的数据模版中可以直接使用 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是子组件 - <span class=\"token comment\"></span> - <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token selector\">.son</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #000<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 父传子</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 给子组件，添加属性的方式传值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 在子组件，通过 props 接收</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 局部组件 (导入进来就能用)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> SonCom <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-com.vue'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> money <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMoney</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  money<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>父组件 - <span class=\"token comment\"></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getMoney<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>搬砖<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 给子组件，添加属性的方式传值 --></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SonCom</span> <span class=\"token attr-name\">car</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>宝马车<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:money</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>money<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SonCom</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301601780.png\" alt=\"image-20230830160147414\" /></p>\n<h4 id=\"defineprops原理\"><a class=\"anchor\" href=\"#defineprops原理\">#</a> defineProps 原理</h4>\n<p>&lt;span alt='solid'&gt;defineProps 原理 &lt;/span&gt;：就是 &lt; font title='red'&gt; 编译阶段的一个标识 &lt;/font&gt;，实际编译器解析时，遇到后会进行编译转换</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301533960.png\" alt=\"image-20230830153302024\" /></p>\n<p>里面编写 defineProps 里面接收 message，count 等等，实际上 它在真正编译器解析之后，解析成完整的对象配置的时候，它相当于有 set up，也有组件的 name 也有组件的 props，实际上你看起来写了 defineProps 是在 setup 里面的，但是到了编译阶段会把 defineProps 函数的内容转换成 props 配置项。本质上配置的 还是 props 选项。只不过可以在 setup 里面可以去接收使用而已。</p>\n<p>所以我们就懂了 defineProps 就是编译阶段的一个标识，它会帮你去编译转换</p>\n<h3 id=\"组合式api下的-子传父\"><a class=\"anchor\" href=\"#组合式api下的-子传父\">#</a> 组合式 API 下的 子传父</h3>\n<h4 id=\"基本思想-2\"><a class=\"anchor\" href=\"#基本思想-2\">#</a> 基本思想</h4>\n<ol>\n<li>父组件中给 &lt;font title='red'&gt; 子组件标签通过 @绑定事件 &lt;/font&gt;.</li>\n<li>子组件内部通过 &lt;font title='red'&gt;emit 方法触发事件 &lt;/font&gt;.</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301541679.png\" alt=\"image-20230830154153547\" /></p>\n<p>代码演示：</p>\n<p>子组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'changeMoney'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">buy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 此处报错，不能直接修改老爹传过来的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// props.money--</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 需要 emit 触发事件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeMoney'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 对于 props 传递过来的数据模版中可以直接使用 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           我是子组件我爱: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>buy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>花钱<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">.son</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #000<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 局部组件 (导入进来就能用)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> SonCom <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-com.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> money <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getMoney</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  money<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 子传父</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 1. 在子组件内部，emit 触发事件 (编译器宏获取)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 2. 在父组件通过 @就可以监听了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newMoney</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  money<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newMoney</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>父组件 - <span class=\"token comment\"></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getMoney<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>搬砖<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 给子组件，添加属性的方式传值 --></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SonCom</span> <span class=\"token attr-name\">@changeMoney</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>changeFn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SonCom</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301606169.png\" alt=\"image-20230830160649846\" /></p>\n<blockquote>\n<p>总结：</p>\n<p>父传子</p>\n<ol>\n<li>\n<p>父传子的过程中通过什么方式接收 props?</p>\n<p>defineProps ({属性名：类型})</p>\n</li>\n<li>\n<p>setup 语法糖中如何使用父组件传递过来的数据？</p>\n<p>const props = defineProps ({属性名：类型})</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3Byb3BzLnh4eA==\">props.xxx</span></p>\n</li>\n</ol>\n<p>子传父</p>\n<ol>\n<li>\n<p>子传父的过程中通过什么方式得到 emit 方法？</p>\n<p><code>defineEmits(['事件名称'])</code></p>\n</li>\n<li>\n<p>怎么触发事件</p>\n<p><code>emit('自定义事件名', 参数)</code></p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"组合式api-模版引用\"><a class=\"anchor\" href=\"#组合式api-模版引用\">#</a> 组合式 API - 模版引用</h2>\n<h3 id=\"模版引用的概念\"><a class=\"anchor\" href=\"#模版引用的概念\">#</a> 模版引用的概念</h3>\n<p>通过 &lt;font title='red'&gt;ref 标识 &lt;/font &gt; 获取真实的 &lt; font title='red'&gt;dom 对象或者组件实例对象 &lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301613244.png\" alt=\"image-20230830161330667\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 比如说 &lt;/span&gt;：做一个登陆功能，这个时候在官网文档就会告诉你，我们需要通过 <code>this.$refs.form.validate()</code>  拿到组件，然后调用组件里面的方法或者找到某个输入框原生 dom.focus 让它聚焦，将来我们都会有很多的场景可以通过 ref 表示去获取真实的 dom 或者组件实例</p>\n</blockquote>\n<p>Vue3 中也同样包含这样的一个语法，但是不是通过 this 去获取了，也是通过 ref 去创建</p>\n<h4 id=\"如何使用-以获取dom为例-组件同理\"><a class=\"anchor\" href=\"#如何使用-以获取dom为例-组件同理\">#</a> 如何使用 (以获取 dom 为例 组件同理)</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">//1. 调用 ref 函数得到 ref 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> h1Ref <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token number\">2.</span>通过ref标识绑定ref对象<span class=\"token operator\">--</span><span class=\"token operator\">></span>     </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token operator\">&lt;</span>h1 ref<span class=\"token operator\">=</span><span class=\"token string\">\"h1Ref\"</span><span class=\"token operator\">></span>我是dom标签h1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr></table></figure><ol>\n<li>调用 ref 函数生成一个 ref 对象</li>\n<li>通过 ref 标识绑定 ref 对象到标签</li>\n</ol>\n<h3 id=\"defineexpose\"><a class=\"anchor\" href=\"#defineexpose\">#</a> defineExpose()</h3>\n<p>默认情况下载 script setup 语法糖下 &lt;font title='red'&gt; 组件内部的属性和方法是不开放 &lt;/font &gt; 给父组件访问的，可以通过 defineExpose 编译宏 &lt; font title='red'&gt; 指定哪些属性和方法允许访问 &lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301641207.png\" alt=\"image-20230830164103652\" /></p>\n<p><strong>比如说</strong>：定义好了一个数据叫做 test message 它是不会往外暴漏的。如果你想要往外暴漏就需要 defineExpose 宏函数</p>\n<p><strong>代码演示</strong>：</p>\n<p>子组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token number\">999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'打招呼'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        sayHi</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>我是用于测试的组件 - <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> TestCom <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-test.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onMounted<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 模版引用可以获取 dom 也可以获取组件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 1. 调用 ref 函数，生成一个 ref 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 2. 通过 ref 标识，进行绑定</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 通过 ref 对象.value 即可访问到绑定的元素 (必须渲染完成后，才能拿到)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> inp <span class=\"token operator\">=</span> <span class=\"token function\">ref</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 声明周期钩子</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">onMounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inp<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  inp<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">focusFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  inp<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// --------------------------------------------</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> testRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCom</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>testRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>focusFn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点击我让输入框聚焦<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TestCom</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>testRef<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TestCom</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getCom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>获取组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301653559.png\" alt=\"image-20230830165329176\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>\n<p>获取模版引用的时机是什么？</p>\n<p>组件挂载完毕</p>\n</li>\n<li>\n<p>defineExpose 编译宏的作用是什么？</p>\n<p>显式暴漏组件内部的属性和方法</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"组合式api-provide-和-inject\"><a class=\"anchor\" href=\"#组合式api-provide-和-inject\">#</a> 组合式 API - provide 和 inject</h2>\n<p><strong>作用和场景</strong></p>\n<p>顶层组件向任意的底层组件 &lt;font title='red'&gt; 传递数据和方法 &lt;/font&gt;，实现 &lt; font title='red'&gt; 跨层组件通信 &lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301656597.png\" alt=\"image-20230830165629092\" /></p>\n<p>比如说：整个医生问诊是一个大组件 room-page 它可以将数据往下传递传递给 room-msg-item 中间一层组件，再往下有一个 room-msg-comment 评价组件，从上到下有一个包裹关系。需求是从顶层组件需要往底层组件传递订单消息。一旦订单消息传递过去了，将来底层组件如果评价完成了，要能通知大组件 room-page 呢</p>\n<h3 id=\"跨层传递普通数据\"><a class=\"anchor\" href=\"#跨层传递普通数据\">#</a> 跨层传递普通数据</h3>\n<ol>\n<li>顶层组件通过 &lt;font title='red'&gt;provide 函数提供 &lt;/font &gt; 数据</li>\n<li>底层组件通过 &lt;font title='red'&gt;inject 函数获取 &lt;/font &gt; 数据</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301709456.png\" alt=\"image-20230830170916682\" /></p>\n<p><strong>代码演示</strong>：</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> CenterSon <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-center.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> provide <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 1. 跨层传递普通数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 使用 provide 向子组件传递数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theme-color'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>我是顶层组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CenterSon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CenterSon</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>底部组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 inject 获取父组件传递过来的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> themeColor <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'theme-color'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>我是底层组件 - <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>更新count<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>中间组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> ButtonSon <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-button.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>我是中间层组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ButtonSon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ButtonSon</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"跨层传递响应式数据\"><a class=\"anchor\" href=\"#跨层传递响应式数据\">#</a> 跨层传递响应式数据</h3>\n<p>在调用 provide 函数时，第二个参数设置为 &lt;font title='red'&gt;ref 对象 &lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301935024.png\" alt=\"image-20230830193520483\" /></p>\n<p><strong>代码演示</strong>：</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> CenterSon <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-center.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> provide<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 跨层传递响应式数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 2 秒后改变数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">500</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>我是顶层组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CenterSon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CenterSon</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>底部组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 inject 获取父组件传递过来的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>我是底层组件 - <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span>更新count<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>中间组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> ButtonSon <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-button.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>我是中间层组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ButtonSon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ButtonSon</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"跨层传递方法\"><a class=\"anchor\" href=\"#跨层传递方法\">#</a> 跨层传递方法</h3>\n<p>顶层组件可以向底层组件传递方法，&lt;font title='red'&gt; 底层组件调用方法修改顶层组件中的数据 &lt;/font&gt;.</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308301936066.png\" alt=\"image-20230830193623619\" /></p>\n<p><strong>代码演示</strong>：</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> CenterSon <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-center.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> provide<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 跨层级函数 => 给子孙后代传递可以修改数据的方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeCount'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    count<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newCount</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>我是顶层组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CenterSon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CenterSon</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>底部组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> inject <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 inject 获取父组件传递过来的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 获取父组件传递过来的方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> chanage <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'changeCount'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clickFn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 使用方法传入参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">chanage</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>我是底层组件 - <span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clickFn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>更新count<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>中间组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> ButtonSon <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/son-button.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>我是中间层组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ButtonSon</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ButtonSon</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "web",
                "vue3",
                "计算机学科",
                "web",
                "vue3"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AEaxios/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AEaxios/",
            "title": "vue3-全局配置axios与使用",
            "date_published": "2024-01-03T02:58:25.494Z",
            "content_html": "<h2 id=\"vue3全局配置axios与使用\"><a class=\"anchor\" href=\"#vue3全局配置axios与使用\">#</a> vue3 全局配置 axios 与使用</h2>\n<h3 id=\"为什么要全局配置axios\"><a class=\"anchor\" href=\"#为什么要全局配置axios\">#</a> 为什么要全局配置 axios</h3>\n<p>在实际项目开发中，几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题：</p>\n<p>① 每个组件中都需要导入 axios（代码臃肿）</p>\n<p>② 每次发请求都需要填写完整的请求路径（不利于后期的维护）</p>\n<h3 id=\"vue2与vue3配置axios的不同之处\"><a class=\"anchor\" href=\"#vue2与vue3配置axios的不同之处\">#</a> vue2 与 vue3 配置 axios 的不同之处</h3>\n<p>在 vue2 中会习惯性的把 axios 挂载到全局，以方便在各个组件或页面中使用 this.$http 请求接口。但是在 vue3 中取消了 Vue.prototype，在全局挂载方法和属性时，需要使用官方提供的 globalPropertiesAPI。</p>\n<h3 id=\"第一步导入axios并进行挂载\"><a class=\"anchor\" href=\"#第一步导入axios并进行挂载\">#</a> 第一步：导入 axios 并进行挂载</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>globalProperties<span class=\"token punctuation\">.</span>$http <span class=\"token operator\">=</span> axios</pre></td></tr></table></figure><h3 id=\"第二步在组件中获取getcurrentinstance实例使用实例中已挂载的http方法\"><a class=\"anchor\" href=\"#第二步在组件中获取getcurrentinstance实例使用实例中已挂载的http方法\">#</a> 第二步：在组件中获取 getCurrentInstance 实例，使用实例中已挂载的 $http 方法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> onMounted<span class=\"token punctuation\">,</span> getCurrentInstance<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>proxy<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> res<span class=\"token operator\">=</span><span class=\"token keyword\">await</span> proxy<span class=\"token punctuation\">.</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'api/v1/topics'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "web",
                "vue3",
                "计算机学科",
                "web",
                "vue3"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E4%BD%9C%E6%B5%81/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%B7%A5%E4%BD%9C%E6%B5%81/",
            "title": "vue3-提交前做代码检查",
            "date_published": "2024-01-03T02:58:25.482Z",
            "content_html": "<h2 id=\"提交前做代码检查\"><a class=\"anchor\" href=\"#提交前做代码检查\">#</a> 提交前做代码检查</h2>\n<p>一定要保证代码在丢到仓库里面之前，一定保证代码全部都是规范的，然后再进仓库才是合理的。不然不规范的代码放进仓库了，然后后面的同事拉取代码结果一堆报错人家还要修改你送过来的报错。 那么需要再提交之前做代码的规范检查使用 husky 这个工具来完成。</p>\n<p>husky 是基于 git 的 hooks 工具。hooks 工具可以理解为就是钩子，可以在特定的时机执行特定的命令。比如 vue 的生命周期其中也有了解过钩子的说法。</p>\n<p><strong>如下操作步骤</strong>：</p>\n<ol>\n<li>\n<p>初始化 git 仓库，执行 git init 即可</p>\n</li>\n<li>\n<p>初始化 husky 工具配置，执行  <code>pnpm dlx husky-init &amp;&amp; pnpm install</code>  即可</p>\n<p>官网： <span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBpY29kZS5naXRodWIuaW8vaHVza3kv\">https://typicode.github.io/husky/</span></p>\n</li>\n<li>\n<p>修改 <code>.husky/pre-commit</code>  文件</p>\n<p>- 表示删除线</p>\n<p>我们把原来有的 npm test 删掉，然后换成 pnpm lint</p>\n<p><strong>pnpm lint 作用</strong>：对整个项目当中所有文件进行校验，并且发现有错误的地方会自动修复</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">-</span>n<span class=\"token operator\">-</span>p<span class=\"token operator\">-</span>m<span class=\"token operator\">-</span> <span class=\"token operator\">-</span>t<span class=\"token operator\">-</span>e<span class=\"token operator\">-</span>s<span class=\"token operator\">-</span>t<span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">+</span>pnpm lint</pre></td></tr></table></figure><p>&lt;font title='red'&gt; 问题 &lt;/font&gt;：默认进行的是全量检查，&lt;font title='red'&gt; 耗时 &lt;/font &gt; 问题，&lt;font title='red'&gt; 历史 &lt;/font &gt; 问题。</p>\n</li>\n</ol>\n<p><strong>演示</strong>：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hint: Using <span class=\"token string\">'master'</span> as the name <span class=\"token keyword\">for</span> the initial branch. This default branch name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hint: is subject to change. To configure the initial branch name to use <span class=\"token keyword\">in</span> all</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hint: of your new repositories, <span class=\"token function\">which</span> will suppress this warning, call:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hint:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hint:   <span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> init.defaultBranch <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hint:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>hint: Names commonly chosen instead of <span class=\"token string\">'master'</span> are <span class=\"token string\">'main'</span>, <span class=\"token string\">'trunk'</span> and</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>hint: <span class=\"token string\">'development'</span><span class=\"token builtin class-name\">.</span> The just-created branch can be renamed via this command:</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>hint:</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>hint:   <span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Initialized empty Git repository <span class=\"token keyword\">in</span> E:/Vue/Demo7/Demo/vue3-big-event-admin/.git/</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin <span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>$ <span class=\"token function\">pnpm</span> dlx husky-init <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Packages: +2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>++</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Progress: resolved <span class=\"token number\">2</span>, reused <span class=\"token number\">0</span>, downloaded <span class=\"token number\">2</span>, added <span class=\"token number\">2</span>, <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>husky-init updating package.json</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  setting prepare script to <span class=\"token builtin class-name\">command</span> <span class=\"token string\">\"husky install\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>husky - Git hooks installed</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>husky - created .husky/pre-commit</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>please review changes <span class=\"token keyword\">in</span> package.json</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Packages: +1</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>+</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Progress: resolved <span class=\"token number\">217</span>, reused <span class=\"token number\">195</span>, downloaded <span class=\"token number\">0</span>, added <span class=\"token number\">1</span>, <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">></span> vue3-big-event-admin@0.0.0 prepare E:<span class=\"token punctuation\">\\</span>vue<span class=\"token punctuation\">\\</span>Demo7<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>vue3-big-event-admin</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">></span> husky <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>husky - Git hooks installed</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>dependencies:</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>+ pinia <span class=\"token number\">2.1</span>.6</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>+ vue <span class=\"token number\">3.3</span>.4</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>+ vue-router <span class=\"token number\">4.2</span>.4</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>devDependencies:</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>+ @rushstack/eslint-patch <span class=\"token number\">1.3</span>.3</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>+ @vitejs/plugin-vue <span class=\"token number\">4.3</span>.4</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>+ @vue/eslint-config-prettier <span class=\"token number\">8.0</span>.0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>+ eslint <span class=\"token number\">8.48</span>.0</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>+ eslint-plugin-vue <span class=\"token number\">9.17</span>.0</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>+ husky <span class=\"token number\">8.0</span>.3</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>+ prettier <span class=\"token number\">3.0</span>.3</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>+ vite <span class=\"token number\">4.4</span>.9</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Done <span class=\"token keyword\">in</span> <span class=\"token number\">3</span>.9s</pre></td></tr></table></figure><p>完毕后，在项目目录中就会出现一个文件夹</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308311651735.png\" alt=\"image-20230831165129161\" /></p>\n<p>在 package.json 文件中可以看到如下：</p>\n<p><strong>解释</strong>：lint 命令对其中后缀名的文件都进行校验</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix --ignore-path .gitignore\"</span></pre></td></tr></table></figure><p>但是这个命令并不会被触发，怎么使用呢？如下：</p>\n<p>在 pre-commit 配置文件中，注释掉原有的 npm test 添加 pnpm lint，当我们提交代码就会触发 lint 命令进行校验了。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hashbang comment\">#!/usr/bin/env sh</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span> <span class=\"token string\">\"$(dirname -- \"</span>$0<span class=\"token string\">\")/_/husky.sh\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># npm test</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pnpm lint</pre></td></tr></table></figure><p><strong>进行实验</strong>：</p>\n<p>在 main.js 中添加一行代码：gaga 为 未定义的变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>gaga<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>将代码添加到暂存区</strong>：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin <span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'.eslintrc.cjs'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'.gitignore'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'.husky/pre-commit'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'.prettierrc.json'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'.vscode/extensions.json'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'README.md'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'index.html'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'package.json'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'pnpm-lock.yaml'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/App.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/assets/base.css'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/assets/logo.svg'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/assets/main.css'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/HelloWorld.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/TheWelcome.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/WelcomeItem.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconCommunity.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconDocumentation.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconEcosystem.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconSupport.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconTooling.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/main.js'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/router/index.js'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/stores/counter.js'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/views/AboutView.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/views/HomeView.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'vite.config.js'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr></table></figure><p><strong>将代码提交</strong>：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin <span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'提交啦'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> vue3-big-event-admin@0.0.0 lint E:<span class=\"token punctuation\">\\</span>Vue<span class=\"token punctuation\">\\</span>Demo7<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>vue3-big-event-admin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> eslint <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">--ext</span> .vue,.js,.jsx,.cjs,.mjs <span class=\"token parameter variable\">--fix</span> --ignore-path .gitignore</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>E:<span class=\"token punctuation\">\\</span>Vue<span class=\"token punctuation\">\\</span>Demo7<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>vue3-big-event-admin<span class=\"token punctuation\">\\</span>src<span class=\"token punctuation\">\\</span>main.js</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">9</span>:13  error  <span class=\"token string\">'gaga'</span> is not defined  no-undef</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>✖ <span class=\"token number\">1</span> problem <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> error, <span class=\"token number\">0</span> warnings<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> ELIFECYCLE  Command failed with <span class=\"token builtin class-name\">exit</span> code <span class=\"token number\">1</span>.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>husky - pre-commit hook exited with code <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>提交时出现了报错。解释报错：在 main.js 中的 9 行 13 字符的地方发生错误，原因：未定义的变量</p>\n<hr />\n<p><strong>将 main.js 文件中的报错代码注释或者删除或者修复后再次进行提交代码到仓库</strong>：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin <span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/App.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/TheWelcome.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconCommunity.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconDocumentation.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconEcosystem.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/components/icons/IconSupport.vue'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'src/main.js'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>warning: <span class=\"token keyword\">in</span> the working copy of <span class=\"token string\">'vite.config.js'</span>, LF will be replaced by CRLF the next <span class=\"token function\">time</span> Git touches it</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin <span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>$ <span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'提交啦1'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">></span> vue3-big-event-admin@0.0.0 lint E:<span class=\"token punctuation\">\\</span>Vue<span class=\"token punctuation\">\\</span>Demo7<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>vue3-big-event-admin</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">></span> eslint <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">--ext</span> .vue,.js,.jsx,.cjs,.mjs <span class=\"token parameter variable\">--fix</span> --ignore-path .gitignore</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>master <span class=\"token punctuation\">(</span>root-commit<span class=\"token punctuation\">)</span> 135d389<span class=\"token punctuation\">]</span> 提交啦1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token number\">28</span> files changed, <span class=\"token number\">2397</span> insertions<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> create mode <span class=\"token number\">100644</span> .eslintrc.cjs</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> create mode <span class=\"token number\">100644</span> .gitignore</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> create mode <span class=\"token number\">100644</span> .husky/pre-commit</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> create mode <span class=\"token number\">100644</span> .prettierrc.json</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> create mode <span class=\"token number\">100644</span> .vscode/extensions.json</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> create mode <span class=\"token number\">100644</span> README.md</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> create mode <span class=\"token number\">100644</span> index.html</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> create mode <span class=\"token number\">100644</span> package.json</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> create mode <span class=\"token number\">100644</span> pnpm-lock.yaml</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> create mode <span class=\"token number\">100644</span> public/favicon.ico</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/App.vue</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/assets/base.css</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/assets/logo.svg</pre></td></tr><tr><td data-num=\"33\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/assets/main.css</pre></td></tr><tr><td data-num=\"34\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/HelloWorld.vue</pre></td></tr><tr><td data-num=\"35\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/TheWelcome.vue</pre></td></tr><tr><td data-num=\"36\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/WelcomeItem.vue</pre></td></tr><tr><td data-num=\"37\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/icons/IconCommunity.vue</pre></td></tr><tr><td data-num=\"38\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/icons/IconDocumentation.vue</pre></td></tr><tr><td data-num=\"39\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/icons/IconEcosystem.vue</pre></td></tr><tr><td data-num=\"40\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/icons/IconSupport.vue</pre></td></tr><tr><td data-num=\"41\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/components/icons/IconTooling.vue</pre></td></tr><tr><td data-num=\"42\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/main.js</pre></td></tr><tr><td data-num=\"43\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/router/index.js</pre></td></tr><tr><td data-num=\"44\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/stores/counter.js</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/views/AboutView.vue</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> create mode <span class=\"token number\">100644</span> src/views/HomeView.vue</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> create mode <span class=\"token number\">100644</span> vite.config.js</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Administrator@Jfier MINGW64 /e/vue/Demo7/Demo/vue3-big-event-admin <span class=\"token punctuation\">(</span>master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>$ <span class=\"token function\">git</span> log <span class=\"token parameter variable\">--oneline</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>135d389 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span> 提交啦1</pre></td></tr></table></figure><p>提交成功了！</p>\n<h2 id=\"暂存区eslint校验\"><a class=\"anchor\" href=\"#暂存区eslint校验\">#</a> 暂存区 eslint 校验</h2>\n<p>解决上述的历史问题，防止别人的不规范代码影响到自己的代码。</p>\n<p>这个插件会校验暂存区新添加的代码，不会官历史的代码有什么问题。</p>\n<ol>\n<li>\n<p>安装 lint-staged 包  <code>pnpm i lint-staged -D</code></p>\n</li>\n<li>\n<p>package.json 配置  <code>lint-staged</code>  命令</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//... 省略...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"*.&#123;js,ts,vue&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     \t<span class=\"token string\">\"eslint --fix\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite build\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"preview\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite preview\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .vue,.js,.jsx,.cjs,.mjs --fix --ignore-path .gitignore\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write src/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"husky install\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span>   <span class=\"token comment\">//&lt;------------------------</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>.husky/pre-commit</code>  文件修改</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pnpm lint<span class=\"token operator\">-</span>staged</pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "web",
                "vue3",
                "计算机学科",
                "web",
                "vue3"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/Vue3.3%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/vue/vue3/Vue3.3%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "vue3-新特性",
            "date_published": "2024-01-03T02:58:25.469Z",
            "content_html": "<h2 id=\"defineoptions\"><a class=\"anchor\" href=\"#defineoptions\">#</a> defineOptions</h2>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 背景说明 &lt;/span&gt;：</p>\n<p>有 <code>&lt;script setup&gt;</code>  之前，如果要定义 props，emits 可以轻而易举的添加一个与 setup 平级的属性。</p>\n<p>但是有了 <code>&lt;script setup&gt;</code>  后，就没法这么干了 setup 属性已经没有了，自然无法添加与其平级的属性。</p>\n<hr />\n<p>为了解决这一问题，引入了 &lt;font title='red'&gt;defineProps&lt;/font &gt; 与 &lt; font title='red'&gt;defineEmits&lt;/font &gt; 这两个宏，但是只解决了 &lt; font title='red'&gt;props&lt;/font &gt; 与 &lt; font title='red'&gt;emits&lt;/font &gt; 这两个属性。</p>\n<p>如果我们要定义组件的 name 或其它自定义的属性，还是得回到最原始的用法 —— 再添加一个普通的 &lt;script&gt; 标签。</p>\n<p>这样就会存在两个 &lt;script&gt; 标签。让人无法接受。</p>\n</blockquote>\n<p>于是。。。就迎来了。</p>\n<h2 id=\"vue33新特性-defineoptions\"><a class=\"anchor\" href=\"#vue33新特性-defineoptions\">#</a> Vue3.3 新特性 - defineOptions</h2>\n<p>所以在 vue3.3 中新引入了 &lt;font title='red'&gt;defineOptions &lt;/font &gt; 宏。顾名思义，主要是用来定义 &lt;font title='red'&gt;Options API &lt;/font &gt; 的选项。可以用 defineOptions 定义任意的选项，props，emits，expose，slots 除外 (因为这些可以使用 defineXXX 来做到)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">defineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   \t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Foo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 不希望组件的根元素继承特性，如果希望设置为 true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t<span class=\"token literal-property property\">inheritAttrs</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t<span class=\"token comment\">//... 更多自定义属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"vue33新特性-definemodel\"><a class=\"anchor\" href=\"#vue33新特性-definemodel\">#</a> Vue3.3 新特性 - defineModel</h2>\n<p>在 Vue3 中，自定义组件上使用 v-model，相当于传递一个 modelValue 属性，同时触发 update:modelValue 事件</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308302015742.png\" alt=\"image-20230830201543099\" /></p>\n<p>我们需要先定义 props，在定义 emits。其中有许多重复的代码。如果需要修改此值，还需要手动调用 emit 函数。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308302031546.png\" alt=\"image-20230830203106641\" /></p>\n<p><strong>代码演示</strong>：</p>\n<p>父组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> MyInput <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/my-input.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>MyInput</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>MyInput</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>子组件</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineModel <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> modeValue <span class=\"token operator\">=</span> <span class=\"token function\">defineModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> emit <span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'update:modeValue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>modeValue<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token attr-name\">@input</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>e => modeValue = e.target.value <span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>vite 配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> fileURLToPath<span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'node:url'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">'@vitejs/plugin-vue'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// https://vitejs.dev/config/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 配置开启 defineModel</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">script</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token literal-property property\">defineModel</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> <span class=\"token function\">fileURLToPath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"./Vue3.3%E6%96%B0%E7%89%B9%E6%80%A7.assets/image-20230830203747863.png\" alt=\"image-20230830203747863\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "vue3",
                "计算机学科",
                "web",
                "vue3"
            ]
        }
    ]
}