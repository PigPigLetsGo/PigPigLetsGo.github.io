{
    "version": "https://jsonfeed.org/version/1",
    "title": "D の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/TreeUtil/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/TreeUtil/",
            "title": "",
            "date_published": "2024-02-16T11:28:18.091Z",
            "content_html": "<h1 id=\"treeutil\"><a class=\"anchor\" href=\"#treeutil\">#</a> TreeUtil</h1>\n<p>导入依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.hutool<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>hutool-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.7.22<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建数据库：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240216193508088.png\" alt=\"image-20240216193508088\" /></p>\n<p>实体类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EqualsAndHashCode</span><span class=\"token punctuation\">(</span>callSuper <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Managebar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> parentId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> orderNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> level<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>service：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ManagebarService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IService</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">treeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ServiceImpl：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"managebarService\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ManagebarServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ManagebarMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ManagebarService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">treeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//1. 获取所有资料分类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">></span></span> dataList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBaseMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Wrappers</span><span class=\"token punctuation\">.</span><span class=\"token function\">lambdaQuery</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Managebar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//2. 配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">TreeNodeConfig</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNodeConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setIdKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// 默认 id，可以不设置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setParentIdKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parentId\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 父 id</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setNameKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                          <span class=\"token comment\">// 分类名称</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setDeep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                                  <span class=\"token comment\">// 最大递归深度</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setChildrenKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"childrenList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 孩子节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">setWeightKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sort\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                        <span class=\"token comment\">// 排序字段</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//3. 转树</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> treeList <span class=\"token operator\">=</span> <span class=\"token class-name\">TreeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span>dataList<span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> treeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parentId\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getParentId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"level\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            treeNode<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderNum\"</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 扩展属性...</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> treeList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Controller：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"managebarService\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ManagebarService</span> managebarService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tree</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>managebarService<span class=\"token punctuation\">.</span><span class=\"token function\">treeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问地址返回的数据效果如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240216193655576.png\" alt=\"image-20240216193655576\" /></p>\n<p>这样看着不明显我们通过工具进行解析一下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240216193729157.png\" alt=\"image-20240216193729157\" /></p>\n<p>完毕！</p>\n",
            "tags": []
        },
        {
            "id": "https://pigpigletsgo.github.io/bug/SpringBoot3.x%E4%BD%BF%E7%94%A8MyBatisPlus%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/bug/SpringBoot3.x%E4%BD%BF%E7%94%A8MyBatisPlus%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "SpringBoot3.x使用MyBatisPlus的问题",
            "date_published": "2024-02-15T03:44:27.623Z",
            "content_html": "<p>问题描述：</p>\n<blockquote>\n<p>springboot 由 3.1.5 升级到 3.2.0 报 Invalid value type for attribute ‘factoryBeanObjectType‘: java.lang.String</p>\n</blockquote>\n<p>目前 mybatisplus 没有支持 SpringBoot3.2.2 的所以我们需要使用如下坐标来解决问题：</p>\n<pre><code class=\"language-.xml\">&lt;dependency&gt;\n    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-plus-spring-boot3-starter&lt;/artifactId&gt;\n    &lt;version&gt;3.5.5&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n",
            "tags": [
                "问题总汇",
                "问题总汇",
                "MyBatisPlus",
                "版本问题"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "title": "解决跨域问题",
            "date_published": "2024-02-12T12:35:08.435Z",
            "content_html": "<h1 id=\"解决nginx跨域问题\"><a class=\"anchor\" href=\"#解决nginx跨域问题\">#</a> 解决 Nginx 跨域问题</h1>\n<figure class=\"highlight nginx\"><figcaption data-lang=\"nginx\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token directive\"><span class=\"token keyword\">location</span> /</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Origin *</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Methods <span class=\"token string\">'GET, POST, OPTIONS'</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Headers <span class=\"token string\">'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个配置做了以下几件事：</p>\n<ul>\n<li><a href=\"https://cloud.tencent.com/developer/article/1648860\"> <code>Access-Control-Allow-Origin *</code>  允许所有源站点访问本服务器的数据</a>。</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1648860\"> <code>Access-Control-Allow-Methods 'GET, POST, OPTIONS'</code>  允许 GET、POST 和 OPTIONS 这三种 HTTP 请求方法</a>。</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1648860\"> <code>Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization'</code>  允许这些 HTTP 请求头的字段</a>。</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%85%8D%E7%BD%AE/",
            "title": "高可用",
            "date_published": "2024-02-12T12:35:08.395Z",
            "content_html": "<h2 id=\"高可用配置\"><a class=\"anchor\" href=\"#高可用配置\">#</a> 高可用配置</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-14-11-02_20230225142326.png\" alt=\"image_2023-02-01-14-11-02\" /></p>\n<h3 id=\"安装keepalived\"><a class=\"anchor\" href=\"#安装keepalived\">#</a> 安装 Keepalived</h3>\n<h4 id=\"编译安装\"><a class=\"anchor\" href=\"#编译安装\">#</a> 编译安装</h4>\n<p>下载地址:</p>\n<p><code>https://www.keepalived.org/download.html</code></p>\n<p>使用 <code>./configure</code>  编译安装</p>\n<p>如遇报错提示:</p>\n<pre><code>configure: error :\n!!! OpenSSL is not properly installed on your system !!!\n!!! Can not include OpenSSL headers files !!!\n</code></pre>\n<p>安装依赖</p>\n<pre><code>yum install openssl-devel\n</code></pre>\n<p><strong>yum 安装</strong></p>\n<pre><code>yum install keepalived\n</code></pre>\n<p><strong>配置</strong></p>\n<p>使用 yum 安装后配置文件在</p>\n<p><code>/etc/keepalived/Keepalived.conf</code></p>\n<p><strong>最小配置</strong></p>\n<p>第一台机器</p>\n<pre><code>! Configuration File for keepalived\n\nglobal_defs &#123;\n\trouter_id lb111\n&#125;\n#在内网当中通讯的协议 atguigu:实例名称\nvrrp_instance atguigu &#123;\n    state MASTER\n    interface ens33 #对应自己的网卡的名字\n    virtual_router_id 51\n    #主备竞选的的优先级高谁就是Master\n    priority 100 #优先级\n    advert_int 1 #间隔检测的时间\n    authentication &#123; #在内网当认证服务器,同一组要保持一致\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123; #虚拟的ip地址\n        192.168.244.200\n    &#125;\n&#125;\n</code></pre>\n<p>启动 Keepalived</p>\n<pre><code>systemctl start keepalived\n</code></pre>\n<p>查看 ip</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-27-59_20230225142344.png\" alt=\"image_2023-02-01-21-27-59\" /></p>\n<ul>\n<li>注意：使用 ip addr 来查看 ifconfig 查看不到</li>\n</ul>\n<p>第二台机器</p>\n<pre><code>! Configuration File for keepalived\n\nglobal_defs &#123;\n   router_id lb110\n&#125;\n\nvrrp_instance atguigu &#123;\n    state BACKUP #备机\n    interface ens33 \n    virtual_router_id 51\n    priority 50 #优先级要比Master低\n    advert_int 1\n    authentication &#123;\n        auth_type PASS\n        auth_pass 1111\n    &#125;\n    virtual_ipaddress &#123;\n        192.168.244.200\n    &#125;\n&#125;\n</code></pre>\n<p>ip add 查看</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-38-30_20230225142357.png\" alt=\"image_2023-02-01-21-38-30\" /></p>\n<p>只有一个 ip</p>\n<p>在 win 下 ping 一下虚拟 ip 查看效果:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-40-23_20230225142409.png\" alt=\"image_2023-02-01-21-40-23\" /></p>\n<p>我们将这个 111 的给断开直接关机</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-42-13_20230225142420.png\" alt=\"image_2023-02-01-21-42-13\" /></p>\n<p>断了一下有重新 ping 上了查看下 110 的 ip 状态</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-43-20_20230225142431.png\" alt=\"image_2023-02-01-21-43-20\" /></p>\n<p>可以看到 110 用 IP add 既然查看到了虚拟 ip</p>\n<p>这就是 ip 飘逸通过 keepalived 飘逸</p>\n<p>访问页面时也是通过虚拟 ip 来访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-21-45-28_20230225142445.png\" alt=\"image_2023-02-01-21-45-28\" /></p>\n<h3 id=\"高可用场景及解决方案\"><a class=\"anchor\" href=\"#高可用场景及解决方案\">#</a> 高可用场景及解决方案</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-14-11-16_20230225142457.png\" alt=\"image_2023-02-01-14-11-16\" /></p>\n<h3 id=\"选举方式\"><a class=\"anchor\" href=\"#选举方式\">#</a> 选举方式</h3>\n<p>优先级决定选举：谁的优先级高就越容易 Master</p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%98%B2%E7%9B%97%E9%93%BE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E9%98%B2%E7%9B%97%E9%93%BE/",
            "title": "防盗链",
            "date_published": "2024-02-12T12:35:08.378Z",
            "content_html": "<h2 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链</h2>\n<ul>\n<li>http 协议中的 referer</li>\n</ul>\n<h3 id=\"nginx防盗链配置\"><a class=\"anchor\" href=\"#nginx防盗链配置\">#</a> nginx 防盗链配置</h3>\n<blockquote>\n<p>valid_referers none | bolcked | server_names | strings ... ;</p>\n</blockquote>\n<ul>\n<li>\n<p>none, 检测 Refere 头域不存在的情况</p>\n</li>\n<li>\n<p>bolcked, 检测 Refere 头域的值被防火墙或者代理服务器删除或者伪装的情况，这种情况该头域的值不以 &quot;http://&quot; 或 &quot;https://&quot; 开头</p>\n</li>\n<li>\n<p>server_names, 设置一个或多个 URL, 检测 Refere 头域的值是否是这些 URL 中的某一个</p>\n</li>\n</ul>\n<p>在需要防盗链的 location 中配置</p>\n<pre><code>valid_referers 192.168.44.101;\nif($invalid_referer)&#123;\n    return 403;\n&#125;\n</code></pre>\n<p><strong>使用 curl 测试</strong></p>\n<p><code>curl -I http://192.168.44.101/img/logo.png</code></p>\n<p><strong>带引用</strong></p>\n<p><code>curl -e &quot;http://baidu.com&quot; -I http://192.168.44.101/img/loggo.png</code></p>\n<blockquote>\n<p>演示</p>\n</blockquote>\n<p><strong>0 号 Linux 配置如下</strong></p>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://192.168.244.139:8088;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        #正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n            valid_referers 192.168.244.128:8089;                                                                                                          \n            if ($invalid_referer) &#123;\n                return 403;\n            &#125;\n\n            root html;\n            index  index.html index.htm;\n        &#125;\n\n&#125;\n</code></pre>\n<ul>\n<li>在静态资源的 location 下配置防盗链，防盗链的方式为 ip 地址</li>\n</ul>\n<p>访问效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-19-32_20230225141924.png\" alt=\"image_2023-01-31-21-19-32\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-21-10_20230225141935.png\" alt=\"image_2023-01-31-21-21-10\" /></p>\n<ul>\n<li>从控制台中点击图片查看情况</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-27-47_20230225141948.png\" alt=\"image_2023-01-31-21-27-47\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-28-21_20230225141959.png\" alt=\"image_2023-01-31-21-28-21\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-28-32_20230225142012.png\" alt=\"image_2023-01-31-21-28-32\" /></p>\n<p><strong>none</strong></p>\n<p>图片查看效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-21-29-24_20230225142026.png\" alt=\"image_2023-01-31-21-29-24\" /></p>\n<h3 id=\"使用浏览器或curl检测\"><a class=\"anchor\" href=\"#使用浏览器或curl检测\">#</a> 使用浏览器或 curl 检测</h3>\n<p>测试命令: <code>curl http://192.168.244.128:8089</code></p>\n<p>效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-29-40_20230225142043.png\" alt=\"image_2023-02-01-09-29-40\" /></p>\n<p>测试命令: <code>curl -I http://192.168.244.128:8089</code></p>\n<p>效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-30-30_20230225142058.png\" alt=\"image_2023-02-01-09-30-30\" /></p>\n<p><strong>通过控制台查看图片</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-33-20_20230225142111.png\" alt=\"image_2023-02-01-09-33-20\" /></p>\n<h3 id=\"返回错误码\"><a class=\"anchor\" href=\"#返回错误码\">#</a> 返回错误码</h3>\n<p>我们将连接复制下来，到 Xshell 中 curl -I 一下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-34-04_20230225142126.png\" alt=\"image_2023-02-01-09-34-04\" /></p>\n<p>标头返回的是 200 请求状态码，在控制台中状态码为：403</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-35-02_20230225142136.png\" alt=\"image_2023-02-01-09-35-02\" /></p>\n<p><strong>如果使用:curl -e 来用其它网站引用这个 图片不带 referer 查看下效果</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-09-37-49_20230225142152.png\" alt=\"image_2023-02-01-09-37-49\" /></p>\n<p>返回的标头中状态码为：403 了</p>\n<h3 id=\"返回错误页面\"><a class=\"anchor\" href=\"#返回错误页面\">#</a> 返回错误页面</h3>\n<p>让限制的 ip 主机访问静态资源时转到自己定义的错误页面中</p>\n<p>0 号 Linux 配置如下:</p>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n\t    #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n     \t    proxy_pass http://192.168.244.139:8088;\n\t    #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n\t\n\t#正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n\t    valid_referers none 192.168.244.128:8089;\n\t    if ($invalid_referer) &#123;\n\t\treturn 401;\n\t    &#125;\n\n\t    root html;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        error_page   401 /401.html;\n        location = /401.html &#123;\n            root   html;\n        &#125;\n\n    &#125;\n</code></pre>\n<p>效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-10-20-48_20230225142205.png\" alt=\"image_2023-02-01-10-20-48\" /></p>\n<p>跳转到的页面展示效果:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-10-21-31_20230225142216.png\" alt=\"image_2023-02-01-10-21-31\" /></p>\n<p>解决中文乱码:</p>\n<p>配置错误页面:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;Error&lt;/title&gt;\n&lt;style&gt;\nhtml &#123; color-scheme: light dark; &#125;                                                                                                 \nbody &#123; width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; &#125;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;An error occurred.&lt;/h1&gt;\n&lt;p&gt;非法请求&lt;br/&gt;\nPlease try again later.&lt;/p&gt;\n&lt;p&gt;If you are the system administrator of this resource then you should check\nthe error log for details.&lt;/p&gt;\n&lt;p&gt;&lt;em&gt;Faithfully yours, nginx.&lt;/em&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>再次访问查看:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-10-24-51_20230225142233.png\" alt=\"image_2023-02-01-10-24-51\" /></p>\n<h3 id=\"整合rewrite返回报错图片\"><a class=\"anchor\" href=\"#整合rewrite返回报错图片\">#</a> 整合 rewrite 返回报错图片</h3>\n<p>在 nginx/html 目录中创建一个 img 目录里面下载一个要显示的报错图片</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-11-11-48_20230225142248.png\" alt=\"image_2023-02-01-11-11-48\" /></p>\n<p>0 号 Linux 配置如下:</p>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://192.168.244.139:8088;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n\n        #正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n            valid_referers none 192.168.244.128:8089;\n            if ($invalid_referer) &#123;\n                #目标匹配所有   到/img/x.jpg\n                rewrite ^/      /img/x.jpg break;\n                #return /401.html;\n            &#125;\n\n            root html;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;                                                                                   \n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        error_page   401 /401.html;\n        location = /401.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/",
            "title": "反向代理",
            "date_published": "2024-02-12T12:35:08.361Z",
            "content_html": "<h2 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h2>\n<p><strong>不持支反向代理 <code>https</code> </strong> 服务器因为它是要对应证书</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-06-35_20230225141146.png\" alt=\"image_2023-01-28-16-06-35\" /></p>\n<ul>\n<li><strong>lvs 模型</strong></li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230129073941158_20230225141158.png\" alt=\"image-20230129073941158\" /></p>\n<h3 id=\"网关代理与反向代理\"><a class=\"anchor\" href=\"#网关代理与反向代理\">#</a> 网关，代理与反向代理</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-06-45_20230225141210.png\" alt=\"image_2023-01-28-16-06-45\" /></p>\n<h3 id=\"反向代理在系统架构中的应用场景\"><a class=\"anchor\" href=\"#反向代理在系统架构中的应用场景\">#</a> 反向代理在系统架构中的应用场景</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-40-11_20230225141223.png\" alt=\"image_2023-01-28-16-40-11\" /></p>\n<h3 id=\"负载均衡器\"><a class=\"anchor\" href=\"#负载均衡器\">#</a> 负载均衡器</h3>\n<ul>\n<li>需要被负载均衡的服务器我们称之为服务器的集群</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-16-51-19_20230225141235.png\" alt=\"image_2023-01-28-16-51-19\" /></p>\n<h3 id=\"nginx的反向代理配置\"><a class=\"anchor\" href=\"#nginx的反向代理配置\">#</a> Nginx 的反向代理配置</h3>\n<ul>\n<li><strong>关键字</strong>: <code>proxy_pass</code>\n<ul>\n<li>在 location 中配置而且与 root 二选一不能同时使用</li>\n</ul>\n</li>\n</ul>\n<pre><code>server &#123;\n#  listen       80;\n  listen       8080;\n  server_name  localhost;\n  location / &#123;\n      proxy_pass http://www.qq.com;\n      #root   html;\n      index  index.html index.htm;\n  &#125;\n  error_page   500 502 503 504  /50x.html;\n  location = /50x.html &#123;\n      root   html;\n  &#125;\n&#125;\n</code></pre>\n<h4 id=\"proxy_pass跳转外网网站\"><a class=\"anchor\" href=\"#proxy_pass跳转外网网站\">#</a> proxy_pass 跳转外网网站</h4>\n<ul>\n<li>当我们访问时就会访问到 qq 的官网里</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-09-46-14_20230225141251.png\" alt=\"image_2023-01-29-09-46-14\" /></p>\n<ul>\n<li>但我们将反向代理的域名写成 <code>qq.com</code>  时</li>\n</ul>\n<pre><code>server &#123;                      \n    listen       8080;\n    #server_name 192.168.244.128;\n    #server_name localhost;\n    #在win中浏览器输入Linux的IP也能访问到项目,但不能win中输入bogon,Linux的主机名这样访问不到\n    server_name bogon;\n    location / &#123;\n        #反向代理关键字:proxy_pass\n        proxy_pass http://qq.com;\n        #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;                         \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;           \n&#125;\n</code></pre>\n<p>重启服务器后访问并查看网络情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-09-47-45_20230225141308.png\" alt=\"image_2023-01-29-09-47-45\" /></p>\n<p>可以看到 IP 域名请求时进行了重定向跳转到了 www.qq.com 页面中，我们 302 重定向会发送两次请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-09-49-51_20230225141319.png\" alt=\"image_2023-01-29-09-49-51\" /></p>\n<h4 id=\"proxy_pass跳转本地其它服务器中\"><a class=\"anchor\" href=\"#proxy_pass跳转本地其它服务器中\">#</a> proxy_pass 跳转本地其它服务器中</h4>\n<ul>\n<li>\n<p>跟 win 与 Linux 的原理一样，我们访问另一台服务器需要配置其 Linux 的 IP 地址</p>\n</li>\n<li>\n<p>访问到另一台服务器后另一台服务器访问自己本机中的项目</p>\n</li>\n</ul>\n<pre><code>server &#123;                      \n    listen       8080;\n    server_name bogon;        \n\n    location / &#123;\n        #反向代理关键字:proxy_pass\n        proxy_pass http://192.169.244.102;\n        #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;                         \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;           \n&#125;\n</code></pre>\n<p>另一个服务器的配置文件</p>\n<pre><code>server &#123;                      \n    listen       8080;\n    server_name bogon;        \n\n    location / &#123;\n        #反向代理关键字:proxy_pass\n        proxy_pass http://www.qq.com;\n        #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;                         \n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;           \n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>配置这两个 Linux 虚拟机让其保证可以访问到自己创建的 index 页面如下效果:</li>\n</ol>\n<ul>\n<li>虚拟机 1 号</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-14-25-12_20230225141336.png\" alt=\"image_2023-01-29-14-25-12\" /></p>\n<ul>\n<li>虚拟机 2 号</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-14-25-48_20230225141347.png\" alt=\"image_2023-01-29-14-25-48\" /></p>\n<ol start=\"2\">\n<li>在一个主的 nginx 虚拟机的 nginx 配置文件中配置</li>\n</ol>\n<ul>\n<li>虚拟机 0 号</li>\n</ul>\n<pre><code>server &#123;             \n   listen       8080;\n   server_name localhost;\n   \n   location / &#123;     \n       #反向代理关键字:proxy_pass http://后面为虚拟机1号的ip与端口号8080\n       proxy_pass http://192.168.244.138:8080;\n       #root 只能查找本机中根目录的项目\n       #root   http://www.qq.com;\n       index  index.html index.htm;\n   &#125;                \n   error_page   500 502 503 504  /50x.html;                                \n   location = /50x.html &#123;                                                  \n       root   html; \n   &#125;                \n&#125;  \n</code></pre>\n<ul>\n<li>虚拟机 1 号</li>\n</ul>\n<pre><code>server &#123;          \n   listen       8080;\n   server_name  localhost;\n                 \n   location / &#123;\n       root   /www;\n       index  index.html index.htm;\n   &#125;             \n                 \n   error_page   500 502 503 504  /50x.html;\n   location = /50x.html &#123;\n       root   html;\n   &#125;             \n                      \n&#125;\n</code></pre>\n<p>当使用虚拟机 0 号的 ip 来访问浏览器请求时会反向代理到虚拟机 1 号中的根目录的项目中，效果如下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-14-32-52_20230225141555.png\" alt=\"image_2023-01-29-14-32-52\" /></p>\n<h3 id=\"基于反向代理的负载均衡-轮询一人一下\"><a class=\"anchor\" href=\"#基于反向代理的负载均衡-轮询一人一下\">#</a> 基于反向代理的负载均衡 (轮询):[一人一下]</h3>\n<ol>\n<li>安装至少三台 Linux 如果是虚拟机可以进行多开多安装</li>\n</ol>\n<ul>\n<li>在 0 号虚拟机的配置文件中配置如下:</li>\n</ul>\n<p>在 proxy_pass 后定义 http:// 别名，这个别名对应着 upstream 而 upstream 是和 server 同级的，在 upstream 中定义多个 (一组) 服务器</p>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080;\n        server 192.168.244.139:8080;\n    &#125;\n\n    server &#123;\n        listen       8080;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://httpds;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>浏览器请求效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-16-09-07_20230225141610.png\" alt=\"image_2023-01-29-16-09-07\" /></p>\n<p>再次访问请求效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-16-10-10_20230225141622.png\" alt=\"image_2023-01-29-16-10-10\" /></p>\n<h3 id=\"负载均衡策略\"><a class=\"anchor\" href=\"#负载均衡策略\">#</a> 负载均衡策略</h3>\n<p><strong>weight: 设置群众值</strong> (权重)</p>\n<p>通过群众分配比例，每台服务器多少请求转发过去</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-17-10-29_20230225141640.png\" alt=\"image_2023-01-29-17-10-29\" /></p>\n<ul>\n<li>0 号 Linux 的配置如下:</li>\n</ul>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8;\n        server 192.168.244.139:8080 weight=2;                                                                                                             \n    &#125;\n\n    server &#123;\n        listen       8080;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://httpds;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/test_20230225141658.gif\" alt=\"1\" /></p>\n<p>1 号 Linux 项目的请求转发几率比 2 号 Linux 大很多</p>\n<p><strong>down: 设置后不参与负载均衡器</strong></p>\n<ul>\n<li>在 weight 后面设置</li>\n</ul>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8 down;\n        server 192.168.244.139:8080 weight=2;\n    &#125;\n                                                                                                                    \n    server &#123;\n        listen       8080;\n        server_name localhost;\n        location / &#123;\n            #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n            proxy_pass http://httpds;\n            #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>效果如下:</p>\n<ul>\n<li>无论怎么刷新都只会反向代理请求 2 号的项目，1 号已经不参与了</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-16-59-00_20230225141715.png\" alt=\"image_2023-01-29-16-59-00\" /></p>\n<p><strong>backup: 备用</strong></p>\n<p>没有任何可用的群众时使用，正常情况下不参与</p>\n<p>0 号 Linux 配置如下:</p>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8 down;\n        server 192.168.244.139:8080 weight=2 backup;                                                                                                      \n    &#125;\n\n    server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://httpds;\n                #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-17-03-46_20230225141730.png\" alt=\"image_2023-01-29-17-03-46\" /></p>\n<p><strong>ip_hash</strong></p>\n<p>根据客户端的 ip 地址转发同一台服务器，可以保持会话</p>\n<p><strong>least_conn</strong></p>\n<p>最少链接访问</p>\n<p><strong>url_hash</strong></p>\n<p>根据用户访问的 url 定向转发请求</p>\n<p><strong>fair</strong></p>\n<p>根据后端服务器响应时间转发请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-19-00-03_20230225141744.png\" alt=\"image_2023-01-29-19-00-03\" /></p>\n<h3 id=\"反向代理tomcat\"><a class=\"anchor\" href=\"#反向代理tomcat\">#</a> 反向代理 Tomcat</h3>\n<p>操作步骤:</p>\n<ol>\n<li>开启至少两台 Linux</li>\n</ol>\n<p><strong>0 号 Linux 的配置如下:</strong></p>\n<pre><code>#别名的定义,定义一组服务器\n    #upstream和server是同一级别的\n    upstream httpds&#123;\n        server 192.168.244.138:8080 weight=8 down;\n        server 192.168.244.139:8088 weight=2 backup;\n    &#125;\n\n    server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://httpds;\n                #root 只能查找本机中根目录的项目                                                                                                          \n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>使用 upstream 负载均衡了两台 Linux 不过我们只使用 到了一个将 138 的 Linux 设置了 down 为不使用因为 1 号 Linux 的 nginx 端口号和 tomcat 的端口号有冲突问题所以 1 号 Linux 的 nginx 端口号我该为了 8088</p>\n</blockquote>\n<ul>\n<li>如下是 1 号 Linux 的配置:</li>\n</ul>\n<pre><code>server &#123;\n        listen       8088;\n        server_name  localhost;\n                                                                                                                                                          \n        location / &#123;\n            #这里配置的是访问Tomcat的ip地址\n            proxy_pass http://192.168.244.139:8080;\n            #root /www;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n&#125;\n</code></pre>\n<p>浏览器请求效果如下：我们发送 0 号虚拟机的请求反向代理到我们的 1 号 Linux 中的 Tomcat 上</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-08-26-10_20230225141803.png\" alt=\"image_2023-01-30-08-26-10\" /></p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/",
            "title": "动静分离",
            "date_published": "2024-02-12T12:35:08.340Z",
            "content_html": "<h2 id=\"动静分离\"><a class=\"anchor\" href=\"#动静分离\">#</a> 动静分离</h2>\n<blockquote>\n<p>动静分离有一个比较常用的功能这个功能比较适用于中小型的网站，因为中小型网站的并发量不是很高而且需要分离出来的资源不是很多，需要将这些静态资源移动到前置的 Nginx 里</p>\n</blockquote>\n<p>为了提高网站的响应速度，减轻程序服务器 (Tomcat,Jboss 等) 的负载，对于静态资源，如图片，js,css 等文件，可以在反向代理服务器中进行缓存，这样浏览器在请求一个静态资源时，代理服务器就可以直接处理，而不用将请求转发给后端服务器，对于用户请求的动态文件，如 Servlet,jsp 则转发给 Tomcat,Jboss 服务器处理，这就是动静分离，即动态文件于静态文件的分离</p>\n<h3 id=\"使用动静分离的场景\"><a class=\"anchor\" href=\"#使用动静分离的场景\">#</a> 使用动静分离的场景</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-19-25-18_20230225140701.png\" alt=\"image_2023-01-29-19-25-18\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-19-17-18_20230225140714.png\" alt=\"image_2023-01-30-19-17-18\" /></p>\n<p>动静分离可通过 location 对请求 url 进行匹配，将网站静态资源 (HTML,javaScript,CSS,img 等文件) 于后台应用分开部署，提高用户访问静态代码的速度，降低对后台应用访问，通常将静态资源放到 nginx 中，动态资源转发到 tomcat 服务器中</p>\n<p><strong>演示</strong></p>\n<p>0 号机 nginx 配置</p>\n<pre><code>server &#123;\n        listen       8080;\n\t\n        server_name localhost;\n        location / &#123;\n\t\t#httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n\t\tproxy_pass http://192.168.244.139:8088;\n\t\t#root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n&#125;\n</code></pre>\n<p>1 号机的配置如下:</p>\n<pre><code>server &#123;\n        listen       8088;\n        server_name  localhost;\n\n        location / &#123;\n\t    proxy_pass http://192.168.244.139:8080/ngintestday28/web/;\n\t    #root /www;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n&#125;\n</code></pre>\n<p>1 号机中配置了 Tomcat</p>\n<p>访问浏览器效果如下:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-13-48-12_20230225140736.png\" alt=\"image_2023-01-30-13-48-12\" /></p>\n<p>将 1 号机中项目的静态文件删除</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-13-49-42_20230225140748.png\" alt=\"image_2023-01-30-13-49-42\" /></p>\n<p>刷新页面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-13-50-08_20230225140759.png\" alt=\"image_2023-01-30-13-50-08\" /></p>\n<p>变成了原始的样式</p>\n<p><strong>配置反向代理服务器上静态资源</strong></p>\n<p>在 0 号机中配置如下:</p>\n<pre><code> server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://192.168.244.139:8088;\n                #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        #uri地址\n        location /css &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;                                                                                                                                  \n            index  index.html index.htm;\n        &#125;\n&#125;\n</code></pre>\n<p>在 0 号机的 html 目录下传输过去项目的 css 样式</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-00-23_20230225140816.png\" alt=\"image_2023-01-30-14-00-23\" /></p>\n<p>重启服务 <code>systemctl restart nginx.service</code>  , 请求访问地址查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-07-33_20230225140826.png\" alt=\"image_2023-01-30-14-07-33\" /></p>\n<p>静态资源由 nginx 返回，主页由 tomcat 返回</p>\n<p>剩下我们加上其它的样式代码</p>\n<ul>\n<li>js</li>\n</ul>\n<pre><code>server &#123;\n        listen       8080;\n\n        server_name localhost;\n        location / &#123;\n                #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n                proxy_pass http://192.168.244.139:8088;\n                #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        #uri地址\n        location /css &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;\n            index  index.html index.htm;\n        &#125;\n\n        #uri地址\n        location /js &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;\n            index  index.html index.htm;\n        &#125;                                                                                                                                                 \n&#125;\n</code></pre>\n<p>重启服务 <code>systemctl restart nginx.service</code>  , 刷新页面查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-11-35_20230225140843.png\" alt=\"image_2023-01-30-14-11-35\" /></p>\n<p>可以看到 js 加载成功了</p>\n<ul>\n<li>fonts</li>\n</ul>\n<pre><code>#uri地址\n        location /fonts &#123;\n            #root 只能查找本机中根目录的项目                                                                                                              \n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n            root   html;\n            index  index.html index.htm;\n        &#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-12-50_20230225140902.png\" alt=\"image_2023-01-30-14-12-50\" /></p>\n<ul>\n<li>img</li>\n</ul>\n<pre><code>#uri地址\n        location /img &#123;\n            #root 只能查找本机中根目录的项目\n            #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接                                                                         \n            root   html;\n            index  index.html index.htm;\n        &#125;\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-13-41_20230225140916.png\" alt=\"image_2023-01-30-14-13-41\" /></p>\n<p>重启服务 <code>systemctl restart nginx.service</code>  刷新页面查看效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-15-12_20230225140929.png\" alt=\"image_2023-01-30-14-15-12\" /></p>\n<blockquote>\n<p>弊端：代码过多冗余度太大，下面为解决方式：使用正则表达式来解决问题</p>\n</blockquote>\n<ul>\n<li>\n<p>正则规则：以～* 开始在小括号中写入 (x|x|x)</p>\n</li>\n<li>\n<p>~ 根目录<em>任意：跟目录开始</em>任意的地方</p>\n</li>\n</ul>\n<pre><code>server &#123;\n        listen       8080;\n\t\n        server_name localhost;\n        location / &#123;\n\t\t#httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n\t\tproxy_pass http://192.168.244.139:8088;\n\t\t#root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\t\n\t#正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n\t    root html;\n            index  index.html index.htm;\n        &#125;\n&#125;\n</code></pre>\n<ul>\n<li>重启服务后，刷新页面查看效果</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-25-44_20230225140952.png\" alt=\"image_2023-01-30-14-25-44\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-26-23_20230225141003.png\" alt=\"image_2023-01-30-14-26-23\" /></p>\n<p>正常访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-30-14-45-45_20230225141014.png\" alt=\"image_2023-01-30-14-45-45\" /></p>\n<p><strong>使用正则配置动静分离</strong></p>\n<p>常见的 Nginx 正则表达式</p>\n<pre><code>^:匹配输入字符串的起始位置\n$:匹配输入字符串的结束位置\n*:匹配前面字符零次或多次.如&quot;ol*&quot;能匹配&quot;o&quot;及&quot;ol&quot;,&quot;oll&quot;\n+:匹配前面的字符一次或多次.如&quot;ol+&quot;能匹配&quot;ol&quot;及&quot;oll&quot;,&quot;olll&quot;但不能匹配&quot;o&quot;\n?:匹配前面的字符零次或一次.如&quot;do(es)?&quot;能匹配&quot;do&quot;或者&quot;does&quot;,&quot;?&quot;等效于&quot;&#123;0,1&#125;&quot;\n.:匹配除&quot;\\n&quot;之外的任何单个字符,诺要匹配包括&quot;\\n&quot;在内的任意字符,请使用诸如&quot;[.\\n]&quot;之类的模式\n\\:将后面接着的字符标记为一个特殊字符或一个原意字符或一个向后引用,如&quot;\\n&quot;匹配一个换行符,而&quot;\\$&quot;则匹配&quot;$&quot;\n\\d:匹配纯数字\n&#123;n&#125;:重复n次\n&#123;n,&#125;:重复n次或更多次\n&#123;n,m&#125;重复n到m次\n[]:定义匹配的字符范围\n[c]:匹配单个字符c\n[a-z]:匹配a-z小写字母的任意一个\n[a-zA-Z0-9]:匹配所有大小写字母或数字\n():表达式开始和结束位置\n|:或运算符 //例如:(js|img|css)\n</code></pre>\n<p>location 正则:</p>\n<pre><code>//location大致可分为三类\n精准匹配:location = /&#123;&#125;\n一般匹配:location /&#123;&#125;\n正则匹配: location ~/&#123;&#125;\n//location常用的匹配规则\n=:进行普通字符精准匹配,也即是完全匹配\n^~:表示前缀字符串匹配(不是正则匹配,需要使用字符串),如果匹配成功,则不再匹配其它,location\n~:区分大小写的匹配(需要用正则表达式)\n~*:不区分大小写的匹配(需要使用正则表达式)\n!~:区分大小写的匹配取非(需要使用正则表达式)\n!~*:不区分大小写的匹配取非(需要使用正表达式)\n//优先级\n首先精准匹配 =\n其次匹配前缀匹配 ^~\n其次是按文件中顺序的正则匹配 ~或~*\n然后匹配不带任何修饰的前缀匹配\n最后是交给 / 通用匹配\n</code></pre>\n<p><strong>注意</strong></p>\n<ul>\n<li>\n<p>精准匹配: = , 后面的表达式中写的是纯字符串</p>\n</li>\n<li>\n<p>字符串匹配: ^~ 和 <code>字符串匹配</code> ，后面的表达式中写的是纯字符串</p>\n</li>\n<li>\n<p>正则匹配: <sub>和</sub><em>和！<sub> 和！</sub></em>, 后面的表达式中写的是正则表达式</p>\n</li>\n</ul>\n<pre><code> (1）location = / &#123;&#125;\n=为精确匹配 / ，主机名后面不能带任何字符串，比如访问 / 和 /data，则 / 匹配，/data 不匹配\n再比如 location = /abc，则只匹配/abc ，/abc/或 /abcd不匹配。若 location  /abc，则即匹配/abc 、/abcd/ 同时也匹配 /abc/。\n\n（2）location / &#123;&#125;\n因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 比如访问 / 和 /data, 则 / 匹配， /data 也匹配，\n但若后面是正则表达式会和最长字符串优先匹配（最长匹配）\n\n（3）location /documents/ &#123;&#125;\n匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（4）location /documents/abc &#123;&#125;\n匹配任何以 /documents/abc 开头的地址，匹配符合以后，还要继续往下搜索其它 location\n只有其它 location后面的正则表达式没有匹配到时，才会采用这一条\n\n（5）location ^~ /images/ &#123;&#125;\n匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条\n\n（6）location ~* \\.(gif|jpg|jpeg)$ &#123;&#125;\n匹配所有以 gif、jpg或jpeg 结尾的请求\n然而，所有请求 /images/ 下的图片会被 location ^~ /images/ 处理，因为 ^~ 的优先级更高，所以到达不了这一条正则\n\n（7）location /images/abc &#123;&#125;\n最长字符匹配到 /images/abc，优先级最低，继续往下搜索其它 location，会发现 ^~ 和 ~ 存在\n\n（8）location ~ /images/abc &#123;&#125;\n匹配以/images/abc 开头的，优先级次之，只有去掉 location ^~ /images/ 才会采用这一条\n\n（9）location /images/abc/1.html &#123;&#125;\n匹配/images/abc/1.html 文件，如果和正则 ~ /images/abc/1.html 相比，正则优先级更高\n\n优先级总结：\n(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (location /)\n</code></pre>\n<p>实际网站使用中，至少有三个匹配规则定义:</p>\n<ul>\n<li>第一个匹配必选规则:</li>\n</ul>\n<p>直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，比如说官网，这里是直接转发给后端应用服务器了，也可以是一个静态首页</p>\n<pre><code>location = / &#123;\n    proxy_pass http://127.0.0.1:8080/; \n&#125;\n</code></pre>\n<ul>\n<li>第二个必选规则:</li>\n</ul>\n<p>处理静态文件请求，这是 nginx 作为 http 服务器的强项，有两种配置模式，目录匹配或后缀匹配，人选其一或搭配使用</p>\n<pre><code>location ^~ /static/ &#123;\n    root /webroot/static/;\n&#125;\n\nlocation ~* \\.(html|gif|jpg|jpeg|png|css|js|ico)$ &#123;\n    root /webroot/res/;\n&#125;\n</code></pre>\n<ul>\n<li>第三个规则:</li>\n</ul>\n<p>通用规则，用来转发动态请求到后端服务器</p>\n<pre><code>location /api/ &#123;\n    proxy_pass http://127.0.0.1:3000/api/\n&#125;\n</code></pre>\n<h4 id=\"urlrewrite\"><a class=\"anchor\" href=\"#urlrewrite\">#</a> URLRewrite</h4>\n<p>rewrite 是实现 URL 重写的关键指令，根据 regex (正则表达式) 部分内容，重定向到 repacement, 结尾是 flag 标记</p>\n<p>格式:</p>\n<p>rewrite         &lt;regex&gt;         &lt;replacement&gt;       &lt;flag&gt;</p>\n<p>关键字              正则                    替代内容               标记</p>\n<p>关键字：其中关键字 error_log 不能改变</p>\n<p>正则:perl 兼容正则表达式语句进行规则匹配</p>\n<p>替代内容：将正则匹配的内容替换成 replacement</p>\n<p>flag 标记:rewrite 支持的 flag 标记</p>\n<p>flag 标记说明:</p>\n<p>last: &lt;font color=&quot;red&quot;&gt;# 本条规则匹配完成后，继续向下匹配新的 location URI 规则 &lt;/font&gt;</p>\n<p>break: &lt;font color=&quot;red&quot;&gt;# 本条规则匹配完成即终止，不再匹配后面的任何规则 &lt;/font&gt;</p>\n<p>redirect: &lt;font color=&quot;red&quot;&gt;# 返回 302 临时重定向，浏览器地址会显示跳转后的 URL 地址 &lt;/font&gt;</p>\n<p>permanment: &lt;font color=&quot;red&quot;&gt;# 返回 301 永久重定向，浏览器地址栏会显示跳转后的 URL 地址 &lt;/font&gt;</p>\n<p>URLRewrite 的优缺点</p>\n<p>优点：掩藏真实的 url 以及 url 中可能暴漏的参数，以及隐藏 web 使用的编程语言，提高安全性便于搜索引擎收录</p>\n<p>缺点：降低效率，影响性能，如果项目是内网使用，比如公司内部软件，则没有必要配置</p>\n<h4 id=\"负载均衡urlrewrite\"><a class=\"anchor\" href=\"#负载均衡urlrewrite\">#</a> 负载均衡 + URLRewrite</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-20-25-32_20230225141044.png\" alt=\"image_2023-01-31-20-25-32\" /></p>\n<p>开启 101 的防火墙</p>\n<pre><code>systemctl start firewalld\n</code></pre>\n<ul>\n<li>重载规则</li>\n</ul>\n<pre><code>firewalld-cmd --reload\n</code></pre>\n<ul>\n<li>查看已配置规则</li>\n</ul>\n<pre><code>firewalld-cmd --list-all\n</code></pre>\n<ul>\n<li>\n<p>设置规则需要注意的是:ip 为目标开放主机，端口号为本机要开放的端口号</p>\n</li>\n<li>\n<p>添加指定端口和 ip 访问（添加之后记得重新启动防火墙）</p>\n</li>\n</ul>\n<pre><code>firewalld-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.244.128&quot; port protocol=&quot;tcp&quot; port=&quot;8088&quot; accept&quot;\n</code></pre>\n<ul>\n<li>\n<p>ip: 为 0 号 Linux 的 ip</p>\n</li>\n<li>\n<p>port: 为 1 号 Linux 要开放的 Nginx 端口不需要开放 Tomcat 的端口号，也能访问到</p>\n</li>\n<li>\n<p>移除规则</p>\n</li>\n</ul>\n<pre><code>firewalld-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.8.102&quot; port protocol=&quot;tcp&quot; port=&quot;8080&quot; accept&quot;\n</code></pre>\n<ul>\n<li>重启防火墙</li>\n</ul>\n<pre><code>firewalld-cmd --reload\n</code></pre>\n<p>测试:</p>\n<ul>\n<li>将 1 号 Linux 开启防火墙，然后通过 0 号 Linux 反向代理访问一下页面</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-31-16-00-49_20230225141102.png\" alt=\"image_2023-01-31-16-00-49\" /></p>\n<p>访问不到 Error 了</p>\n<p>执行命令让 1 号 Linux 不让内网访问到但是可以让 0 号 Linux 的 Nginx 访问到</p>\n<p>当我们配置如下配置后:</p>\n<ul>\n<li>0 号 Linux 配置如下:</li>\n</ul>\n<pre><code>server &#123;\n        listen       8089;\n        server_name localhost;\n        location / &#123;\n\t    #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n     \t    proxy_pass http://192.168.244.139:8088;\n\t    #root 只能查找本机中根目录的项目\n            #root   http://www.qq.com;\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\t\n\t#正则中不区分大小写,使用格式:(x|x|x|x)\n        location ~*/(js|css|img|fonts) &#123;\n\t    root html;\n            index  index.html index.htm;\n        &#125;\n\n    &#125;\n</code></pre>\n<ul>\n<li>1 号 Linux 配置如下:</li>\n</ul>\n<pre><code> server &#123;\n        listen       8088;\n        server_name  localhost;\n\n        location / &#123;\n\t    proxy_pass http://192.168.244.139:8080/ngintestday28/web/;\n\t    #root /www;\n            index  index.html index.htm;\n        &#125;\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n    &#125;\n</code></pre>\n<p>1 号 Linux 对 0 号 Linux 开放端口的设置信息如下:</p>\n<p><code>rule family=&quot;ipv4&quot; source address=&quot;192.168.244.128&quot; port port=&quot;8088&quot; protocol=&quot;tcp&quot; accept</code></p>\n<p>命令为如下:</p>\n<p><code>sudo firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;目标机IP(访问机)&quot; port protocol=&quot;协议&quot; port=&quot;本机Nginx端口&quot; accept&quot;</code></p>\n<h5 id=\"urlrewirte应用场景\"><a class=\"anchor\" href=\"#urlrewirte应用场景\">#</a> URLRewirte 应用场景</h5>\n<h5 id=\"配置方式\"><a class=\"anchor\" href=\"#配置方式\">#</a> 配置方式</h5>\n<h3 id=\"动静分离原理\"><a class=\"anchor\" href=\"#动静分离原理\">#</a> 动静分离原理</h3>\n<p>/css 的优先级比 / 高</p>\n<pre><code>location / &#123;#优先级比/css低\n        #httpds随便起的别名,但是要与upstream对应得上,upstream和server是同一级别的\n        proxy_pass http://192.168.244.139:8088;\n        #root 只能查找本机中根目录的项目\n    #root   http://www.qq.com;\n    index  index.html index.htm;                                                                                                                  \n&#125;\nerror_page   500 502 503 504  /50x.html;\nlocation = /50x.html &#123;\n    root   html;\n&#125;\n\n#uri地址\nlocation /css &#123;#优先级比/高\n    #root 只能查找本机中根目录的项目\n    #不需要加额外的目录,在访问时会指向根路径然后顺便加上uri的地址同时拼接\n    root   html;\n    index  index.html index.htm;\n&#125;\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85LNMP%E7%8E%AF%E5%A2%83%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85LNMP%E7%8E%AF%E5%A2%83%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE/",
            "title": "安装LNMP环境防火墙配置",
            "date_published": "2024-02-12T12:35:08.296Z",
            "content_html": "<p><strong>网络术语</strong>:</p>\n<p><strong>LNMP</strong> 是指一组通常一起使用来运行动态网站或者服务器的自由软件名称首字母缩写，L 指 Linux,N 指 Nginx,M 一般指 MySQL, 也可以指 MariaDB,P 一般指 PHP, 也可以指 Perl 或 Python</p>\n<p>集成环境网站: <code>oneinstack.com</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-54-14_20230225140420.png\" alt=\"image_2023-02-02-11-54-14\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-54-55_20230225140432.png\" alt=\"image_2023-02-02-11-54-55\" /></p>\n<p>选择好要安装的后复制 wget 命令</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-56-36_20230225140443.png\" alt=\"image_2023-02-02-11-56-36\" /></p>\n<p>在 Linux 中直接执行命令即可安装</p>\n<p>安装完成后的软件位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-11-57-19_20230225140455.png\" alt=\"image_2023-02-02-11-57-19\" /></p>\n<p>如果访问不到 oneinstack 则如下操作:</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-12-01-03_20230225140508.png\" alt=\"image_2023-02-02-12-01-03\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-12-01-20_20230225140521.png\" alt=\"image_2023-02-02-12-01-20\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240212202537236.png\" alt=\"image-20240212202537236\" /></p>\n<p>再次访问 ip</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-12-02-48_20230225140544.png\" alt=\"image_2023-02-02-12-02-48\" /></p>\n<p>但是网站连接是不安全的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240212202524096.png\" alt=\"image-20240212202524096\" /></p>\n<h3 id=\"修改nginx默认主页\"><a class=\"anchor\" href=\"#修改nginx默认主页\">#</a> 修改 Nginx 默认主页</h3>\n<p>从给出的路径 cd 到 Nginx 的 html 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-14-50-18_20230225140608.png\" alt=\"image_2023-02-02-14-50-18\" /></p>\n<p>配置到 html</p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85Discuz%E4%B8%8E%E5%8D%8F%E8%AE%AE%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/%E5%AE%89%E8%A3%85Discuz%E4%B8%8E%E5%8D%8F%E8%AE%AE%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC/",
            "title": "安装Discuz与协议自动跳转",
            "date_published": "2024-02-12T12:35:08.276Z",
            "content_html": "<p>访问官网地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaXNjdXoubmV0Lw==\">1</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-14-48-14_20230225140313.png\" alt=\"image_2023-02-04-14-48-14\" /></p>\n<p>上传到 Nginx 的 html 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-14-55-22_20230225140326.png\" alt=\"image_2023-02-04-14-55-22\" /></p>\n<p>解压缩: <code>unzip [压缩包名称]</code>  如果 unzip 报红，说明没有这个指令，执行命令查看包管理器中有没有该程序</p>\n<pre><code>yum list unzip\n</code></pre>\n<p>选择安装</p>\n<p>然后解压</p>\n<p><code>unzip [压缩包名]</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-13-23_20230225140340.png\" alt=\"image_2023-02-04-12-13-23\" /></p>\n<p>如果配置了安全证书那么，需要将显示的页面配置放到 443 安全证书配置的配置作用域下否则访问 https 443 端口不会走默认的 80 端口就不能访问到我们想要展示的页面了</p>\n<p>安装 Discuz</p>\n<p>如果上传了 upload 目录访问:</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tY2VzNmF5NTFzenpkL3VwbG9hZC9pbnN0YWxs\">https:// 网站地址 /upload/install</span></p>\n<p>只上传了 upload 的目录内文件及访问</p>\n<p>浏览器访问 https:// 网站地址 /install</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-21-30-02_20230225140354.png\" alt=\"image_2023-02-04-21-30-02\" /></p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%BC%80%E6%BA%90%E7%89%88%E5%AE%89%E8%A3%85/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%BC%80%E6%BA%90%E7%89%88%E5%AE%89%E8%A3%85/",
            "title": "nginx开源版安装",
            "date_published": "2024-02-12T12:35:08.255Z",
            "content_html": "<p>打开官网页面点击 <code>Download</code>  ，会跳转到一个下载的页面</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-02-32_20230225140136.png\" alt=\"image_2023-01-28-09-02-32\" /></p>\n<p>点击下载 Linux 版的 Nginx，之后上传到 Linux 中</p>\n<p>解压 Nginx</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-22-01_20230225140146.png\" alt=\"image_2023-01-28-09-22-01\" /></p>\n<p>解压完成后进入到解压后的目录中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-23-03_20230225140157.png\" alt=\"image_2023-01-28-09-23-03\" /></p>\n<p>目录中有一个 <code>configure</code>  脚本，用这个脚本来安装，安装过程中需要一些依赖</p>\n<p>执行该脚本进行安装可能会报错提示需要的依赖没有找到的错误</p>\n<p>需要的依赖：</p>\n<ul>\n<li>gcc：执行命令 <code>sudo yum install -y gcc</code></li>\n</ul>\n<p>错误提示:</p>\n<pre><code>./configure: error: the HTTP rewrite module requires the PCRE library.\nYou can either disable the module by using --without-http_rewrite_module\noption, or install the PCRE library into the system, or build the PCRE library\nstatically from the source with nginx by using --with-pcre=&lt;path&gt; option.\n</code></pre>\n<p><strong>缺少 pcre</strong> 库</p>\n<ul>\n<li>pcre: 执行命令： <code>sudo yum install -y pcre pcre-devel</code></li>\n</ul>\n<p><strong>同样的报错可能缺少 <code>zlib库</code> </strong></p>\n<ul>\n<li>zlib: 执行命令： <code>sudo yum install -y zlib zlib-devel</code></li>\n</ul>\n<p>报错解决！！执行下一步操作</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-34-26_20230225140212.png\" alt=\"image_2023-01-28-09-34-26\" /></p>\n<p>执行 <code>make</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-36-32_20230225140226.png\" alt=\"image_2023-01-28-09-36-32\" /></p>\n<p>执行 <code>sudo make install</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-38-18_20230225140240.png\" alt=\"image_2023-01-28-09-38-18\" /></p>\n<p>安装成功</p>\n<p>启动 Nginx 进入 sbin 目录在这个目录中有一个可执行的文件为 <code>nginx</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-09-39-54_20230225140252.png\" alt=\"image_2023-01-28-09-39-54\" /></p>\n<p>启动 Nginx</p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/",
            "title": "nginx基础配置",
            "date_published": "2024-02-12T12:35:08.239Z",
            "content_html": "<h3 id=\"最小配置文件\"><a class=\"anchor\" href=\"#最小配置文件\">#</a> 最小配置文件</h3>\n<p><strong>Worker_processes</strong></p>\n<p><code>Worker_processes  1;</code>  默认为 1, 表示开启一个业务进程</p>\n<p><strong>Worker_connections</strong></p>\n<p><code>Worker_connection  1024;</code>  单个业务进程可接受连接数</p>\n<p><strong>include  mime.types;</strong></p>\n<p><code>include   mime.types;</code>  引入 http mime 类型</p>\n<p><strong>default_type application/octet-stream</strong></p>\n<p><code>default_type application/octet-stream</code>  如果 mime 类型没匹配上，默认使用二进制流的方式传输</p>\n<p><strong>sendfile on</strong></p>\n<p><code>sendfile on</code>  使用 Linux 的 sendfile (socket,file,len) 高效网络传输，也就是数据 0 拷贝</p>\n<p>未开启 sendfile</p>\n<h3 id=\"核心配置-需要注意以下是购买的域名可以这样使用本地ip或者主机名不能这么玩\"><a class=\"anchor\" href=\"#核心配置-需要注意以下是购买的域名可以这样使用本地ip或者主机名不能这么玩\">#</a> 核心配置 需要注意 =&gt;:<mark> 以下是购买的域名可以这样，使用本地 IP 或者主机名不能这么玩</mark></h3>\n<pre><code>worker_processes  1;\t#开启n个进程\n\nevents &#123;\t#事件驱动模块\n    worker_connections  1024;\t#每个worker可以创建出多少个连接\n&#125;\n\nhttp &#123;\n    include       mime.types;\t#引入,将其它的配置文件引入到主的配置文件里\n    default_type  application/octet-stream;\t#如果mime.types中没有匹配类型则执行默认的方式传输给客户端\n\n    sendfile        on;\t#数据0拷贝\n\n    keepalive_timeout  65;\n\n#虚拟主机 vhost\n    server &#123;\n        listen       8080; #端口号\n        server_name  ~^[0-9]+\\.mmban\\.com$; #当前主机的主机名,域名\n        location / &#123;\n            root   /www/vod;\t#项目的跟目录\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"虚拟主机配置\"><a class=\"anchor\" href=\"#虚拟主机配置\">#</a> 虚拟主机配置</h3>\n<ul>\n<li>~ 符号 ServerName 开始，写正则 ^ 开始 $ 结尾分号；ServerName 结尾</li>\n</ul>\n<pre><code>#虚拟主机 vhost\n    server &#123;\n        listen       8080; #端口号\n        server_name  ~^[0-9]+\\.mmban\\.com$; #当前主机的主机名,域名\n        location / &#123;\n            root   /www/vod;\t#项目的跟目录\n            index  index.html index.htm;\n        &#125;\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"servername配置规则\"><a class=\"anchor\" href=\"#servername配置规则\">#</a> ServerName 配置规则</h3>\n<ul>\n<li>\n<p>本地 IP, 可以使用关键字反向代理 <code>proxy_pass</code></p>\n</li>\n<li>\n<p>servername 配置 Linux 的 hostname 这个 hostname 不能在 win 浏览器中被解析可在 Linux 本机被解析，因为它对应的是 Linux 本机的 ip 而 win 访问不到除非 win 在 hosts 文件中配置域名则可用配置的域名来访问</p>\n</li>\n</ul>\n<pre><code>server &#123;                                                                                                                                              \n    listen       8080;\n    #server_name 192.168.244.128;\n    #server_name localhost;\n    #在win中浏览器输入Linux的IP也能访问到项目,但不能win中输入bogon,Linux的主机名这样访问不到\n    server_name bogon;\n    location / &#123;\n            #反向代理关键字:proxy_pass\n            proxy_pass http://www.qq.com;\n            #root 只能查找本机中根目录的项目\n        #root   http://www.qq.com;\n        index  index.html index.htm;\n    &#125;\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;\n&#125;  \n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-29-08-49-45_20230225135924.png\" alt=\"image_2023-01-29-08-49-45\" /></p>\n<h4 id=\"在同一个servername中匹配多个域名\"><a class=\"anchor\" href=\"#在同一个servername中匹配多个域名\">#</a> 在同一个 ServerName 中匹配多个域名</h4>\n<ul>\n<li>小技巧：访问域名时在后面加上 /?xxx 就不会带有缓存来请求了</li>\n</ul>\n<pre><code>server &#123;\n   listen       8080; #端口号\n\n   server_name  www.mmban.com www1.mmban.com; #当前主机的主机名,域名\n\n   location / &#123;\n       root   /www/vod;\t#项目的跟目录\n       index  index.html index.htm;\n   &#125;\n\n   error_page   500 502 503 504  /50x.html;\n   location = /50x.html &#123;\n       root   html;\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"完整匹配\"><a class=\"anchor\" href=\"#完整匹配\">#</a> 完整匹配</h4>\n<ul>\n<li>顾名思义就是 <code>www.mmban.com</code></li>\n</ul>\n<h4 id=\"通配符匹配-可定义在www开头也可定义在com结尾\"><a class=\"anchor\" href=\"#通配符匹配-可定义在www开头也可定义在com结尾\">#</a> 通配符匹配，可定义在 www 开头也可定义在 com 结尾</h4>\n<pre><code>server &#123;\n    listen       8080; #端口号\n    server_name  *.mmban.com 或者 www.mmban.*; #当前主机的主机名,域名\n    location / &#123;\n        root   /www/vod;\t#项目的跟目录\n        index  index.html index.htm;\n    &#125;\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html &#123;\n        root   html;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"正则匹配\"><a class=\"anchor\" href=\"#正则匹配\">#</a> 正则匹配</h4>\n<pre><code>server &#123;\n   listen       8080; #端口号\n   server_name  ~^[0-9]+\\.mmban\\.com$; #当前主机的主机名,域名\n   location / &#123;\n       root   /www/vod;\t#项目的跟目录\n       index  index.html index.htm;\n   &#125;\n   error_page   500 502 503 504  /50x.html;\n   location = /50x.html &#123;\n       root   html;\n   &#125;\n&#125;\n</code></pre>\n<h4 id=\"基于互联网的几种需求解析\"><a class=\"anchor\" href=\"#基于互联网的几种需求解析\">#</a> 基于互联网的几种需求解析</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-21-52-38_20230225135941.png\" alt=\"image_2023-01-28-21-52-38\" /></p>\n<h4 id=\"配置多个站点\"><a class=\"anchor\" href=\"#配置多个站点\">#</a> 配置多个站点</h4>\n<p><strong>server_name 只能配置 localhost 或者 IP 地址 这两个不能使用 www. 或者.com 来拼接会访问不到</strong></p>\n<ol>\n<li>在跟目录下 / 创建一个 www 目录  因为 location 是从 / 跟目录开始的</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-20-24-20_20230225135954.png\" alt=\"image_2023-01-28-20-24-20\" /></p>\n<ol start=\"2\">\n<li>进入 www 目录中创建两个站点</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-20-26-10_20230225140006.png\" alt=\"image_2023-01-28-20-26-10\" /></p>\n<ol start=\"3\">\n<li>在进入两个站点分别创建不同的页面以区分</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-20-29-47_20230225140017.png\" alt=\"image_2023-01-28-20-29-47\" /></p>\n<ol start=\"4\">\n<li>在 nginx 配置文件中，配置两个站点</li>\n</ol>\n<p><strong>不同端口号</strong></p>\n<pre><code> server &#123;\n     listen       8080;\n     server_name  localhost;\n     location / &#123;\n         root   /www/www;\n         index  index.html index.htm;\n     &#125;\n     error_page   500 502 503 504  /50x.html;\n     location = /50x.html &#123;\n         root   html;\n     &#125;\n &#125;\n#1\n server &#123;\n     listen       8088;\n     server_name  localhost;\n     location / &#123;                                                                                                                                      \n         root   /www/vod;\n         index  index.html index.htm;\n     &#125;\n     error_page   500 502 503 504  /50x.html;\n     location = /50x.html &#123;\n         root   html;\n     &#125;\n &#125;\n</code></pre>\n<ol start=\"5\">\n<li>保存退出后重启 nginx 服务</li>\n</ol>\n<ul>\n<li>端口为：8080 的</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-20-35-52_20230225140032.png\" alt=\"image_2023-01-28-20-35-52\" /></p>\n<ul>\n<li>端口为：8088 的</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-20-36-23_20230225140052.png\" alt=\"image_2023-01-28-20-36-23\" /></p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/Nginx%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/",
            "title": "nginx多进程模型和基本请求流程",
            "date_published": "2024-02-12T12:35:08.224Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-11-16-56_20230225135830.png\" alt=\"image_2023-01-28-11-16-56\" /></p>\n<p>当我们通过地址发送请求之后，Nginx 的主目录下有个 sbin/nginx 可执行文件，可执行文件启动之后开启 Master 主进程，这个主进程会把配置文件读取出来然后在进行一次校验，如果没有任何错误则会开启子进程</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-11-20-56_20230225135843.png\" alt=\"image_2023-01-28-11-20-56\" /></p>\n<p>主进程和子进程都启动完成之后</p>\n<ul>\n<li>总结</li>\n</ul>\n<ol>\n<li>\n<p>nginx 启动是多进程同时运行的由主进程 fork 出来的子进程，已经不单单是多线程了是多进程，主进程用于协调子进程</p>\n</li>\n<li>\n<p>Worker 读取配置文件</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/https%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/https%E8%AF%81%E4%B9%A6%E9%85%8D%E7%BD%AE/",
            "title": "https证书配置",
            "date_published": "2024-02-12T12:35:08.210Z",
            "content_html": "<h1 id=\"https证书配置\"><a class=\"anchor\" href=\"#https证书配置\">#</a> https 证书配置</h1>\n<h3 id=\"不安全的http协议\"><a class=\"anchor\" href=\"#不安全的http协议\">#</a> 不安全的 http 协议</h3>\n<p><a href=\"./%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84http%E5%8D%8F%E8%AE%AE.md\">1</a></p>\n<h3 id=\"https原理\"><a class=\"anchor\" href=\"#https原理\">#</a> https 原理</h3>\n<h4 id=\"非对称加密算法原理\"><a class=\"anchor\" href=\"#非对称加密算法原理\">#</a> 非对称加密算法原理</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-03-09-50-02_20230225135318.png\" alt=\"image_2023-02-03-09-50-02\" /></p>\n<p>浏览器将公钥 + 算法得到密文传输给服务器通过 443 端口下载浏览器传输过来的公钥然后私钥 + 算法进行解密得到明文，传输给浏览器后，同样浏览器得到私钥然后 + 算法得到明文</p>\n<p>公钥加密后不能使用公钥解密，如果可以则说明不够安全</p>\n<h4 id=\"同样不安全的非对称算法\"><a class=\"anchor\" href=\"#同样不安全的非对称算法\">#</a> 同样不安全的非对称算法</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-11-20-35_20230225135333.png\" alt=\"image_2023-02-04-11-20-35\" /></p>\n<h4 id=\"ca机构\"><a class=\"anchor\" href=\"#ca机构\">#</a> CA 机构</h4>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-16-34_20230225135346.png\" alt=\"image_2023-02-04-12-16-34\" /></p>\n<ul>\n<li>https21 世纪最伟大的互联网发明</li>\n</ul>\n<h4 id=\"证书\"><a class=\"anchor\" href=\"#证书\">#</a> 证书</h4>\n<p>查看证书:</p>\n<p>win+R 执行命令: <code>certmgr.msc</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-02-10-15-51_20230225135400.png\" alt=\"image_2023-02-02-10-15-51\" /></p>\n<h4 id=\"客户端浏览器\"><a class=\"anchor\" href=\"#客户端浏览器\">#</a> 客户端 (浏览器)</h4>\n<h4 id=\"服务器端\"><a class=\"anchor\" href=\"#服务器端\">#</a> 服务器端</h4>\n<h3 id=\"openssl\"><a class=\"anchor\" href=\"#openssl\">#</a> OpenSSL</h3>\n<p>openssl 包含：SSL 协议库，应用程序以及密码算法库</p>\n<h3 id=\"自签名\"><a class=\"anchor\" href=\"#自签名\">#</a> 自签名</h3>\n<h4 id=\"openssl-2\"><a class=\"anchor\" href=\"#openssl-2\">#</a> OpenSSL</h4>\n<p>系统内置</p>\n<h4 id=\"图形化工具xca\"><a class=\"anchor\" href=\"#图形化工具xca\">#</a> 图形化工具 XCA</h4>\n<p>下载地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaG9obnN0YWVkdC5kZS94Y2EvaW5kZXgucGhwL2Rvd25sb2Fk\">1</span></p>\n<h4 id=\"ca签名\"><a class=\"anchor\" href=\"#ca签名\">#</a> CA 签名</h4>\n<h3 id=\"证书字签名\"><a class=\"anchor\" href=\"#证书字签名\">#</a> 证书字签名</h3>\n<h3 id=\"在线证书申请\"><a class=\"anchor\" href=\"#在线证书申请\">#</a> 在线证书申请</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-29-05_20230225135417.png\" alt=\"image_2023-02-04-12-29-05\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-30-13_20230225135428.png\" alt=\"image_2023-02-04-12-30-13\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-31-30_20230225135440.png\" alt=\"image_2023-02-04-12-31-30\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-32-05_20230225135453.png\" alt=\"image_2023-02-04-12-32-05\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-33-14_20230225135507.png\" alt=\"image_2023-02-04-12-33-14\" /></p>\n<p>密钥算法：RSA: 非对称算法</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-34-15_20230225135529.png\" alt=\"image_2023-02-04-12-34-15\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-37-10_20230225135540.png\" alt=\"image_2023-02-04-12-37-10\" /></p>\n<h3 id=\"将申请证书配置到nginx上\"><a class=\"anchor\" href=\"#将申请证书配置到nginx上\">#</a> 将申请证书配置到 Nginx 上</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-40-56_20230225135551.png\" alt=\"image_2023-02-04-12-40-56\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-12-41-26_20230225135614.png\" alt=\"image_2023-02-04-12-41-26\" /></p>\n<p>解压缩后上传服务器上，传到 Nginx 得跟目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-13-34-59_20230225135629.png\" alt=\"image_2023-02-04-13-34-59\" /></p>\n<h4 id=\"证书安装\"><a class=\"anchor\" href=\"#证书安装\">#</a> 证书安装</h4>\n<p>将如下配置到 Nginx 的 conf 文件中</p>\n<pre><code>server&#123;\n    listen  443 ssl;\n    server_name     aa.abc.com;\n    \n    ssl_certificate     /data/cert/server.crt;\n    ssl_certificate_key     /data/cert/server.key;\n&#125;\n</code></pre>\n<p>将两个解压缩后的文件放到 conf 目录下</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-04-14-44-58_20230225135642.png\" alt=\"image_2023-02-04-14-44-58\" /></p>\n<h3 id=\"http协议跳转https\"><a class=\"anchor\" href=\"#http协议跳转https\">#</a> http 协议跳转 https</h3>\n<p><code>return 301 https://$server_name$request_uri</code></p>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/nginx/Basics/",
            "url": "https://pigpigletsgo.github.io/computer-science/nginx/Basics/",
            "title": "Basics",
            "date_published": "2024-02-12T12:35:08.197Z",
            "content_html": "<h3 id=\"启动nginx\"><a class=\"anchor\" href=\"#启动nginx\">#</a> 启动 Nginx</h3>\n<p>进入安装好的目录 <code>/user/local/nginx/sbin</code></p>\n<pre><code>./nginx 启动\n./nginx -s stop 快速停止\n./nginx -s quit 优雅关闭，在退出前完成已经接收的连接请求\n./nginx -s reload 重新加载配置\n</code></pre>\n<p>nginx 启动后如果使用 kill -9 来进行关闭的话会很费劲所以不建议干这么蠢的事儿</p>\n<p>访问：浏览器输入自己 Linux 的 IP</p>\n<p>访问效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230128164349106_20230225095816.png\" alt=\"image-20230128164349106\" /></p>\n<p>如果不能访问的解决方案如下：</p>\n<ul>\n<li>查看是否开启了防火墙</li>\n</ul>\n<p>如果开启了就关闭防火墙</p>\n<ul>\n<li>查看自己上次是否改了端口号或者端口并不是 80 的话，80 是浏览器默认的端口所以访问时不用输入但是如果改了端口号那么需要在 ip 地址后加冒号：跟端口号我改的是 8080 所以要加上 8080 完整的访问地址为</li>\n</ul>\n<p><code>192.168.244.128:8080</code></p>\n<h2 id=\"安装成系统服务\"><a class=\"anchor\" href=\"#安装成系统服务\">#</a> 安装成系统服务</h2>\n<p>创建服务脚本</p>\n<p><code>vim /usr/lib/systemd/system/nginx.service</code></p>\n<p>服务脚本内容</p>\n<ul>\n<li>注意如果如下配置的路径与安装时的路径不匹配则需要更改否则不会生效因为会报错</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Unit<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">Description</span><span class=\"token operator\">=</span>nginx - web server</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">After</span><span class=\"token operator\">=</span>network.target remote-fs.target nss-lookup.target</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>Service<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">Type</span><span class=\"token operator\">=</span>forking</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">PIDFile</span><span class=\"token operator\">=</span>/usr/local/nginx/logs/nginx.pid</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">ExecStartPre</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-t</span> <span class=\"token parameter variable\">-c</span> /usr/local/nginx/conf/nginx.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">ExecStart</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-c</span> /usr/local/nginx/conf/nginx.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">ExecReload</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> reload</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">ExecStop</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> stop</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">ExecQuit</span><span class=\"token operator\">=</span>/usr/local/nginx/sbin/nginx <span class=\"token parameter variable\">-s</span> quit</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">PrivateTmp</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>Install<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">WantedBy</span><span class=\"token operator\">=</span>multi-user.target</pre></td></tr></table></figure><p>重新加载系统服务</p>\n<pre><code>systemctl daemon-reload\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-10-39-03_20230225095831.png\" alt=\"image_2023-01-28-10-39-03\" /></p>\n<p>可以看到之前启动的 Nginx 服务还在并没有停止，也是依旧可以访问得到的</p>\n<p>停止服务</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-10-41-02_20230225095841.png\" alt=\"mage_2023-01-28-10-41-02\" /></p>\n<p>停止 nginx 服务后，开启系统服务</p>\n<pre><code>systemctl start nginx.service\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-10-42-31_20230225095856.png\" alt=\"image_2023-01-28-10-42-31\" /></p>\n<p>可以看到服务已经启动了说明我们配置的没有任何问题</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-28-10-43-31_20230225095916.png\" alt=\"image_2023-01-28-10-43-31\" /></p>\n<p>可以看到系统服务确实没有报错并开启了</p>\n<p>将系统服务设置为<strong>开启自启动</strong></p>\n<pre><code>systemctl enable nginx.service \n</code></pre>\n",
            "tags": [
                "计算机学科",
                "nginx",
                "nginx",
                "计算机学科",
                "基础"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/bug/%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/",
            "url": "https://pigpigletsgo.github.io/bug/%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/",
            "title": "Nginx启动报错",
            "date_published": "2024-02-12T12:33:07.637Z",
            "content_html": "<p>报错描述：</p>\n<pre><code>nginx报错：nginx: [alert] could not open error log file: open() “/usr/local/nginx/logs/error.log“ faile\n</code></pre>\n<p>解决方案：</p>\n<p>将 /user/local 目录下的 nginx 的目录和里面的东西全部授权权限</p>\n<p>如果 nginx 目录下没有 logs 那么需要创建一个并赋权限</p>\n<p><img data-src=\"%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99_md_files/image_2023-01-28-09-47-13_20230225095659.png?v=1&amp;type=image&amp;token=V1:lTwAFSeS0Pgvsvzwmq9SkHkOcFx90LC_KvYFoA7LwnI\" alt=\"image_2023-01-28-09-47-13\" /></p>\n<p>报错描述：</p>\n<pre><code>nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied)\n</code></pre>\n<p>原因：当前用户对该位置没有写入权限所导致的，如果使用 sudo 来执行的话就不会抱任何错误</p>\n<p>解决方案：使用命令: <code>sudo chmod -R a+rw /usr/local/nginx</code></p>\n<ul>\n<li>在执行上面操作时所需要注意事项：个人学习，不考虑安全问题 <strong>重点</strong></li>\n</ul>\n<p><strong>如果要以非 root 用户或者权限启动 Nginx 则会出现报错：</strong>  <code>nginx: [emerg] bind() to 0.0.0.0:80 failed (13: Permission denied)</code></p>\n<p>解决方案：</p>\n<p>将 nginx 目录中的 conf/nginx.conf 文件中的 80 端口改为 1024 以上的端口号</p>\n<pre><code>server &#123;\n#      listen       80;\n       listen       8080;\n\n       server_name  localhost;\n\n       #charset koi8-r;\n\n       #access_log  logs/host.access.log  main;\n\n       location / &#123;\n           root   html;\n           index  index.html index.htm;\n  &#125;\n</code></pre>\n<p><img data-src=\"%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99_md_files/image_2023-01-28-10-09-00_20230225095717.png?v=1&amp;type=image&amp;token=V1:feAXNVLs2aejsJjBkv909UX4jDcB1lbQpR5wPVmv62U\" alt=\"image_2023-01-28-10-09-00\" /></p>\n<p>再次执行 <code>./nginx</code></p>\n<p><img data-src=\"%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99_md_files/image_2023-01-28-10-09-16_20230225095733.png?v=1&amp;type=image&amp;token=V1:wLRT0CcH20I7fd25jX72vO_2KM3PtUVUO4EyqxJwFZ4\" alt=\"image_2023-01-28-10-09-16\" /></p>\n",
            "tags": [
                "问题总汇",
                "问题总汇",
                "nginx"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E5%88%9D%E5%A7%8B%E8%B7%A8%E5%9F%9F/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E5%88%9D%E5%A7%8B%E8%B7%A8%E5%9F%9F/",
            "title": "初始跨域",
            "date_published": "2024-02-12T12:19:51.932Z",
            "content_html": "<h1 id=\"初始跨域\"><a class=\"anchor\" href=\"#初始跨域\">#</a> 初始跨域</h1>\n<h2 id=\"跨域是什么\"><a class=\"anchor\" href=\"#跨域是什么\">#</a> 跨域是什么</h2>\n<p>同域，不是跨域</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'./index.html'</span></pre></td></tr></table></figure><p>不同域，跨域，被浏览器阻止</p>\n<p>当前页面开打时的地址，如果在 http://127.0.0.1:5500 / 后面改为 /index.html 那么就是请求 index.html 页面它们是同域的</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//127.0.0.1:5500/json.html</span></span></pre></td></tr></table></figure><p>如果请求地址为如下：</p>\n<p>一个端口号为：5500，一个端口号为：8080，此时就不是同域了，需要解决跨域问题否则报错</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//localhost:8080/json</span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span> <span class=\"token operator\">||</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">304</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 需要解决跨域问题</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://localhost:8080/json'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"zuqi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bingbqiu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token literal-property property\">userTo</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span><span class=\"token string\">\"sl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token literal-property property\">mother</span><span class=\"token operator\">:</span><span class=\"token string\">\"lidama\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>请求的结果：</p>\n<pre><code>Access to XMLHttpRequest at 'http://localhost:8080/json' from origin 'http://127.0.0.1:5500' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n翻译：\nCORS策略阻止了从源“http://127.0.0.1:5500”访问“http://localhost:8080/json”处的XMLHttpRequest：请求的资源上不存在“访问控制允许源”标头。\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040733601.png\" alt=\"image-20230530170322006\" /></p>\n<p>向一个域发送请求，如果要请求的域和当前域是不同域，就叫跨域，不同域之间的请求，就是跨域请求，默认会被浏览器阻止。</p>\n<h2 id=\"什么是不用域-什么是同域\"><a class=\"anchor\" href=\"#什么是不用域-什么是同域\">#</a> 什么是不用域 ，什么是同域</h2>\n<p>一个请求地址的解析：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https(协议)://www.dkx.com(域名):8080(端口号)/index.html(路径)</pre></td></tr></table></figure><p>协议，域名，端口号任何一个不一样，就是不同域</p>\n<p>与路径无关，路径一不一样无所谓。</p>\n<p>根据上述，那么标题 1 中的不同域地址的问题就在于端口号的不同了，协议相同 ，地址都是本机，只有端口号不同。</p>\n<p>http 协议对应的默认端口：80</p>\n<p>https 协议对应的默认端口：443</p>\n<h2 id=\"跨域请求为什么会被阻止\"><a class=\"anchor\" href=\"#跨域请求为什么会被阻止\">#</a> 跨域请求为什么会被阻止</h2>\n<p>阻止跨域请求，其实是浏览器本身的一种安全策略 -- 同源策略</p>\n<h2 id=\"跨域解决方案\"><a class=\"anchor\" href=\"#跨域解决方案\">#</a> 跨域解决方案</h2>\n<p>优先使用 CORS 跨域资源共享，如果浏览器不支持 CORS 的话，再使用 JSONP</p>\n<p>如何跨域查看<a href=\"../../Spring/SpringBoot+vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AF%B9%E6%8E%A5.md\">查看详细</a></p>\n<h3 id=\"1cors-跨域共享资源\"><a class=\"anchor\" href=\"#1cors-跨域共享资源\">#</a> 1.CORS 跨域共享资源</h3>\n<h4 id=\"cors-是什么\"><a class=\"anchor\" href=\"#cors-是什么\">#</a> CORS 是什么</h4>\n<p>Access-Control-Allow-Origin: *</p>\n<p>表明允许所有的域名来跨域请求它，* 是通配符，没有任何限制。</p>\n<p>只允许指定域名的跨域请求：</p>\n<pre><code>Access-Control-Allow-Origin:http://127.0.0.1:5500\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734566.png\" alt=\"image-20230530192931118\" /></p>\n<p><img data-src=\"./images/image-20230530192945840.png\" alt=\"image-20230530192945840\" /></p>\n<h4 id=\"使用cors跨域过程\"><a class=\"anchor\" href=\"#使用cors跨域过程\">#</a> 使用 CORS 跨域过程</h4>\n<p>1. 浏览器发送跨域请求</p>\n<p>2. 后端在响应头中添加 Access-Control-Allow-Origin 头信息</p>\n<p>3. 浏览器接收到响应</p>\n<p>4. 如果是同域下的 请求，浏览器不会额外做什么，这次前后端通信就圆满完成了</p>\n<p>5. 如果是跨域请求，浏览器会从响应头中查找是否允许跨域访问</p>\n<p>6. 如果允许跨域，通信圆满完成</p>\n<p>7. 如果没找到或不包含想要跨域的域名，就丢弃响应结果</p>\n<h4 id=\"cors的兼容性\"><a class=\"anchor\" href=\"#cors的兼容性\">#</a> CORS 的兼容性</h4>\n<p>IE10 及以上版本的浏览器可以正常使用 CORS</p>\n<h3 id=\"2jsonp\"><a class=\"anchor\" href=\"#2jsonp\">#</a> 2.JSONP</h3>\n<h4 id=\"jsonp的原理\"><a class=\"anchor\" href=\"#jsonp的原理\">#</a> JSONP 的原理</h4>\n<p>Script 标签跨域不会被浏览器阻止</p>\n<p>JSONP 主要就是利用 Script 标签，加载跨域文件</p>\n<h4 id=\"使用jsonp实现跨域\"><a class=\"anchor\" href=\"#使用jsonp实现跨域\">#</a> 使用 JSONP 实现跨域</h4>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/websql/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/websql/",
            "title": "初始websql",
            "date_published": "2024-02-12T12:19:51.925Z",
            "content_html": "<p>创建数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var db <span class=\"token operator\">=</span> openDatabase <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>person<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>person<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755693.png\" alt=\"image-20230529154635137\" /></p>\n<p>创建表</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">transaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'create table if not exists student (id unique,name)'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755846.png\" alt=\"image-20230529154933720\" /></p>\n<p>向表中添加数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">transaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'insert into student (id,name) values (?,?)'</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'insert into student (id,name) values (?,?)'</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755867.png\" alt=\"image-20230529155239715\" /></p>\n<p>查询</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">transaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'select * from student'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        let <span class=\"token keyword\">rows</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token keyword\">rows</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        let <span class=\"token keyword\">end</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token keyword\">rows</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t<img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755870.png\" alt=\"image-20230529155622959\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/localStorage/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/localStorage/",
            "title": "初始localStorage",
            "date_published": "2024-02-12T12:19:51.919Z",
            "content_html": "<h1 id=\"初始localstorage\"><a class=\"anchor\" href=\"#初始localstorage\">#</a> 初始 localStorage</h1>\n<h2 id=\"localstorage是什么\"><a class=\"anchor\" href=\"#localstorage是什么\">#</a> localStorage 是什么</h2>\n<p>localStorage 也是一种浏览器存储数据的方式 (本地存储)，它只是存储在本地，不会发送到服务器端。</p>\n<p>单个域名下的 localStorage 总大小有限制。</p>\n<h2 id=\"在浏览器中操作localstorage\"><a class=\"anchor\" href=\"#在浏览器中操作localstorage\">#</a> 在浏览器中操作 localStorage</h2>\n<h3 id=\"localstorage的基本用法\"><a class=\"anchor\" href=\"#localstorage的基本用法\">#</a> localStorage 的基本用法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740380.png\" alt=\"image-20230529160720332\" /></p>\n<h3 id=\"向localstorage中添加数据\"><a class=\"anchor\" href=\"#向localstorage中添加数据\">#</a> 向 localStorage 中添加数据</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'lisk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741101.png\" alt=\"image-20230529160746545\" /></p>\n<h3 id=\"获取localstorage中的数据\"><a class=\"anchor\" href=\"#获取localstorage中的数据\">#</a> 获取 localStorage 中的数据</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取不存在的返回 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741897.png\" alt=\"image-20230529161039653\" /></p>\n<p>删除 localStorage 中的数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741739.png\" alt=\"image-20230529161250485\" /></p>\n<p>清空 localStorage 中所有数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741469.png\" alt=\"image-20230529161408488\" /></p>\n<h2 id=\"使用localstorage实现自动填充\"><a class=\"anchor\" href=\"#使用localstorage实现自动填充\">#</a> 使用 localStorage 实现自动填充</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nth<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>提交<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token comment\">// 通过 id 获取 form 标签</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token keyword\">let</span> loginForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token comment\">// 通过 id 获取按钮标签</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token keyword\">let</span> nth <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nth'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 从 localStorage 中获取 username 的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token comment\">// 判断是否为 null</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 不为 null 则赋值给 username 里</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> username</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token comment\">// 绑定点击事件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         nth<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 阻止默认的点击事件执行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将获取到 username 中的 value 添加到 localStorage 中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span>loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 执行提交事件</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040753445.png\" alt=\"image-20230529164617853\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040753926.png\" alt=\"image-20230529164606522\" /></p>\n<h2 id=\"localstorage的注意事项\"><a class=\"anchor\" href=\"#localstorage的注意事项\">#</a> localStorage 的注意事项</h2>\n<h3 id=\"localstorage的存储期限\"><a class=\"anchor\" href=\"#localstorage的存储期限\">#</a> localStorage 的存储期限</h3>\n<p>localStorage 是持久化的<mark>本地存储</mark>，除非<mark>手动清除</mark> (比如<mark>通过 js 删除</mark>，或者<mark>清除浏览器缓存</mark>)，否则数据是<mark>永远不会过期的</mark>。</p>\n<blockquote>\n<p>sessionStorage</p>\n<p>当会话结束 (比如关闭浏览器) 的时候，sessionStorage 中的数据会被清空</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"localstorage键和值的类型\"><a class=\"anchor\" href=\"#localstorage键和值的类型\">#</a> localStorage 键和值的类型</h3>\n<p>localStorage 存储的键和值 &lt;font color=red&gt;<strong> 只能是字符串类型</strong> &lt;/font&gt;.</p>\n<p>不是字符串类型，也会先转化为字符串类型再存进去</p>\n<h3 id=\"不同域名下能否共用localstorage\"><a class=\"anchor\" href=\"#不同域名下能否共用localstorage\">#</a> 不同域名下能否共用 localStorage</h3>\n<p>不同的域名是不能共用 localStorage 的</p>\n<h3 id=\"localstorage的兼容性\"><a class=\"anchor\" href=\"#localstorage的兼容性\">#</a> localStorage 的兼容性</h3>\n<p>查询网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8=\">https://caniuse.com/</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040744887.png\" alt=\"image-20230529170617884\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/HTTP%E5%8D%8F%E8%AE%AE/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/HTTP%E5%8D%8F%E8%AE%AE/",
            "title": "初始Http协议",
            "date_published": "2024-02-12T12:19:51.911Z",
            "content_html": "<h1 id=\"初始http\"><a class=\"anchor\" href=\"#初始http\">#</a> 初始 HTTP</h1>\n<h2 id=\"http是什么\"><a class=\"anchor\" href=\"#http是什么\">#</a> HTTP 是什么</h2>\n<p><strong>HTTP 全称</strong>：HyperText Transfer Protocol ，<strong>翻译</strong>： <mark>超文本传输协议</mark>.</p>\n<p><strong>超文本</strong>：<mark>原先一个个单一的文本，通过超链接将其联系起来，由原先的单一的文本变成了可无限延伸，扩展的超级文本，立体文本</mark>。</p>\n<p><strong>传输协议</strong>：<mark>数据传输的规范</mark>.</p>\n<p>HTML，JS，CSS，图片，字体，音频，视频等等文件，都是通过 HTTP (超文本传输协议) 在服务器和浏览器之间传输。</p>\n<p><mark>每一次前后端通信，前端需要主动向后端发送请求，后端接收到前端的请求后，可以给出响应</mark>。</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;HTTP 是一个请求 - 响应协议 &lt;/font&gt;。</p>\n<h2 id=\"http请求响应的过程\"><a class=\"anchor\" href=\"#http请求响应的过程\">#</a> HTTP 请求响应的过程</h2>\n<p><strong>流程</strong>：</p>\n<p>浏览器查看是否有缓存，通过 DNS 域名解析服务器得到服务器的具体 IP 位置，跟服务器进行 TCP 连接通信请求到服务器，服务器响应回数据到浏览器。</p>\n<p>浏览器查看缓存中是否有缓存的记录，根据浏览器的不同缓存的处理方式也不同，有的会直接使用，有的需要再次跟服务器进行一次确认查看缓存是否过期再进行使用</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735413.png\" alt=\"image-20230528151325021\" /></p>\n<h2 id=\"http报文\"><a class=\"anchor\" href=\"#http报文\">#</a> HTTP 报文</h2>\n<h3 id=\"http报文是什么\"><a class=\"anchor\" href=\"#http报文是什么\">#</a> HTTP 报文是什么</h3>\n<p><mark>浏览器向服务器发送请求时</mark>，<mark>请求本身就是信息</mark>，叫<mark>请求报文</mark>。</p>\n<p><mark>服务器向浏览器发送响应时传输的信息</mark>，叫<mark>响应报文</mark>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040736213.png\" alt=\"image-20230528204626626\" /></p>\n<h3 id=\"http报文格式\"><a class=\"anchor\" href=\"#http报文格式\">#</a> HTTP 报文格式</h3>\n<p><strong>请求</strong>：</p>\n<p><strong>请求头</strong>：起始行 + 首部</p>\n<p>请求体</p>\n<p>请求方式：GET 请求没有请求体<sup>在地址栏上</sup>，POST 请求有请求体</p>\n<p><strong>GET</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738305.png\" alt=\"image-20230528210416093\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738654.png\" alt=\"image-20230528210432601\" /></p>\n<p><strong>POST</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738906.png\" alt=\"image-20230528210619125\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738103.png\" alt=\"image-20230528210624990\" /></p>\n<p><strong>响应</strong>：</p>\n<p>响应头：起始行 + 首部</p>\n<p>响应体</p>\n<h2 id=\"http方法\"><a class=\"anchor\" href=\"#http方法\">#</a> HTTP 方法</h2>\n<h3 id=\"常用的http方法\"><a class=\"anchor\" href=\"#常用的http方法\">#</a> 常用的 HTTP 方法</h3>\n<p>浏览器发送请求时采用的方法，和响应无关</p>\n<p>GET，POST，PUT，DELETE，...</p>\n<h3 id=\"http方法的语义\"><a class=\"anchor\" href=\"#http方法的语义\">#</a> HTTP 方法的语义</h3>\n<p>增 (POST) 删 (DELETE) 改 (PUT) 查 (GET)，用来定义对于资源采取什么样的操作的，有各自的语义。</p>\n<p>这些方法虽然有各自的语义，但是并不是强制性的。</p>\n<h3 id=\"restful接口设计\"><a class=\"anchor\" href=\"#restful接口设计\">#</a> RESTful 接口设计</h3>\n<p>一种接口设计风格，充分利用 HTTP 方法的语义。</p>\n<p>详情查看<a href=\"../../Spring/SpringMVC/REST%E9%A3%8E%E6%A0%BC.md\">点击查看</a></p>\n<h2 id=\"get和post方法的对比\"><a class=\"anchor\" href=\"#get和post方法的对比\">#</a> GET 和 POST 方法的对比</h2>\n<h3 id=\"1语义\"><a class=\"anchor\" href=\"#1语义\">#</a> 1. 语义</h3>\n<p><strong>GET</strong>：获取数据</p>\n<p><strong>POST</strong>：创建数据</p>\n<h3 id=\"2发送数据\"><a class=\"anchor\" href=\"#2发送数据\">#</a> 2. 发送数据</h3>\n<p><strong><mark>GET</mark> 通过地址栏在请求头中携带数据</strong></p>\n<p>能携带的数据量和地址的长度有关系，一般最多就几 K</p>\n<p><strong><mark>POST</mark> 既可以通过地址在请求头中携带数据，也可以通过请求体携带数据</strong></p>\n<p>能携带的数据量理论上是无限的</p>\n<p>&lt;u&gt; 携带少量数据，可以使用 GET 请求，大量的数据可以使用 POST 请求 &lt;/u&gt;。</p>\n<h3 id=\"缓存\"><a class=\"anchor\" href=\"#缓存\">#</a> 缓存</h3>\n<p><strong>GET</strong>：可以被缓存</p>\n<ul>\n<li>GET 请求携带的数据在地址中的，而地址是会被浏览器缓存的。\n<ul>\n<li>比如，输入一个网址，后面再次访问只需要输入开头几个浏览器就自动补全了这就是被浏览器缓存了。</li>\n</ul>\n</li>\n</ul>\n<p><strong>POST</strong>：不会被缓存</p>\n<h3 id=\"安全性\"><a class=\"anchor\" href=\"#安全性\">#</a> 安全性</h3>\n<p>&lt;font style=&quot;color:red&quot;&gt;GET 和 POST 都不安全 &lt;/font&gt;。</p>\n<p>发送密码或其它敏感信息时不要使用 GET，主要是避免直接被它人窥屏或通过历史记录找到你的密码。</p>\n<h2 id=\"http状态码\"><a class=\"anchor\" href=\"#http状态码\">#</a> HTTP 状态码</h2>\n<h3 id=\"1http状态码是什么\"><a class=\"anchor\" href=\"#1http状态码是什么\">#</a> 1.HTTP 状态码是什么</h3>\n<p>定义服务器对请求的处理结果，是服务器返回的。</p>\n<h3 id=\"2http状态码的语义\"><a class=\"anchor\" href=\"#2http状态码的语义\">#</a> 2.HTTP 状态码的语义</h3>\n<p><mark>100~199 消息</mark>：代表请求已被接收，需要继续处理。</p>\n<ul>\n<li>websocket</li>\n</ul>\n<p><mark>200~299 成功</mark>：请求成功，服务器正常返回数据。</p>\n<p><mark>300~399</mark>：重定向</p>\n<ul>\n<li><strong>301</strong>：Moved Permanently 永久性的移动\n<ul>\n<li>有请求只要不出意外就有响应，重定向的地址就在响应中 <code>Location: https://www.xxx.com</code></li>\n<li>使用 301 方式是后端不可控的，因为 301 跳转地址会缓存到用户的本地，需要用户手动清理缓存才能跳转有更新的地址，使用比较谨慎</li>\n</ul>\n</li>\n<li><strong>302</strong>：Move Temporarily 临时性的移动\n<ul>\n<li>不会被缓存每一次都会向服务器发送一次请求确认一下往那个地址跳转。</li>\n</ul>\n</li>\n<li><strong>304</strong>：Not Modified 没有修改\n<ul>\n<li>向服务器发送请求确认资源是否过期，没有过期则使用过期则重新请求响应数据。</li>\n</ul>\n</li>\n</ul>\n<p><mark>400~499</mark>：请求错误，错误一般在前端，比如：请求地址不存在，请求数据错误导致异常</p>\n<ul>\n<li><strong>400</strong>：Bad Request\n<ul>\n<li>请求异常</li>\n</ul>\n</li>\n<li><strong>404</strong>： Not Found\n<ul>\n<li>请求找不到资源</li>\n</ul>\n</li>\n</ul>\n<p><mark>500~599</mark>：服务器错误，错误一般在后端</p>\n<ul>\n<li>500：Internal Server Error 服务器内部错误，后端代码报错之类的</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Cookie/",
            "url": "https://pigpigletsgo.github.io/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Cookie/",
            "title": "Cookie",
            "date_published": "2024-02-12T12:19:51.905Z",
            "content_html": "<h1 id=\"初始cookie\"><a class=\"anchor\" href=\"#初始cookie\">#</a> 初始 Cookie</h1>\n<h2 id=\"cookie是什么\"><a class=\"anchor\" href=\"#cookie是什么\">#</a> Cookie 是什么</h2>\n<p>Cookie 全称 HTTP Cookie ，简称 Cookie，是浏览器存储数据的一种方式，因为存储在用户本地，而不是存储在服务器上，是本地存储。一般会自动随着浏览器每次请求发给送到服务器端。</p>\n<h2 id=\"cookie有什么用\"><a class=\"anchor\" href=\"#cookie有什么用\">#</a> Cookie 有什么用</h2>\n<p>利用 Cookie 跟踪统计用户访问该网站的习惯，比如什么时间访问，访问了哪些页面，在每个网页的停留时间等。</p>\n<h2 id=\"在浏览器中操作cookie\"><a class=\"anchor\" href=\"#在浏览器中操作cookie\">#</a> 在浏览器中操作 Cookie</h2>\n<p>先看下页面的请求头信息，里面并没有 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755678.png\" alt=\"image-20230529100840334\" /></p>\n<p>打开控制台找到 Cookies 在里面设置一个 Cookie 键值对</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756713.png\" alt=\"image-20230529100621798\" /></p>\n<p>设置完成后点击 NetWork，刷新下页面就会向服务器端发送一次 Cookie 请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756361.png\" alt=\"image-20230529100930844\" /></p>\n<p>控制台使用 js 代码来查看 Cookie，获取多个 Cookie 会以分号分隔。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756912.png\" alt=\"image-20230529101120541\" /></p>\n<p>Cookie 是明文显示的，不要使用 Cookie 存储敏感信息。</p>\n<h2 id=\"cookie的基本用法\"><a class=\"anchor\" href=\"#cookie的基本用法\">#</a> Cookie 的基本用法</h2>\n<h3 id=\"写入cookie\"><a class=\"anchor\" href=\"#写入cookie\">#</a> 写入 Cookie</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 写入 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username=刘桑'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'age=18'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 不能一起设置，只能一个一个设置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//document.cookie = 'username = 刘桑；age=18'</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756121.png\" alt=\"image-20230529102501653\" /></p>\n<h3 id=\"读取cookie\"><a class=\"anchor\" href=\"#读取cookie\">#</a> 读取 Cookie</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2. 读取 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 读取的是一个由键值对构成的字符串，每个键值对之间由 \";\" (一个分号和一个空格) 隔开</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756735.png\" alt=\"image-20230529102516584\" /></p>\n<h2 id=\"cookie的属性\"><a class=\"anchor\" href=\"#cookie的属性\">#</a> Cookie 的属性</h2>\n<h3 id=\"1cookie的键name和值value\"><a class=\"anchor\" href=\"#1cookie的键name和值value\">#</a> 1.Cookie 的键 (name) 和值 (value)</h3>\n<p>最重要的两个属性，创建 Cookie 时必须填写，其它属性可以使用默认值</p>\n<blockquote>\n<p>Cookie 的键值如果包含非英文字母，则写入时需要使用 encodeURIComponent () 编码，读取时使用 decodeURIComponent () 解码。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 一般键使用英文字母，不要用中文，值可以用中文，但是要编码 &lt;/font&gt;。</p>\n<h3 id=\"2失效到期时间\"><a class=\"anchor\" href=\"#2失效到期时间\">#</a> 2. 失效 (到期) 时间</h3>\n<p>对于失效的 Cookie，会被浏览器清除</p>\n<p>默认会话 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756419.png\" alt=\"image-20230529105442704\" /></p>\n<blockquote>\n<p>如果没有设置失效 (到期) 时间，这样的 Cookie 称为会话 Cookie，它存在内存中，当会话结束，也就是浏览器关闭时 (不是关闭当前页面)，Cookie 消失</p>\n</blockquote>\n<p>想让 Cookie 长时间存在，设置 Expires 或 Max-Age</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//expires</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 值为 Date 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username1=dkx; expires=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">'2100-1-01 00:00:00'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//max-age</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 值 为数字，表示当前时间 + 多少秒后过期，单位时秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token string\">'username=dkx1; max-age=5'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    设置 Cookie 存活时间为 30 天</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756190.png\" alt=\"image-20230529105522647\" /></p>\n<p>如果 max-age 的值是 0 或负数，则 Cookie 会被删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=0</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=-1</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756761.png\" alt=\"image-20230529105726676\" /></p>\n<h3 id=\"3domain域\"><a class=\"anchor\" href=\"#3domain域\">#</a> 3.Domain 域</h3>\n<p>Domain 限定了访问 Cookie 的范围</p>\n<p>使用 JS 只能读写当前域或父域的 Cookie，无法读写其它域的 Cookie</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username=dkx; domain=www.taobao.com'</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span>  <span class=\"exturl\" data-url=\"aHR0cDovL21haW4ubS50YW9iYW8uY29t\">main.m.taobao.com</span> 当前域</p>\n<p>父域：.taobao.com</p>\n<p>也就是需要在它们共同存在的域下设置的 Cookie 才能访问到</p>\n<p><strong>操作</strong>：</p>\n<p>PC 端淘宝：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756721.png\" alt=\"image-20230529111416183\" /></p>\n<p>查看 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757921.png\" alt=\"image-20230529111454087\" /></p>\n<p>查看：手机端的淘宝 <span class=\"exturl\" data-url=\"aHR0cDovL21haW4ubS50YW9iYW8uY29t\">main.m.taobao.com</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757707.png\" alt=\"image-20230529111528150\" /></p>\n<p>查看 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757623.png\" alt=\"image-20230529111537366\" /></p>\n<h3 id=\"4path路径\"><a class=\"anchor\" href=\"#4path路径\">#</a> 4.Path 路径</h3>\n<p>Path 限定了访问 Cookie 的范围 (同一个域名下)</p>\n<p>使用 JS 只能读写当前路径和上级路径的 Cookie，无法读写下级路径的 Cookie</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token string\">'username=dkx; path=\\路径'</span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 当 Name，Domain，Path 这 3 个字段都相同的时候，才是同一个 Cookie&lt;/font&gt;。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757848.png\" alt=\"image-20230529112550487\" /></p>\n<h3 id=\"5httponly\"><a class=\"anchor\" href=\"#5httponly\">#</a> 5.HttpOnly</h3>\n<p>设置了 HttpOnly 属性的 Cookie 不能通过 js 去访问</p>\n<blockquote>\n<p>前端不能通过 js 去设置一个 HttpOnly 类型的 Cookie，这种类型的 Cookie 只能是后端来设置</p>\n<p>只要是 HttpOnly 类型的，通过 document.cookie 是获取不到的，也不能进行修改</p>\n</blockquote>\n<h3 id=\"6secure安全标志\"><a class=\"anchor\" href=\"#6secure安全标志\">#</a> 6.Secure 安全标志</h3>\n<p>Secure 限定了只有在使用了 https 而不是 http 的情况下才可以发送给服务端</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;Domain，Path，Secure 都要满足条件，还不能过期的 Cookie 才能随着请求发送到服务器端 &lt;/font&gt;。</p>\n<h2 id=\"cookie的封装\"><a class=\"anchor\" href=\"#cookie的封装\">#</a> Cookie 的封装</h2>\n<h3 id=\"封装cookie\"><a class=\"anchor\" href=\"#封装cookie\">#</a> 封装 Cookie</h3>\n<p>创建 html 页面在 script 标签中导入封装的 js 文件和要使用的方法</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token comment\">// 导入 js 文件和对应要使用的方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/cookie.js'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 设置 cookie</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 删除 cookie</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token comment\">// 获取 cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建 js 文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 写入 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//  可选赋值参数           默认值 undefined 设置为空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>maxAge<span class=\"token punctuation\">,</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> cookieText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> maxAge <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; max-age=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>maxAge<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; domain=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>domain<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; path=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>path<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>secure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; secure</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> cookieText</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 通过 name 获取 cookie 值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">const</span> cookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> itme <span class=\"token keyword\">of</span> cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>cookieName<span class=\"token punctuation\">,</span>cookieValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> itme<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookieName <span class=\"token operator\">==</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token keyword\">return</span> cookieValue</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 根据 name,domain,path 删除 cookie</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 导出方法</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757775.png\" alt=\"image-20230529152224212\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757698.png\" alt=\"image-20230529152234954\" /></p>\n<h2 id=\"cookie的注意事项\"><a class=\"anchor\" href=\"#cookie的注意事项\">#</a> Cookie 的注意事项</h2>\n<h3 id=\"前后端都可以写入和获取cookie\"><a class=\"anchor\" href=\"#前后端都可以写入和获取cookie\">#</a> 前后端都可以写入和获取 Cookie</h3>\n<h3 id=\"cookie有数量-限制\"><a class=\"anchor\" href=\"#cookie有数量-限制\">#</a> Cookie 有数量 限制</h3>\n<p>每个域名下的 Cookie 数量有限</p>\n<p>当超过单个域名限制之后，再设置 Cookie，浏览器就会清除以前设置的 Cookie</p>\n<h3 id=\"cookie有大小-限制\"><a class=\"anchor\" href=\"#cookie有大小-限制\">#</a> Cookie 有大小 限制</h3>\n<p>每个 Cookie 的存储容量很小，最多只有 4KB 左右</p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "计算机学科",
                "web",
                "前后端交互"
            ]
        }
    ]
}