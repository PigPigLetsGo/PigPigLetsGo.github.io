{
    "version": "https://jsonfeed.org/version/1",
    "title": "Dkx の Java小窝",
    "subtitle": "别怕路长梦远",
    "icon": "https://pigpigletsgo.github.io/images/favicon.ico",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8F%8C%E9%94%81%E5%AE%9E%E7%8E%B03-%E6%9C%80%E5%90%8E%E9%98%B6%E6%AE%B5/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8F%8C%E9%94%81%E5%AE%9E%E7%8E%B03-%E6%9C%80%E5%90%8E%E9%98%B6%E6%AE%B5/",
            "title": "阻塞队列-双锁实现3-最后阶段",
            "date_published": "2024-01-21T13:02:40.312Z",
            "content_html": "<h1 id=\"阻塞队列-双锁实现3-最后阶段\"><a class=\"anchor\" href=\"#阻塞队列-双锁实现3-最后阶段\">#</a> 阻塞队列 - 双锁实现 3 - 最后阶段</h1>\n<p>到此 我们还没有讲述完 双锁实现 因为 还有一段 最为 <mark>精华</mark> 的代码没有加上，是什么呢？</p>\n<p>我们当时为什么使用 双锁来实现？</p>\n<p>使用双锁 它的性能 要比使用 单锁 高，因为 两个线程之间是可以同时 获取自己的锁 然后去同时工作 而不用等对方</p>\n<p>我们接下来的优化就是 减少 唤醒时 加锁的次数 也就是 offer 方法 中唤醒时 我尽量要把它的加锁次数 降到最低 类似的 poll 也是</p>\n<p>我们考虑如下情况：</p>\n<p>假设来了 3 个 poll 线程 poll_1 poll_2 poll_3 它们要去获取元素但是队列是空的，如下代码成立</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它会都进入了 阻塞</p>\n<p>而后 又来了 3 个 offer 线程，每个 offer 线程都会向队列去添加一个元素</p>\n<p>如果是按照原来的方式就是 offer_1 添加元素后 拿到 headLock 锁 然后 唤醒 poll_1 线程 然后释放锁 让 poll_1 去 取元素</p>\n<p>offer_2 做类似的操作 offer_3 也做类似的操作</p>\n<p>那么按照原来的方式呢 3 个 offer 线程 加了 3 次锁 做了 3 次 唤醒操作，但是我们现在想要 减少 offer 线程 使用 headLock 锁的机会 (次数) 给它使用 haedLock 锁的次数尽量降低，所以我们想出了这样一个策略 如下：</p>\n<p>offer 线程有 3 个 我们不让 3 个 offer 线程都去执行 headLock 加锁 ，headWaits.signal 唤醒操作，我们只让其中一个线程做这件事儿，比如说 offer_1 它去执行 headLock 加锁，headWaits.signal 唤醒 。其它两个线程 offer_2 和 offer_3 它们只做添加元素操作就行了它们不用去做加锁唤醒，那么它只能 唤醒 poll_1 这时 我们再让 poll_1 去唤醒 poll_2 让 poll_2 呢 再去唤醒 poll_3 这样就可以了。</p>\n<p>也就是让 offer 线程 它只做一次 唤醒 剩余唤醒的活儿 就交给 poll 线程这边来完成了，这个思想我们称之为 级联通知</p>\n<h2 id=\"实现代码如下\"><a class=\"anchor\" href=\"#实现代码如下\">#</a> 实现代码如下：</h2>\n<p>在如下代码中 的 offer 和 poll 方法中 分别定义了 c 变量 用于表示 是否要唤醒 poll 的 阻塞线程</p>\n<p>offer 中的 c 变量的解释：当我们第一次添加元素时那么 肯定 是先由于 队列是空的 poll 线程才会被阻塞 所以 我们用 c 变量来 判断 如果 size 的值也就是 元素个数为 0 那么就赋值给 c 变量 下面进行判断 如果 c == 0 说明我们需要去唤醒一下 poll 线程 剩下的 offer 线程 size 肯定就不是 0 了 那么就不需要去唤醒 poll 线程，就只做添加元素操作即可</p>\n<p>poll 中 c 变量的解释：通过 size 赋值给 c 判断剩余的元素还有多少 如果 元素个数 大于 1 那么就自己唤醒 poll 线程中阻塞的线程即可</p>\n<p>如下是完整的代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 双锁实现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &lt;E> 元素类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 创建 原子变量 保证 size 在 多线程下 的线程安全问题</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 创建两个锁 用于保护不同的线程 并且 创建对应的 条件变量让 某个线程不满足某条件后就 阻塞线程进入等待状态</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 保护尾指针 住要给 offer 方法用</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> tailLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 队列满了就不能添加了 那就到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 保护头指针 主要给 poll 方法用</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> headLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 队列空了就不能取元素了 那就到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> headLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 添加前的元素个数 通过这个变量 我们 判断是否 让某一个线程去 唤醒 poll 线程而不是都去唤醒</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 队列满就等待</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 队列不满则将元素添加到尾部</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 元素个数增加</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">//getAndIncrement 效果就是 size++ 保证 size 的 原子性</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            c <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size++;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>             * 1. 读取成员变量 size 的值</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>             * 2. 自增</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>             * 3. 结果写回成员变量 size</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 判断如果 c + 1 小于 数组长度说明还有 添加空间 那么就 级联唤醒 offer 线程</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 如果从 0 变为非空，由 offer 这边唤醒等待非空的 poll 线程</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">//    0 -> 1  1 -> 2  2 -> 3</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 加上 headWaits.signal (); 需要的 headLock 锁</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            headLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token comment\">// 必须 配合 配对的锁一起使用否则会就报错</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token comment\">// 释放 headLock 的锁</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                headLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token class-name\">E</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        headLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 取走前的元素个数</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token comment\">// 1. 队列为空则等待</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来判断队列是否满了 防止 虚假唤醒</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token comment\">// 2. 非空则出队列</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>head <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token comment\">// 元素个数 自减</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token comment\">//getAndDecrement 效果就是 size-- 保证 size 的 原子性</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            c <span class=\"token operator\">=</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">getAndDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size--;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>             * 1. 读取成员变量 size 的值</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>             * 2. 自减</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>             * 3. 结果写回成员变量 size</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token comment\">// 判读 如果 c 也就是元素个数 不小于 1 说明还有元素可以取 那么就 级联唤醒 poll 线程</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            headLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token comment\">// 队列从满 -> 不满时 由 poll 唤醒等待不满的 offer 线程</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token comment\">// 加上 tailWaits.signal (); 需要的 tailLock 锁</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token comment\">// 必须 配合 配对的锁一起使用否则会就报错</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token comment\">// 释放 headLock 的锁</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"BlockingQueue2&#123;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"array=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"offer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列",
                "代码经验"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8F%8C%E9%94%81%E5%AE%9E%E7%8E%B02-%E8%A7%A3%E5%86%B31%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8F%8C%E9%94%81%E5%AE%9E%E7%8E%B02-%E8%A7%A3%E5%86%B31%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "阻塞队列-双锁实现2-解决1的问题",
            "date_published": "2024-01-21T08:33:30.630Z",
            "content_html": "<h1 id=\"阻塞队列-双锁实现2-解决1的问题\"><a class=\"anchor\" href=\"#阻塞队列-双锁实现2-解决1的问题\">#</a> 阻塞队列 - 双锁实现 2 - 解决 1 的问题</h1>\n<p>我们在 阻塞队列 - 双锁实现 1 中最后 编程的 唤醒线程的操作虽然 解决了唤醒线程时的报错问题但是 还是存在着 死锁的问题</p>\n<p>我们先抛开 代码逻辑 只看 加锁 和 解锁的 代码</p>\n<p>我们考虑这样一个场景，比如 offer 这个线程它已经获得了锁</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211541710.png\" alt=\"image-20240121154139650\" /></p>\n<p>然后它准备去获得 offer 方法中的 headLock 锁，当然现在 还没有获取，而 poll 这个线程现在已经拿到了 headLock 这把锁了，而这个 poll 线程又正准备去拿到 tailLock 锁 暂时还没有获得</p>\n<p>那么问题就来了 ，对于 offer 线程来将 它想获取的 headLock 锁 被 poll 线程拿着呢 而 poll 线程还没有释放锁</p>\n<p>而 poll 线程想要获得的 tailLock 锁 又被 offer 线程锁 持有着，同样 offer 这个线程也没有 释放锁，所以大家都在等待对方释放锁</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211547423.png\" alt=\"image-20240121154705363\" /></p>\n<p>这样谁都不会释放锁 那么这就会造成 死锁的问题</p>\n<p>测试代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"元素3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"offer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在测试代码中，我们已经添加了 两个元素 而 队列 容量为 3 让队列 既不是空 也不是满，这样它就不会进入到 await 方法进行线程阻塞 ，它们就会走 后面的逻辑</p>\n<p>我们打上断点进行调试查看：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211554786.png\" alt=\"image-20240121155429655\" /></p>\n<p>我们单步进入 offer 线程，让它先拿到 tailLock 锁，此时 offer 已经锁住了 tailLock</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211555439.png\" alt=\"image-20240121155531393\" /></p>\n<p>我们直接跨步执行，直接执行到 headLock 这里</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211556383.png\" alt=\"image-20240121155635337\" /></p>\n<p>它准备获得 headLock 这把锁 但是 它还没获得这把锁的时候 我们再切换到 poll 线程</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8F%8C%E9%94%81%E5%AE%9E%E7%8E%B01/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8F%8C%E9%94%81%E5%AE%9E%E7%8E%B01/",
            "title": "阻塞队列-双锁实现1",
            "date_published": "2024-01-21T08:32:56.068Z",
            "content_html": "<h1 id=\"阻塞队列-双锁实现1\"><a class=\"anchor\" href=\"#阻塞队列-双锁实现1\">#</a> 阻塞队列 - 双锁实现 1</h1>\n<h2 id=\"回忆为什么加锁\"><a class=\"anchor\" href=\"#回忆为什么加锁\">#</a> 回忆为什么加锁</h2>\n<p>之前在 阻塞队列 - 单锁实现中 我们使用 一把锁 保证了 队列 的线程安全，下面我们继续探讨下看看 这把锁有没有 优化的可能</p>\n<p>我们先回忆我们会为什么要加如下这把锁在 offer 方法中呢？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//poll 等待队列非空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">[</span>省略 代码<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>就是因为在 多线程 下 如果我们不加这把锁那么方法内的代码在执行时就有可能受到其它线程的影响产生执行交错的情况，比如说两个线程都来执行 offer 方法的代码 - 如下图：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401202232936.png\" alt=\"image-20240120223221812\" /></p>\n<p>第一个红色的线程它执行完了 1 array [tail] = e 代码还没来得及执行 4 ++tail 它就切换到了 蓝色线程 去执行了 2 3 人家执行完了 CPU 才切换回去执行红色线程的 4 那这样的指令交错呢就可能导致最终的结果不正确，因此为了避免多线程下产生这种指令交错 我们需要加上锁 这样就可以保证多行代码执行的 原子性</p>\n<p>上面讲述就是我们为什么要加锁</p>\n<h2 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h2>\n<p>但是加锁后呢会有新的问题</p>\n<p>什么问题呢？</p>\n<p>我们 offer 方法呢 它需要加锁 poll 方法也需要加锁 它们使用的是 同一把锁</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401202241996.png\" alt=\"image-20240120224140926\" /></p>\n<p>那么这两个方法在多线程执行时会不会相互影响呢？</p>\n<p>比如说有一个 offer 线程它要到队列的尾部添加元素，又有一个 poll 线程 它要到队列的 头部去 取走元素，那么 offer 线程 添加元素的同时 poll 线程能执行吗？</p>\n<p>答： 不能执行，因为 offer 线程已经加了锁了，它除非等 offer 线程把代码执行完把锁释放了 poll 线程才能获得锁</p>\n<p>所以现在的效果就是 offer  和 poll  方法 它们是相互影响的，一个在执行的时候另一个就得阻塞</p>\n<p>其实这样并不合理，因为 offer 线程 它主要就是操作 队列的尾部 ，都是 tail 这个尾指针去读取 尾指针索引处的值 去让尾指针自增，它操作的都是队列的尾部</p>\n<p>而 poll 线程它操作的都是 队列的 头部 操作的都是 head 指针，按理来说 它们 应该互不干扰</p>\n<p>但是我们现在使用一把锁它们就冲突了，一个执行的时候另一个就得阻塞，那怎么解决这个问题呢，下面就需要使用到双锁来实现了</p>\n<h2 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h2>\n<p>我们将 offer 线程和 poll 线程分别使用不同的锁 当 offer 线程上锁时并不会影响到 poll 线程，所以就有如下代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 双锁实现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &lt;E> 元素类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t <span class=\"token comment\">// 定义数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义 head 和 tail 指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 队列中元素个数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 创建两个锁 用于保护不同的线程 并且 创建对应的 条件变量让 某个线程不满足某条件后就 阻塞线程进入等待状态</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 保护尾指针 住要给 offer 方法用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> tailLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 队列满了就不能添加了 那就到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 保护头指针 主要给 poll 方法用</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> headLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 队列空了就不能取元素了 那就到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> headLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现了 offer 方法和 poll 方法的代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 双锁实现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &lt;E> 元素类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 创建两个锁 用于保护不同的线程 并且 创建对应的 条件变量让 某个线程不满足某条件后就 阻塞线程进入等待状态</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 保护尾指针 住要给 offer 方法用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> tailLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 队列满了就不能添加了 那就到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 保护头指针 主要给 poll 方法用</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> headLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 队列空了就不能取元素了 那就到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> headLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 队列满就等待</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 队列不满则将元素添加到尾部</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 元素个数增加</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        headLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// 1. 队列为空则等待</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来判断队列是否满了 防止 虚假唤醒</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 2. 非空则出队列</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>head <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// 元素个数 自减</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            headLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"102\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"BlockingQueue2&#123;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"array=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Testdemo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"offer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面我们 debug 查看下 双锁的 线程执行情况是怎么样的：</p>\n<p>debug 启动</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211004171.png\" alt=\"image-20240121100456104\" /></p>\n<p>此时我们可以看到 队列中 存在了 任务 1 元素，因为 在测试的类中 先存入了一个 任务 1</p>\n<p>那么 offer 和 poll 之间会互相干扰吗？ 先看下 offer 的线程执行情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211006551.png\" alt=\"image-20240121100648493\" /></p>\n<p>进入 offer 方法后 并获取 锁</p>\n<p>那么这时 offer 线程 获取了 tailLock 的锁 那么它会不会影响 poll 线程的锁呢？我们看下 Poll 线程的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211009349.png\" alt=\"image-20240121100948298\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211010280.png\" alt=\"image-20240121101014230\" /></p>\n<p>我们接着向下运行进入 poll 方法</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211010590.png\" alt=\"image-20240121101047533\" /></p>\n<p>它也同时 获取了 headLock 锁 执行下面代码操作，它们之间互不干扰 你放你的 任务 2  我取我的 任务 1</p>\n<h2 id=\"现有代码的问题\"><a class=\"anchor\" href=\"#现有代码的问题\">#</a> 现有代码的问题</h2>\n<p>有什么问题呢？</p>\n<p>问题就出现在 offer 和 poll 的 修改 size 那里，修改 size 看去是 一行代码，但实际上它的底层是分成了 三步 才能完成 这个自增或者自减的操作</p>\n<p><strong>哪三步呢？如下解释</strong>:</p>\n<ol>\n<li>读取成员变量 size 的值</li>\n<li>自增</li>\n<li>结果写回成员变量 size</li>\n</ol>\n<p>既然 size++ 和 size- - 底层都是分成了多行代码才能完成的自增和自减操作，那么问题就来了，多线程下这些指令有没有可能出现交错的情况</p>\n<p>答：可能的</p>\n<p>比如下面举例：</p>\n<p>假如 size 初始值为 5，那么 size++ 底层 先是读取了 5</p>\n<pre><code>1.  读取成员变量size的值  5\n2.  自增\n3.  结果写回成员变量size\n</code></pre>\n<p>它还没来得及 进行 +1 操作 这时 CPU 就切换到了 poll 中了而 poll 线程 中的 size- - 也是 先要读取 当前 size 的值</p>\n<p>因为 offer 线程没来得及自增 所以 poll 线程读取到的 size 值 还是 5</p>\n<pre><code>1.  读取成员变量size的值  5\n# 接下来做了自减\n2.  自减 4\n# 然后把 4 写回到成员变量了\n3.  结果写回成员变量size 4\n</code></pre>\n<p>当 CPU 切换到 offer 线程后，由于 offer 线程 size++ 的底层第一步 读取了 size 的值也就是 5 所以它还是从 5 的基础上 + 1 结果写回成员变量为 6</p>\n<p>此时呢对照图如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211036927.png\" alt=\"image-20240121103621860\" /></p>\n<p>这种情况对吗？两个线程一个 加了 一个元素 一个 取了一个元素 按道理 应该还是 5 啊 怎么就多了一个呢？</p>\n<p>这种情况显然是不对的，这就说明 有一个计算结果被不正确的覆盖掉了</p>\n<h3 id=\"解释这种情况产生的原因\"><a class=\"anchor\" href=\"#解释这种情况产生的原因\">#</a> 解释这种情况产生的原因：</h3>\n<p>这是因为 由于 offer 线程使用的是 tailLock 锁，而 poll 线程使用的是 headLock 锁 两个锁不同 可以同时执行，它们都在修改 size 那么这时就是线程不安全的，因为 它们同时上锁执行时 一个正在做 + 的同时  另一个做了 - 这样就会产生指令的交错 导致 错误的结果</p>\n<p>那怎么保证 size 的线程安全呢？</p>\n<p>下面就讲述一个知识叫 <mark>原子变量</mark></p>\n<h2 id=\"原子变量\"><a class=\"anchor\" href=\"#原子变量\">#</a> 原子变量</h2>\n<p>我们使用 原子 整数类 来保证 size 的安全</p>\n<p>如下代码改变了 size 成员变量的 方式 改为了 原子变量类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 双锁实现</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &lt;E> 元素类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 创建 原子变量 保证 size 在 多线程下 的线程安全问题</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> size <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 创建两个锁 用于保护不同的线程 并且 创建对应的 条件变量让 某个线程不满足某条件后就 阻塞线程进入等待状态</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 保护尾指针 住要给 offer 方法用</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> tailLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 队列满了就不能添加了 那就到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 保护头指针 主要给 poll 方法用</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> headLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 队列空了就不能取元素了 那就到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> headLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 队列满就等待</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 队列不满则将元素添加到尾部</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">// 元素个数增加</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">//getAndIncrement 效果就是 size++ 保证 size 的 原子性</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            size<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size++;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>             * 1. 读取成员变量 size 的值</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>             * 2. 自增</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>             * 3. 结果写回成员变量 size</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        headLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token comment\">// 1. 队列为空则等待</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来判断队列是否满了 防止 虚假唤醒</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 2. 非空则出队列</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>head <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// 元素个数 自减</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">//getAndDecrement 效果就是 size-- 保证 size 的 原子性</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            size<span class=\"token punctuation\">.</span><span class=\"token function\">getAndDecrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size--;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>             * 1. 读取成员变量 size 的值</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>             * 2. 自减</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>             * 3. 结果写回成员变量 size</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            headLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"BlockingQueue2&#123;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"array=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"如何唤醒等待线程\"><a class=\"anchor\" href=\"#如何唤醒等待线程\">#</a> 如何唤醒等待线程</h2>\n<p>我们先来考虑这么一个场景比如说 一开始队列是空的，现在有一个 poll 线程从队列中获取元素 此时不能获取到因为 队列是 空的，那么就会 进入 等待状态</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//poll_1 线程进入等待</span></pre></td></tr></table></figure><p>当然可能会有多个比如 poll_2 线程也来获取元素发现还是空的就进入了等待</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//poll_1 线程进入等待  poll_2 线程进入等待</span></pre></td></tr></table></figure><p>那么 headWaits 中等待的线程我们什么时候去唤醒它们呢？</p>\n<p>得等待队列中有元素了才能唤醒 也就是 offer 线程添加了一个元素了</p>\n<p>那么你可能会想到这么写：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 队列满就等待</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 队列不满则将元素添加到尾部</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 元素个数增加</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">//getAndIncrement 效果就是 size++ 保证 size 的 原子性</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      size<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// size++;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             * 1. 读取成员变量 size 的值</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             * 2. 自增</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>             * 3. 结果写回成员变量 size</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      tailLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么这么写 对不对呢</p>\n<p>通过如下代码 进行测试看看对不对：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockingQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">String</span> poll <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"poll1 线程: \"</span> <span class=\"token operator\">+</span> poll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poll_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">String</span> poll <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"poll2 线程: \"</span> <span class=\"token operator\">+</span> poll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"poll_2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"offer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们在 queue.offer (“任务”) 处打上断点 让它先不进行添加，先让 前面两个 poll 线程进入阻塞，然后我们重点看下 添加一个元素后能不能唤醒 上面两个 poll 其中一个线程</p>\n<p>debug 执行后可以看到 headWaits 中加入了两个 poll 线程的阻塞</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211508417.png\" alt=\"image-20240121150845350\" /></p>\n<p>当我们运行后就会报错如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211503052.png\" alt=\"image-20240121150330974\" /></p>\n<p>报错位置的代码如下：</p>\n<p>offer 方法中的 headWaits.signal 既然报错了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211509981.png\" alt=\"image-20240121150940910\" /></p>\n<p>为什么它会出错呢？如下分析：</p>\n<p>其实之前的文章提到过，不管是 await (阻塞) 方法还是 signal (唤醒) 方法 ，它们都必须配合锁一起使用，也就是 在调用这两个方法之前必须都加好锁，它俩调用完了后必须解锁否则将来就会报错</p>\n<p>你可能会想说，这里报错的这个 signal 已经配合锁一起使用了呀 进入 offer 方法前 执行了 <code>tailLock.lockInterruptibly();</code>  结束时必须执行  <code>tailLock.unlock();</code> ，为什么会报错了</p>\n<p><mark>注意</mark>：我们不光是要让 signal 配合锁一起使用 而且呢 与 signal 一起使用的锁 必须配对</p>\n<p>上面  锁 必须配对 是什么意思呢？</p>\n<p>就是说 signal 必须是 headLock 这个锁对象一起配对使用，而 tailWaits 才能配对 tailLock 一起使用</p>\n<p>到这里就清楚 为什么报错 会在 headWaits.signal 了吧</p>\n<p>那这个问题怎么解决呢？</p>\n<p>我们只需要在 headWaits.signal 的前后加上 与它配对的锁就行了，为了防止报错 没有释放锁 使用 try finally 进行包裹 headWaits.signal，代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 加上 headWaits.signal (); 需要的 headLock 锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>headLock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 必须 配合 配对的锁一起使用否则会就报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 释放 headLock 的锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   headLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们在 headLock.lockInterruptibly (); 代码处打上断点 进行查看当 offer 线程 添加元素时 是哪个 poll 线程 获取到的 offer 添加的元素</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211525914.png\" alt=\"image-20240121152559807\" /></p>\n<p>当程序走到–释放锁时 此时就会 唤醒 headWaits 中的一个线程去 取元素</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211526159.png\" alt=\"image-20240121152650095\" /></p>\n<p>打印结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401211529532.png\" alt=\"image-20240121152904479\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/",
            "title": "实现动态数组",
            "date_published": "2024-01-21T08:31:33.720Z",
            "content_html": "<h1 id=\"实现动态数组\"><a class=\"anchor\" href=\"#实现动态数组\">#</a> 实现动态数组</h1>\n<p>简单的动态数组类  <code>DynamicArray</code> ，以下是对其概述思想的介绍：</p>\n<ol>\n<li><strong>初始状态和基本参数：</strong>\n<ul>\n<li><code>size</code> ：表示动态数组的逻辑大小，即当前元素的个数。</li>\n<li><code>capacity</code> ：表示动态数组的容量，即数组的实际大小。</li>\n<li><code>array</code> ：是用于存储元素的数组。</li>\n</ul>\n</li>\n<li><strong>添加元素：</strong>\n<ul>\n<li><code>addLast(int element)</code>  方法用于向数组的最后位置添加元素。它实际上调用了  <code>add(int index, int element)</code>  方法，并将  <code>index</code>  参数设置为当前的逻辑大小  <code>size</code> 。</li>\n<li><code>add(int index, int element)</code>  方法用于在指定位置添加元素。在添加之前，会检查是否需要进行数组扩容（通过  <code>checkAndGrow()</code>  方法）。如果需要扩容，则创建一个新的数组，并将旧数组中的元素复制到新数组中。然后，通过  <code>System.arraycopy</code>  将从指定位置开始的元素整体向后移动一位，腾出位置插入新元素。</li>\n</ul>\n</li>\n<li><strong>数组扩容：</strong>\n<ul>\n<li><code>checkAndGrow()</code>  方法用于检查是否需要进行数组扩容。如果当前数组的大小等于容量  <code>capacity</code> ，则进行扩容。新的容量是当前容量的 1.5 倍，然后创建一个新的数组，将旧数组的元素复制到新数组中。</li>\n</ul>\n</li>\n<li><strong>查询元素：</strong>\n<ul>\n<li><code>get(int index)</code>  方法用于查询指定位置的元素。</li>\n</ul>\n</li>\n<li><strong>遍历元素：</strong>\n<ul>\n<li><code>foreach(Consumer&lt;Integer&gt; consumer)</code>  方法用于遍历数组的元素，并对每个元素执行指定的操作。</li>\n</ul>\n</li>\n<li><strong>迭代器和流：</strong>\n<ul>\n<li>实现了  <code>Iterator&lt;Integer&gt;</code>  接口，通过  <code>iterator()</code>  方法返回一个迭代器，可以使用迭代器遍历数组元素。</li>\n<li>提供了  <code>stream()</code>  方法，返回一个  <code>IntStream</code> ，可以使用流的方式操作数组。</li>\n</ul>\n</li>\n<li><strong>删除元素：</strong>\n<ul>\n<li><code>remove(int index)</code>  方法用于删除指定位置的元素。通过  <code>System.arraycopy</code>  将从指定位置开始的元素整体向前移动一位，然后逻辑大小  <code>size</code>  减一。</li>\n</ul>\n</li>\n<li><strong>示例：</strong>\n<ul>\n<li>在  <code>main</code>  方法中创建了一个  <code>DynamicArray</code>  实例，并进行了一些元素的添加和流式输出。</li>\n</ul>\n</li>\n</ol>\n<p>总体来说，这个动态数组的实现遵循了动态数组的基本思想，通过在必要时进行扩容，支持在任意位置添加和删除元素，同时提供了迭代器和流的方式遍历和操作数组。这种动态数组的实现方式在实际编程中常见，并提供了一种灵活、高效的数据结构</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicArray</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 逻辑大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 容量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> array<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 向最后位置 [size] 添加元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param element 待添加元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 向 [0 ... size] 位置添加元素</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param index 索引位置</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param element 待添加元素</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 检查是否需要扩容</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">checkAndGrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 如果 index 小于等于 0 或 小于 size 就满足条件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 如果是 直接调用 add 想要在 某个元素后面添加元素就会满足条件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 从 index 索引开始 拷贝 到 index + 1 ，需要的长度为 size - index</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 从 某个元素的位置开始 整体向后移动一位 下面再对当前索引位置进行赋值并扩大容量</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 将值赋值到 index 处</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 数组容量扩大</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkAndGrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 判断如果 size 等于了 capacity 就进行扩容</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            capacity <span class=\"token operator\">+=</span> capacity <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 创建扩容后的数组</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">int</span> newArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 将旧数组中的元素拷贝到新数组中</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newArray<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            array <span class=\"token operator\">=</span> newArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     * 查询元素</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     * @param index 索引位置，在 [0 ... size] 区间内</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     * @return 该索引位置的元素</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> consumer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 有没有下一个元素</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">return</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回当前元素，并移动到下一个元素</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IntStream</span> <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">DynamicArray</span> dynamicArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DynamicArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        dynamicArray<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        dynamicArray<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        dynamicArray<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        dynamicArray<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        dynamicArray<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "计算机学科",
                "动态数组"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B03-%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B03-%E5%AE%8C%E6%95%B4%E5%AE%9E%E7%8E%B0/",
            "title": "阻塞队列-单锁实现3-完整实现",
            "date_published": "2024-01-20T14:23:39.824Z",
            "content_html": "<h1 id=\"阻塞队列-单锁实现3-完整实现\"><a class=\"anchor\" href=\"#阻塞队列-单锁实现3-完整实现\">#</a> 阻塞队列 - 单锁实现 3 - 完整实现</h1>\n<p>阻塞队列的 1 篇和 2 篇 都看完了 下面就是完整的实现代码了</p>\n<p>先编写一个 阻塞队列接口 如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目前队列存在的问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> &lt;ol></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &lt;li > 很多场景要求 & lt;b > 分离 & lt;/b > 生产者、消费者两个 & lt;b > 角色 & lt;/b>、它们得由不同的线程来担当，而之前的实现根本没有考虑线程安全问题 & lt;/li></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &lt;li > 队列为空，那么在之前的实现里会返回 null，如果就是硬要拿到一个元素呢？只能不断循环尝试 & lt;/li></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    &lt;li > 队列为满，那么再之前的实现里会返回 false，如果就是硬要塞入一个元素呢？只能不断循环尝试 & lt;/li></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> &lt;/ol></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> 解决方法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> &lt;ol></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     &lt;li > 用锁保证线程安全 & lt;/li></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     &lt;li > 用条件变量让 poll 或 offer 线程进入 & lt;b > 等待 & lt;/b > 状态，而不是不断循环尝试，让 CPU 空转 & lt;/li></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> &lt;/ol></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 阻塞队列</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们先来讲解一下 阻塞队列接口中的 offer 和 poll 方法</p>\n<p>首先它们内部都会用到 条件变量 ，条件变量会 抛出 检查异常所以 函数声明 中 都进行了 throws 抛出异常</p>\n<p>offer：使用了 void 返回值 类型，因为 如果 队列满了就让当前线程阻塞不需要返回状态了</p>\n<p>实现代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义 head 和 tail 指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 队列中元素个数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 保证 队列的 线程安全 创建一个 锁对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 两个条件变量</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 在我们将来 offer 以及 poll 这两个方法 暂时没有办法向队列添加 / 取出元素时让线程进入阻塞状态</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 配合 poll 使用，在队列为空时 poll 方法没办法继续执行了，那么就放到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 配合 offer 使用，在队列满时 offer 方法没办法继续执行了，那么就放到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数 给数组 赋 初始值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 判断 队列是否为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 判断 队列是否满了</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//poll 等待队列非空</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来进行 重复检查 队列是否满了，如果队列满了就阻塞线程</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 将 要添加的元素 添加到 array [tail] 位置</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 判断 tail 是否 指向了 数组长度 也就是是否满了 如果满了 就将 tail 重置为 0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 自增 增加 队列中元素个数 (记录)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 由于 队列中 添加了一个元素 队列部位空了 就唤醒 headWaits 中的阻塞线程让其进行取出元素</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//offer 等待线程为空</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 判断队列是否为空，如果队列为空就将当前取出元素的线程进行阻塞</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token comment\">// 取出 head 处的元素</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">// 将当前取出的元素位置赋值为 null 让 GC 垃圾回收机制进行处理</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 判断 head 是否指向了 数组长度，如果是那么就重置 head</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>head <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token comment\">// 每次取出元素就将 元素个数 自减</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">// 取出元素后就表示 队列中被取出一个元素 那么此时队列肯定是不满了 那么就唤醒 tailWaits 中的阻塞对象让其进行添加元素</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 返回 取出的元素</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面代码中确实是实现了 对于 队列的线程安全的需求了，但是呢 如果 offer 方法 线程等待后迟迟没有人 唤醒它呢 ，所以我们要实现一个可以给等待加上时间上限的 offer 方法</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义 head 和 tail 指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 队列中元素个数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 保证 队列的 线程安全 创建一个 锁对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 两个条件变量</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 在我们将来 offer 以及 poll 这两个方法 暂时没有办法向队列添加 / 取出元素时让线程进入阻塞状态</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 配合 poll 使用，在队列为空时 poll 方法没办法继续执行了，那么就放到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 配合 offer 使用，在队列满时 offer 方法没办法继续执行了，那么就放到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数 给数组 赋 初始值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 判断 队列是否为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 判断 队列是否满了</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//poll 等待队列非空</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来进行 重复检查 队列是否满了，如果队列满了就阻塞线程</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 将 要添加的元素 添加到 array [tail] 位置</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 判断 tail 是否 指向了 数组长度 也就是是否满了 如果满了 就将 tail 重置为 0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 自增 增加 队列中元素个数 (记录)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 由于 队列中 添加了一个元素 队列部位空了 就唤醒 headWaits 中的阻塞线程让其进行取出元素</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 在上面原有的 offer 的基础上多了一个选择</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * 原有的 offer 方法当 队列 满了之后就会进入等待，那么问题就来了 它会等多久呢？</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * 它需要等到有其它的线程来唤醒它 比如说 下面的 poll 线程</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * 如果我不想等这么久，比如 迟迟等不到 有线程来 唤醒，我想给它加一个等待的时间上限呢？</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     * 这时我们就需要用到 下面新的 offer 方法了</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * @param e 要添加的元素</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     * @param timeout 等待的时间上限 (超时 时间)</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     * @return 如果超时没有添加成功就返回 false 添加成功返回 true</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * @throws InterruptedException</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 将毫秒转换为纳秒 方便 传值</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">// 因为下面的 awaitNanos 需要的是 纳秒 而我们传入 纳秒是不方便的 所以我们使用上面的 API 将用户传入的毫秒转换为纳秒使用</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">long</span> nanos <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来进行 重复检查 队列是否满了，如果队列满了就阻塞线程</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token comment\">//awaitNanos 接收一个 时间上限的等待</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token comment\">// 时间单位是什么呢？ 就是 它本身后半段语句 Nanos 就是 纳秒的意思</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// 纳秒使用呢 用户传入是不方便的，我们通过上面的 TimeUnit.MILLISECONDS.toNanos 来将 用户传入的毫秒转换为纳秒使用</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 将 要添加的元素 添加到 array [tail] 位置</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">// 判断 tail 是否 指向了 数组长度 也就是是否满了 如果满了 就将 tail 重置为 0</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token comment\">// 自增 增加 队列中元素个数 (记录)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token comment\">// 由于 队列中 添加了一个元素 队列部位空了 就唤醒 headWaits 中的阻塞线程让其进行取出元素</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//offer 等待线程为空</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token comment\">// 判断队列是否为空，如果队列为空就将当前取出元素的线程进行阻塞</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token comment\">// 取出 head 处的元素</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token comment\">// 将当前取出的元素位置赋值为 null 让 GC 垃圾回收机制进行处理</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token comment\">// 判断 head 是否指向了 数组长度，如果是那么就重置 head</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>head <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token comment\">// 每次取出元素就将 元素个数 自减</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token comment\">// 取出元素后就表示 队列中被取出一个元素 那么此时队列肯定是不满了 那么就唤醒 tailWaits 中的阻塞对象让其进行添加元素</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token comment\">// 返回 取出的元素</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：我们使用的 给等待加上时间上限的 offer 方法是有问题的，它有 虚假唤醒的问题。</p>\n<p>比如 timeout 参数 用户传入了 时间上限为 5 秒，5 秒之内如果队列还是满的那么应该返回 false 表示没有添加成功</p>\n<p>我们考虑虚假唤醒 比如时间已经过去了 1 秒了，过去 1 秒之后 poll 线程 取走一个元素此时 队列布满了 poll 线程把 tailWaits 中等待的线程唤醒，然后到了 tailWaits.awaitNanos (nanos); 唤醒，但是这次唤醒是个虚假唤醒 也就是并发还有另外一个 offer 线程，人家又把队列放满了 当 while (isFull) 再次循环的时候 isFull 还是 true 那 还得接着等待，正常 等待是 从 4 秒开始等待就行了，因为已经过去了 1 秒了，但是按照现在的代码它是从参数传过来的时间值，它是每次循环的时候都会等待 5 秒，所以我们需要对等待时间做一个调整</p>\n<p>上面的问题其实很好解决，因为 人家 API 已经帮我们考虑好了这个 tailWaits.awaitNanos (nanos) 会有一个返回值，这个返回值就代表等待的剩余时间，比如说已经 等了 1 秒 剩下还有 4 秒，那么返回值就是 剩下的 4 秒时间</p>\n<p>所以我们只需要判断 nanos 时间是否 等完了 也就是 是否小于等于 0 了 表示没有剩余时间了，这个队列还是满的 那么就放弃等待 返回 false 表示添加失败了</p>\n<p>对应代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//nanos 小于等于表示没有等待时间了 超时了 返回 false 表示 添加失败了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果 nanos 是大于 0 的说明 遭遇了虚假唤醒，还有一些时间需要继续等待 那么我就继续等 上次更新后的 nanos 时间</p>\n<p>对应代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 每次都将 nanos 时间更新为 当前剩余的时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nanos <span class=\"token operator\">=</span> tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果 队列不满 并且 元素添加 成功了 那么就返回 true 表示添加元素成功了</p>\n<p>offer 方法完整代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在上面原有的 offer 的基础上多了一个选择</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 原有的 offer 方法当 队列 满了之后就会进入等待，那么问题就来了 它会等多久呢？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 它需要等到有其它的线程来唤醒它 比如说 下面的 poll 线程</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 如果我不想等这么久，比如 迟迟等不到 有线程来 唤醒，我想给它加一个等待的时间上限呢？</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 这时我们就需要用到 下面新的 offer 方法了</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @param e 要添加的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param timeout 等待的时间上限 (超时 时间)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @return 如果超时没有添加成功就返回 false 添加成功返回 true</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @throws InterruptedException</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 将毫秒转换为纳秒 方便 传值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 因为下面的 awaitNanos 需要的是 纳秒 而我们传入 纳秒是不方便的 所以我们使用上面的 API 将用户传入的毫秒转换为纳秒使用</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">long</span> nanos <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 使用 while 来进行 重复检查 队列是否满了，如果队列满了就阻塞线程</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token comment\">//awaitNanos 接收一个 时间上限的等待</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token comment\">// 时间单位是什么呢？ 就是 它本身后半段语句 Nanos 就是 纳秒的意思</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token comment\">// 纳秒使用呢 用户传入是不方便的，我们通过上面的 TimeUnit.MILLISECONDS.toNanos 来将 用户传入的毫秒转换为纳秒使用</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token comment\">//nanos 小于等于表示没有等待时间了 超时了 返回 false 表示 添加失败了</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         <span class=\"token comment\">// 每次都将 nanos 时间更新为 当前剩余的时间</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         nanos <span class=\"token operator\">=</span> tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 将 要添加的元素 添加到 array [tail] 位置</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">// 判断 tail 是否 指向了 数组长度 也就是是否满了 如果满了 就将 tail 重置为 0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// 自增 增加 队列中元素个数 (记录)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// 由于 队列中 添加了一个元素 队列部位空了 就唤醒 headWaits 中的阻塞线程让其进行取出元素</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>完整的代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BlockingQueueImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义 head 和 tail 指针</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 队列中元素个数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 保证 队列的 线程安全 创建一个 锁对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 两个条件变量</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 在我们将来 offer 以及 poll 这两个方法 暂时没有办法向队列添加 / 取出元素时让线程进入阻塞状态</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 配合 poll 使用，在队列为空时 poll 方法没办法继续执行了，那么就放到 headWaits 中等待</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Condition</span> headWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 配合 offer 使用，在队列满时 offer 方法没办法继续执行了，那么就放到 tailWaits 中等待</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数 给数组 赋 初始值</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 判断 队列是否为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 判断 队列是否满了</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//poll 等待队列非空</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来进行 重复检查 队列是否满了，如果队列满了就阻塞线程</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 将 要添加的元素 添加到 array [tail] 位置</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 判断 tail 是否 指向了 数组长度 也就是是否满了 如果满了 就将 tail 重置为 0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 自增 增加 队列中元素个数 (记录)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 由于 队列中 添加了一个元素 队列部位空了 就唤醒 headWaits 中的阻塞线程让其进行取出元素</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 在上面原有的 offer 的基础上多了一个选择</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * 原有的 offer 方法当 队列 满了之后就会进入等待，那么问题就来了 它会等多久呢？</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * 它需要等到有其它的线程来唤醒它 比如说 下面的 poll 线程</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * 如果我不想等这么久，比如 迟迟等不到 有线程来 唤醒，我想给它加一个等待的时间上限呢？</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     * 这时我们就需要用到 下面新的 offer 方法了</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * @param e 要添加的元素</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     * @param timeout 等待的时间上限 (超时 时间)</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     * @return 如果超时没有添加成功就返回 false 添加成功返回 true</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     * @throws InterruptedException</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 将毫秒转换为纳秒 方便 传值</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token comment\">// 因为下面的 awaitNanos 需要的是 纳秒 而我们传入 纳秒是不方便的 所以我们使用上面的 API 将用户传入的毫秒转换为纳秒使用</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token keyword\">long</span> nanos <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 使用 while 来进行 重复检查 队列是否满了，如果队列满了就阻塞线程</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token comment\">//awaitNanos 接收一个 时间上限的等待</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// 时间单位是什么呢？ 就是 它本身后半段语句 Nanos 就是 纳秒的意思</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token comment\">// 纳秒使用呢 用户传入是不方便的，我们通过上面的 TimeUnit.MILLISECONDS.toNanos 来将 用户传入的毫秒转换为纳秒使用</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token comment\">//nanos 小于等于表示没有等待时间了 超时了 返回 false 表示 添加失败了</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token comment\">// 每次都将 nanos 时间更新为 当前剩余的时间</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                nanos <span class=\"token operator\">=</span> tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span>nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">// 将 要添加的元素 添加到 array [tail] 位置</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token comment\">// 判断 tail 是否 指向了 数组长度 也就是是否满了 如果满了 就将 tail 重置为 0</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token comment\">// 自增 增加 队列中元素个数 (记录)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token comment\">// 由于 队列中 添加了一个元素 队列部位空了 就唤醒 headWaits 中的阻塞线程让其进行取出元素</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token comment\">//offer 等待线程为空</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token comment\">// 加锁 (阻塞时可以随时打断)</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token comment\">// 判断队列是否为空，如果队列为空就将当前取出元素的线程进行阻塞</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                headWaits<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token comment\">// 取出 head 处的元素</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token comment\">// 将当前取出的元素位置赋值为 null 让 GC 垃圾回收机制进行处理</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            array<span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token comment\">// 判断 head 是否指向了 数组长度，如果是那么就重置 head</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>head <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                head <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token comment\">// 每次取出元素就将 元素个数 自减</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token comment\">// 取出元素后就表示 队列中被取出一个元素 那么此时队列肯定是不满了 那么就唤醒 tailWaits 中的阻塞对象让其进行添加元素</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token comment\">// 返回 取出的元素</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"BlockingQueue&#123;\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"array=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestBlockingQueue1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" begin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务4\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>1705760500582 begin\nBlockingQueue&#123;array=[任务1, null, null]&#125;\nBlockingQueue&#123;array=[任务1, 任务2, null]&#125;\nBlockingQueue&#123;array=[任务1, 任务2, 任务3]&#125;\n# 等待2秒后 poll 线程从队列中取出了一个元素 offer(e, timeout) 方法得以执行 添加了 任务4\nBlockingQueue&#123;array=[任务4, 任务2, 任务3]&#125;\n1705760502589 end\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B0-2%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%9A%84%E6%BC%8F%E6%B4%9E3/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B0-2%E4%B8%AD%E4%BB%A3%E7%A0%81%E7%9A%84%E6%BC%8F%E6%B4%9E3/",
            "title": "阻塞队列-单锁实现-2中代码的漏洞3",
            "date_published": "2024-01-20T09:34:13.760Z",
            "content_html": "<h1 id=\"阻塞队列-单锁实现-2中代码的漏洞3\"><a class=\"anchor\" href=\"#阻塞队列-单锁实现-2中代码的漏洞3\">#</a> 阻塞队列 - 单锁实现 - 2 中代码的漏洞 3</h1>\n<p>声明：只是做了一个很小的改动 但是 作用却非常的大，这是一个经验！！！</p>\n<p>考虑代码中的<mark>漏洞</mark></p>\n<p>漏洞在哪里呢？其实就在 判断 isFull 的 if 判断语句 那段代码中</p>\n<p>为什么呢？if 怎么会有错呢？它不就是判断 队列是否 满了 ，如果满了 添加代码 不能立刻 执行 我得先让代码阻塞 将来队列不满了，我将它唤醒，唤醒后继续执行后面的添加代码。if  能有什么错呢？</p>\n<p><strong>答</strong>：我们通过如下表格来进行分析，表格的 从上到下 顺序就是按照 时间顺序执行的</p>\n<table>\n<thead>\n<tr>\n<th>操作前</th>\n<th>offer(4)</th>\n<th>offer(5)</th>\n<th>poll()</th>\n<th>操作后</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[1 2 3]</td>\n<td>队列满，进入 tailWaits 等待</td>\n<td></td>\n<td></td>\n<td>[1 2 3]</td>\n</tr>\n<tr>\n<td>[1 2 3]</td>\n<td></td>\n<td></td>\n<td>取走 1，队列不满，唤醒线程</td>\n<td>[2 3]</td>\n</tr>\n<tr>\n<td>[2 3]</td>\n<td></td>\n<td>抢先获得锁，发现不满，放入 5</td>\n<td></td>\n<td>[2 3 5]</td>\n</tr>\n<tr>\n<td>[2 3 5]</td>\n<td>从上次等待处直接向下执行</td>\n<td></td>\n<td></td>\n<td>[2 3 5 ?]</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"问题分析\"><a class=\"anchor\" href=\"#问题分析\">#</a> 问题分析</h2>\n<p>假设 这个 队列 它的 容量是 3 已经放满了元素，放了 1 2 3 已经放满了</p>\n<p>然后先来的是 offer 方法 它要添加一个 4 ，当然 这时队列已经满了 如下 if 判断就已经成立了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 满了该做的事，offer 线程阻塞</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前线程加入 tailWaits, 并且让此线程阻塞   tailWaits.signal ()</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时 offer (4) 这个线程就会进入 tailWaits 等待就不能添加了 offer (4) 由于 后面 没有加进去所以 操作后的状态 还是 1 2 3</p>\n<p>接下来在时间点 2 这里，又来了一个线程是 poll 线程 ，poll 线程 是从 队列中 取走一个元素，取走一个元素后 队列 此时就不满了 这时就由 poll 线程来唤醒 tailWaits 中等待的线程 操作后的状态是 被取走了一个元素所以是 2 3</p>\n<p>接下来在时间点 3 这里，时间点 1 线程已经被唤醒了，它要和 时间点 3 争抢锁 。假设是 offer (5) 也就是时间点 3 线程 争抢到了锁，此时 队列中 有 2 个元素不满 所以 offer (5) 就直接 添加到 队列里面去了</p>\n<p>此时 offer (5) 这个线程 执行完就释放锁了，然后就轮到 线程 1 执行了 它会从 wait 函数 往下执行 因为它是被唤醒的，但是呢 此时 队列已经是 2 3 5 已经满了啊，这时就出现问题了！</p>\n<h2 id=\"问题关键\"><a class=\"anchor\" href=\"#问题关键\">#</a> 问题关键</h2>\n<ul>\n<li>从 tailWaits 中唤醒的线程，会与新来的 offer 的线程争抢锁，谁能抢到是不一定的，如果后者先抢到，就会导致条件又发生变化</li>\n<li>这种情况称之为 <mark>虚假唤醒</mark>，还行后应该重新检查条件，看是不是重新进入等待</li>\n</ul>\n<p>那么怎么 重新检查呢？</p>\n<p>我们只需要将 if 条件 换成 while 条件就可以了</p>\n<p>while 的效果是什么？当线程 1 被唤醒之后 就会又回到 while 所处的代码行 重新 执行判断 看看 isFull 是否成立 如果 满 就代表成立那么 线程 1 就会又被 阻塞 咯！</p>\n<p>如果队列 没有 满 那么 线程 1 才能 得以执行 添加 offer (4) 的代码</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    1. synchronized 关键字，功能少</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    2. ReentrantLock 可重入锁，功能多</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThreadUnsafe</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条件变量对象 集合</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加锁 (可以在阻塞状态随时打断)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 使用 while 解决 虚假唤醒 问题</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 满了该做的事，offer 线程阻塞</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前线程加入 tailWaits, 并且让此线程阻塞   tailWaits.signal ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">TestThreadUnsafe</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestThreadUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"添加元素之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"添加元素成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始唤醒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                queue<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                queue<span class=\"token punctuation\">.</span>tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                queue<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列",
                "代码经验"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B0-%E9%98%B2%E6%AD%A2%E4%BA%A4%E9%94%99%E6%89%A7%E8%A1%8C1/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B0-%E9%98%B2%E6%AD%A2%E4%BA%A4%E9%94%99%E6%89%A7%E8%A1%8C1/",
            "title": "阻塞队列-单锁实现-防止交错执行1",
            "date_published": "2024-01-20T09:11:20.230Z",
            "content_html": "<h1 id=\"阻塞队列-单锁实现-防止交错执行1\"><a class=\"anchor\" href=\"#阻塞队列-单锁实现-防止交错执行1\">#</a> 阻塞队列 - 单锁实现 - 防止交错执行 1</h1>\n<p>在 java 中要防止 代码 多线程下的 交错执行，我们就需要用到锁</p>\n<p>在 java 中 锁 有两种选择：</p>\n<ol>\n<li>一种锁的实现是 sychronized 关键字，功能较少</li>\n<li>ReentrantLock 翻译：entrant (进入) Reentrant (重新进入) Lock (锁) ReentrantLock (可重入锁) 。JDK 提供的工具类 而不是 关键字，相对功能比较多</li>\n</ol>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThreadUnsafe</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 锁对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 加锁 阻塞 时 可以随时被 打断</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 需要受到 锁 保护的 代码块</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">finally</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">TestThreadUnsafe</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestThreadUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">try</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B0-%E9%98%BB%E5%A1%9E%E7%BA%BF%E7%A8%8B2/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97-%E5%8D%95%E9%94%81%E5%AE%9E%E7%8E%B0-%E9%98%BB%E5%A1%9E%E7%BA%BF%E7%A8%8B2/",
            "title": "阻塞队列-单锁实现-阻塞线程2",
            "date_published": "2024-01-20T09:07:25.779Z",
            "content_html": "<h1 id=\"阻塞队列-单锁实现-阻塞线程2\"><a class=\"anchor\" href=\"#阻塞队列-单锁实现-阻塞线程2\">#</a> 阻塞队列 - 单锁实现 - 阻塞线程 2</h1>\n<p>使用 <code>ReentrantLock</code>  和 <code>Condition</code>  来实现一个简单的线程安全的队列。以下是代码的详细解释</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    1. synchronized 关键字，功能少</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    2. ReentrantLock 可重入锁，功能多</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThreadUnsafe</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Condition</span> tailWaits <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 条件变量对象 集合</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 加锁 (可以在阻塞状态随时打断)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 满了该做的事，offer 线程阻塞</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前线程加入 tailWaits, 并且让此线程阻塞   tailWaits.signal ()</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>tail <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解锁</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">TestThreadUnsafe</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestThreadUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"添加元素之前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"添加元素成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始唤醒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                queue<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                queue<span class=\"token punctuation\">.</span>tailWaits<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                queue<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"断点分析\"><a class=\"anchor\" href=\"#断点分析\">#</a> 断点分析：</h2>\n<p><strong>我们进行断点查看</strong>：</p>\n<p>将断掉标记到 74 行代码处</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201655725.png\" alt=\"image-20240120165514644\" /></p>\n<p>当轮到 线程 2 执行时 线程 1 是被 阻塞了</p>\n<p>所以控制台打印了</p>\n<pre><code>Connected to the target VM, address: '127.0.0.1:11310', transport: 'socket'\nt1添加元素之前\n</code></pre>\n<p>然后 我们在 线程 2 处打了断点 所以 我们直接往下执行程序，打印如下：</p>\n<pre><code>Connected to the target VM, address: '127.0.0.1:11310', transport: 'socket'\nt1添加元素之前\n开始唤醒\n</code></pre>\n<p>走到下图这个位置的时候 线程 2 拿到锁</p>\n<p>PS：线程 1 拿到锁的时候 由于 wait () 函数 将 线程 1 阻塞了 会 主动的 释放锁</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201657816.png\" alt=\"image-20240120165730767\" /></p>\n<p>再往下执行的时候 释放了 tailWaits 中 的锁 进行 对 Condition 里面的阻塞 线程的唤醒</p>\n<p>PS：这里只是下达了这样的指令 并没有 真正的 唤醒 线程 1 需要 释放锁后 才会 真正唤醒 线程 1</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201702547.png\" alt=\"image-20240120170204501\" /></p>\n<p>然后再往下执行 线程 2 释放锁</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201705223.png\" alt=\"image-20240120170509178\" /></p>\n<p>PS：当线程 2 释放锁后 才会 唤醒 线程 1 此时 线程 1 被唤醒 然后 接着 上次的 isFull 往下执行程序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201702258.png\" alt=\"image-20240120170235211\" /></p>\n<p>线程 2 释放完成后 ，线程 1 往下执行 完毕 此时 e0 的地方就会被赋值为 e10 了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201706644.png\" alt=\"image-20240120170606599\" /></p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%97%AE%E9%A2%98%E6%8F%90%E5%87%BA/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%97%AE%E9%A2%98%E6%8F%90%E5%87%BA/",
            "title": "目前队列存在的问题",
            "date_published": "2024-01-19T13:44:02.169Z",
            "content_html": "<h2 id=\"目前队列存在的问题\"><a class=\"anchor\" href=\"#目前队列存在的问题\">#</a> 目前队列存在的问题</h2>\n<ol>\n<li>很多场景要求分离<mark>生产者</mark>，<mark>消费者</mark>两个角色，它们得由不同的线程来担当，而之前的实现根本没有考虑线程安全问题</li>\n<li>队列为空，那么在之前的实现里会返回 null，如果就是硬要拿到一个元素呢？只能不断循环尝试</li>\n<li>队列为满，那么再之前的实现里会返回 false，如果就是硬要塞入一个元素呢？只能不断循环尝试</li>\n</ol>\n<p>所谓的生产者就是一段代码它主要调用的是 offer 方法，为队列提供元素的这个称之为 <mark>生产者</mark></p>\n<p>所谓的消费者就是另一段代码它主要调用的是 poll 方法，从队列中获取元素的这个称之为 <mark>消费者</mark></p>\n<h3 id=\"案例代码\"><a class=\"anchor\" href=\"#案例代码\">#</a> 案例代码：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestThreadUnsafe</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> tail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        array<span class=\"token punctuation\">[</span>tail<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        tail<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">TestThreadUnsafe</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestThreadUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 如果将 两个添加 代码 换成 在 两个线程中去执行看看会有什么问题</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分析代码\"><a class=\"anchor\" href=\"#分析代码\">#</a> 分析代码：</h3>\n<p>t1 和 t2 都是要执行如下代码，但是 它们在执行时代码次序 可能会发生 交错的情况</p>\n<pre><code>tail\n[null null null null null null null null null null]\n  0    1     2    3    4    5   6    7    8    9\n  ============t1 和 t2两个线程的执行次序=============\nt1                          t2\narray[tail] = e1;\ntail++;\n                            array[tail] = e2;\n                            tail++;\n</code></pre>\n<p>上面的话什么意思呢？就是说 当 CPU 刚开始 指向 t1 的时候它先 指向了 赋值语句 array [tail] = e; 但是它还没来得及执行后面的自增操作：tail++; CPU 的执行权就会切换到 t2 切换到 t2 它可能会把 t2 这两行代码执行完了 它再切换回 t1 执行 自增操作 tail++;</p>\n<p>这就是两个线程代码产生 交错的 情况</p>\n<pre><code>tail\n[null null null null null null null null null null]\n  0    1     2    3    4    5   6    7    8    9\n  ============t1 和 t2两个线程的执行次序=============\nt1                          t2\narray[tail] = e1;\n\n                            array[tail] = e2;\n                            tail++;\ntail++;\n</code></pre>\n<p>交错 就会导致我们的结果 出乎意料，导致一个不正确的结果</p>\n<h3 id=\"分析交错代码执行流程\"><a class=\"anchor\" href=\"#分析交错代码执行流程\">#</a> 分析交错代码执行流程：</h3>\n<p>t1 执行中…</p>\n<pre><code>tail\n[null null null null null null null null null null]\n  0    1     2    3    4    5   6    7    8    9\n  ============t1 和 t2两个线程的执行次序=============\n当 t1 将索引0的位置赋值为 e1 的时候 还没来得及执行 tail++ CPU就切换到了 t2\nt1                          t2\narray[0] = e1;\n\n                            array[tail] = e2;\n                            tail++;\ntail++;\n</code></pre>\n<p>t2 执行中…</p>\n<pre><code>此时由于上面t1执行的时候将 索引0位置赋值为 了e1\ntail\n[e1 null null null null null null null null null]\n  0    1     2    3    4    5   6    7    8    9\n  ============t1 和 t2两个线程的执行次序=============\nt1                          t2\narray[0] = e1;\n                            执行t2到赋值语句此时 tail还处于索引0的位置，赋值后 并进行 tail++;\n                            array[tail] = e2;\n                            tail++;\ntail++;\n</code></pre>\n<p>t1 执行中…</p>\n<pre><code>由于t1执行了赋值语句为e1时 还没有 tail++ CPU就切换到了t2 而t2赋值为了 e2 并将tail++了\n    tail\n[e2 null null null null null null null null null]\n  0    1     2    3    4    5   6    7    8    9\n  ============t1 和 t2两个线程的执行次序=============\nt1                          t2\narray[0] = e1;\nCPU切换到t1 将剩余代码执行完毕 tail++\n                            array[tail] = e2;\n                            tail++;\ntail++;\n</code></pre>\n<p>t2 执行中…</p>\n<pre><code>CPU切换到t1 继续执行下面代码tail++\n         tail\n[e2 null null null null null null null null null]\n  0    1     2    3    4    5   6    7    8    9\n  ============t1 和 t2两个线程的执行次序=============\nt1                          t2\narray[0] = e1;\n                            CPU 切换到t2 执行赋值代码 并 tail++\n                            array[tail] = e2;\n                            tail++;\ntail++;\n</code></pre>\n<p>当现在其实也不必在深究下去了，因为已经可以看出 出错了</p>\n<p>当然这种 交错的情况 也只是 有可能而已 ，它也有可能是正常的 比如执行完了 t1 在 执行 t2 但是也有可能 t2 只执行了赋值语句没来得及执行 tail++CPU 就切换到了 t1 了</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "阻塞队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E5%A0%86%E5%AE%9E%E7%8E%B0-%E5%B0%8F%E9%A1%B6%E5%A0%86%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E5%A0%86%E5%AE%9E%E7%8E%B0-%E5%B0%8F%E9%A1%B6%E5%A0%86%E5%AE%9E%E7%8E%B0/",
            "title": "优先级队列-堆实现-小顶堆实现",
            "date_published": "2024-01-19T09:05:41.785Z",
            "content_html": "<h1 id=\"优先级队列-堆实现-小顶堆实现\"><a class=\"anchor\" href=\"#优先级队列-堆实现-小顶堆实现\">#</a> 优先级队列 - 堆实现 - 小顶堆实现</h1>\n<p>如下有三个链表 分别 使用指针 p 指向 头部</p>\n<pre><code>p\n1 -&gt; 4 -&gt; 5 -&gt; null\np\n1 -&gt; 3 -&gt; 4 -&gt; null\np\n2 -&gt; 6 -&gt; null\n</code></pre>\n<p>我们分别把 各个链表 的头部 元素 放到 小顶堆中</p>\n<pre><code>p\n1 -&gt; 4 -&gt; 5 -&gt; null\np\n1 -&gt; 3 -&gt; 4 -&gt; null\np\n2 -&gt; 6 -&gt; null\n# 先将 三个链表的头部元素 放到 小顶堆中，由于 1 和 1 相同所以不用 交换位置\n小顶堆  1 1 2\n空链表\n# 移除 小顶堆的 堆顶元素 (最小的元素) 放到 链表中\n小顶堆  1 2\n空链表  1\n</code></pre>\n<p>将第一个链表的 p 指针向后移动一步，将当前指向 的 元素放到 小顶堆中</p>\n<pre><code>     p\n1 -&gt; 4 -&gt; 5 -&gt; null\np\n1 -&gt; 3 -&gt; 4 -&gt; null\np\n2 -&gt; 6 -&gt; null\n# 将 小顶堆的 堆顶元素 (最小的元素) 放到 链表中\n小顶堆  2 4\n空链表  1 -&gt; 1\n</code></pre>\n<p>将第二个链表的 p 指针向后移动一步，将当前指向的 元素放到 小顶堆中</p>\n<pre><code>     p\n1 -&gt; 4 -&gt; 5 -&gt; null\n     p\n1 -&gt; 3 -&gt; 4 -&gt; null\np\n2 -&gt; 6 -&gt; null\n# 将 小顶堆的 堆顶元素 (最小的元素) 放到 链表中\n小顶堆  4  3\n空链表  1 -&gt; 1 -&gt; 2\n</code></pre>\n<p>将第三个链表的 p 指针向后移动一步，将当前指向的 元素放到 小顶堆中</p>\n<pre><code>     p\n1 -&gt; 4 -&gt; 5 -&gt; null\n     p\n1 -&gt; 3 -&gt; 4 -&gt; null\n     p\n2 -&gt; 6 -&gt; null\n# 将 小顶堆的 堆顶元素 (最小的元素) 放到 链表中\n小顶堆  4  6\n空链表  1 -&gt; 1 -&gt; 2 -&gt; 3\n</code></pre>\n<p>小顶堆中 3 被移除了 那么就将 第二个链表的 p 指针向后移动一步，将当前指向的 元素  放到小顶堆中</p>\n<pre><code>     p\n1 -&gt; 4 -&gt; 5 -&gt; null\n          p\n1 -&gt; 3 -&gt; 4 -&gt; null\n     p\n2 -&gt; 6 -&gt; null\n# 将 小顶堆的 堆顶元素 (最小的元素) 放到 链表中 被移除的 4 是 从第一个链表中 取出的，因为这次也是4 并不交换位置\n小顶堆  6  4\n空链表  1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4\n</code></pre>\n<p>小顶堆中第一个链表的 4 被移除了 那么就将 第一个链表的 p 指针向后移动一步，将当前指向的 元素  放到小顶堆中</p>\n<pre><code>          p\n1 -&gt; 4 -&gt; 5 -&gt; null\n          p\n1 -&gt; 3 -&gt; 4 -&gt; null\n     p\n2 -&gt; 6 -&gt; null\n# 将 小顶堆的 堆顶元素 (最小的元素) 放到 链表中\n小顶堆  6  5\n空链表  1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre>\n<p>现在 三个链表的 p 指针 都指向了 null 那么就将小顶堆中 剩余的 按照 小的开始放到链表中</p>\n<pre><code># 将 小顶堆的 堆顶元素 (最小的元素) 放到 链表中\n小顶堆 \n空链表  1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6\n</code></pre>\n<h3 id=\"演示图\"><a class=\"anchor\" href=\"#演示图\">#</a> 演示图：</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191524365.gif\" alt=\"recording\" /></p>\n<p>会了大顶堆 在看 小顶堆 代码就会很轻松</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<p>MinHeap</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小顶堆</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MinHeap</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MinHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 判断堆中是否 满了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取 最后一个元素</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 通过公式 得出 当前元素的 父节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 如果 不是 root 节点 和 当前的元素值 小于 父节点的元素值 就满足条件</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 将 父节点的 元素值 赋值给 当前元素</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            array<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 将 父节点的索引位置 赋值到 当前索引</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 再次计算 当前 节点的 父节点的索引位置</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 将 当前的 元素赋值 到 当前节点中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        array<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 判断 堆中是否为空</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 将 root 节点 与 最后一个节点 交换位置 ，方便移除 提高效率</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 大小 减一</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 拿到 最后 的值</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 将最后的 值赋值为 null 交给 GC 垃圾回收处理</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        array<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 将 当前的 root 节点 向下比较 找到自己合适的位置</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 经典的位置交换</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> t <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 通过公式 获取 当前节点的 左孩子</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 通过公式 获取 当前节点的 右孩子</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 将当前 节点 假定为 最小的 元素 赋值给 min</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 判断 如果 left 没有超出 索引范围 并且 left 所在的 值 比 min 所在的值 还要小</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 就将 left 索引赋值给 min</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            min <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 与上面判断同理</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            min <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// 判断如果 min 不等于 parent 说明上面是有符合交换条件的 就执行 if 方法体</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">!=</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token comment\">// 交换位置</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 将当前的 min 进行递归调用 重复这个 工作 直到 该 值 找到自己合适的位置即可</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token function\">down</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ListNode</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Leetcode 很多链表题目用到的节点类</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//        return String.valueOf(this.val);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 合并多个有序链表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">MinHeap</span> heap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MinHeap</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 1. 将链表的头节点 添加到 小顶堆中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> h <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                heap<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 2. 不断从堆顶移除最小元素，加入新链表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 定义辅助变量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 判断如果 heap 对象不为空</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 从 heap 堆中 弹出 顶部 元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">ListNode</span> min <span class=\"token operator\">=</span> heap<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 将 min 节点 添加到 t 链表中</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            t<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 更新 t 节点</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            t <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 将 上面 poll 处的 min 的 next 节点 在 添加到 heap 对象中这样就起到了 向后指向的 作用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                heap<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//s.next 返回 除了 哨兵节点外的 其它元素</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果：</p>\n<pre><code>[1,1,2,3,4,5,5,6]\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "编程题",
                "堆",
                "优先级队列",
                "完全二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E5%A0%86%E5%AE%9E%E7%8E%B0-%E5%A4%A7%E9%A1%B6%E5%A0%86%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E5%A0%86%E5%AE%9E%E7%8E%B0-%E5%A4%A7%E9%A1%B6%E5%A0%86%E5%AE%9E%E7%8E%B0/",
            "title": "优先级队列-堆实现-大顶堆实现",
            "date_published": "2024-01-19T06:10:59.459Z",
            "content_html": "<h1 id=\"优先级队列-堆实现-大顶堆实现\"><a class=\"anchor\" href=\"#优先级队列-堆实现-大顶堆实现\">#</a> 优先级队列 - 堆实现 - 大顶堆实现</h1>\n<h2 id=\"堆实现\"><a class=\"anchor\" href=\"#堆实现\">#</a> 堆实现</h2>\n<p>堆本质上就是一种树，堆的方式也有很多种，通常使用的是完全二叉树实现。</p>\n<p>计算机科学中，堆是一种基于数的数据结构，<mark>通常用完全二叉树实现</mark>。堆的特性如下：</p>\n<ul>\n<li>在大顶堆中，任意节点 C 与它的父节点 P 符合 P.value$$\\geq$$ C.value</li>\n<li>而小顶堆中，任意节点与 C 与它的父节点 P 符号 P.value $$\\leq$$ C.value</li>\n<li>最顶层的节点 (没有父节点) 称之为 root 根节点</li>\n</ul>\n<h2 id=\"那到底什么叫完全二叉树呢\"><a class=\"anchor\" href=\"#那到底什么叫完全二叉树呢\">#</a> 那到底什么叫完全二叉树呢？</h2>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190840270.png\" alt=\"image-20240119084035205\" /></p>\n<p>我们对照上面图进行解释：</p>\n<p>首先我们看什么叫 <strong>二叉</strong> ，所谓的 二叉 就是 树中<mark>每个节点 最多 有两个分支</mark>，如下图的 1 号节点 和 3 号节点 都是 有两个 分支的 就是 二叉</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190842343.png\" alt=\"image-20240119084229296\" /></p>\n<h2 id=\"那什么又叫完全二叉树呢\"><a class=\"anchor\" href=\"#那什么又叫完全二叉树呢\">#</a> 那什么又叫完全二叉树呢？</h2>\n<p><mark>树的将来每一层，除了最后一层，其它层都是填满的</mark>，<mark>当然最后一层 填满它也是 完全二叉树</mark></p>\n<p>根据下图解释：只有 除了 1 根节点除外 ， 2 节点 和 3 节点 有两个 分支 是填满的，而它们下面的 左右子树 也是 各有两个分支 同样 也是填满的 ，最后一层 没有填满 。符合 完全二叉树</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190845489.png\" alt=\"image-20240119084512445\" /></p>\n<h2 id=\"完全二叉树特点\"><a class=\"anchor\" href=\"#完全二叉树特点\">#</a> 完全二叉树特点</h2>\n<p>如果再往树中加一个节点的话，那么必须<mark>靠左添加</mark>，也就是 必须 先将 <mark>以 左子树 为目标 依次 向 右子树 填满</mark></p>\n<p>比如我要加一个 11 节点的话那么 添加后如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190849680.png\" alt=\"image-20240119084923633\" /></p>\n<p><strong>回过头来我们继续看堆</strong></p>\n<h2 id=\"大顶堆\"><a class=\"anchor\" href=\"#大顶堆\">#</a> 大顶堆</h2>\n<p><strong>大顶堆</strong>：这个树中任意一个节点 跟它的 父节点比，符合一个规则 就是 父节点的值 更大 ，大于子节点的 值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190852069.png\" alt=\"image-20240119085256025\" /></p>\n<h2 id=\"小顶堆\"><a class=\"anchor\" href=\"#小顶堆\">#</a> 小顶堆</h2>\n<p><strong>小顶堆</strong>：这个树中任意一个节点 跟它的 父节点比，符合一个规则 就是 父节点的 值 更小，小于子节点的 值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190854078.png\" alt=\"image-20240119085436036\" /></p>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<p><mark>完全二叉树 是 非线性的数据结构，但是我们可以使用数组来存储 节点数据</mark></p>\n<p>但是这种 完全二叉树 比较特殊，<mark>虽然它是非线性的</mark>数据结构，但是它存储的时候<mark>可以使用线性的数组结构来存储它的数据</mark>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190900064.png\" alt=\"image-20240119090049007\" /></p>\n<p>如比说 上图，完全二叉树是一个 大顶堆，大顶堆的根节点 我们可以存储到 数组的索引 0 的位置，根节点两个孩子 分别可以存储到 索引 1 ，索引 2 的位置，这样一次类推</p>\n<h2 id=\"特征\"><a class=\"anchor\" href=\"#特征\">#</a> 特征</h2>\n<p>正是因为，堆的数据可以存储在一维的数组里 所以 前人 给我们总结出了 一些 规则，这些规则可以在已知子节点的情况下快速找到父节点，或者反过来 已知父节点的情况下快速找到 子节点 (左子树或者右子树)</p>\n<ul>\n<li>如果从索引 0 开始存储节点数据\n<ul>\n<li>节点 i 的父节点为 floor ((i - 1) / 2) ，当 i &gt; 0 时\n<ul>\n<li>当 i &gt; 0 时我们才能根据 该 公式 找父节点</li>\n</ul>\n</li>\n<li>节点 i 的左子节点为 2  *  i + 1，右子节点为 2  *  i + 2，当然它们得 &lt; size\n<ul>\n<li>2 是固定的，i 是 当前索引值，所以是 2 乘以当前 索引 加 1= 左子树。加 2 = 右子树</li>\n<li>根据 父节点 找 子节点 不能超出 数组索引 范围，比如说 下图中 的 节点 3 找 子节点的话就是：2 * 4 + 1 = 9 这显然超出了 数组的 索引范围了，因为 3 节点 没有 子树</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>如果从索引 i 开始存储节点数据\n<ul>\n<li>节点 i 的父节点为 floor (i / 2)，当 i &gt; 1 时</li>\n<li>节点 i 的左子节点为 2i ，右子节点为 2i + 1，同样的 &lt; size</li>\n</ul>\n</li>\n</ul>\n<p>上面讲述了 堆呢 它的底层是 完全二叉树，而完全二叉树 显然 是一个 非线性的数据结构，因为树 它都分叉了 不想之前 数组 ，链表 它们都是一条线，所以称之为 <mark>非线性数据结构</mark>。</p>\n<h3 id=\"根据-孩子-找-父节点\"><a class=\"anchor\" href=\"#根据-孩子-找-父节点\">#</a> 根据 孩子 找 父节点</h3>\n<p>floor ((索引 - 1) / 2) = 父节点</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190910408.png\" alt=\"image-20240119091032317\" /></p>\n<h3 id=\"根据-父节点-找-左孩子\"><a class=\"anchor\" href=\"#根据-父节点-找-左孩子\">#</a> 根据 父节点 找 左孩子</h3>\n<p>2 * 索引 + 1 = 左孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190914706.png\" alt=\"image-20240119091441618\" /></p>\n<h3 id=\"根据父节点找到-右孩子\"><a class=\"anchor\" href=\"#根据父节点找到-右孩子\">#</a> 根据父节点找到 右孩子</h3>\n<p>2 * 索引 + 2 = 右孩子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401190916312.png\" alt=\"image-20240119091645223\" /></p>\n<h1 id=\"大顶堆实现-优先级队列\"><a class=\"anchor\" href=\"#大顶堆实现-优先级队列\">#</a> 大顶堆实现 - 优先级队列</h1>\n<h2 id=\"分析添加节点的情况\"><a class=\"anchor\" href=\"#分析添加节点的情况\">#</a> 分析添加节点的情况：</h2>\n<p>假如我要添加一个节点 4 那么我该如何添加呢？</p>\n<p>如果我直接添加到 节点 3 的下面 那么就 破坏了 大顶堆 的规则了，我们需要对大顶堆进行调整让它重新符合 大顶堆的 特性</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191012569.png\" alt=\"image-20240119101253419\" /></p>\n<h3 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤：</h3>\n<p>比如说 我们入堆 一个 4 ，它应该在 索引 9 的位置</p>\n<p>使用了两个指针 C 代表 孩子， P 代表 父节点</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191015974.png\" alt=\"image-20240119101519869\" /></p>\n<p>让 C 的优先级 与 P 的优先级 进行比较，C 是 4 ，P 是 3 。孩子 的优先级 比 父节点的高 那么我们应该把 父节点 向下移动 C 指向的位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191017991.png\" alt=\"image-20240119101741925\" /></p>\n<p>然后 将两个指针 向上各移动一位，重复 刚才的过程 进行比较</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191018086.png\" alt=\"image-20240119101844995\" /></p>\n<p>现在 C 是 4 再跟它的父节点 19 进行比较，现在 父节点 19 比 现在 孩子节点 4 要大了。就不用做调整了</p>\n<p>我们就把 4 放入 C 指向的位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191020890.png\" alt=\"image-20240119102008781\" /></p>\n<p>这样就重新符合了 大顶堆的 特性</p>\n<h3 id=\"添加节点的情况的代码实现部分\"><a class=\"anchor\" href=\"#添加节点的情况的代码实现部分\">#</a> 添加节点的情况的代码实现部分：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 1. 入堆新元素，加入到数组末尾 (索引位置 child)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 2. 不断比较新加元素与它父节点 (parent) 优先级</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *    - 如果父节点优先级低，则向下移动，并找到下一个 parent</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     *    - 直至父节点优先级更高 或 child = 0 为止</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param e</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 判断是否 满了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">//child 最后的 完全二叉树 节点位置 是个空的</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token comment\">// 通过公式 找到 当前 位置的 父节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">// 判断 如果 child 不是 根节点或者 当前 e 的优先级 高于 父节点的 优先级 满足条件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 将 父节点向下移动</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      array<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 将 child 的 索引位置 赋值为 父节点 位置 也就是 向上指向 向上比较</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token comment\">// 再将 parent 赋值为 当前索引位置的 父节点位置</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">// 最后将 当前要添加的 节点 添加到 合适的位置 就 符合 大顶堆的 特性了</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   array<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"分析取出-堆-中-优先级-最高的元素\"><a class=\"anchor\" href=\"#分析取出-堆-中-优先级-最高的元素\">#</a> 分析取出 堆 中 优先级 最高的元素</h2>\n<p>如下图 优先级最高的 元素 显然是 堆 顶的元素，我们要移除它之后仍然要保证 它还符合 大顶堆的 特性</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191033848.png\" alt=\"image-20240119103337792\" /></p>\n<p><strong>第一步</strong>：将要取出的元素跟最后元素交换位置 提高 移除效率</p>\n<p>我们将 堆顶的 元素 跟 最后一个元素 进行一个交换</p>\n<p>为什么交换？</p>\n<p>ps：是为了让它移除的效率更高，因为它本质上还是数组，数组从尾部移除效率最高</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191035271.png\" alt=\"image-20240119103515036\" /></p>\n<p>那么交换 位置后 将来只需要 size - 1 就可以把它给移除了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191036010.png\" alt=\"image-20240119103652949\" /></p>\n<p><strong>第二步</strong>：重新调整 堆，让它重新符合 大顶堆的 特性</p>\n<p>现在经过上面交换位置之后 它就不符合 大顶堆的 特性了。</p>\n<p>现在的调整堆 的思路和 入堆的 思路是相反的：入堆是 元素 经过比较 向上浮，然现在 7 要不断向下浮 直到符合堆的 特性</p>\n<h3 id=\"步骤-2\"><a class=\"anchor\" href=\"#步骤-2\">#</a> 步骤：</h3>\n<p>7 跟 当前 两个孩子进行比较跟 优先级较大的 孩子 交换位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191042850.png\" alt=\"image-20240119104210792\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191042218.png\" alt=\"image-20240119104243164\" /></p>\n<p>然后 P 指向当前交换位置的 子孩子位置，L 指向 左孩子，R 指向右孩子 再重复刚才的过程</p>\n<p>这回更大的 子孩子是 25 那么就跟 R 交换位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191044392.png\" alt=\"image-20240119104408330\" /></p>\n<p>直到 没有孩子了 或者 下次的两个孩子都没有它大 就可以结束 下浮的操作了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401191045805.png\" alt=\"image-20240119104511747\" /></p>\n<h3 id=\"取出-堆-中-优先级-最高的元素代码实现部分\"><a class=\"anchor\" href=\"#取出-堆-中-优先级-最高的元素代码实现部分\">#</a> 取出 堆 中 优先级 最高的元素代码实现部分：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 1. 交换堆顶和尾部元素，让尾部元素出队</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 2. (下滑)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *    - 从堆顶开始，将父元素与两个孩子较大者交换</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *    - 直到父元素大于两个孩子，或者没有孩子为止</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 判断 堆 是否为空</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 让 优先级 最高的 也就是 跟节点 跟 最后一个节点进行交换 [为了方便移除，并且效率高点]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">//size-- 大小 减一</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 获取 最后 元素的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token class-name\">Priority</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 将最后元素 赋值为 null 等待 GC 垃圾回收即可</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   array<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 下潜</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token comment\">// 通过公式 获取 左孩子 索引</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   <span class=\"token comment\">// int right = 2 * parent + 2;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 上面的公式</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token comment\">// 父节点 为 优先级 最高的 节点</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token comment\">// 判断 在有左孩子的情况下 并且 左孩子的 优先级 比 父节点 优先级高 那么将 父节点 向 左孩子 移动</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token comment\">// 当然了 max 只是辅助 变量 只是记录了 parent 要跟 谁 进行 交换 ，而 并没有真正 的 赋值过去</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      max <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token comment\">// 判断 在有右孩子的情况下 并且 右孩子的 优先级 比 父节点 优先级高 那么将 父节点 向 右孩子 移动</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      max <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">!=</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token comment\">// 将 比 parent 优先级 还高的 孩子节点 进行交换位置</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">// 将 parent 节点 更新为 max 节点 继续下一轮的 比较和交换位置</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token function\">down</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token comment\">// 典型的 交换位置 写法</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token class-name\">Priority</span> t <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"完整实现代码\"><a class=\"anchor\" href=\"#完整实现代码\">#</a> 完整实现代码：</h2>\n<p>priorityQueue</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 初始化 实例化 Priority 数组 并 设定 长度为 capacity</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PriorityQueue2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 1. 入堆新元素，加入到数组末尾 (索引位置 child)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 2. 不断比较新加元素与它父节点 (parent) 优先级</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     *    - 如果父节点优先级低，则向下移动，并找到下一个 parent</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     *    - 直至父节点优先级更高 或 child = 0 为止</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @param e</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 判断是否 满了</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//child 最后的 完全二叉树 节点位置 是个空的</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> child <span class=\"token operator\">=</span> size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 通过公式 找到 当前 位置的 父节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 判断 如果 child 不是 根节点或者 当前 e 的优先级 高于 父节点的 优先级 满足条件</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 将 父节点向下移动</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            array<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 将 child 的 索引位置 赋值为 父节点 位置 也就是 向上指向 向上比较</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            child <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 再将 parent 赋值为 当前索引位置的 父节点位置</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 最后将 当前要添加的 节点 添加到 合适的位置 就 符合 大顶堆的 特性了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        array<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 1. 交换堆顶和尾部元素，让尾部元素出队</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 2. (下滑)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     *    - 从堆顶开始，将父元素与两个孩子较大者交换</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     *    - 直到父元素大于两个孩子，或者没有孩子为止</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 判断 堆 是否为空</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 让 优先级 最高的 也就是 跟节点 跟 最后一个节点进行交换 [为了方便移除，并且效率高点]</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">//size-- 大小 减一</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 获取 最后 元素的值</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">Priority</span> e <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 将最后元素 赋值为 null 等待 GC 垃圾回收即可</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        array<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 下潜</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 通过公式 获取 左孩子 索引</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> parent <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// int right = 2 * parent + 2;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等价于 上面的公式</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 父节点 为 优先级 最高的 节点</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">// 判断 在有左孩子的情况下 并且 左孩子的 优先级 比 父节点 优先级高 那么将 父节点 向 左孩子 移动</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">// 当然了 max 只是辅助 变量 只是记录了 parent 要跟 谁 进行 交换 ，而 并没有真正 的 赋值过去</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            max <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// 判断 在有右孩子的情况下 并且 右孩子的 优先级 比 父节点 优先级高 那么将 父节点 向 右孩子 移动</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            max <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max <span class=\"token operator\">!=</span> parent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 将 比 parent 优先级 还高的 孩子节点 进行交换位置</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token comment\">// 将 parent 节点 更新为 max 节点 继续下一轮的 比较和交换位置</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token function\">down</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">// 典型的 交换位置 写法</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token class-name\">Priority</span> t <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token comment\">// 查看 队列是否 为 空</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">// 查看 队列是否 满了</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Priority</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Priority</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 返回对象的优先级，约定数字越大，优先级越高</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//return: 优先级</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Entry</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Priority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\" priority=\"</span> <span class=\"token operator\">+</span> priority <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> priority <span class=\"token operator\">==</span> entry<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testPoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">PriorityQueue1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack4\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack5\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack6\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：√</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "编程题",
                "堆",
                "优先级队列",
                "完全二叉树"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0/",
            "title": "优先级队列-有序数组实现",
            "date_published": "2024-01-18T13:21:45.192Z",
            "content_html": "<h1 id=\"优先级队列-有序数组实现\"><a class=\"anchor\" href=\"#优先级队列-有序数组实现\">#</a> 优先级队列 - 有序数组实现</h1>\n<p>见名知意，它是 将 优先级 越高的 元素 越往 队列顶部 排放，最高优先级的元素 就在 队列 的顶部。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181837284.png\" alt=\"image-20240118183704215\" /></p>\n<p>当出队列时就是将队列顶部的元素 (优先级最高的元素) 出队列</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181838651.png\" alt=\"image-20240118183825616\" /></p>\n<p>出队 变得简单了，但是 入队就相对于比较复杂了，比如说 我们要 入队一个 3 那么就需要 跟 队列中的 元素进行比较 然后找到自己适合的位置 入队就行了。</p>\n<p>步骤如下：</p>\n<p>1 需要先将 数组的 容量 进行扩增</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181840942.png\" alt=\"image-20240118184017914\" /></p>\n<p>2 让 入栈元素的 优先级 跟 i 指针指向的元素的优先级 进行对比，8 比 3 大 所以 将 8 向上移动一位</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181841620.png\" alt=\"image-20240118184143588\" /></p>\n<p>3 然后 i 指向下一个元素 再进行比较，5 也比 3 大 所以 5 也要向上移动一位</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181842364.png\" alt=\"image-20240118184234332\" /></p>\n<p>4 然后 i  指向下一个元素，4 跟 3 比，4 大，所以 4 向上移动一位</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181843074.png\" alt=\"image-20240118184317037\" /></p>\n<p>5 最后 1 跟 3 比较，3 大。此时 1 就不用移动了 那么就将 3 插入到 指向的索引 1 的位置</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181844545.png\" alt=\"image-20240118184410512\" /></p>\n<p>代码：</p>\n<p>PriorityQueue1</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 初始化 实例化 Priority 数组 并 设定 长度为 capacity</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PriorityQueue1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 增加容量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 找到 合适的位置 并 插入 元素</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 如果 i 没有 到最后一个 和 i 指向的 元素的优先级 大于 e 元素优先级的话 就满足条件了</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将 比 e 优先级高 的 元素 向后移动一位</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 自减，继续比较下一个</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 如果循环停止了说明找到了 e 合适的位置了  那么就将 e 插入到 i + 1 的位置</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        array<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 取出 优先级 高的 值</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        array<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 删除 poll 出去的值</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 获取 优先级最高 的值，但是不移除</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 查看 队列是否 为 空</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 查看 队列是否 满了</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Priority</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Priority</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 返回对象的优先级，约定数字越大，优先级越高</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//return: 优先级</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Entry</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Priority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\" priority=\"</span> <span class=\"token operator\">+</span> priority <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> priority <span class=\"token operator\">==</span> entry<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试代码：</p>\n<pre><code>public class TestDemo\n&#123;\n    @Test\n    public void testPoll()\n    &#123;\n        PriorityQueue1&lt;Entry&gt; queue = new PriorityQueue1&lt;&gt;(5);\n        queue.offer(new Entry(&quot;stack1&quot;, 4));\n        queue.offer(new Entry(&quot;stack2&quot;, 3));\n        queue.offer(new Entry(&quot;stack3&quot;, 2));\n        queue.offer(new Entry(&quot;stack4&quot;, 5));\n        queue.offer(new Entry(&quot;stack5&quot;, 1));\n        assertFalse(queue.offer(new Entry(&quot;stack6&quot;, 7)));\n        assertEquals(5, queue.poll().priority());\n        assertEquals(4, queue.poll().priority());\n        assertEquals(3, queue.poll().priority());\n        assertEquals(2, queue.poll().priority());\n        assertEquals(1, queue.poll().priority());\n    &#125;\n&#125;\n</code></pre>\n<p>打印结果：√</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "编程题",
                "优先级队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97-%E6%97%A0%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0/",
            "title": "优先级队列-无序数组的实现",
            "date_published": "2024-01-18T10:34:29.781Z",
            "content_html": "<h1 id=\"优先级队列-无序数组的实现\"><a class=\"anchor\" href=\"#优先级队列-无序数组的实现\">#</a> 优先级队列 - 无序数组的实现</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<h3 id=\"普通队列\"><a class=\"anchor\" href=\"#普通队列\">#</a> 普通队列</h3>\n<p>一端进 一端出 ，FIFO <mark>先进先出</mark></p>\n<h3 id=\"优先级队列\"><a class=\"anchor\" href=\"#优先级队列\">#</a> 优先级队列</h3>\n<p>一端进 一端出 ，它会<mark>按照队列中的优先级 出栈</mark>， 优先级高的 先 出栈</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<p>写了 三个类 主要是 PriorityQueue 中的逻辑代码</p>\n<p>PriorityQueue</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 初始化 实例化 Priority 数组 并 设定 长度为 capacity</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Priority</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 添加元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 判断 队列中是否为 满了</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 向 size 处添加元素 并将 size 自增</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        array<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 返回优先级最高的索引值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">selectMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 找到 优先级 最高的 索引 赋值给 max 然后返回</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                max <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 取出 优先级 高的 值</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 判断 队列是否为 空</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 获取 优先级最高的 索引位置</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">selectMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 通过 i 获取 优先级 最高的 值</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">E</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 根据 i 删除这个值</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 返回 优先级 最高的 值</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 删除 poll 出去的值</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 将 array 的 index + 1 的值开始 拷贝到 array 的 index 处 拷贝 size - index - 1 个值</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 移除后 size 自减</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 获取 优先级最高 的值，但是不移除</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 判断 队列 是否为 空</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 获取优先级最高的索引</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">selectMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 通过 i 索引返回优先级最高的值</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 查看 队列是否 为 空</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 判断 如果 size 为 0 说明 队列中没有任何值</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// 查看 队列是否 满了</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// 判断 size 如果 等于 队列的长度说明 队列已经满了</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Priority</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Priority</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 返回对象的优先级，约定数字越大，优先级越高</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//return: 优先级</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Entry</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Priority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>priority <span class=\"token operator\">=</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\" priority=\"</span> <span class=\"token operator\">+</span> priority <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> priority <span class=\"token operator\">==</span> entry<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> priority<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试代码\"><a class=\"anchor\" href=\"#测试代码\">#</a> 测试代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testPoll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack3\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack4\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack5\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token function\">assertFalse</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stack6\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行结果： √</p>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "队列",
                "编程题",
                "优先级队列"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91Z%E5%B1%82%E9%81%8D%E5%8E%86/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%BA%8C%E5%8F%89%E6%A0%91Z%E5%B1%82%E9%81%8D%E5%8E%86/",
            "title": "二叉树Z层遍历",
            "date_published": "2024-01-18T02:24:44.178Z",
            "content_html": "<h1 id=\"二叉树z层遍历\"><a class=\"anchor\" href=\"#二叉树z层遍历\">#</a> 二叉树 Z 层遍历</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍：</h2>\n<p>比如说如下有一个二叉树：</p>\n<pre><code>\t  1\n\t / \\\n   2\t 3\n  /\\    /\\\n 4\t5\t6\t7\n/\\\n8 9\n</code></pre>\n<p>那么上面的二叉树的遍历流程应该是下面的：</p>\n<pre><code>1\n32\n4567\n98\n</code></pre>\n<p>它的遍历层序是一个 Z 字的形状</p>\n<h2 id=\"该题目在-leetcode-中的-介绍如下\"><a class=\"anchor\" href=\"#该题目在-leetcode-中的-介绍如下\">#</a> 该题目在 leetcode 中的 介绍如下：</h2>\n<p>给你二叉树的根节点  <code>root</code>  ，返回其节点值的 <strong>锯齿形层序遍历</strong> 。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401181008088.jpeg\" alt=\"img\" /></p>\n<pre><code>输入：root = [3,9,20,null,null,15,7]\n输出：[[3],[20,9],[15,7]]\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：root = [1]\n输出：[[1]]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：root = []\n输出：[]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>树中节点数目在范围  <code>[0, 2000]</code>  内</li>\n<li><code>-100 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">zigzagLevelOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 表示 刚开始是 奇数层</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> c1<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            c2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            c2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token operator\">!</span> flag<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 由奇数层 切换到 偶数层，相反 由偶数层 切换到 奇数层</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        c1 <span class=\"token operator\">=</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "计算机学科",
                "编程题",
                "二叉树",
                "层序遍历"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%B8%AD%E7%BC%80%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "中缀转后缀表达式",
            "date_published": "2024-01-16T09:10:53.135Z",
            "content_html": "<h1 id=\"中缀转后缀表达式\"><a class=\"anchor\" href=\"#中缀转后缀表达式\">#</a> 中缀转后缀表达式</h1>\n<pre><code>| |\n| |\n| |\n| |\n---\n\na + b\na + b - c\na * b + c\na + b * c\n</code></pre>\n<h2 id=\"分析a-b\"><a class=\"anchor\" href=\"#分析a-b\">#</a> 分析 a + b</h2>\n<pre><code>|  |\n|  |\n|  |\n|  |\n----\n\na + b                  ab+\n</code></pre>\n<p>首先 遍历到 a 是一个 数字 就加入字符串，再遍历到 + 是个运算符 就加入到 队列中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161047958.png\" alt=\"image-20240116104723897\" /></p>\n<p>然后再遍历 到 b 是个数字就加入字符串中，然后从队列中取出运算符并进拼接字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161048070.png\" alt=\"image-20240116104840034\" /></p>\n<h2 id=\"分析a-b-c\"><a class=\"anchor\" href=\"#分析a-b-c\">#</a> 分析 a + b - c</h2>\n<pre><code>| |\n| |\n| |\n| |\n---\n\na + b - c\n</code></pre>\n<p>遍历到 a 是个数字 加入到字符串中 ，再遍历到 + 是个 运算符加入到 队列中，再遍历到 b 是个数字加入到字符串中，再遍历到 - 是个运算符加入到队列中，再遍历到 c 是个数字加入到 字符串中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161051714.png\" alt=\"image-20240116105115674\" /></p>\n<p>列中然后从队列中取出 - 运算符 拼接后 再 取出 + 拼接到字符串 得到最终结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161052509.png\" alt=\"image-20240116105222478\" /></p>\n<h2 id=\"分析a-b-c-2\"><a class=\"anchor\" href=\"#分析a-b-c-2\">#</a> 分析 a * b + c</h2>\n<pre><code>| |\n| |\n| |\n| |\n---\n\na * b + c\n</code></pre>\n<p>遍历到 a 是数字加入到 字符串，再遍历到 * 是运算符加入到 队列中，再遍历到 b 是数字加入到字符串，再遍历到 + 时 此时 运算符 比 上次的运算符 优先级小</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161056114.png\" alt=\"image-20240116105634065\" /></p>\n<p>所以需要将上次的 运算符 (*) 拼接到字符串后再 入栈 + 运算符</p>\n<p><img data-src=\"C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240116105721348.png\" alt=\"image-20240116105721348\" /></p>\n<p>然后再遍历到 c 是个数字加入到字符串，最后取出 运算符 进行拼接字符串，得到最终结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161058995.png\" alt=\"image-20240116105817954\" /></p>\n<h2 id=\"分析a-b-c-3\"><a class=\"anchor\" href=\"#分析a-b-c-3\">#</a> 分析 a + b * c</h2>\n<pre><code>| |\n| |\n| |\n| |\n---\n\na + b * c\n</code></pre>\n<p>遍历到 a 是个数字加入到字符串，再遍历到 + 是个运算符 加入到 队列，再遍历到 b 是个数字加入到 字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161100834.png\" alt=\"image-20240116110045788\" /></p>\n<p>再遍历到 * 是个运算符 ，但是这个运算符的优先级高于上次的运算符，需要先运算 * 那么就不能将 + 运算符 出栈，所以让 * 先入栈，继续往后遍历到 c 是个数字 加入到 字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161102280.png\" alt=\"image-20240116110256239\" /></p>\n<p>然后弹出栈中运算符拼接到字符串得到最终结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161103022.png\" alt=\"image-20240116110325975\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<ol>\n<li>遇到非运算符 直接拼串</li>\n<li>遇到 + - * /\n<ol>\n<li>它的优先级比栈顶运算符高，入栈</li>\n<li>否则把栈里优先级 &gt;= 它的 都出栈，它再入栈</li>\n</ol>\n</li>\n<li>遍历完成，栈里剩余运算符依次出栈</li>\n</ol>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 返回运算符的 优先级 设定 + - 运算符的优先级为 1 而 * / 运算符的优先级为 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param ch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 判断传入的字符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token comment\">// 判断 字符 是否为 + 或 - 如果是就返回 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">-></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 判断 字符 是否为 * 或 / 如果是就返回 2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">-></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"非法字符\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> exp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token comment\">// 记录 运算符</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token comment\">// 记录 数字</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 遍历 每个 字符</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 判断如果是 运算符 就执行</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 判断 栈中 是否为空</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>               <span class=\"token comment\">// 如果是空 就将 运算符 加入栈中</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>               stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>               <span class=\"token comment\">// 判断 当前 运算符 的优先级 是否 大于 栈顶的运算符 优先级</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>               <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                  <span class=\"token comment\">// 如果 当前 运算符 优先级 大于 栈顶的运算符 优先级 那么就 将 当前</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                  <span class=\"token comment\">// 运算符 加入栈中</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                  stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               <span class=\"token comment\">// 相反执行操作</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>               <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                  <span class=\"token comment\">// 如果 栈顶运算符的优先级 大于等于 当前运算符 优先级 那么就需要将 栈中的 高优先级</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                  <span class=\"token comment\">// 的运算符 弹出 并 先 进行计算后 进行后续的操作</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                     <span class=\"token comment\">// 从 栈中取出 栈顶的 运算符 追加到 字符串中</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                     sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                  stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 如果 不是 运算符那么肯定就是 数字 那么就 加入到 字符串中</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>         <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>   <span class=\"token comment\">// 判断 栈中 如果 不为 空 就 将剩余的 运算符 追加到 字符串中</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   <span class=\"token comment\">// 将最终结果 转换为 字符串 并 返回</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b-c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b*c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*b-c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>ab+\nab+c-\nabc*+\nab*c-\n</code></pre>\n<h1 id=\"分析-带括号的情况a-b-c\"><a class=\"anchor\" href=\"#分析-带括号的情况a-b-c\">#</a> 分析 带括号的情况 (a + b) * c</h1>\n<pre><code>| |\n| |\n| |\n| |\n---\n\n(a + b) * c\n</code></pre>\n<p>遍历到 ( 我们可以将 ( 看作为一个运算符 让它先入栈，再遍历到 a 是个数字 加入字符串，再遍历到 + 由于没有 找到 ( 的另一半所以 就 先将 + 直接入栈，再遍历到 b 是个数字加入到 字符串</p>\n<p><mark><strong>注意</strong></mark>：如果 + 入栈了 说明 它的优先级 应该比 （ 高</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161142303.png\" alt=\"image-20240116114224245\" /></p>\n<p>再遍历到 ）时 这时 就需要将 直到（ 的运算符都出栈，拼接到字符串中 (除了 <code>()</code>  不需要 拼接到字符串中)</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161146092.png\" alt=\"image-20240116114655047\" /></p>\n<p>遍历到 * 时 栈中时空的 直接入栈 然后 再遍历到 c 是数字就 拼接到字符串中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161337349.png\" alt=\"image-20240116133736288\" /></p>\n<p>最后将 * 弹出 拼接到字符串中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161337408.png\" alt=\"image-20240116133747364\" /></p>\n<h1 id=\"分析-带括号的情况a-b-c-d-e\"><a class=\"anchor\" href=\"#分析-带括号的情况a-b-c-d-e\">#</a> 分析 带括号的情况 (a - b * c - d) * e</h1>\n<pre><code>| |\n| |\n| |\n| |\n---\n\n(a - b * c - d) * e\n</code></pre>\n<p>遍历到 ( 入栈，再遍历到 a 是数字 拼接到  字符串，再遍历到 - 是运算符 入栈，再遍历到 b 是数字拼接到字符串中，再遍历 * 是运算符 优先级比 栈顶 运算符 优先级高 直接 入栈，再遍历到 c 是数字拼接到 字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161343918.png\" alt=\"image-20240116134305862\" /></p>\n<p>再遍历到 - 是运算符 它的优先级 比 栈顶的运算符 优先级 低 将 * 运算符 弹出 拼接到字符串中，左括号不用出栈，因为左括号的优先级比 - 号 低 。只有 大于等于 * 优先级的 弹出栈，然后 将 - 入栈，再遍历 d 是数字 拼接到字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161349545.png\" alt=\"image-20240116134926498\" /></p>\n<p>再遍历是）需要把之前栈中所有的运算符 直到 （左括号 的 都弹出，此时 - 运算符 出栈 并 拼接到 字符串中，同时左括号 也没用了也出栈</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161350834.png\" alt=\"image-20240116135059781\" /></p>\n<p>再遍历到 * 此时 栈空 直接入栈，再遍历到 e 是数字 拼接到字符串，最后弹出 * 运算符 拼接到字符串</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401161352011.png\" alt=\"image-20240116135206965\" /></p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结：</h2>\n<p>带（）</p>\n<ul>\n<li>左括号直接入栈，左括号优先级设置为 0</li>\n<li>右括号，遇到右括号就把栈里到左括号为止的所有运算符都出栈 (包括左括号) 即可！</li>\n</ul>\n<h2 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 返回运算符的 优先级 设定 + - 运算符的优先级为 1 而 * / 运算符的优先级为 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param ch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 判断传入的字符</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token comment\">// 判断 字符 是否为 + 或 - 如果是就返回 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span> <span class=\"token operator\">-></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 判断 字符 是否为 * 或 / 如果是就返回 2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">-></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token char\">'('</span> <span class=\"token operator\">-></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"非法字符\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> exp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 记录 运算符</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token comment\">// 记录 数字</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">// 遍历 每个 字符</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> exp<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 判断如果是 运算符 就执行</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token char\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'/'</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 判断 栈中 是否为空</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>               <span class=\"token comment\">// 如果是空 就将 运算符 加入栈中</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>               stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>               <span class=\"token comment\">// 判断 当前 运算符 的优先级 是否 大于 栈顶的运算符 优先级</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>               <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>               <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                  <span class=\"token comment\">// 如果 当前 运算符 优先级 大于 栈顶的运算符 优先级 那么就 将 当前</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                  <span class=\"token comment\">// 运算符 加入栈中</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                  stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>               <span class=\"token comment\">// 相反执行操作</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>               <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>               <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                  <span class=\"token comment\">// 如果 栈顶运算符的优先级 大于等于 当前运算符 优先级 那么就需要将 栈中的 高优先级</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                  <span class=\"token comment\">// 的运算符 弹出 并 先 进行计算后 进行后续的操作</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                     <span class=\"token comment\">// 从 栈中取出 栈顶的 运算符 追加到 字符串中</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                     sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                  stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>               <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 左括号 直接入栈</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token char\">'('</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 右括号 ，将 直到 左括号 之间的 运算符 都出栈 追加到 字符串中</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token char\">')'</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 循环直到 找到了 左括号就 停止</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token char\">'('</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>               <span class=\"token comment\">// 将 之间的 运算符 都加入字符串中</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>               sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token comment\">// 最后将 左括号 弹出</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token comment\">// 如果 不是 运算符那么肯定就是 数字 那么就 加入到 字符串中</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>         <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   <span class=\"token comment\">// 判断 栈中 如果 不为 空 就 将剩余的 运算符 追加到 字符串中</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   <span class=\"token comment\">// 将最终结果 转换为 字符串 并 返回</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>   <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// ab+</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b-c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// abc+-</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b*c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ab*c+</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a*b-c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ab*c-</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(a+b)*c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ab+c*</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo08</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">infixToSuffix</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(a-b*c-d)*e\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// abc*-d-e*</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>打印结果：</p>\n<pre><code>ab+\nab+c-\nabc*+\nab*c-\n--------------------------------------\nab+c*\nabc*-d-e*\n</code></pre>\n",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "计算机学科",
                "编程题"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/",
            "title": "逆波兰表达式求值",
            "date_published": "2024-01-16T02:09:35.377Z",
            "content_html": "<h1 id=\"逆波兰表达式求值\"><a class=\"anchor\" href=\"#逆波兰表达式求值\">#</a> 逆波兰表达式求值</h1>\n<p>给你一个字符串数组  <code>tokens</code>  ，表示一个根据 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklODAlODYlRTYlQjMlQTIlRTUlODUlQjAlRTUlQkMlOEYvMTI4NDM3\">逆波兰表示法</span> 表示的算术表达式。</p>\n<p>请你计算该表达式。返回一个表示表达式值的整数。</p>\n<p><strong>注意：</strong></p>\n<ul>\n<li>有效的算符为  <code>'+'</code> 、 <code>'-'</code> 、 <code>'*'</code>  和  <code>'/'</code>  。</li>\n<li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li>\n<li>两个整数之间的除法总是 <strong>向零截断</strong> 。</li>\n<li>表达式中不含除零运算。</li>\n<li>输入是一个根据逆波兰表示法表示的算术表达式。</li>\n<li>答案及所有中间计算结果可以用 <strong>32 位</strong> 整数表示。</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]\n输出：9\n解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]\n输出：6\n解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]\n输出：22\n解释：该算式转化为常见的中缀算术表达式为：\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= tokens.length &lt;= 104</code></li>\n<li><code>tokens[i]</code>  是一个算符（ <code>&quot;+&quot;</code> 、 <code>&quot;-&quot;</code> 、 <code>&quot;*&quot;</code>  或  <code>&quot;/&quot;</code> ），或是在范围  <code>[-200, 200]</code>  内的一个整数</li>\n</ul>\n<p><strong>逆波兰表达式：</strong></p>\n<p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p>\n<ul>\n<li>平常使用的算式则是一种中缀表达式，如  <code>( 1 + 2 ) * ( 3 + 4 )</code>  。</li>\n<li>该算式的逆波兰表达式写法为  <code>( ( 1 2 + ) ( 3 4 + ) * )</code>  。</li>\n</ul>\n<p>逆波兰表达式主要有以下两个优点：</p>\n<ul>\n<li>去掉括号后表达式无歧义，上式即便写成  <code>1 2 + 3 4 + * </code> 也可以依据次序计算出正确结果。</li>\n<li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中</li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<p>使用栈进行解决：</p>\n<p>比如果遍历到第一个是一个数字 就 将该数字 存入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081725076.png\" alt=\"image-20240108172500006\" /></p>\n<p>然后继续遍历 发现 还是数字就 再 存入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081726001.png\" alt=\"image-20240108172601954\" /></p>\n<p>继续遍历 发现 是 运算符 那么就 将栈中的 2, 1 弹出 进行当前运算符的 计算，然后入栈 计算结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081727831.png\" alt=\"image-20240108172709783\" /></p>\n<p>继续遍历 是数字 就 存入 栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081728716.png\" alt=\"image-20240108172816668\" /></p>\n<p>再继续遍历 发现是 运算符 ，将栈中的数字 全部 弹出 并进行当前运算符的计算 然后再存入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081728750.png\" alt=\"image-20240108172317021\" /></p>\n<p>我们再看另一种情况</p>\n<p>如下图当遇到了前面都是数字时，全部都 加入栈中，直到遇到运算符就取出栈中的前两个然后 运算再入栈</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401110908821.png\" alt=\"image-20240111090852749\" /></p>\n<p>完整的计算过程流程图如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401110914774.png\" alt=\"image-20240111091410713\" /></p>\n<p>代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo07</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eVal</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">eVal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> linked <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            linked<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            linked<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            linked<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         <span class=\"token keyword\">case</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">-></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            linked<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         <span class=\"token keyword\">default</span> <span class=\"token operator\">-></span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token keyword\">return</span> linked<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "计算机学科",
                "编程题",
                "逆波兰表达式"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/math/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/",
            "url": "https://pigpigletsgo.github.io/math/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/",
            "title": "欧几里得算法",
            "date_published": "2024-01-14T07:34:30.050Z",
            "content_html": "<h1 id=\"欧几里得算法\"><a class=\"anchor\" href=\"#欧几里得算法\">#</a> 欧几里得算法</h1>\n<p>也被称为：辗转相除法，其特征包括如下：</p>\n<ol>\n<li>有效性：辗转相除法 是一种有效的方法，能够找到两个整数的最大公约数</li>\n<li>递归性质：该算法可以通过递归方式实现，也可以用迭代方式</li>\n<li>基于整数除法：辗转相除法的核心操作是整数除法，通过计算余数和更新被除数，除数，直至余数为零，找到最大公约数</li>\n</ol>\n<h2 id=\"详细说明如下\"><a class=\"anchor\" href=\"#详细说明如下\">#</a> 详细说明如下：</h2>\n<p>当我们有两个整数 p 和 q，我们可以使用欧几里得算法求它们的最大公约数 (GCD)。这个算法的基本思想是：</p>\n<ol>\n<li>若 q 为 0，则最大公约数为 p</li>\n<li>否则，将 p 除以 q 得到余数 r，然后用 q 代替 p，用 r 代替 q，重复上述过程</li>\n</ol>\n<p>这个过程会一直持续，直到 q 变为 0，此时，p 的值就是最大公约数。这是一个反复取余的过程，逐步缩小问题规模。例如：</p>\n<pre><code>p = 48, q = 18\n\n1. 48 / 18 = 2 余 12，此时 p = 18，q = 12\n2. 18 / 12 = 1 余 6，此时 p = 12，q = 6\n3. 12 / 6 = 2 余 0，此时 q = 0\n\n最大公约数为 6。\n</code></pre>\n<p>在这个例子中，直到除数可以整数时的最大除数 就是 最大公约数，比如例子中的 12 / 6 = 2 余数为 0 是一个可以整数的除数 而且 也是唯一最大能整出的除数 所以 6 就是 最大公约数</p>\n<h2 id=\"使用java语言描述\"><a class=\"anchor\" href=\"#使用java语言描述\">#</a> 使用 Java 语言描述</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> p <span class=\"token operator\">%</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 q == 0 就直接返回 p 这是因为 0 不能除以任何数 所以 直接 返回 p 作为最大公约数</p>\n<p>int r = p % q 就是取 被除数 和 除数 之间的余数</p>\n<p>return gcd (q, r) 就是通过递归 逐步的缩小问题规模 得到最终的 最大公约数</p>\n",
            "tags": [
                "math",
                "math",
                "算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/",
            "title": "不同路径",
            "date_published": "2024-01-09T07:17:39.637Z",
            "content_html": "<h1 id=\"不同路径\"><a class=\"anchor\" href=\"#不同路径\">#</a> 不同路径</h1>\n<p>一个机器人位于一个  <code>m x n</code>  网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n<p>问总共有多少条不同的路径？</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091319454.png\" alt=\"img\" /></p>\n<pre><code>输入：m = 3, n = 7\n输出：28\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：m = 3, n = 2\n输出：3\n解释：\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -&gt; 向下 -&gt; 向下\n2. 向下 -&gt; 向下 -&gt; 向右\n3. 向下 -&gt; 向右 -&gt; 向下\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：m = 7, n = 3\n输出：28\n</code></pre>\n<p><strong>示例 4：</strong></p>\n<pre><code>输入：m = 3, n = 3\n输出：6\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= m, n &lt;= 100</code></li>\n<li>题目数据保证答案小于等于  <code>2 * 109</code></li>\n</ul>\n<h2 id=\"思路分析动态规划\"><a class=\"anchor\" href=\"#思路分析动态规划\">#</a> 思路分析：动态规划</h2>\n<p>我们先来分析一下如下格子 有几种走法</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091328311.png\" alt=\"image-20240109132812259\" /></p>\n<p>第一种走法：先 向右 走一步，再向下走两步</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091328149.png\" alt=\"image-20240109132842095\" /></p>\n<p>第二种走法：先向下两步，再向右走一步</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091329789.png\" alt=\"image-20240109132938739\" /></p>\n<p>第三种走法：先向下走一步，再向右走一步，再向下走一步</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091330140.png\" alt=\"image-20240109133019090\" /></p>\n<p>我们现在知道了 3 行 2 列的格子一共有 3 种走法，那么 这三种是怎么来的呢。下面继续拆解</p>\n<p>我们先假设格子就这么大，就两个格子大小</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091331138.png\" alt=\"image-20240109133131320\" /></p>\n<p>那么这时的走法总数 只有一种</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091332229.png\" alt=\"image-20240109133236168\" /></p>\n<p>还有一种情况如下格子是如下这么画的 它的走法总数是几？</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091333632.png\" alt=\"image-20240109133320579\" /></p>\n<p>也是 1，这时它只能向下走，所以也只有一种走法</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091334190.png\" alt=\"image-20240109133412119\" /></p>\n<p>现在我们把范围扩大到 4 个格子，这时它要走到右下角有几种走法</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091334517.png\" alt=\"image-20240109133438459\" /></p>\n<p>有 2 种走法，要么它从下面走过来，要么它从上面走过来</p>\n<p>这里有个规律这 2 种走法是怎么来的呢，其实就是 第一种走法 + 第二种走法 = 2</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091335422.png\" alt=\"image-20240109133540355\" /></p>\n<p>下面如果格子是这样画的，那么它走到右下角的走法还是 1 种</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091337353.png\" alt=\"image-20240109133705301\" /></p>\n<p>现在我们把格子范围扩大到整个</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091337254.png\" alt=\"image-20240109133759190\" /></p>\n<p>那么到达右下角的走法总数就是 前两个走法数 相加 就是 3</p>\n<p>规律：右下角它的走法总数就是，右下角它上方的 格子的 走法数 和 左方的走法数 它们的和就是 最终右下角的结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091338546.png\" alt=\"image-20240109133853490\" /></p>\n<p>​\t第一行和第一列它们的走法都是 1 种</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091346069.png\" alt=\"image-20240109134610014\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo04</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">updatePaths</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">updatePaths</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 创建一个 m 行 n 列 的二维数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 第一种走法 右边都是 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 第一种走法 下边都是 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token comment\">// 当前格子 = 它 上面格子 + 左边格子</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "java",
                "计算机学科",
                "编程题",
                "动态规划"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/",
            "title": "跳跃游戏",
            "date_published": "2024-01-09T02:40:29.955Z",
            "content_html": "<h1 id=\"跳跃游戏\"><a class=\"anchor\" href=\"#跳跃游戏\">#</a> 跳跃游戏</h1>\n<p>给你一个非负整数数组  <code>nums</code>  ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>\n<p>判断你是否能够到达最后一个下标，如果可以，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：nums = [2,3,1,1,4]\n输出：true\n解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：nums = [3,2,1,0,4]\n输出：false\n解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 104</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 105</code></li>\n</ul>\n<h2 id=\"思路分析贪心算法\"><a class=\"anchor\" href=\"#思路分析贪心算法\">#</a> 思路分析：贪心算法</h2>\n<p>我们可以用贪心的方法解决这个问题。</p>\n<p>设想一下，对于数组中的任意一个位置 y，我们如何判断它是否可以到达？根据题目的描述，只要存在一个位置 x，它本身可以到达，并且它跳跃的最大长度为 x+nums [x] 这个值大于等于 y，即 x + nums [x] ≥ y 那么位置 y 也可以到达。</p>\n<p>换句话说，对于每一个可以到达的位置 x，它使得 x+1, x+2,⋯ , x+nums [x] 这些连续的位置都可以到达。</p>\n<p>这样以来，我们依次遍历数组中的每一个位置，并实时维护 最远可以到达的位置。对于当前遍历到的位置 x，如果它在 最远可以到达的位置 的范围内，那么我们就可以从起点通过若干次跳跃到达该位置，因此我们可以用 x+nums [x] 更新 最远可以到达的位置。</p>\n<p>在遍历的过程中，如果 最远可以到达的位置 大于等于数组中的最后一个位置，那就说明最后一个位置可达，我们就可以直接返回 True 作为答案。反之，如果在遍历结束后，最后一个位置仍然不可达，我们就返回 False 作为答案。</p>\n<p>以题目中的示例一</p>\n<p>[2, 3, 1, 1, 4]<br />\n 为例：</p>\n<p>我们一开始在位置 0，可以跳跃的最大长度为 2，因此最远可以到达的位置被更新为 2；</p>\n<p>我们遍历到位置 1，由于 1 ≤ 2，因此位置 1 可达。我们用 1 加上它可以跳跃的最大长度 3，将最远可以到达的位置更新为 4。由于 4 大于等于最后一个位置 4，因此我们直接返回 True。</p>\n<p>我们再来看看题目中的示例二</p>\n<p>[3, 2, 1, 0, 4]<br />\n 我们一开始在位置 0，可以跳跃的最大长度为 3，因此最远可以到达的位置被更新为 3；</p>\n<p>我们遍历到位置 1，由于 1 ≤ 3，因此位置 1 可达，加上它可以跳跃的最大长度 2 得到 3，没有超过最远可以到达的位置；</p>\n<p>位置 2、位置 3 同理，最远可以到达的位置不会被更新；</p>\n<p>我们遍历到位置 4，由于 4 &gt; 3，因此位置 4 不可达，我们也就不考虑它可以跳跃的最大长度了。</p>\n<p>在遍历完成之后，位置 444 仍然不可达，因此我们返回 False。</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                num <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">>=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"解决方式二\"><a class=\"anchor\" href=\"#解决方式二\">#</a> 解决方式二：</h2>\n<p>还是使用               贪心算法</p>\n<p>题解视频</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401091025993.png\" alt=\"image-20240109102547849\" /></p>\n<p>通过 i + nums [i] 可以得出 从 当前位置可以跳几步</p>\n<p>我们就可以通过 index 遍历 来判断 是否可以 达到尾部，每次循环都判断是否要更新最大步数</p>\n<p>代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> jump <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存每个位置可以到达的最远位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      jump<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录 jump [i] = i + nums [i];</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 遍历指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">int</span> max_jump <span class=\"token operator\">=</span> jump<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录可以达到最远位置，初始为 第一个</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 第一个是遍历条件，第二个是 index 走了 max_jump 步后就停止</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> jump<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;=</span> max_jump<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\">// 获取最大的数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>max_jump <span class=\"token operator\">&lt;</span> jump<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         max_jump <span class=\"token operator\">=</span> jump<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 每次指针向后移动遍历</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 如果 index 等于 集合的 大小 说明 已经 到达尾部了</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> jump<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "编程题",
                "单调栈"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E6%8E%A5%E9%9B%A8%E6%B0%B4/",
            "url": "https://pigpigletsgo.github.io/computer-science/java/programming-questions/%E6%8E%A5%E9%9B%A8%E6%B0%B4/",
            "title": "接雨水",
            "date_published": "2024-01-08T13:00:02.507Z",
            "content_html": "<h1 id=\"接雨水\"><a class=\"anchor\" href=\"#接雨水\">#</a> 接雨水</h1>\n<p>给定  <code>n</code>  个非负整数表示每个宽度为  <code>1</code>  的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081925486.png\" alt=\"img\" /></p>\n<pre><code>输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 \n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：height = [4,2,0,3,2,5]\n输出：9\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>n == height.length</code></li>\n<li><code>1 &lt;= n &lt;= 2 * 104</code></li>\n<li><code>0 &lt;= height[i] &lt;= 105</code></li>\n</ul>\n<h2 id=\"思路分析\"><a class=\"anchor\" href=\"#思路分析\">#</a> 思路分析：</h2>\n<ol>\n<li>我们可以维护一个单调栈，把柱子一个个的加入到单调栈中</li>\n<li>当加入一个新元素时，如果发现需要弹出 元素，表示遇到了一个 凹陷的位置，此时应该计算雨水容量</li>\n</ol>\n<p>比如说 一开始 加入了一个高度为 1 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081930252.png\" alt=\"image-20240108193022190\" /></p>\n<p>然后又加入了 高度 为 0 的柱子，此时是可以的因为不违反单调的规则</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081931582.png\" alt=\"image-20240108193106530\" /></p>\n<p>接下来要加入一个高度为 2 的柱子了，此时 它 违反了单调规则，它要把之前比 2 小的柱子弹出栈</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081932869.png\" alt=\"image-20240108193202832\" /></p>\n<p>此时弹出栈就意味着此时遇到了一个凹陷的位置了。此时我们就可以去计算雨水的容量了</p>\n<p>这些柱子都有 left 和 right 高度，和 i ，j 宽度</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081934642.png\" alt=\"image-20240108193446588\" /></p>\n<p>那么我们计算 雨水的容量就可以 通过 j - i - 1 先计算出 宽度，然后 取 最小柱子 。 然后 宽度 *  高度 就是当前凹陷区域的雨水容量了，以此类推我们将所以的雨水容量累加起来就是雨水的总容量了</p>\n<p><strong>下面通过流程分析，来理解 单调栈的解题流程</strong>：</p>\n<p>首先放入一个高度为 0 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081942242.png\" alt=\"image-20240108194208190\" /></p>\n<p>接下来要放入高度为 1 的柱子了，此时 就 违反了 单调栈的规则了，此时就需要将之前高度为 0 的柱子弹出来。前面说了 弹出柱子时我们要计算雨水的容量，但是这种情况下不需要计算，因为弹出高度为 0 的柱子的时候它的左边没有柱子当着。</p>\n<p>所以此时只需要将高度为 0 的柱子弹出然后加入高度为 1 的柱子就行了</p>\n<p>也就是最左边没有柱子的时候，我们不需要考虑去计算水的容量</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081942068.png\" alt=\"image-20240108194226012\" /></p>\n<p>然后加入高度为 0 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081943583.png\" alt=\"image-20240108194323542\" /></p>\n<p>再 下次加入的时候是 高度为 3 的柱子 ， 此时需要将 前面两个柱子弹出去</p>\n<p>当弹出 高度为 0 的柱子的时候 就可以 根据上面的分析  找到它 左边的 柱子 和 右边的柱子 然后把雨水的容量计算出来</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081945876.png\" alt=\"image-20240108194544809\" /></p>\n<p>当把高度为 1 的柱子弹出去的时候 它 左边没有柱子了，也不用计算 所以将 这个高度为 1 的柱子 弹出去 然后 加入 高度为 2 的 柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081948069.png\" alt=\"image-20240108194859029\" /></p>\n<p>下一个 加入 高度为 1 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081955610.png\" alt=\"image-20240108195552549\" /></p>\n<p>下一个 加入 高度为 0 的 柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081956147.png\" alt=\"image-20240108195647110\" /></p>\n<p>下一个加入 高度为 1 的柱子，此时 违反规则 弹出高度为 0 的 柱子，根据 高度为 0 的柱子的 左边的 柱子 和 右边的柱子 计算出 雨水的容量</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081958297.png\" alt=\"image-20240108195812237\" /></p>\n<p>然后加入 高度为 1 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081959095.png\" alt=\"image-20240108195916043\" /></p>\n<p>下一个加入 高度为 3 的柱子，此时需要将 前面 3 根柱子都弹出去因为都小于 3，在弹出第一根柱子的时候 此时这根柱子 跟它左边的柱子的高度差是 0 这种情况下不需要考虑雨水，因为它的容量是 0，</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082006646.png\" alt=\"image-20240108200631581\" /></p>\n<p>然后该弹出 第二根柱子的时候 它左边的柱子 高度是 2 ，此时计算出左边柱子和当前柱子 (3) 中间水的容量</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082006071.png\" alt=\"image-20240108200657006\" /></p>\n<p>最后高度为 2 的柱子它左边没有柱子了，所以它被弹出后将高度为 3 的柱子加入栈中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082008492.png\" alt=\"image-20240108200818447\" /></p>\n<p>下一个加入高度为 2 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082008797.png\" alt=\"image-20240108200849758\" /></p>\n<p>再加入高度为 1 的柱子</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082009093.png\" alt=\"image-20240108200913040\" /></p>\n<p>下次加入高度为 2 的柱子的时候需要把左边的柱子弹出，此时计算出水的容量然后弹出</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082010600.png\" alt=\"image-20240108201000540\" /></p>\n<p>下一个加入高度为 1 的柱子，而后续就没有发生高度 违反 规则的 柱子了 所以就不存在计算水的容量问题了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401082011940.png\" alt=\"image-20240108201112879\" /></p>\n<p>其中蓝色的就是水的总容量了</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码:</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 高度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 索引</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 初始化赋值 高 和 宽 的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> heights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Data</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> heights<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">Data</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Data</span><span class=\"token punctuation\">(</span>heights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 先判断 栈 是否为空，再判断 如果 栈中柱子的高度 小于 当前要加入的柱子高度 此时违反了规则就需要弹出 小于 当前柱子的柱子</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 弹出 之前的 柱子</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token class-name\">Data</span> pop <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token class-name\">Data</span> left <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 当前柱子的索引位置 - 弹出柱子的左边柱子的索引位置 = (差值) 水的宽度 计算水的容量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>i <span class=\"token operator\">-</span> left<span class=\"token punctuation\">.</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 当前柱子 和 弹出的左边柱子 取 最小柱子 减去 弹出 柱子的高度 就是 水的高度</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> pop<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 高 * 宽 = 面积</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 累加</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            sum <span class=\"token operator\">+=</span> width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 当 违反 规则的柱子弹出完后 就继续加入 下一个柱子</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "java",
                "编程题",
                "编程题",
                "单调栈"
            ]
        }
    ]
}