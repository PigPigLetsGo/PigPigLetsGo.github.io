{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"shell编程\" category",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/",
            "title": "shell预定义变量",
            "date_published": "2024-02-08T04:58:17.932Z",
            "content_html": "<blockquote>\n<p>基本介绍</p>\n</blockquote>\n<p>就是 shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用</p>\n<blockquote>\n<p>基本语法</p>\n</blockquote>\n<ol>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mtext>功能描述</mtext><mo>:</mo><mtext>当前进程的进程号</mtext><mo stretchy=\"false\">(</mo><mi>P</mi><mi>I</mi><mi>D</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(功能描述:当前进程的进程号(PID))\n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">程</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">程</span><span class=\"mord cjk_fallback\">号</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n</li>\n<li>\n<p>$?(功能描述：最后一次执行的命令的返回状态，如果这个变量的值为 0, 证明上一个命令正确执行；如果这个变量的值为非 0 (具体是哪个数，由命令自己来决定), 则证明上一个命令执行不正确了)</p>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F/",
            "title": "位置参数变量",
            "date_published": "2024-02-08T04:58:17.918Z",
            "content_html": "<blockquote>\n<p>介绍</p>\n</blockquote>\n<p>当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量，比如: <code>./myshell.sh 100 200</code>  这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息</p>\n<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>$n (功能描述:n 为数字，$0 代表命令本身，$1- <code>$9</code>  代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如 ${10})</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mo stretchy=\"false\">(</mo><mtext>功能描述</mtext><mo>:</mo><mtext>这个变量代表命令行中所有的参数</mtext><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">*(功能描述:这个变量代表命令行中所有的参数.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∗</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord\">.</span></span></span></span>* 把所有的参数看成一个整体)</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">@</mi><mo stretchy=\"false\">(</mo><mtext>功能描述</mtext><mo>:</mo><mtext>这个变量也代表命令行中所有的参数</mtext><mo separator=\"true\">,</mo><mtext>不过</mtext></mrow><annotation encoding=\"application/x-tex\">@(功能描述:这个变量也代表命令行中所有的参数,不过</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">@</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">过</span></span></span></span> @把每个参数区分对待)</p>\n<p>$#(功能描述：这个变量代表命令行中所有参数的个数)</p>\n<blockquote>\n<p>位置参数变量</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2hlbGxvLnNo\">hello.sh</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"0=<span class=\"token variable\">$0</span> 1=<span class=\"token variable\">$1</span> 2=<span class=\"token variable\">$2</span>\"</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"所有的参数=<span class=\"token variable\">$*</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"把每个参数区分对待=<span class=\"token variable\">$@</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"参数的个数=<span class=\"token variable\">$#</span>\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"当前执行的进程id=<span class=\"token variable\">$$</span>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#以后台的方式运行另一个脚本并获取它的进程号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sh</span> /opt/shcodetest/hello.sh <span class=\"token number\">100</span> <span class=\"token number\">200</span> <span class=\"token number\">300</span> <span class=\"token operator\">&amp;</span>                                                                                                          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"最后一个后台方式运行的进程id=<span class=\"token variable\">$!</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"执行的结果为<span class=\"token variable\">$?</span>\"</span></pre></td></tr></table></figure><p>执行结果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208125729969.png\" alt=\"image-20240208125729969\" /></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "title": "shell设置环境变量",
            "date_published": "2024-02-08T04:58:17.900Z",
            "content_html": "<p>基本语法:</p>\n<ol>\n<li>\n<p>export 变量名 = 变量值 (功能描述：将 shell 变量输出为环境变量 / 全局变量)</p>\n</li>\n<li>\n<p>source 配置文件 (功能描述：让修改后的配置文件信息立即生效)</p>\n</li>\n<li>\n<p>echo $ 变量名 (功能描述：查询环境变量的值)</p>\n</li>\n</ol>\n<ul>\n<li>注意：在输出 TOMCAT_HOME 环境变量前，需要让其生效</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><blockquote>\n<p>shell 脚本的多行注释</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">!</span>内容<span class=\"token operator\">!</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%85%A5%E9%97%A8/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%85%A5%E9%97%A8/",
            "title": "shell编程入门",
            "date_published": "2024-02-08T04:58:17.884Z",
            "content_html": "<blockquote>\n<p>为什么要学习 Shell 编程</p>\n</blockquote>\n<ol>\n<li>\n<p>Linux 运维工程师在进行服务器集群管理时，需要编写 Shell 程序来进行服务器管理</p>\n</li>\n<li>\n<p>对于 JavaEE 和 Python 程序员来说，工作的需要，你的老大会要求你编写一些 Shell 脚本进行程序或者是服务器的维护，比如编写一个定时备份数据库的脚本</p>\n</li>\n<li>\n<p>对于大数据程序员来说，需要编写 Shell 程序来管理集群</p>\n</li>\n</ol>\n<blockquote>\n<p>Shell 是什么</p>\n</blockquote>\n<p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动，挂起，停止甚至是编写一些程序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-07-16-19-56.png\" alt=\"image_2023-01-07-16-19-56\" /></p>\n<blockquote>\n<p>Shell 脚本的执行方式</p>\n</blockquote>\n<ul>\n<li>脚本格式要求</li>\n</ul>\n<ol>\n<li>\n<p>脚本以 #!/bin/bash 开头</p>\n</li>\n<li>\n<p>脚本需要有可执行权限</p>\n</li>\n</ol>\n<ul>\n<li>脚本的常用执行方式</li>\n</ul>\n<ol>\n<li>输入脚本的绝对路径或相对路径</li>\n</ol>\n<p>说明：首先要赋予 xxx.sh 脚本的 + x 权限，再执行脚本</p>\n<ol start=\"2\">\n<li>sh + 脚本:sh <span class=\"exturl\" data-url=\"aHR0cDovL2hlbGxvLnNo\">hello.sh</span></li>\n</ol>\n<p>说明：不用赋予脚本 + x 权限，直接执行即可</p>\n<blockquote>\n<p>Shell 变量介绍</p>\n</blockquote>\n<ol>\n<li>\n<p>Linux Shell 中的变量分为，系统变量和用户自定义变量</p>\n</li>\n<li>\n<p>系统变量:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">HOME,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span></span></span></span>PWD,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>H</mi><mi>E</mi><mi>L</mi><mi>L</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">SHELL,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mpunct\">,</span></span></span></span>USER 等等，比如:echo $HOME 等等</p>\n</li>\n<li>\n<p>显示当前 shell 中所有变量:set</p>\n</li>\n</ol>\n<blockquote>\n<p>Shell 变量的定义</p>\n</blockquote>\n<p>基本语法:</p>\n<ol>\n<li>\n<p>定义变量：变量 = 值</p>\n</li>\n<li>\n<p>撤销变量:unset 变量</p>\n</li>\n<li>\n<p>声明常量变量 (只读):readonly 变量，注意：不能 unset</p>\n</li>\n</ol>\n<ul>\n<li>演示:</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#echo \"hello,world!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#定义变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#输出变量 A 需要前面加上 $</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果 300</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#输出 A=300, 类似于 java 的拼接输出，先将 A = 输出再输出 A 变量的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果 A=300</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#同第二个效果只是加上了双引号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"A=<span class=\"token variable\">$A</span>\"</span> <span class=\"token comment\">#输出结果 A=300</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#撤销变量 A</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">unset</span> A</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果 A=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#定义只读变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">B</span><span class=\"token operator\">=</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">B</span><span class=\"token operator\">=</span><span class=\"token variable\">$B</span> <span class=\"token comment\">#输出结果 B=200</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">unset</span> B <span class=\"token comment\">#hello.sh: line 17: unset: B: cannot unset: readonly variable  执行报错：无法设置渎职变量</span></pre></td></tr></table></figure><blockquote>\n<p>定义变量的规则</p>\n</blockquote>\n<ol>\n<li>\n<p>变量名称可以由字母，数字和下划线组成，但是不能以数字开头.5A=200 (错误的)</p>\n</li>\n<li>\n<p>等号两侧不能有空格</p>\n</li>\n<li>\n<p>变量名称一般习惯为大写</p>\n</li>\n</ol>\n<blockquote>\n<p>将命令的返回值赋给变量</p>\n</blockquote>\n<ol>\n<li>\n<p>A= <code>date</code>  反引号，运行里面的命令，并把结果返回给变量 A</p>\n</li>\n<li>\n<p>A=$(date) 等价于反引号</p>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "计算机学科",
                "介绍"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/",
            "title": "shell判断语句",
            "date_published": "2024-02-08T04:58:17.867Z",
            "content_html": "<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>if [condition] (注意 condition 前后要有空格)</p>\n<p>then</p>\n<pre><code>    echo &quot;&quot; #执行体\n</code></pre>\n<p>fi #结束</p>\n<p>#非空返回 true, 可使用 $? 验证 (0 为 true,&gt;1 为 false)</p>\n<blockquote>\n<p>应用实例</p>\n</blockquote>\n<p>[hspEdu] 返回 true</p>\n<p>[ ] 返回 false</p>\n<p>[condition] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句</p>\n<blockquote>\n<p>判断语句</p>\n</blockquote>\n<p>常用判断条件</p>\n<table>\n<thead>\n<tr>\n<th>1)</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>字符串比较</td>\n</tr>\n<tr>\n<td>2)</td>\n<td>&lt;font color='green'&gt; 两个整数的比较 &lt;/font&gt;</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>-eq</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>3)</td>\n<td>&lt;font color='green'&gt; 按照文件权限进行判断 &lt;/font&gt;</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>有度的权限</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>有写的权限</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>有执行的权限</td>\n</tr>\n<tr>\n<td>4)</td>\n<td>&lt;font color='green'&gt; 按照文件类型进行判断 &lt;/font&gt;</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>文件存在并且是一个常规的文件</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>文件存在</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>文件存在并是一个目录</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>案例</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#判断两个 ok 字符串是否相同</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"ok\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ok\"</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"相同\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#判断 23 是否大于 22</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">23</span> <span class=\"token parameter variable\">-ge</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"大于\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#判断文件是否存在且是否常规</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> /opt/shcodetest/a.txt <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"存在且无异常\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#细节</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> dkx <span class=\"token punctuation\">]</span> <span class=\"token comment\">#瞎写的非空即为 true 如果写 [] 中间没有空格则报错，如果有空格而为空那么就是 false 不输出 then 中的 echo</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OK\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><h3 id=\"多分支-if\"><a class=\"anchor\" href=\"#多分支-if\">#</a> 多分支 if</h3>\n<p>基本语法</p>\n<p>&lt;font color='red'&gt; 单分支 &lt;/font&gt;</p>\n<p>if [条件判断式]</p>\n<p>then</p>\n<p>代码</p>\n<p>fi</p>\n<p>&lt;font color='red' size=4&gt; 或者多分支 &lt;/font&gt;</p>\n<p>if [条件判断式]</p>\n<p>then</p>\n<p>代码</p>\n<p>elif [条件判断式]</p>\n<p>then</p>\n<p>代码</p>\n<p>fi</p>\n<ul>\n<li>注意:[条件判断式], 中括号和条件判断式之间必须有空格</li>\n</ul>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/",
            "title": "shell-case语句",
            "date_published": "2024-02-08T04:58:17.852Z",
            "content_html": "<blockquote>\n<p>case 语句</p>\n</blockquote>\n<p>基本语法</p>\n<p>case $ 变量名 in</p>\n<p>&quot;值 1&quot;)</p>\n<p>如果变量的值等于值 1, 则执行程序 1</p>\n<p>;;</p>\n<p>&quot;值 2&quot;)</p>\n<p>如果变量的值等于值 2, 则执行程序 2</p>\n<p>;;</p>\n<p>... 省略其它分支...</p>\n<p>*)</p>\n<p>如果变量的值都不是以上的值，则执行此程序</p>\n<p>;;</p>\n<p>esac</p>\n<ul>\n<li>案例</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"周一\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"周二\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"周三\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"error\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0/",
            "title": "shell函数",
            "date_published": "2024-02-08T04:58:17.836Z",
            "content_html": "<blockquote>\n<p>函数介绍</p>\n</blockquote>\n<p>shell 编程和其它编程语言一样，有系统函数，也可以自定义函数，系统函数中，我们这里就介绍两个</p>\n<blockquote>\n<p>系统函数</p>\n</blockquote>\n<ul>\n<li>basename 基本语法</li>\n</ul>\n<p>功能：返回完整路径最后 / 的部分，常用于获取文件名</p>\n<p>basename [pathname] [suffix]</p>\n<p>basename [string] [suffix] (功能描述:basename 命令会删掉所有的前缀包括最后一个 (&quot;/&quot;) 字符，然后将字符显示出来)</p>\n<p>选项:</p>\n<p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉</p>\n<blockquote>\n<p>dirname 基本语法</p>\n</blockquote>\n<p>功能：返回完整路径最后 / 的前面的部分，常用于返回路径部分</p>\n<blockquote>\n<p>dirname 文件绝对路径 (功能描述：从给定的包含绝对路径的文件名中去除文件名 (非目录的部分), 然后返回剩下的路径 (目录的部分))</p>\n</blockquote>\n<blockquote>\n<p>自定义函数</p>\n</blockquote>\n<p>基本语法格式</p>\n<p>[ function ] funname [()]<br />\n{<br />\nAction;<br />\n[return int;]<br />\n}</p>\n<p>调用直接写函数名:funname [值]</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/while%E5%BE%AA%E7%8E%AF/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/while%E5%BE%AA%E7%8E%AF/",
            "title": "while循环",
            "date_published": "2024-02-08T04:58:17.822Z",
            "content_html": "<blockquote>\n<p>基本语法格式</p>\n</blockquote>\n<p>while [条件判断式]</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<ul>\n<li>注意:while 关键字和 [空格] 之间都有空格</li>\n</ul>\n<p>案例：从命令行输入一个数 n, 统计从 1+...+n 的值是多少</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$i</span> <span class=\"token parameter variable\">-le</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$SUM</span> + <span class=\"token variable\">$i</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">#i 自增</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$i</span>+1 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span>    <span class=\"token string\">\"总和:<span class=\"token variable\">$SUM</span>\"</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Shell%E7%BC%96%E7%A8%8B%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Shell%E7%BC%96%E7%A8%8B%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "title": "shell编程综合案例",
            "date_published": "2024-02-08T04:58:17.811Z",
            "content_html": "<blockquote>\n<p>需求分析</p>\n</blockquote>\n<ol>\n<li>\n<p>每天凌晨 2:30 备份，数据库 <code>名字随意</code>  到 /date/backup/db</p>\n</li>\n<li>\n<p>备份开始和备份结束能够给出响应的提示信息</p>\n</li>\n<li>\n<p>备份后的文件要求以备份时间为文件名，并打包成 <code>tar.gz</code>  的形式，比如: <code>2022-03-12_230201.tar.gz</code></p>\n</li>\n<li>\n<p>在备份的同时，检查是否有 10 天前备份的数据库文件，如果有就将其删除</p>\n</li>\n</ol>\n<blockquote>\n<p>思路</p>\n</blockquote>\n<p>定时任务 --&gt; sh 脚本 --&gt; 数据库</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Read%E8%AF%BB%E5%8F%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Read%E8%AF%BB%E5%8F%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5/",
            "title": "Read读取控制台输入",
            "date_published": "2024-02-08T04:58:17.799Z",
            "content_html": "<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>read (选项)(参数)</p>\n<p>选项:</p>\n<p>-p  指定读取值时的提示符</p>\n<p>-t  指定读取值时等待的时间 (秒), 如果没有在指定的时间内输入，就不再等待了</p>\n<p>参数:</p>\n<p>变量：指定读取值的变量名</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"请输入数值=\"</span> NUM1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"你输入的数值为=<span class=\"token variable\">$NUM1</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"请输入数值2=\"</span> NUM2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"你输入的数值2为=<span class=\"token variable\">$NUM2</span>\"</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/",
            "title": "for循环语句",
            "date_published": "2024-02-08T04:58:17.789Z",
            "content_html": "<blockquote>\n<p>基本语法格式</p>\n</blockquote>\n<p>for 变量 in 值 1 值 2 值 3 ...</p>\n<p>do</p>\n<p>程序代码</p>\n<p>done</p>\n<blockquote>\n<p>基本语法格式 2</p>\n</blockquote>\n<p>for ((初始值；循环；控制条件；变量变化))</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#打印 1-100 的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"===================================================\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#打印 1-100 的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span>                                                                                                                           </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#如果这里使用 echo 输出那么下面的输出就是 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$SUM</span>+<span class=\"token variable\">$i</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"总和:<span class=\"token variable\">$SUM</span>\"</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/08/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "shell运算符",
            "date_published": "2024-02-08T04:58:17.775Z",
            "content_html": "<blockquote>\n<p>基本语法格式</p>\n</blockquote>\n<ol>\n<li>\n<p>&quot;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mtext>运算式</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">&quot;</mi><mtext>或</mtext><mi mathvariant=\"normal\">&quot;</mi></mrow><annotation encoding=\"application/x-tex\">((运算式))&quot;或&quot;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">算</span><span class=\"mord cjk_fallback\">式</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">或</span><span class=\"mord\">&quot;</span></span></span></span>[运算式]&quot; 或者 expr m + n //expression: 表达式</p>\n</li>\n<li>\n<p>注意 expr 运算符间要有空格，如果希望将 expr 的结果赋给某个变量，使用:  <code> </code></p>\n</li>\n<li>\n<p>expr m - n</p>\n</li>\n<li>\n<p>expr *,/,%  乘，除，取模      乘的前面 \\ 是转移的</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#使用第一种方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果为：20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#使用第二种方式 推荐使用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">B</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>+3<span class=\"token punctuation\">)</span>*4<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token variable\">$B</span> <span class=\"token comment\">#输出结果为：20</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#使用第三种方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">C</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token number\">2</span> + <span class=\"token number\">3</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">E</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $C <span class=\"token punctuation\">\\</span>* <span class=\"token number\">4</span><span class=\"token variable\">`</span></span> <span class=\"token comment\">#对于 expr 中的乘需要使用 \\ 进行转移</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">D</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token number\">2</span>+3<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span><span class=\"token variable\">$C</span> <span class=\"token comment\">#输出结果：5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">d</span><span class=\"token operator\">=</span><span class=\"token variable\">$D</span> <span class=\"token comment\">#输出结果：2+3                                                                                                                            </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">e</span><span class=\"token operator\">=</span><span class=\"token variable\">$E</span> <span class=\"token comment\">#输出结果为：20</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token variable\">$1</span>+<span class=\"token variable\">$2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#通过位置参数变量在命令行中赋值并计算</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token variable\">$SUM</span> <span class=\"token comment\">#输出结果为：你自己输入的数值相加后的数值</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        }
    ]
}