{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"math\" category",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/math/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/math/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/",
            "title": "欧几里得算法",
            "date_published": "2024-04-02T06:23:32.196Z",
            "content_html": "<h1 id=\"欧几里得算法\"><a class=\"markdownIt-Anchor\" href=\"#欧几里得算法\">#</a> 欧几里得算法</h1>\n<p>也被称为：辗转相除法，其特征包括如下：</p>\n<ol>\n<li>有效性：辗转相除法 是一种有效的方法，能够找到两个整数的最大公约数</li>\n<li>递归性质：该算法可以通过递归方式实现，也可以用迭代方式</li>\n<li>基于整数除法：辗转相除法的核心操作是整数除法，通过计算余数和更新被除数，除数，直至余数为零，找到最大公约数</li>\n</ol>\n<h2 id=\"详细说明如下\"><a class=\"markdownIt-Anchor\" href=\"#详细说明如下\">#</a> 详细说明如下：</h2>\n<p>当我们有两个整数 p 和 q，我们可以使用欧几里得算法求它们的最大公约数 (GCD)。这个算法的基本思想是：</p>\n<ol>\n<li>若 q 为 0，则最大公约数为 p</li>\n<li>否则，将 p 除以 q 得到余数 r，然后用 q 代替 p，用 r 代替 q，重复上述过程</li>\n</ol>\n<p>这个过程会一直持续，直到 q 变为 0，此时，p 的值就是最大公约数。这是一个反复取余的过程，逐步缩小问题规模。例如：</p>\n<pre><code>p = 48, q = 18\n\n1. 48 / 18 = 2 余 12，此时 p = 18，q = 12\n2. 18 / 12 = 1 余 6，此时 p = 12，q = 6\n3. 12 / 6 = 2 余 0，此时 q = 0\n\n最大公约数为 6。\n</code></pre>\n<p>在这个例子中，直到除数可以整数时的最大除数 就是 最大公约数，比如例子中的 12 / 6 = 2 余数为 0 是一个可以整数的除数 而且 也是唯一最大能整出的除数 所以 6 就是 最大公约数</p>\n<h2 id=\"使用java语言描述\"><a class=\"markdownIt-Anchor\" href=\"#使用java语言描述\">#</a> 使用 Java 语言描述</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> p <span class=\"token operator\">%</span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 q == 0 就直接返回 p 这是因为 0 不能除以任何数 所以 直接 返回 p 作为最大公约数</p>\n<p>int r = p % q 就是取 被除数 和 除数 之间的余数</p>\n<p>return gcd (q, r) 就是通过递归 逐步的缩小问题规模 得到最终的 最大公约数</p>\n",
            "tags": [
                "math",
                "算法"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/math/100%E4%BB%A5%E5%86%85%E5%8A%A0%E5%87%8F%E6%B3%95%E9%80%9F%E7%AE%97/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/math/100%E4%BB%A5%E5%86%85%E5%8A%A0%E5%87%8F%E6%B3%95%E9%80%9F%E7%AE%97/",
            "title": "100以内加减法速算技巧",
            "date_published": "2024-04-02T06:23:32.190Z",
            "content_html": "<h1 id=\"100以内加减法速算技巧\"><a class=\"markdownIt-Anchor\" href=\"#100以内加减法速算技巧\">#</a> 100 以内加减法速算技巧</h1>\n<h2 id=\"不进位加法\"><a class=\"markdownIt-Anchor\" href=\"#不进位加法\">#</a> 不进位加法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>23</mn><mo>+</mo><mn>34</mn><mo>=</mo><mn>57</mn></mrow><annotation encoding=\"application/x-tex\">23 + 34 = 57\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span></span></span></p>\n<p>十位：头 + 头 = 头</p>\n<p>个位：尾 + 尾 = 尾</p>\n<h2 id=\"进位加法\"><a class=\"markdownIt-Anchor\" href=\"#进位加法\">#</a> 进位加法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>36</mn><mo>+</mo><mn>28</mn><mo>=</mo><mn>64</mn></mrow><annotation encoding=\"application/x-tex\">36 + 28 = 64\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">6</span><span class=\"mord\">4</span></span></span></span></span></p>\n<p>十位：头 + 头 + 1 = 头</p>\n<p>个位：尾 - 尾的补数 = 尾</p>\n<ul>\n<li>补数指的是 尾数 凑够 10 的数 是多少 比如 8 凑够 10 就是 2</li>\n</ul>\n<h2 id=\"不退位减法\"><a class=\"markdownIt-Anchor\" href=\"#不退位减法\">#</a> 不退位减法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>46</mn><mo>−</mo><mn>25</mn><mo>=</mo><mn>21</mn></mrow><annotation encoding=\"application/x-tex\">46 - 25 = 21\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">6</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>十位：头 - 头 = 头</p>\n<p>个位：尾 - 尾 = 尾</p>\n<h2 id=\"退位减法\"><a class=\"markdownIt-Anchor\" href=\"#退位减法\">#</a> 退位减法</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>47</mn><mo>−</mo><mn>29</mn><mo>=</mo><mn>18</mn></mrow><annotation encoding=\"application/x-tex\">47 - 29 = 18\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span></span></span></p>\n<p>十位：头 - 头 - 1 = 头</p>\n<p>个位：尾 + 尾的补数 = 尾</p>\n<ul>\n<li>补数指的是 尾数 凑够 10 的数 是多少 比如 9 凑够 10 就是 1</li>\n</ul>\n",
            "tags": [
                "math"
            ]
        }
    ]
}