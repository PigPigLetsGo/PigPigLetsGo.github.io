{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"ecmascript\" category",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/js/ECMASCript/ECMAScript%E4%BB%8B%E7%BB%8D/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/js/ECMASCript/ECMAScript%E4%BB%8B%E7%BB%8D/",
            "title": "JavaScript语言基础|JavaScript介绍",
            "date_published": "2024-04-02T06:23:31.955Z",
            "content_html": "<h1 id=\"javascript介绍️\"><a class=\"markdownIt-Anchor\" href=\"#javascript介绍️\">#</a> JavaScript 介绍⚡️</h1>\n<h2 id=\"什么是javascript\"><a class=\"markdownIt-Anchor\" href=\"#什么是javascript\">#</a> 什么是 JavaScript❓</h2>\n<h3 id=\"javascript权威网站-点击表情进入\"><a class=\"markdownIt-Anchor\" href=\"#javascript权威网站-点击表情进入\">#</a> JavaScript 权威网站: <a href=\"https://developer.mozilla.org/zh-CN/docs/web/Javascript\">😉</a> 点击表情进入</h3>\n<p><strong>官方定义</strong>:</p>\n<ul>\n<li>是一种<mark>运行在客户端</mark>（浏览器）的<mark>编程语言</mark>，实现<mark>人机交互效果</mark>。</li>\n</ul>\n<p><strong>作用</strong>：</p>\n<ul>\n<li>页面特效（监听用户的一些行为让网页做出对应的反馈）</li>\n<li>表单验证（针对表单数据的合法性进行判断）</li>\n<li>数据交互（获取后台的数据，渲染到前端）</li>\n<li>服务端编程（node.js）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211043391.png\" alt=\"image-20230419213457889\"></p>\n<h2 id=\"javascript的组成\"><a class=\"markdownIt-Anchor\" href=\"#javascript的组成\">#</a> JavaScript 的组成🗜</h2>\n<h3 id=\"javascript可以分成两大类\"><a class=\"markdownIt-Anchor\" href=\"#javascript可以分成两大类\">#</a> JavaScript 可以分成两大类🍃</h3>\n<h4 id=\"ecmascript️\"><a class=\"markdownIt-Anchor\" href=\"#ecmascript️\">#</a> ECMAScript⭐️</h4>\n<ul>\n<li>JavaScript 语言基础\n<ul>\n<li>JavaScript 遵循的是 ECMAScript 的规范</li>\n<li>规定了 js 基础语法核心知识\n<ul>\n<li><strong>比如</strong>: <mark>变量</mark>，<mark>分支语句</mark>，<mark>循环语句</mark>，<mark>对象</mark>等等</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"web-apis-️\"><a class=\"markdownIt-Anchor\" href=\"#web-apis-️\">#</a> Web APIs ⭐️</h4>\n<h4 id=\"又分为-dombom\"><a class=\"markdownIt-Anchor\" href=\"#又分为-dombom\">#</a> 又分为 : DOM，BOM</h4>\n<h5 id=\"dom\"><a class=\"markdownIt-Anchor\" href=\"#dom\">#</a> DOM🌟</h5>\n<p>页面文档对象模型</p>\n<ul>\n<li>操作文档，比如对<mark>页面元素进行移动，大小，添加，删除</mark>等操作</li>\n</ul>\n<h5 id=\"bom\"><a class=\"markdownIt-Anchor\" href=\"#bom\">#</a> BOM🌟</h5>\n<p>浏览器对象模型</p>\n<ul>\n<li>操作浏览器，比如<mark>页面弹窗，检测窗口宽度，存储数据到浏览器</mark>等等</li>\n</ul>\n<h2 id=\"javascript书写位置\"><a class=\"markdownIt-Anchor\" href=\"#javascript书写位置\">#</a> JavaScript 书写位置🎸</h2>\n<h3 id=\"1内部javascript\"><a class=\"markdownIt-Anchor\" href=\"#1内部javascript\">#</a> 1. 内部 JavaScript🍸</h3>\n<p>直接写在 html 文件里，用 Script 标签包住</p>\n<p>规范：Script 标签写在</body>上面</p>\n<p>扩展：alert (‘你好，js’); 页面弹出警告对话框</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>内部js<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>弹出警示框<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好,js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>内部js的错误写法<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p><font style=\"color:red\"><strong>注意事项</strong></font> ⚠️</p>\n<blockquote>\n<p>我们将<script>放在 html 文件的底部附近的原因是浏览器会按照代码在文件中的<font style=\"color:red\">顺序加载 HTML</font>。<br>\n如果先加载的 JavaScript 期望修改其下方的 HTML, 那么它可能由于 HTML 尚未被加载而失效。<br>\n因此，<font style=\"color:green\">将 JavaScript 代码放在 HTML 页面的底部附近通常是最好的策略</font>。📗</p>\n</blockquote>\n<h3 id=\"2外部javascript\"><a class=\"markdownIt-Anchor\" href=\"#2外部javascript\">#</a> 2. 外部 JavaScript🗑</h3>\n<p>代码写在以.js 结尾的文件里</p>\n<p>🎮 <font style=\"color:red\">语法</font>: 通过 Script 标签，引入到 html 页面中。</p>\n<h6 id=\"目录结构\"><a class=\"markdownIt-Anchor\" href=\"#目录结构\">#</a> 目录结构🦂</h6>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211049478.png\" alt=\"image-20230420074424033\"></p>\n<ul>\n<li>在其它文件夹下创建一个我们要引入的 js 文件</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是外部.js'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>在 index.html 文件中引入外部的 js 文件</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!-- 引入外部 js--></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./static/My.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 这里不能写内容 --></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><font style=\"color:red\"><strong>注意事项</strong></font>: ⚠️ 🔴</p>\n<blockquote>\n<ol>\n<li>script 标签中间无需代码，否则会被忽略。</li>\n<li>外部 JavaScript 会使代码更加有序，更易于复用，且没有了脚本的混合，HTML 也会更加易读，因此这是个好的习惯。</li>\n</ol>\n</blockquote>\n<h3 id=\"3行内javascript\"><a class=\"markdownIt-Anchor\" href=\"#3行内javascript\">#</a> 3. 行内 JavaScript🍀</h3>\n<p>代码写在标签内部</p>\n<p>语法：👾</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>行内JavaScript<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>button onclick<span class=\"token operator\">=</span><span class=\"token string\">\"alert('我被点击了')\"</span><span class=\"token operator\">></span>我是按钮<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"javascript注释\"><a class=\"markdownIt-Anchor\" href=\"#javascript注释\">#</a> JavaScript 注释🎄</h2>\n<p><strong>JavaScript 中可以把注释分为两种:</strong> 🎯</p>\n<h3 id=\"第一种-单行注释\"><a class=\"markdownIt-Anchor\" href=\"#第一种-单行注释\">#</a> 第一种：单行注释🌲</h3>\n<p>符号：//</p>\n<p>作用：// 右边这一行的代码会被忽略</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 单行注释</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"第二种块注释\"><a class=\"markdownIt-Anchor\" href=\"#第二种块注释\">#</a> 第二种：块注释🌴</h3>\n<p>符号：/* */</p>\n<p>作用：在 /* 和 */ 之间的所有内容都会被忽略</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 多行注释 / 块注释 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"结束符\"><a class=\"markdownIt-Anchor\" href=\"#结束符\">#</a> 结束符⏱</h2>\n<p>⚱️ <strong>作用</strong>：使用英文的  <code>;</code>  代表语句结束</p>\n<p>📋 <strong>实际情况</strong>：实际开发中，可写可不写，浏览器（JavaScript 引擎）可以自动推断语句的结束位置</p>\n<p>📋 <strong>现状</strong>：在实际开发中，越来越多的人主张，书写 JavaScript 代码时省略结束符</p>\n<p><font style=\"color:red\"><strong>约定：为了风格统一，结束符要么每句都写，要么每句都不写（按照团队要求）</strong></font> 🔺</p>\n<h2 id=\"输入和输出的语法\"><a class=\"markdownIt-Anchor\" href=\"#输入和输出的语法\">#</a> 输入和输出的语法🔘</h2>\n<p><strong>什么是语法</strong> ❓</p>\n<ul>\n<li>\n<p>人和计算机打交道的规则约定</p>\n</li>\n<li>\n<p>我们要按照这个规则去写</p>\n</li>\n</ul>\n<p><mark>输出</mark>和<mark>输入可理解为人和计算机的交互</mark>，<mark>用户通过键盘</mark>，<mark>鼠标</mark>等<mark>向计算机输入信息</mark>，<mark>计算机处理后再展示结果给用户，这便是一次输入和输出的过程</mark>。</p>\n<h3 id=\"输出语法\"><a class=\"markdownIt-Anchor\" href=\"#输出语法\">#</a> 输出语法📤</h3>\n<ul>\n<li><strong>语法 1</strong> 🎲\n<ul>\n<li><strong>作用</strong>：向 body 内输出内容</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 多行注释 / 块注释 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是写出的内容'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>⚠️ <strong>注意</strong>：如果输出的内容写的是<mark>标签</mark>，也会被解析<mark>成网页元素</mark>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 多行注释 / 块注释 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是写出的内容'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h1>我是标题&lt;/h1>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211110439.png\" alt=\"image-20230420163244224\"></p>\n<ul>\n<li><strong>语法 2</strong> 🎲\n<ul>\n<li>\n<pre><code>:clipboard: **作用**：页面弹出警告对话框\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好,js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li><strong>语法 3</strong>  🎲\n<ul>\n<li>📋 <strong>作用</strong>：控制台输出语法，程序员调式使用</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'控制台打印:你好,js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211110254.png\" alt=\"image-20230420164733555\"></p>\n<h4 id=\"写出一个99乘法表打印到页面上\"><a class=\"markdownIt-Anchor\" href=\"#写出一个99乘法表打印到页面上\">#</a> 写出一个 99 乘法表打印到页面上🌠</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string\">\"X-UA-Compatible\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"IE=edge\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        #table td<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span>center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span>red 2px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            border<span class=\"token operator\">-</span>radius<span class=\"token operator\">:</span><span class=\"token number\">35</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> blueviolet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;table id=\"table\">'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;tr>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;td>'</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">'*'</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token string\">'='</span><span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token string\">'&lt;/td>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/tr>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/table>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>效果</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211110230.png\" alt=\"image-20230423210725873\"></p>\n<h3 id=\"输入语法\"><a class=\"markdownIt-Anchor\" href=\"#输入语法\">#</a> 输入语法📥</h3>\n<ul>\n<li><strong>语法</strong>:🎲\n<ul>\n<li>📋 <strong>作用</strong>：显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>显示一个带有提示的对话框<span class=\"token punctuation\">,</span>让用户输入<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的姓名:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211110015.png\" alt=\"image-20230420175305554\"></p>\n<h2 id=\"javascript代码执行顺序️\"><a class=\"markdownIt-Anchor\" href=\"#javascript代码执行顺序️\">#</a> JavaScript 代码执行顺序⚜️</h2>\n<p>按 HTML 文档流顺序执行 JavaScript 代码</p>\n<p><mark>alert</mark> 和<mark> prompt</mark> 它们会<mark>跳过页面渲染先被执行</mark>🕵</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* 执行顺序:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    prompt: 第一个执行</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    write: 第二个执行</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console: 第三个执行 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 显示一个带有提示的对话框，让用户输入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的姓名:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">'打开了控制台'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"字面量\"><a class=\"markdownIt-Anchor\" href=\"#字面量\">#</a> 字面量🎄</h2>\n<p>🏜</p>\n<p><u>在计算机科学中，字面量（literal）是在计算机中描述  事 / 物</u>。</p>\n<p>比如：</p>\n<ul>\n<li>我们工资是：<u>1000</u>此时<u>1000</u>就是数字字面量</li>\n<li>‘<u>乾坤未定</u>’ 字符串字面量</li>\n<li>还有接下来我们学的 [] 数组字面量 {} 对象字面量 等等</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "js"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/js/ECMASCript/ECMAScript-%E4%B8%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/js/ECMASCript/ECMAScript-%E4%B8%8B/",
            "title": "ECMAScript-下",
            "date_published": "2024-04-02T06:23:31.951Z",
            "content_html": "<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组🎄</h1>\n<p>💠</p>\n<p>⚠️<strong>特别注意</strong>：在 JavaScript 中数组是可变的，而在 Java 中数组则是不可变的比如如下:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 数组长度初始为 1 里面只有一个元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//Array[\"a\"]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 值为:undefined, 访问超出数组长度的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'刘桑'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">数组长度为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 数组的长度为：2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 直接在索引 10 存储一个元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">数组长度为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 数组的长度为：11</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>数组 (Array) 是一种可以按顺序保存数据的<font style=\"color:red\">数据类型</font>.</p>\n<p>为什么要数组？</p>\n<ul>\n<li>📋<font style=\"color:red\">场景：如果有多个数据可以用数组保存起来，然后放到一个变量中，管理非常方便</font>.</li>\n</ul>\n<p><strong>数组基本使用</strong>:🎲</p>\n<p><strong>1. 声明语法</strong>: 🎮</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>数据<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>数据<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">,</span>数据n<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>1.1. 声明语法</strong>: 🎮  使用 new Array 构造函数声明</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>数据<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>数据<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">,</span>数据n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>数组是按顺序保存，所以每个数据都有自己的编号</li>\n<li>计算机中的编号从 0 开始，所以数组的下标从 0 开始编号</li>\n<li>在数组中，数据的编号叫做<font  style=\"color:red\">索引</font>或<font style=\"color:red\">下标</font>.</li>\n<li>与 Java 不同，JavaScript 数组可以存放任意的数据类型</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 第一种声明方式，字面量声明数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 第二种声明方式，构造函数声明数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>2. 取值语法</strong>:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数组名<span class=\"token punctuation\">[</span>下标<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>例如:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 第一种声明方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>通过下标取数据</li>\n<li>取出来是什么类型的，就根据这种类型特点来访问</li>\n</ul>\n<p><strong>3. 一些术语</strong>:</p>\n<ul>\n<li>元素：数组中保存的每个数据都叫数组元素</li>\n<li>下标 / 索引：数组中数据的编号</li>\n<li>长度：数组中数据的个数，通过数组的 length 属性获得</li>\n</ul>\n<p><strong>4. 遍历数组 (重点)</strong>:</p>\n<ul>\n<li>用循环把数组中每个元素都访问到，一般会用 for 循环遍历</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> 数组名<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   数组名<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>例如:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 第一种声明方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h6 id=\"获取数组中的最大值和最小值\"><a class=\"markdownIt-Anchor\" href=\"#获取数组中的最大值和最小值\">#</a> 获取数组中的最大值和最小值🌳</h6>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// if(num[i] > max)&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">//     max = num[i]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// if(num[i] &lt; min)&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//     min = num[i]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 上面的 if else 方式 或者下面的 三元运算符方式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      max <span class=\"token operator\">=</span> max <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>max</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      min <span class=\"token operator\">=</span> min <span class=\"token operator\">></span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> num<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>min</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">数组中最大值:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>max<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">数组中最小值:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>min<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h6 id=\"求数组中元素的和与平均值\"><a class=\"markdownIt-Anchor\" href=\"#求数组中元素的和与平均值\">#</a> 求数组中元素的和与平均值🌳</h6>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 第一种声明方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 存储总和</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 存储平均值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 计算元素总和</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        num <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 记录元素个数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        num1<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 总和除元素个数就是平均值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> avg <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">和</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">平均值</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>avg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>操作数组</strong>:</p>\n<ul>\n<li>数组本质是数据集合，操作数据无非就是<font style=\"color:red\">增 删 改 查</font>. 语法:</li>\n</ul>\n<p><strong>小案例</strong>:</p>\n<p>数组中添加三个名字，然后再将每个人名字后面在上 “老师”</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 在每个人后面追加 \"老师\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token string\">'老师'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"数组操作-新增\"><a class=\"markdownIt-Anchor\" href=\"#数组操作-新增\">#</a> 数组操作 - 新增🌳</h2>\n<p>💠</p>\n<ul>\n<li>\n<p><font style=\"color:red\">数组.push ( )</font>.</p>\n<ul>\n<li>方法将一个或多个元素添加到数组的末尾，并返回该数组的新长度<font style=\"color:red\">（重点）</font>.</li>\n</ul>\n<h6 id=\"图解️\"><a class=\"markdownIt-Anchor\" href=\"#图解️\">#</a> 图解:〽️</h6>\n</li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素A<span class=\"token arrow operator\">--></span>元素B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>元素B<span class=\"token arrow operator\">--></span>新增元素<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>元素B<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>元素C<span class=\"token arrow operator\">--></span>新增元素1<span class=\"token arrow operator\">--></span>元素D</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>元素C<span class=\"token arrow operator\">--></span>元素D</pre></td></tr></table></figure><p><strong>语法</strong>：🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">,</span>元素n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>例如：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arrPush <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//[' 刘桑 ',' 张三 ',' 李四 ',1,2,3]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrPush<span class=\"token punctuation\">)</span><span class=\"token comment\">// 返回数组长度为：6</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>\n<p><font style=\"color:red\">arr.unshift (新增的内容)</font>.</p>\n<ul>\n<li>方法将一个或多个元素添加到数组的<strong>开头</strong>，并返回改数组的新长度</li>\n</ul>\n<h6 id=\"图解️-2\"><a class=\"markdownIt-Anchor\" href=\"#图解️-2\">#</a> 图解:〽️</h6>\n</li>\n</ul>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素A<span class=\"token arrow operator\">--></span>元素B</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>新增元素<span class=\"token arrow operator\">--></span>元素A</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>元素C<span class=\"token arrow operator\">--></span>新增元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>元素C<span class=\"token arrow operator\">--></span>元素A</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>新增元素1<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>元素D<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>元素D<span class=\"token arrow operator\">--></span>新增元素1</pre></td></tr></table></figure><p><strong>语法</strong>：🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>元素<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">,</span>元素n<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>例如:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> arrPush <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//[1,2,3,' 刘桑 ',' 张三 ',' 李四 ']</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrPush<span class=\"token punctuation\">)</span><span class=\"token comment\">// 返回数组长度为：6</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h6 id=\"删除数组中的0️\"><a class=\"markdownIt-Anchor\" href=\"#删除数组中的0️\">#</a> 删除数组中的 0⭐️</h6>\n<p><strong>方式一</strong>: splice💫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">52</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 判断元素是否为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token comment\">// 如果为 0 则通过当前元素的下标删除这个元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token comment\">//i: 下标，1: 删除一个元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>方式二</strong>：创建新数组并拷贝进去不包含 0 的元素💫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">77</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">52</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 实例新数组用于存储不包含 0 的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span>  newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 判断数组元素是否为 0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token comment\">// 如果为 0 则终止本次循环，执行下次循环</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">continue</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 将不是 0 的元素依次 push 到新数组的末尾</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"数组操作-删除\"><a class=\"markdownIt-Anchor\" href=\"#数组操作-删除\">#</a> 数组操作 - 删除🌳</h2>\n<p>💠</p>\n<p><font style=\"color:red\"><strong>数组.pop ()</strong></font>方法从数组中删除最后一个元素，并返回该元素的值，一次只能删除一个元素</p>\n<h6 id=\"图解️-3\"><a class=\"markdownIt-Anchor\" href=\"#图解️-3\">#</a> 图解:〽️</h6>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素A<span class=\"token arrow operator\">--></span>元素B<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>删除元素<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>删除元素1<span class=\"token arrow operator\">--></span>元素B</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>删除元素2<span class=\"token arrow operator\">--></span>元素A</pre></td></tr></table></figure><ul>\n<li><strong>语法</strong>:🎲</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>例如</strong>:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 删除数组中最后的元素，并返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> arrPop <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//[' 刘桑 ',' 李四 ']</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">// 张三</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>💠</p>\n<p><font style=\"color:red\"><strong>shift( )</strong></font>方法从数组中删除开头一个元素，并返回该元素的值，一次只能删除一个元素</p>\n<h6 id=\"图解️-4\"><a class=\"markdownIt-Anchor\" href=\"#图解️-4\">#</a> 图解:〽️</h6>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素A<span class=\"token arrow operator\">--></span>元素B<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>元素A<span class=\"token arrow operator\">--></span>删除元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>元素B<span class=\"token arrow operator\">--></span>删除元素1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>元素C<span class=\"token arrow operator\">--></span>删除元素2</pre></td></tr></table></figure><ul>\n<li><strong>语法</strong>:🎲</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>例如</strong>:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 删除数组中开头的元素，并返回值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> arrShift <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arrShift<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>💠</p>\n<p><font style=\"color:red\"><strong>splice( )</strong></font>方法通过元素的下标删除指定的元素</p>\n<ul>\n<li><strong>语法</strong>:🎲</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span>deleteCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>起始位置<span class=\"token punctuation\">,</span>删除几个元素<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>解释</strong>:</p>\n<ul>\n<li><font style=\"color:red\">start 起始位置</font>.\n<ul>\n<li>指定修改的开始位置 (从 0 计数)</li>\n</ul>\n</li>\n<li><font style=\"color:red\">deleteCount:</font>.\n<ul>\n<li>表示要移除的数组元素的个数</li>\n<li>可选的，如果省略则<mark>默认从指定的起始位置删除到最后</mark>。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"图解️-5\"><a class=\"markdownIt-Anchor\" href=\"#图解️-5\">#</a> 图解:〽️</h6>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>索引0<span class=\"token text string\">(索引0)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>索引1<span class=\"token text string\">(索引1)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>索引2<span class=\"token text string\">(索引2)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>元素A</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>元素B</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>元素C</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>索引0<span class=\"token arrow operator\">--></span>元素A</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>索引1<span class=\"token arrow operator\">--></span>元素B</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>索引2<span class=\"token arrow operator\">--></span>元素C</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>splice<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">deleteCount</span><span class=\"token arrow operator\">--></span></span>索引0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>splice<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">deleteCount</span><span class=\"token arrow operator\">--></span></span>索引1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>splice<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">deleteCount</span><span class=\"token arrow operator\">--></span></span>索引2</pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 指定元素下标和删除几个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//[\"刘桑\", \"李四\"]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 指定元素下标但不指定删除几个元素默认删除到最后</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  arr1<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token comment\">//[\"刘桑\"]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"案例根据数据生成柱形图\"><a class=\"markdownIt-Anchor\" href=\"#案例根据数据生成柱形图\">#</a> 案例 — 根据数据生成柱形图🌳</h2>\n<p>💠</p>\n<p><strong>需求</strong>：用户输入四个季度的数据，可以生成柱形图</p>\n<p><strong>分析</strong>：</p>\n<ol>\n<li>需要输入 3 次，所以可以把 3 个数据放到一个数组里面\n<ul>\n<li>利用循环，弹出 3 次框，同时将数据存储到数组中</li>\n</ul>\n</li>\n<li>遍历该数组，根据数据生成 3 个柱形图，渲染打印到页面中\n<ul>\n<li>柱形图就是 div 盒子，设置宽度固定，高度是用户输入的数据</li>\n<li>div 里面包含显示的数字和第 n 季度</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        #box<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span>flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 700px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            border<span class=\"token operator\">-</span>left<span class=\"token operator\">:</span>red 2px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            border<span class=\"token operator\">-</span>bottom<span class=\"token operator\">:</span>red 2px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token literal-property property\">margin</span><span class=\"token operator\">:</span> 50px auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> space<span class=\"token operator\">-</span>around<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            align<span class=\"token operator\">-</span>items<span class=\"token operator\">:</span> flex<span class=\"token operator\">-</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        #box<span class=\"token operator\">></span>div<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            flex<span class=\"token operator\">-</span>direction<span class=\"token operator\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            justify<span class=\"token operator\">-</span>content<span class=\"token operator\">:</span> space<span class=\"token operator\">-</span>between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            text<span class=\"token operator\">-</span>align<span class=\"token operator\">:</span>center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        #box div span<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            margin<span class=\"token operator\">-</span>top<span class=\"token operator\">:</span> <span class=\"token operator\">-</span>21px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        #box div p<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            margin<span class=\"token operator\">-</span>bottom<span class=\"token operator\">:</span> <span class=\"token operator\">-</span>35px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 70px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            margin<span class=\"token operator\">-</span>left<span class=\"token operator\">:</span> <span class=\"token operator\">-</span>10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">请输入第> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> &lt;个季度的值:👇</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">===</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">是否还要继续输入数据 现在是第</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">个 , [1.继续 2.不了不了]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div id=\"box\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            &lt;div style=\"height:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px\"></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                &lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                &lt;p>第</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">季度&lt;/p></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            &lt;/div></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211743165.gif\" alt=\"test\"></p>\n<h2 id=\"案例冒泡排序算法\"><a class=\"markdownIt-Anchor\" href=\"#案例冒泡排序算法\">#</a> 案例 — 冒泡排序算法🌳</h2>\n<p>💠</p>\n<p>冒泡排序</p>\n<ul>\n<li>冒泡排序是一种简单的排序算法</li>\n<li>它重复地走访过要排序的数列，一次比较两个元素，如果它们顺序错误就把它们交换过来，走访数列的工作是重复的进行直到没有再需要交换，也就是说该数列已经排序完成</li>\n<li>这个算法的名字由来是因为越小的元素会经由交换慢慢，“浮”，到数列的顶端</li>\n<li>比如数组 [2,3,1,4,5] 经过排序成为了 [1,2,3,4,5] 或者 [5,4,3,2,1]</li>\n</ul>\n<p>找规律：🎲</p>\n<ol>\n<li>一共需要的趟数，我们用外层 for 循环</li>\n</ol>\n<blockquote>\n<p>5 个数据我们一共需要走 4 趟<br>\n长度就是 数组长度 减去 1 arr.length - 1</p>\n</blockquote>\n<ol start=\"2\">\n<li>每一趟交换次数，我们用里层 for 循环</li>\n</ol>\n<blockquote>\n<p>第一趟 交换 4 次</p>\n<p>第二趟 交换 3 次</p>\n<p>第三趟 交换 2 次</p>\n<p>第四趟 交换 1 次</p>\n<p>长度就是 数组长度减去次数</p>\n<p>但是我们次数 是从 0 次开始的，所以，最终 arr.length - i - 1</p>\n</blockquote>\n<ol start=\"3\">\n<li>交换 2 个变量</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> num</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 外循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 内循环，每次循环数组长度 - i-1 就能达到如下的执行规律</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        * 外循环，循环 9 次</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        * 内循环</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        * 9 - 0 - 1 = 8</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        * 9 - 1 - 1 = 7</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        * 9 - 2 - 1 = 6</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        * 9 - 3 - 1 = 5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        * 9 - 4 - 1 = 4</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        * 9 - 5 - 1 = 3</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        * 9 - 6 - 1 = 2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        * 9 - 7 - 1 = 1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        * 9 - 8 - 1 = 0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        * */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 判断前一个元素是否小于后一个元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 对数组的元素进行交换位置</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                num <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"数组排序简化版sort\"><a class=\"markdownIt-Anchor\" href=\"#数组排序简化版sort\">#</a> 数组排序简化版 —sort🌳</h2>\n<p>💠</p>\n<p><font style=\"color:red\">** 数组.sort ()** 方法可以排序</font>.</p>\n<p><strong>语法</strong>：🎲</p>\n<p><strong>升序排序写法</strong>.💫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>降序排序写法</strong>.💫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> b <span class=\"token operator\">-</span> a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"数组中map方法-迭代数组\"><a class=\"markdownIt-Anchor\" href=\"#数组中map方法-迭代数组\">#</a> 数组中 map 方法 迭代数组</h2>\n<ul>\n<li>使用场景：</li>\n</ul>\n<p>map 可以遍历数组<mark>处理数据</mark>，并且<mark>返回新的数组</mark>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token comment\">// 数组元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token comment\">// 数组索引号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> ele <span class=\"token operator\">+</span> <span class=\"token string\">'颜色'</span> <span class=\"token comment\">// 遍历返回 新的元素 组成新的 数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span> <span class=\"token comment\">//['red 颜色 ','blue 颜色 ','green 颜色 ']</span></pre></td></tr></table></figure><p><mark>map 也称为映射</mark>。映射是个术语，指两个元素的集之间元素相互 “对应” 的关系。</p>\n<p><mark>map 重点在于有返回值</mark>，forEach 没有返回值</p>\n<p><strong>上面代码的返回结果</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308041437703.png\" alt=\"image-20230804143737322\"></p>\n<ul>\n<li><font title=red><strong>注意</strong></font>：不要使用 map 来单纯的遍历数组这样就违背了 map 的设计初衷了，它是用来遍历一个数组经过一些处理返回一个新数组来使用。</li>\n</ul>\n<h2 id=\"数组中join方法\"><a class=\"markdownIt-Anchor\" href=\"#数组中join方法\">#</a> 数组中 join 方法</h2>\n<ul>\n<li><strong>作用</strong>：</li>\n</ul>\n<p>join () 方法用于把数组中的所有元素<mark>转换一个字符串</mark>。</p>\n<ul>\n<li><strong>语法</strong>：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//redbluegreen</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//red,blue,green</span></pre></td></tr></table></figure><ul>\n<li><strong>参数</strong>：</li>\n</ul>\n<p>数组<mark>元素</mark>是<mark>通过参数里面指定的分隔符</mark>进行<mark>分隔</mark>的，<mark>空字符串 (’’)</mark>，则所有元素之间都<mark>没有任何字符来分隔</mark>。</p>\n<p>参数为空默认使用<mark>逗号隔开</mark>。</p>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数🎄</h1>\n<p>💠</p>\n<p><strong>函数</strong>:</p>\n<p>function, 是被设计为<font style=\"color:red\"><strong>执行特定任务</strong></font>的代码块</p>\n<p><strong>为什么需要函数？</strong>。</p>\n<p>说明:📋</p>\n<p>函数可以把具有相同或相似逻辑的代码 &quot;包裹&quot; 起来，通过函数调用执行这些被 &quot;包裹&quot; 的代码逻辑，这么做的优势是利于<font style=\"color:red\"><strong>精简代码方便复用</strong></font>.</p>\n<p>比如我们前面使用的 alter (),prompt () 和 console.log () 都是一些<strong> js 函数</strong>，只不过已经封装好了，我们直接使用的。</p>\n<p><strong>函数使用</strong>.</p>\n<ul>\n<li>函数的声明语法🎲</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>例如:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hai~~~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>函数名 命名规范</strong>.🌠.\n<ul>\n<li>和变量命名基本一致</li>\n<li>尽量小驼峰式命名法</li>\n<li>前缀应该为动词</li>\n<li>命名建议：常用动词约定</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>can</td>\n<td>判断是否可执行某个动作</td>\n</tr>\n<tr>\n<td>has</td>\n<td>判断是否含义某个值</td>\n</tr>\n<tr>\n<td>is</td>\n<td>判断是否为某个值</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取某个值</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置某个值</td>\n</tr>\n<tr>\n<td>load</td>\n<td>加载某些数据</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"函数调用语法\"><a class=\"markdownIt-Anchor\" href=\"#函数调用语法\">#</a> 函数调用语法:🎲</h2>\n<p>💠</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数调用，这些函数体内的代码逻辑会被执行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>⚠️<strong>注意</strong>：声明 (定义) 的函数必须调用才会真正被执行，使用 () 调用函数</p>\n<ul>\n<li><strong>例如</strong>：🌟</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数一次声明可以多次调用，每一次函数调用函数体里面的代码会重新执行一次</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 执行函数的第一次</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 执行函数的第二次</span></pre></td></tr></table></figure><ul>\n<li><strong>演示</strong>：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi~~~&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 调用多次函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211744993.png\" alt=\"image-20230425203033651\"></p>\n<ul>\n<li>我们曾经使用的 alert (),parseInt () 这种名字后面跟小括号的本质都是函数的调用</li>\n</ul>\n<h2 id=\"函数体\"><a class=\"markdownIt-Anchor\" href=\"#函数体\">#</a> 函数体.🌳</h2>\n<p>💠</p>\n<blockquote>\n<p>函数体是函数的构成部分，它负责将相同或相似代码 **“包裹”** 起来，直到函数调用时函数体内的代码才会被执行，函数的功能代码都要写在函数体当中。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数值:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数值:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">subNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">相加后的结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">subNumber</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入要求从0开始的累加和的数值:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 声明有参方法，接收一个参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 记录累加和的变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 循环用户输入的数值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 进行累加和</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            num <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 调用方法并传入参数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"函数传参\"><a class=\"markdownIt-Anchor\" href=\"#函数传参\">#</a> 函数传参🌳</h2>\n<p>💠</p>\n<p>与 Java 不同 JavaScript 方法中参数列表不需要声明参数的数据类型比如 Java 中这么写 run (String name,int age) 而 JavaScript 中这么写 run (a,b) 即可</p>\n<p>若函数完成功能需要调用者传入数据，那么就需要拥有参数的函数，比如</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//result : 3</span></pre></td></tr></table></figure><p><font style=\"color:red\">这样可以极大提高函数的灵活性</font>.</p>\n<p><strong>声明语法</strong>：🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数列表</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span>传入参数<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"参数列表\"><a class=\"markdownIt-Anchor\" href=\"#参数列表\">#</a> 参数列表🌳</h3>\n<ul>\n<li>传入参数列表</li>\n<li>声明这个函数需要传入几个数据</li>\n<li>多个数据用逗号隔开</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">参数<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>参数<span class=\"token number\">2</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>调用语法：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span>传递的参数列表<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>例如:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 调用方法传入参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getSquare</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 调用方法传入参数，多个参数使用逗号隔开</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>调用函数时，需要传入几个数据就写几个，用逗号隔开</li>\n</ul>\n<h3 id=\"实参和形参\"><a class=\"markdownIt-Anchor\" href=\"#实参和形参\">#</a> 实参和形参🌳</h3>\n<p>💠</p>\n<p><strong>形参</strong>：声明函数时写在函数名右边小括号里的叫形参 (形式上的参数)💫.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 实参</span></pre></td></tr></table></figure><p><strong>实参</strong>：调用函数时写在函数名右边小括号里的叫实参 (实际上的参数)💫.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 形参，其作用域在这个函数体内，外部不能访问到</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>📋</p>\n<ul>\n<li><font style=\"color:red\">形参可以理解为是</font>在这个函数内声明的<font style=\"color:red\">变量 (比如 num1 = 10)</font>实参可以理解为是给这个变量赋值</li>\n<li><font style=\"color:red\">开发中尽量保持形参和实参个数一致否则报错</font>.</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 用户键盘输入</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第一个数值:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入第二个数值:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 调用方法并传入两个参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 实参</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 有参方法接收两个参数，形参</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span>num1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">两数相加的结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num <span class=\"token operator\">+</span> num1<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"函数传参参数默认值\"><a class=\"markdownIt-Anchor\" href=\"#函数传参参数默认值\">#</a> 函数传参 — 参数默认值🌳</h3>\n<p>💠</p>\n<p><strong>形参</strong>：可以看作变量，但是如果一个变量不给值，默认是  <code>undefined</code> .</p>\n<p>undefined:</p>\n<p>如果用户不输入实参，如下的案例，则出现 undefined + undefined 结果是 NaN</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 不传递实参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 形参为 undefined </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算结果:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>NaN</p>\n<p>我们可以改进下，用户不输入实参，可以给<font style=\"color:red\"><strong>形参默认值</strong></font>，可以默认为 0 或者使用 逻辑中断，这样程序更严谨，如下操作：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 不传递实参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 形参为 0,0 避免 undefined + undefined = NaN 的情况</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 或者使用如下操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/* 非 0 即为真！</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        a = a || 0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        b = b || 0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算结果:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a <span class=\"token operator\">+</span> b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>🌠 <font style=\"color:red\"><strong>说明</strong>：这个默认值只会在缺少实参参数传递时，才会被执行，所以有参数会优先执行传递过来的实参，否则默认为我们指定的默认值或者 undefined</font>.</p>\n<p><strong>形参数组防止 undefined</strong>.🌟</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">70</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 为 arr 形参初始空数组防止 undefined 调用 Length 报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//                  undefined 没有 length 会报错</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            num <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"函数返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数返回值\">#</a> 函数返回值🌳</h2>\n<p>💠</p>\n<p><strong>提问❔</strong>：什么是函数？</p>\n<p>📋 函数是被设计为<font style=\"color:red\">执行特定任务</font>的代码块</p>\n<p><strong>提问❔</strong>：执行完特定任务之后，然后呢？</p>\n<p>把任务的结果给我们</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>\n<p>⚠️<strong>缺点</strong>：把计算后的结果处理方式写死了，内部处理了</p>\n</li>\n<li>\n<p>🌟<strong>解决</strong>：把处理结果返回给调用者</p>\n</li>\n</ul>\n<p><strong>有返回值函数的概念</strong>：📗</p>\n<ul>\n<li>当调用某个函数，这个函数会返回一个结果出来</li>\n<li>这就是有<font style=\"color:red\">返回值</font>的函数</li>\n</ul>\n<p>💫当函数需要返回数据出去时，用<strong> return</strong> 关键字</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> 数据</pre></td></tr></table></figure><ul>\n<li>\n<p><strong>细节</strong>：🌠</p>\n<ul>\n<li>在函数体中使用 return 关键字能将内部的执行结果交给函数外部使用</li>\n<li>return 后面代码不会再被执行，会立即结束当前函数，所以<font style=\"color:red\"><strong>return 后面的数据不要换行写</strong></font>.</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">/*return 换行写会返回 undefined</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          a + b*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//unreachable code after return statement</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 翻译：返回语句后无法访问的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我被执行了吗?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>return 函数可以没有 return, 这种情况函数默认返回值为 undefined</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>📋<strong>总结</strong>：</p>\n<ol>\n<li>为什么要让函数有返回值？\n<ul>\n<li>函数执行后得到结果，结果是调用者想要拿到的 (一句话，函数内部不需要输出结果，而是<font style=\"color:red\">返回结果</font>)</li>\n<li>对执行结果的扩展性更高，可以让其它的程序使用这个结果</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"arguments的使用\"><a class=\"markdownIt-Anchor\" href=\"#arguments的使用\">#</a> arguments 的使用🌳</h2>\n<p>当我们不确定有多少个参数传递的时候，可以用 <code>arguments</code>  来获取。在 JavaScript 中，arguments 实际上它是当前函数的一个<font style=\"color:red\">内置对象</font>。所有函数都内置了一个 arguments 对象，arguments 对象中<font style=\"color:red\">存储了传递的所有实参</font>。</p>\n<p><strong style=\"color:red\">注意</strong>：只有函数才有 arguments 对象，每个函数都内置好了 arguments 对象。</p>\n<p>通过代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//arguments 里面存储了所有传递过来的实参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//----------------- 结果 --------------------.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Arguments</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token literal-property property\">callee</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>length<span class=\"token operator\">:</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ƒ <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>Prototype<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Object</pre></td></tr></table></figure><p>看得出：<strong style=\"color:red\">arguments 展示形式是一个伪数组</strong><sup>并不是真正意义上的数组</sup>，因此可以进行遍历。伪数组具有以下特点：</p>\n<ul>\n<li>具有 length 属性</li>\n<li>按索引方式存储数据</li>\n<li>不具有数组的 push，pop 等方法</li>\n</ul>\n<p>代码演示：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//arguments 里面存储了所有传递过来的实参</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">fu</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 伪数组，并不是真正意义上的数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 1. 具有数组的 length 属性</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 按照索引的方式进行存储的</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 3. 它没有真正数组的一些方法 push () pop () 等</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span>result<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">Arguments</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">callee</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">Arguments</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">callee</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">,</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ƒ<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"调用有参函数带返回值返回数组的最大值和最小值\"><a class=\"markdownIt-Anchor\" href=\"#调用有参函数带返回值返回数组的最大值和最小值\">#</a> 调用有参函数带返回值返回数组的最大值和最小值🌳</h2>\n<p>💠</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 使用三元运算符获取最大值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span>  arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">arrSum</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">最大值:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">最小值:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">arrSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 判断拿最大值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 判断拿最小值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 返回一个数组，返回最大值和最小值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>max<span class=\"token punctuation\">,</span>min<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"函数细节补充\"><a class=\"markdownIt-Anchor\" href=\"#函数细节补充\">#</a> 函数细节补充🌴</h2>\n<p>💠</p>\n<p>两个相同的函数后面的会覆盖前面的函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在 JavaScript 中，实参的个数和形参的个数可以不一致</p>\n<ul>\n<li>如果形参过多会自动填上 undefined (解决办法就是<strong> run (a = 0,b = 0)</strong>)(了解即可)</li>\n<li>如果实参过多那么多余的实参会被忽略 (函数内部有一个 arguments, 里面装着所有的实参)</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//a:1 , b:2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//1+2 = 3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//1 找了 a,2 找了 b,3 一直找不到另一半</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//-------------------------------------</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//a:1 , b:undefined</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//a:1          b:0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//1+0 = 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//1 找了 a</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>函数一旦碰到 return 就不会在往下执行了，函数的结束用 return</p>\n<h2 id=\"作用域\"><a class=\"markdownIt-Anchor\" href=\"#作用域\">#</a> 作用域🌳</h2>\n<p>💠</p>\n<p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的<font style=\"color:red\">可用性的代码范围</font>就是这个名字的<font style=\"color:red\">作用域</font>.</p>\n<p>🌠 作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突</p>\n<p>💫</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token text string\">((全局作用域))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tA<span class=\"token arrow operator\">--></span>A1<span class=\"token text string\">(全局有效)</span></pre></td></tr></table></figure><p>作用于所有代码执行的环境 (整个 script 标签内部) 或者一个独立的 js 文件</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tB<span class=\"token text string\">((局部作用域))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tB<span class=\"token arrow operator\">--></span>B1<span class=\"token text string\">(局部有效)</span></pre></td></tr></table></figure><p>作用于<strong>函数内的代码环境</strong>，就是局部作用域，因为跟函数有关系，所以也称为<strong>函数作用域</strong>.</p>\n<p>📋<strong>在 JavaScript 中，根据作用域的不同，变量可以分为</strong>:</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token text string\">((全局变量))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tA<span class=\"token arrow operator\">--></span>B<span class=\"token text string\">(函数外部let的变量)</span></pre></td></tr></table></figure><p><strong>全局变量</strong>：在任何区域都可以访问和修改</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tA<span class=\"token text string\">((局部变量))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tA<span class=\"token arrow operator\">--></span>B<span class=\"token text string\">(函数内部let的变量)</span></pre></td></tr></table></figure><p><strong>局部变量</strong>：只能在当前函数内部访问和修改</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token comment\">// 全局作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">methodSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 局部作用域</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 局部变量，只能在 methodSum 方法作用域中使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">methodSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//console.log(num1)//Uncaught ReferenceError: num1 is not defined</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>⚠️变量有一个坑，特殊情况：</p>\n<p>🔴如果函数内部，变量没有声明，直接赋值，也当<font style=\"color:red\">全局变量看</font>，但是<span alt=\"wavy\" style=\"color:red\"><strong>强烈不推荐</strong></span>.</p>\n<p>📋形参可以看作是函数的局部变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token comment\">// 当全局变量来看，强烈 强烈 强烈不推荐</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token comment\">//a 和 b 为局部变量，外部访问不到</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">run1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token comment\">//Uncaught ReferenceError: a is not defined</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211903315.png\" alt=\"image-20230426162250536\"></p>\n<h2 id=\"变量的访问原则\"><a class=\"markdownIt-Anchor\" href=\"#变量的访问原则\">#</a> 变量的访问原则🌳</h2>\n<p>💠</p>\n<p>只要是代码，就至少有一个作用域</p>\n<p>写在函数内部的局部作用域</p>\n<p>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域</p>\n<p><strong>访问原则</strong>：<font style=\"color:red\">在能够访问到的情况下，<strong>先局部</strong>，局部没有再找<strong>全局</strong></font>.</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211903368.gif\" alt=\"test\"></p>\n<p>💫<strong>作用域链</strong>：采取<font style=\"color:red\"><strong>就近原则</strong></font>的方式来查找变量最终的值</p>\n<h2 id=\"匿名函数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数\">#</a> 匿名函数🌳</h2>\n<p>💠</p>\n<p><strong>函数可以分为</strong>：具名函数 ， 匿名函数</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">classDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t具名函数 <span class=\"token arrow operator\">&lt;|--</span>声明</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t具名函数 <span class=\"token arrow operator\">&lt;|--</span> 调用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t具名函数<span class=\"token operator\">:</span> ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">class</span> 声明 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tfunction fn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">class</span> 调用 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tfn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">classDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t匿名函数 <span class=\"token arrow operator\">&lt;|--</span> 声明</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t匿名函数<span class=\"token operator\">:</span> ...</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">class</span> 声明 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>没有名字的函数，无法直接使用</strong>.</p>\n<p>💫<strong>使用方式</strong>：</p>\n<ul>\n<li>\n<p><span alt=\"shake\"><strong>函数表达式</strong></span>.</p>\n<ul>\n<li>将匿名函数赋值给一个变量，并且通过变量名称进行调用，我们将这个称为<font style=\"color:red\">函数表达式</font>.</li>\n<li><strong>语法</strong>：🎲</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   函数体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>调用</strong>：🎮</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 函数名 ()</span></pre></td></tr></table></figure><p>其中函数的形参和实参使用跟具名函数一致</p>\n</li>\n<li>\n<p><span alt=\"shake\"><strong>传递参数</strong></span>👾</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 函数表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token comment\">//function fn(x,y)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>⚠️<span alt=\"wavy\" style=\"color:red\">函数表达式 ，必须先声明函数表达式，后调用 和 声明的变量一样否则找不到</span>.</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token comment\">//Uncaught ReferenceError:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// can't access lexical declaration 'fn'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// before initialization</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token comment\">//Uncaught ReferenceError:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// can't access lexical declaration 'fn'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// before initialization</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 函数表达式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fn1<span class=\"token punctuation\">)</span><span class=\"token comment\">//function fn1()</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>⚠️<strong>注意</strong>:\n<ul>\n<li>具名表达式可以写在任意位置</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>函数表达式必须先声明后调用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"立即执行函数\"><a class=\"markdownIt-Anchor\" href=\"#立即执行函数\">#</a> 立即执行函数🎯</h3>\n<p>💠</p>\n<ul>\n<li>\n<p><strong>场景介绍</strong>: <font title=\"red\">避免全局变量之间的污染</font>.</p>\n</li>\n<li>\n<p><strong>语法</strong>: 🎲</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式 1   形参                 实参，调用函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式 2   形参\t               实参，调用函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">~</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>不需要调用 立即执行💫</li>\n<li>最后一个小括号相当于本质的调用函数，也就是<font style=\"color:red\">实参</font>.</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        #bu<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 260px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"bu\"</span><span class=\"token operator\">></span>点击我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    btn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'弹出'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>⚠️<strong>注意</strong>：<font style=\"color:red\">多个立即执行函数要用 <code>;</code>  隔开，不然会报错</font>.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//          接收形参</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>b <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 最后的小括号是调用函数，传入实参</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 多个立即执行函数需要使用分号结束但是分号可以写在前面</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>⚠️如果不加分号来结束则会报错: <font style=\"color:red\">Uncaught TypeError: (intermediate value)(…) is not a function</font>.</li>\n</ul>\n<h2 id=\"案例转换时间\"><a class=\"markdownIt-Anchor\" href=\"#案例转换时间\">#</a> 案例 — 转换时间🌠</h2>\n<p>💠</p>\n<p>需求：用户输入秒数，可以自动转换为，时，分，秒</p>\n<p>分析：🎲</p>\n<ol>\n<li>用户输入总秒数 (注意默认值)</li>\n<li>计算 时，分，秒 (封装函数) 里面包含数字补 0</li>\n<li>打印</li>\n</ol>\n<p><strong>计算公式</strong>：计算时分秒</p>\n<p>小时：h = parseInt (总秒数 / 60/60%24)</p>\n<p>分钟：m = parseInt (总秒数 / 60%60)</p>\n<p>秒数：s = parseInt (总秒数 %60)</p>\n<p>最终样式:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211905959.png\" alt=\"image-20230426193430898\"></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入一个时间戳:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">sayDate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">let</span> h <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">%</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">/</span><span class=\"token number\">60</span><span class=\"token operator\">%</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">let</span> m <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>t<span class=\"token operator\">%</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            h <span class=\"token operator\">=</span> h <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> h <span class=\"token operator\">:</span> h</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            s <span class=\"token operator\">=</span> s <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">:</span> s</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            m <span class=\"token operator\">=</span> m <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">:</span> m</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>h<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">时,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>s<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">分,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>m<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">秒</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"转换为boolean类型\"><a class=\"markdownIt-Anchor\" href=\"#转换为boolean类型\">#</a> 转换为 Boolean 类型🎄</h1>\n<p>💠</p>\n<p>💫在 Java 中布尔值要么是 true，要么是 false，不能被其它的数据定义，逻辑判断必须返回的是一个布尔类型的值不能 <code>false||0</code>  这种操作.</p>\n<p><strong>显示转换</strong>：</p>\n<ol>\n<li><strong>Boolean</strong> (内容)</li>\n</ol>\n<p><font  style=\"color:red\">记忆：’ ’   <span alt=\"blink\"><strong>非空串即为真</strong></span>,  0  <span alt=\"blink\"><strong>非 0 即为真</strong></span>,  undefined,null,false,NaN 转换为布尔值后都是 false, 其余则为 true</font>.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 结果全为假，其余都为真</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">||</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//10</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211907226.png\" alt=\"image-20230427144504662\"></p>\n<h1 id=\"span-altshake对象span\"><a class=\"markdownIt-Anchor\" href=\"#span-altshake对象span\">#</a> <span alt=\"shake\">对象</span>🎄</h1>\n<p>💠</p>\n<p><strong>什么是对象</strong>.</p>\n<ol start=\"0\">\n<li>\n<p>对象 (Object): JavaScript 里的一种数据类型</p>\n</li>\n<li>\n<p>可以理解为是一种无序的数据集合，注意数组是有序的数据集合</p>\n</li>\n<li>\n<p>用来描述某个事物，例如描述一个人</p>\n<ul>\n<li>\n<p>人有姓名，年龄，性别等信息，还有吃饭睡觉敲代码等功能</p>\n</li>\n<li>\n<p>如果有多个变量保存则比较散，用对象比较统一</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>🌠<strong>对象有什么特点</strong>？</p>\n<ol>\n<li>无序的数据的集合</li>\n<li>可以详细的描述某个事物</li>\n</ol>\n<h2 id=\"1对象声明语法\"><a class=\"markdownIt-Anchor\" href=\"#1对象声明语法\">#</a> 1.<strong> 对象声明语法</strong>🎲</h2>\n<p>💠</p>\n<p><strong>声明方式</strong>:</p>\n<p>第一种:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> 对象名 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二种:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> 对象名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>例如</strong>:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明了一个 person 的对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>实际开发中，我们多用花括号.<font title=\"red\">{ } 是对象字面量</font>.</li>\n</ul>\n<h2 id=\"2对象有属性和方法组成\"><a class=\"markdownIt-Anchor\" href=\"#2对象有属性和方法组成\">#</a> 2.<strong> 对象有属性和方法组成</strong>👾</h2>\n<p>💠</p>\n<ul>\n<li>属性：信息或叫特征 (名词). 比如 手机尺寸，颜色，重量等…</li>\n<li>方法：功能或叫行为 (动词). 比如 手机打电话，发短信，玩游戏…</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> 对象名 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">属性名</span><span class=\"token operator\">:</span> 属性值<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">方法名</span><span class=\"token operator\">:</span> <span class=\"token function\">方法</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3属性\"><a class=\"markdownIt-Anchor\" href=\"#3属性\">#</a> 3.<strong> 属性</strong>🎯</h2>\n<p>💠</p>\n<p>数据描述性的信息称为属性，如人的姓名，身高，年龄，性别等，一般是名词性的</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>属性都是成对出现的，包括属性名和值，他们之间使用英文<span alt=\"blink\"> <code>:</code> </span> 分隔</p>\n</li>\n<li>\n<p>多个属性之间使用英文<span alt=\"blink\"> <code>,</code> </span>分隔</p>\n</li>\n<li>\n<p>属性就是依附在对象上的变量 (外面是变量，对象内是属性)</p>\n</li>\n<li>\n<p>属性名可以使用 &quot; &quot; 或’ ',<font title=\"red\">一般情况下省略</font>, 除非名称遇到特殊符号如<span alt=\"wavy\">空格，中横线</span>等</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 声明对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token comment\">//Object &#123;uname: \"刘桑\", age: 18, gender: \"女\"&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"4对象使用\"><a class=\"markdownIt-Anchor\" href=\"#4对象使用\">#</a> 4.<strong> 对象使用</strong>🃏</h2>\n<p>💠</p>\n<ul>\n<li>对象本质是无序的数据集合，操作数据无非就是<font title=\"red\"><span alt=\"blink\">增</span></font>,<font title=\"red\"><span alt=\"blink\">删</span></font>,<font title=\"red\"><span alt=\"blink\">改</span></font>,<font title=\"red\"><span alt=\"blink\">查</span></font> 语法:</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211907549.png\" alt=\"image-20230427203737796\"></p>\n<h3 id=\"属性-查️\"><a class=\"markdownIt-Anchor\" href=\"#属性-查️\">#</a> 属性 - 查⛵️</h3>\n<p>声明对象，并添加了若干属性后，可以使用<span alt=\"blink\"> <code>.</code> </span>获得对象中属性对应的值，称之为属性访问。</p>\n<p><strong>语法</strong>：<font title=\"red\">对象名</font><span alt=\"blink\"> <code>.</code> </span><font title=\"blue\">属性名</font></p>\n<p>简单理解就是获得对象里面的属性值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用 对象名。属性名 的方式来获取对象的信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token comment\">//18</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token comment\">// 女</span></pre></td></tr></table></figure><h3 id=\"属性-改️\"><a class=\"markdownIt-Anchor\" href=\"#属性-改️\">#</a> 属性 - 改⚙️</h3>\n<p><strong>语法</strong>：<font title=\"red\">对象名</font><span alt=\"blink\"> <code>.</code> </span><font title=\"blue\">属性名</font> <span alt=\"blink\"> <code>=</code> </span> <span alt=\"shake\">新值</span>.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用 对象名。属性名 的方式来获取对象的信息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token comment\">//18</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token comment\">// 女</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 修改对象的属性值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>obj<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token comment\">//20</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token comment\">// 男</span></pre></td></tr></table></figure><h3 id=\"属性-增️\"><a class=\"markdownIt-Anchor\" href=\"#属性-增️\">#</a> 属性 - 增⚡️</h3>\n<p><strong>语法</strong>：<font title=\"red\">对象名</font><span alt=\"blink\"> <code>.</code> </span><font title=\"blue\">属性名</font> <span alt=\"blink\"> <code>=</code> </span> <span alt=\"shake\">新值</span>.</p>\n<ul>\n<li>如果对象中存在属性则为 <span alt=\"shake\">改</span>，如果属性不存在则为 <span alt=\"shake\">增</span> .</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj<span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> <span class=\"token string\">'敲代码'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token comment\">//Object &#123;uname: \"刘桑\", age: 18, gender: \"女\", hobby: \"敲代码\"&#125;</span></pre></td></tr></table></figure><h3 id=\"属性-删了解\"><a class=\"markdownIt-Anchor\" href=\"#属性-删了解\">#</a> 属性 - 删 (了解)🍡</h3>\n<p><strong>语法</strong>：<span alt=\"shake\"> <code>delete</code> </span> <font title=\"red\">对象名</font><span alt=\"blink\"> <code>.</code> </span><font title=\"blue\">属性名</font></p>\n<p><span alt=\"wavy\"><font style=\"color:red\">在严格模式下这种操作是不允许的所以作为了解即可</font></span>.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>gender</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token comment\">//Object &#123;uname: \"刘桑\", age: 18&#125;</span></pre></td></tr></table></figure><h3 id=\"属性-查的另外一种写法span-altshake-span\"><a class=\"markdownIt-Anchor\" href=\"#属性-查的另外一种写法span-altshake-span\">#</a> 属性 - 查的另外一种写法<span alt=\"shake\">🎮 </span>.</h3>\n<p><font style=\"color:red\">对于多次属性或加 - 等属性，点操作就不能用了</font>。</p>\n<p>我们可以采取：<font title=\"red\"><strong>对象 [‘属性’]</strong></font> 方式，<span alt=\"wavy\">单引号</span>和<span alt=\"wavy\">双引号</span>都可以</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token string-property property\">'user-name'</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'女'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 这种方式会被解析为 user 减去 name 结果: NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>user<span class=\"token operator\">-</span>name<span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'user-name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>对象访问属性有哪两种方式？\n<ul>\n<li>点形式 <font title=\"red\">对象名</font><span alt=\"blink\"> <code>.</code> </span><font title=\"blue\">属性名</font></li>\n<li>[ ] 形式 <font title=\"red\"><strong>对象 [‘属性’]</strong></font></li>\n</ul>\n</li>\n<li>两种方式有什么区别？\n<ul>\n<li>点后面的属性名一定不要加引号</li>\n<li>[ ] 里面的属性名一定加引号</li>\n<li>后期不同使用场景会用到不同的写法</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"5对象中的方法\"><a class=\"markdownIt-Anchor\" href=\"#5对象中的方法\">#</a> 5. 对象中的方法🎄</h2>\n<p>💠</p>\n<p>数据行为性的信息称为方法，如跑步，唱歌等，一般是动词性的，其本质是函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'andy'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi~~~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>方法是由方法名和函数两部分构成，它们之间使用：分隔</li>\n<li>多个属性之间使用英文，分隔</li>\n<li>方法是依附在对象中的函数</li>\n<li>方法名可以使用 &quot;&quot; 或’’, 一般情况下省略，除非名称遇到特殊符号如空格，中横线等。</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入名称:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我的名字是:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 我的名字是：张三</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">它的名字是:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 它的名字是：刘桑</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token function-variable function\">sayNo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'哈喽,哈喽'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">sayNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>声明对象，并添加了若干方法后，可以使用 <code>.</code>  调用对象中函数，称之为方法调用。</li>\n<li>也可以添加形参和实参</li>\n<li><font title=\"red\">注意：千万别忘了给方法名后面加小括号</font></li>\n</ul>\n<h2 id=\"6遍历对象\"><a class=\"markdownIt-Anchor\" href=\"#6遍历对象\">#</a> 6. 遍历对象🎯</h2>\n<p>💠</p>\n<p>for 遍历对象的问题：</p>\n<ol>\n<li>对象里面是无序的键值对，没有规律，不像数组里面有规律的下标</li>\n<li>对象没有像数组一样的 length 属性，所以无法确定长度</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token comment\">//0 1 2 数组的下标 索引号 但是是字符串类型的 '0' '1' '2'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><font style=\"color:red\">不推荐使用 for in 来遍历数组</font>.</li>\n<li><font style=\"color:green\">但是适合用于遍历对象，对象不能使用 for 来遍历因为不知道它的长度没有 length 方法</font>.</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用 for in 遍历对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// console.log(item)//'name','age','gender'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 遍历出对象的属性名，以第二种方式来将对象的所有属性信息打印出来，不能使用第一种方式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 刘桑，18, 男</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   cnsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined，undefined，undefined</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  如果使用 console.log (obj.item) 来打印的话就相当于是</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console.log (obj.'name') 这种写法是报错的，而第二种方式则必须代码引号</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console.log (obj [item])</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  \t\t\t|</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  \t\t\t| 相当于</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  \t\t\tv</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  console.log (obj ['name'])</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><mark>一般不用这种方式遍历数组，主要是用来遍历对象</mark>。</li>\n<li>for in 语法中的 item 是一个变量，在循环的过程中依次代表对象的属性名</li>\n<li>由于 item 是变量名称，所以必须使用 [``] 语法解析</li>\n<li>一定记住：<font style=\"color:red\">item</font>是获得对象的<font style=\"color:red\">属性名</font>，<font style=\"color:red\">对象名 [item]</font>是获得<font title=\"red\">属性值</font>.</li>\n</ul>\n<p><strong>总结</strong>：</p>\n<ol>\n<li>遍历对象用哪个语句？\n<ul>\n<li><font title=\"red\">for in</font>.</li>\n</ul>\n</li>\n<li>遍历对象中，<font style=\"color:red\">for item in obj</font>, 获得对象属性是哪个，获得值是哪个？\n<ul>\n<li>获得对象属性是<font style=\"color:red\">item</font>.</li>\n<li>获得对象值是<font  style=\"color:red\">obj[item]</font>.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"案例-遍历数组对象\"><a class=\"markdownIt-Anchor\" href=\"#案例-遍历数组对象\">#</a> 案例 - 遍历数组对象📏</h2>\n<p>💠</p>\n<p>思路：</p>\n<blockquote>\n<p>先遍历数组，通过下标访问每一个对象然后对每一个对象进行对象的属性的遍历就可以了。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">hometown</span><span class=\"token operator\">:</span><span class=\"token string\">'河北省'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">hometown</span><span class=\"token operator\">:</span><span class=\"token string\">'河南省'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'小刚'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">hometown</span><span class=\"token operator\">:</span><span class=\"token string\">'山西省'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'小丽'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">hometown</span><span class=\"token operator\">:</span><span class=\"token string\">'山东省'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 遍历数组中所有对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> student<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 定义变量存储遍历的每一个对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> student<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">//for in 变量对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"7内置对象\"><a class=\"markdownIt-Anchor\" href=\"#7内置对象\">#</a> 7. 内置对象🍶</h2>\n<p>💠</p>\n<h3 id=\"内置对象是什么\"><a class=\"markdownIt-Anchor\" href=\"#内置对象是什么\">#</a> 内置对象是什么💟</h3>\n<p>JavaScript 内部提供的对象，包含各种属性和方法给开发者调用</p>\n<p>比如说我们之前一直在使用的一些内置对象：</p>\n<ul>\n<li>document.write( )</li>\n<li>console.log( )</li>\n<li>…</li>\n</ul>\n<h3 id=\"内置对象math\"><a class=\"markdownIt-Anchor\" href=\"#内置对象math\">#</a> 内置对象 Math🥇</h3>\n<p><strong>介绍</strong>：Math 对象是 JavaScript 提供的一个<font title=\"red\">&quot;数学&quot; 对象</font>.</p>\n<p><strong>作用</strong>：提供了一系列做<font title=\"red\">数学运算</font>的方法</p>\n<p><strong>Math 对象包含的方法有</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回算术常量 e, 即自然对数的底数 (约等于 2.718).</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">E</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 返回 2 的自然对数 (约等于 0.693).</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 返回 10 的自然对数 (约等于 2.302).</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LN10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 返回以 2 为低的 e 的对数 (约等于 1.4426950408889634).</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG2E</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回以 10 为低的 e 的对数 (约等于 0.434).</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">LOG10E</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回圆周率</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 返回 2 的平方根的倒数 (约等于 0.707).</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">SQRT1_2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 返回 2 的平方根 (约等于 1.414).</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token constant\">SQRT2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211917208.png\" alt=\"image-20230428094928366\"></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>abc(x)</td>\n<td>返回 x 的绝对值</td>\n</tr>\n<tr>\n<td>acos(x)</td>\n<td>返回 x 的反余弦值</td>\n</tr>\n<tr>\n<td>asin(x)</td>\n<td>返回 x 的反正弦值</td>\n</tr>\n<tr>\n<td>atan(x)</td>\n<td>以介于 - PI/2 于 PI/2 弧度之间的数值来返回 x 的反正切值</td>\n</tr>\n<tr>\n<td>atan2(x,y)</td>\n<td>返回 x 轴到点 (x,y) 的角度 (介于 - PI/2 于 PI/2 弧度之间)</td>\n</tr>\n<tr>\n<td>ceil(x)</td>\n<td>对数进行上舍入</td>\n</tr>\n<tr>\n<td>cos(x)</td>\n<td>返回数的余弦</td>\n</tr>\n<tr>\n<td>exp(x)</td>\n<td>返回 E<sup>x</sup> 的指数</td>\n</tr>\n<tr>\n<td>floor(x)</td>\n<td>对 x 进行下舍入</td>\n</tr>\n<tr>\n<td>log(x)</td>\n<td>返回数的自然对数 (低为 e)</td>\n</tr>\n<tr>\n<td>max(x,y,z…n)</td>\n<td>返回 x,y,z…n 中的最高值</td>\n</tr>\n<tr>\n<td>min(x,y,z…n)</td>\n<td>返回 x,y,z,…n 中的最低值</td>\n</tr>\n<tr>\n<td>pow(x,y)</td>\n<td>返回 x 的 y 次幂值</td>\n</tr>\n<tr>\n<td>random()</td>\n<td>返回 0~1 之间的随机数</td>\n</tr>\n<tr>\n<td>round(x)</td>\n<td>四舍五入</td>\n</tr>\n<tr>\n<td>sin(x)</td>\n<td>返回数的正弦</td>\n</tr>\n<tr>\n<td>sqrt(x)</td>\n<td>返回数的平方根</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"生成任意范围随机数\"><a class=\"markdownIt-Anchor\" href=\"#生成任意范围随机数\">#</a> 生成任意范围随机数📟</h3>\n<p><font title=\"red\">Math.random()</font>随机函数，返回一个 0~1 之间，并且包括 0 但不包括 1 的随机小数 [0,1) (左闭右开)</p>\n<ul>\n<li>如何生成 0~10 的随机数呢？</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>如何生成 5~10 的随机数？</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>如何生成 N~M 之间的随机数？</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">M</span> <span class=\"token operator\">-</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">N</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 取到 N ~ M 的随机整数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">ran</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span><span class=\"token constant\">N</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">M</span> <span class=\"token operator\">-</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">N</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">ran</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>如何随机抽取数组中的一个人？</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 小数乘数组长度 3 就是 0.9999 * 3 = 2.999, 随机数范围也就是向下取整后 0~2, 但是不会包括 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>arr<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"案例猜数字游戏\"><a class=\"markdownIt-Anchor\" href=\"#案例猜数字游戏\">#</a> 案例 — 猜数字游戏👾</h3>\n<p>💠</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ran <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 声明在循环外随机出一个固定数字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">生成的随机数为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>ran<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token comment\">// 开关变量，判断是否执行 ' 次数已经用完了'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录剩余次数变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 循环三次，只有三次猜测机会</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入一个数字:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ran <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">猜小了,剩余次数:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      c<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> ran<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">猜大了,剩余次数:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>c<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      c<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token comment\">// 如果猜对了执行改方法体将 flag 赋值为 fase 不执行下面的 ' 次数已经用完了 ' 这句话</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">猜对了,仅用了</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'次数已经用完了'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"随机生成颜色\"><a class=\"markdownIt-Anchor\" href=\"#随机生成颜色\">#</a> 随机生成颜色🌍</h2>\n<p>💠</p>\n<p>需求：该函数接收一个布尔类型参数，表示颜色的格式是十六进制还是 rbg 格式</p>\n<ol>\n<li>如果参数传递的是 true 或者无参数，则输出一个随机十六进制的颜色</li>\n<li>如果参数传递的是 false，则输出一个随机 rbg 的颜色</li>\n<li>格式:</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRnadomColor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//#ffffff</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRnadomColor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//rgb(255,255,255)</span></pre></td></tr></table></figure><p>分析：</p>\n<p>提示：16 进制颜色格式为：’#ffffff’ 其中 f 可以是任意 0~f 之间的字符，需要用到数组</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>提示：rgb 颜色格式为：‘rbg (255,255,255)’ 其中 255 可以是任意 0~255 之间的数字</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span>tu<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            border<span class=\"token operator\">-</span>radius<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"tu\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 定义数组存储 16 进制颜色的每一个字符</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 判断 flag 执行对应的操作</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 声明字符串初始值为#</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 循环 6 次取 6 个随机的字符出来</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 随机数范围是数组的 0~ 长度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 将随机去除的字符拼接到字符串中</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                str <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 返回字符串</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> str</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 随机出三个 0~255 之间不同的数字</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">255</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 返回 rbg</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rgb(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num1<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num2<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       &lt;div class=\"tu\" bgcolor=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">getRandomColor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>       &lt;/div></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"扩展-术语解释\"><a class=\"markdownIt-Anchor\" href=\"#扩展-术语解释\">#</a> 扩展 - 术语解释🎄</h1>\n<p>💠</p>\n<p>知道一些术语，让自己更专业</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>解释</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关键字</td>\n<td>在 JavaScript 中有特殊意义的词汇</td>\n<td>let,var,function,if,else,switch,cae,break</td>\n</tr>\n<tr>\n<td>保留字</td>\n<td>在目前的 JavaScript 中没意义<br>但未来可能会具有特殊意义的词汇</td>\n<td>int,short,long,char</td>\n</tr>\n<tr>\n<td>标识符</td>\n<td>变量名，函数名的另一种叫法</td>\n<td>无</td>\n</tr>\n<tr>\n<td>表达式</td>\n<td>能产生值的代码，一般配合运算符出现</td>\n<td>10 + 3,age &gt;= 18</td>\n</tr>\n<tr>\n<td>语句</td>\n<td>一段可执行的代码</td>\n<td>if(  ) for(  )</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"扩展-基本数据类型和引用数据类型\"><a class=\"markdownIt-Anchor\" href=\"#扩展-基本数据类型和引用数据类型\">#</a> 扩展 - 基本数据类型和引用数据类型🎋</h1>\n<p>💠</p>\n<p><strong>目标</strong>：了解基本数据类型和引用数据类型的存储方式</p>\n<p>简单类型又叫做基本数据类型或者<font title=\"red\">值类型</font>，复杂类型又叫做<font title=\"red\">引用类型</font>.</p>\n<ul>\n<li>\n<p><strong>值类型</strong>：<span alt=\"blink\"><strong>简单数据类型</strong></span>/<span alt=\"blink\"><strong>基本数据类型</strong></span>，在存储时变量中存储的是值本身，因此叫值类型</p>\n<ul>\n<li>string,number,boolean,undefined,null</li>\n</ul>\n</li>\n<li>\n<p><strong>引用类型</strong>：<span alt=\"blink\"><strong>复杂数据类型</strong></span>，在存储时变量中存储的仅仅是地址 (<span alt=\"blink\"><strong>引用</strong></span>)，因此叫做引用数据类型</p>\n<ul>\n<li>通过<font title=\"blue\">new</font>关键字创建的对象 (系统对象 ，自定义对象)，如 Object,Array,Date 等</li>\n</ul>\n</li>\n</ul>\n<p>堆栈空间分配区别：</p>\n<ol>\n<li>栈 (操作系统)：由操作系统自定分配释放存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈；\n<ul>\n<li><font title=\"red\">简单数据类型存放到栈里面</font>.</li>\n</ul>\n</li>\n<li>堆 (操作系统)：存储复杂类型 (对象)，一般由程序员分配释放，若程序员不释放，由垃圾回收机制回收。\n<ul>\n<li><font title=\"red\">引用数据类型存放到堆里面</font>.</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">subgraph</span> 内存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tA<span class=\"token text string\">[栈]</span> &amp; B<span class=\"token text string\">((堆))</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">end</span></pre></td></tr></table></figure><h2 id=\"1简单类型的内存分配\"><a class=\"markdownIt-Anchor\" href=\"#1简单类型的内存分配\">#</a> 1. 简单类型的内存分配📦</h2>\n<p>值类型 (简单数据类型)：string,number,boolean,undefined,null</p>\n<p>值类型变量的数据直接存放在变量 (栈空间) 中</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211918650.png\" alt=\"image-20230428172733416\"></p>\n<h2 id=\"2复杂类型的内存分配\"><a class=\"markdownIt-Anchor\" href=\"#2复杂类型的内存分配\">#</a> 2. 复杂类型的内存分配🍵</h2>\n<p>引用类型 (复杂数据类型)：通过 new 关键字创建的对象 (系统对象，自定义对象)，如 Object,Array,Date 等</p>\n<p>引用类型变量 (栈空间) 里存放的是地址，真正的对象是里存放在堆空间中</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211918502.png\" alt=\"image-20230428172952146\"></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> num</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num1 <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211918793.png\" alt=\"image-20230428194205915\"></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> obj</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211918648.png\" alt=\"image-20230428194814928\"></p>\n",
            "tags": [
                "计算机学科",
                "js"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/js/ECMASCript/ECMAScript-%E4%B8%8A/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/web/js/ECMASCript/ECMAScript-%E4%B8%8A/",
            "title": "ECMAScript-上",
            "date_published": "2024-04-02T06:23:31.948Z",
            "content_html": "<h1 id=\"变量font-stylecolorred重要font\"><a class=\"markdownIt-Anchor\" href=\"#变量font-stylecolorred重要font\">#</a> 变量 (<font style=\"color:red\">重要</font>)🗡</h1>\n<h2 id=\"变量是什么\"><a class=\"markdownIt-Anchor\" href=\"#变量是什么\">#</a> 变量是什么❓</h2>\n<p>理解变量是计算机存储数据的<font style=\"color:red\">&quot;容器&quot;</font>。🔺</p>\n<h3 id=\"1变量\"><a class=\"markdownIt-Anchor\" href=\"#1变量\">#</a> 1. 变量🗜</h3>\n<ul>\n<li>白话：变量就是一个装东西的盒子。📋</li>\n<li>通俗：变量是计算机中用来<strong>存储数据</strong>的<font style=\"color:red\">&quot;容器&quot;</font>, 它可以让计算机变得有记忆。</li>\n<li>注意：⚠️:<font style=\"color:red\">变量不是数据本身，它们仅仅是一个用于存储数值的容器，可以理解为是一个个用来装东西的纸箱子</font>。</li>\n</ul>\n<h2 id=\"变量基本使用️\"><a class=\"markdownIt-Anchor\" href=\"#变量基本使用️\">#</a> 变量基本使用⭐️</h2>\n<h3 id=\"1声明变量\"><a class=\"markdownIt-Anchor\" href=\"#1声明变量\">#</a> 1. 声明变量🗽</h3>\n<p>要想使用变量，首先需要创建变量（也称为声明变量或者定义变量）</p>\n<p><strong>语法</strong>：🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> 变量名</pre></td></tr></table></figure><ul>\n<li>声明变量由两部分构成：声明关键字，变量名（标识）</li>\n<li>let 即关键字（let :  允许，许可，让，要），所谓关键字是系统提供的专门用来声明（定义）变量的词语</li>\n<li><u>var 是我们的前任请把 var 忘掉</u>   —  [pink 老师]</li>\n</ul>\n<p><strong>举例</strong>：🌰</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>我们声明了一个 name 变量</li>\n<li>name 即<font style=\"color:red\"><strong>变量的名称</strong></font>, 也叫标识符 🔺</li>\n</ul>\n<h3 id=\"2变量赋值\"><a class=\"markdownIt-Anchor\" href=\"#2变量赋值\">#</a> 2. 变量赋值🗿</h3>\n<p>定义了一个变量后，你就能够初始化它（赋值），在变量名之后跟上一个 &quot;=&quot;(赋值运算符) , 然后是数值。</p>\n<p>声明变量的时候直接完成赋值操作，这种操作也成为，变量<font style=\"color:red\">初始化</font>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 声明一个变量名为 name, 并赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'DouKx'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 弹出变量的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>⚠️<strong>注意</strong>：是通过<font style=\"color:red\">变量名</font>来获得变量里面的数据。</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109343.png\" alt=\"image-20230420184038312\"></p>\n<p>🌟<strong>目标</strong>：掌握变量的更新以及了解同时声明多个变量的写法。</p>\n<h3 id=\"声明多个变量️\"><a class=\"markdownIt-Anchor\" href=\"#声明多个变量️\">#</a> 声明多个变量⭐️</h3>\n<p>🎮<strong>语法</strong>：多个变量中间用<mark>逗号隔开</mark>。</p>\n<p>📋<strong>说明</strong>：看上去代码长度更短，但并<font style=\"color:red\"><strong>不推荐</strong></font>这样，为了更好的可读性，请一行只声明一个变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 变量的更新</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将 name1 和 name2 都赋值为 刘桑</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> name1 <span class=\"token operator\">=</span> name2 <span class=\"token operator\">=</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1+1 = 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 同时声明多个变量并且它们赋值也是不同的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span> <span class=\"token punctuation\">,</span> name1 <span class=\"token operator\">=</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 同时声明多个变量并且后续进行赋值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结果 张三 李四</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"3更新变量\"><a class=\"markdownIt-Anchor\" href=\"#3更新变量\">#</a> 3. 更新变量🗽</h3>\n<p>变量赋值后，还可以通过简单的给它一个不同的值来更新它。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 声明了一个 name 变量，同时里面存放了 ' 张三 ' 这个数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 这里不允许多次声明一个变量，没有理由重新声明变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109833.png\" alt=\"image-20230420212356880\"></p>\n<p>⚠️<font style=\"color:red\"><strong>注意</strong></font>：let 不允许多次声明同一个变量</p>\n<h2 id=\"变量的本质\"><a class=\"markdownIt-Anchor\" href=\"#变量的本质\">#</a> 变量的本质🌍</h2>\n<p>🥑<strong>内存</strong>：计算机中存储数据的地方，相当于一个空间</p>\n<p>⛵️<strong>变量本质</strong>：是程序在内存中申请的一块用来存放数据的小空间，js 的变量是存储到内存中的</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109258.png\" alt=\"image-20230420221511897\"></p>\n<ul>\n<li>在内存中开辟一个空间</li>\n<li>通过变量名找到值</li>\n</ul>\n<h2 id=\"变量命名规则与规范\"><a class=\"markdownIt-Anchor\" href=\"#变量命名规则与规范\">#</a> 变量命名规则与规范💎</h2>\n<p>🌐<strong>规则</strong>：必须遵守，不遵守报错（法律层面）</p>\n<p>🌐<strong>规范</strong>：建议，不遵守不会报错，但不符合业内通识（道德层面）</p>\n<p>🌐<strong>规则 1</strong>:</p>\n<ul>\n<li>不能用关键字⚠️\n<ul>\n<li>关键字：有特殊含义的符号，JavaScript 内置的一些英语词汇，例如:let , var , if , for 等</li>\n</ul>\n</li>\n<li>只能用下划线，字母，数字，$ 组成，且数字不能开头</li>\n<li>字母严格<font style=\"color:red\"><strong>区分大小写</strong></font>, 如 Age 和 age 是不同的变量</li>\n</ul>\n<p>🌐<strong>规则 2</strong>:</p>\n<ul>\n<li>起名要有意义</li>\n<li>遵守驼峰命名法\n<ul>\n<li>第一个单词首字母小写，后面每个单词首字母大写，例如:userName</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109421.png\" alt=\"image-20230421082931446\"></p>\n<h2 id=\"变量扩展-let和var的区别\"><a class=\"markdownIt-Anchor\" href=\"#变量扩展-let和var的区别\">#</a> 变量扩展 - let 和 var 的区别🌓</h2>\n<p><strong>let 和 var 区别</strong>:</p>\n<p>在较旧的 JavaScript, 使用关键字 var 来声明变量，而不是 let</p>\n<p>var 现在开发中一般不再使用它，只是我们可能再老版程序中看到它.</p>\n<p><strong>let 为了解决 var 的一些问题</strong></p>\n<p><strong>var 声明</strong>:🎯</p>\n<ul>\n<li>可以先使用，在声明 (不合理)</li>\n<li>var 声明过的变量可以重复声明 (不合理)</li>\n<li>比如变量提升，全局变量，没有块级作用域等等</li>\n</ul>\n<p><strong>结论</strong>:</p>\n<p><font style=\"color:red\">var 就是个 bug, 以后声明变量统一使用 let</font> .🎫</p>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组🗡</h1>\n<ul>\n<li>数组 (Array) — 一种将<strong>一组数据存储在单个变量名下</strong>的优雅方式</li>\n</ul>\n<p>声明方式:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     ↓    ↓</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    变量  数组字面量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 赋值方式，每个数据之间用逗号隔开</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> 数组名 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>数据<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>数据<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>数据n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>数组是按顺序保存的，所以每个数据都有自己的编号</li>\n<li>计算机中的编号从 0 开始，所以数据 1 的编号为 0, 数据 2 的编号为 1, 以此类推</li>\n<li>在数组中，数据的编号也叫<font style=\"color:red\"><strong>索引</strong>或<strong>下标</strong></font>.</li>\n<li><font style=\"color:red\">JavaScript 中数组可以存储任意类型的数据</font>.⚠️</li>\n<li>取出来是什么类型的，就根据这种类型特点来访问</li>\n<li>最大索引号 + 1 等于数组长度💫</li>\n</ul>\n<p>取值语法:🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>数组名<span class=\"token punctuation\">[</span>下标<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>例如🌸</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr[2]数据类型:'</span><span class=\"token operator\">+</span><span class=\"token keyword\">typeof</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr[1]数据类型:'</span><span class=\"token operator\">+</span><span class=\"token keyword\">typeof</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'arr[0]下标值:'</span><span class=\"token operator\">+</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109924.png\" alt=\"image-20230421092921594\"></p>\n<p><strong>一些术语</strong>:🏁</p>\n<ul>\n<li>元素：数组中保存的每个数据都叫数组元素</li>\n<li>下标 / 索引：数组中数据的编号</li>\n<li>长度：数组中数据的个数，通过数组的 length 属性获得 (最大索引号 + 1 等于数组长度)</li>\n</ul>\n<h1 id=\"常量\"><a class=\"markdownIt-Anchor\" href=\"#常量\">#</a> 常量🏑</h1>\n<p>📗 <strong>概念</strong>：使用 const 声明的变量为 “常量”.</p>\n<p><strong>使用场景</strong>：当某个变量永远<strong>不会改变</strong>的时候，就可以使用 const 来声明，而不是 let</p>\n<p><strong>命名规范</strong>：变量名统一大写📗</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明一个常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 输出常量值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意</strong>:⚠️<font style=\"color:red\">常量不允许重新赋值，声明的时候必须赋值 (初始化)</font>.</p>\n<p><strong>尝试改变常量值的后果</strong> 🔴</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">const</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109161.png\" alt=\"image-20230421094855064\"></p>\n<p>💠</p>\n<ul>\n<li>let  -  现在实际开发变量声明方式.</li>\n<li>var  -  以前的声明变量的方式，会有很多问题</li>\n<li>const  -  类似于 let, 但是变量的值无法被修改</li>\n</ul>\n<h1 id=\"数据类型️\"><a class=\"markdownIt-Anchor\" href=\"#数据类型️\">#</a> 数据类型⭐️</h1>\n<p>计算机世界中的万事万物都是数据</p>\n<p>计算机程序可以处理大量的数据，为什么要给数据分类？</p>\n<ul>\n<li>1. 更加充分和高效的利用内存</li>\n<li>2. 更加方便程序员的使用数据</li>\n</ul>\n<h2 id=\"js数据类型整体分为两大类\"><a class=\"markdownIt-Anchor\" href=\"#js数据类型整体分为两大类\">#</a> JS 数据类型整体分为两大类🎋</h2>\n<ul>\n<li>基本数据类型🌟</li>\n<li>引用数据类型🌟</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109177.png\" alt=\"image-20230421191824939\"></p>\n<h2 id=\"数字类型-number\"><a class=\"markdownIt-Anchor\" href=\"#数字类型-number\">#</a> 数字类型 Number🔩</h2>\n<p>💠</p>\n<p>即我们数学中学习到的数字，可以是整数，小数，正数，负数</p>\n<p>JavaScript 中的正数，负数，小数等 统一称为 数字类型.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//number 数据类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> number1 <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number:'</span><span class=\"token operator\">+</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number1:'</span><span class=\"token operator\">+</span>number1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109512.png\" alt=\"image-20230421192638721\"></p>\n<p><font  style=\"color:red\">注意事项</font>:⚠️</p>\n<blockquote>\n<p><font style=\"color:red\">JS 是弱数据类型，变量到底属于那种类型，只有赋值之后，我们才能确认</font>.</p>\n<p><font style=\"color:red\">Java 是强数据类型，例如: int a = 3 必须是整数类型</font>.</p>\n</blockquote>\n<p>数字可以有很多种操作，比如：乘法  <code>*</code>  , 除法  <code>/</code>  , 加法  <code>+</code>  , 减法  <code>-</code>  . 等等，所以经常和算术运算符一起.</p>\n<p>数学运算符也叫<strong>算术运算符</strong>，主要包括 加，减，乘，除，取余 (求模).</p>\n<ul>\n<li><code>+</code> : 求和</li>\n<li><code>-</code> : 求差</li>\n<li><code>*</code> : 求积</li>\n<li><code>/</code> : 求商</li>\n<li><code>%</code> : 取模 (取余数)\n<ul>\n<li>开发中经常作为某个数字是否被整除</li>\n</ul>\n</li>\n</ul>\n<p>🌟取模计算技巧：前面的数比后面的数大结果就是后面的数，比如：3 % 4 = 3</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"运算符执行的优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符执行的优先级\">#</a> 运算符执行的优先级🎄</h2>\n<p>💠</p>\n<p>同时使用多个运算符编写程序时，会按着某种顺序先后执行，我们称为优先级。</p>\n<p>JavaScript 中，优先级越高越先被执行，<font style=\"color:red\">优先级相同时以从左向右执行</font>.</p>\n<ul>\n<li>乘，除，取余 优先级相同</li>\n<li>加，减优先级相同</li>\n<li>乘，除，取余优先级大于加，减</li>\n<li>使用（）可以提升优先级</li>\n<li>📋总结：先乘除后加减，有括号先算括号里面的</li>\n<li>取余运算符开发中的使用场景是？\n<ul>\n<li>用来判断某个数字是否能被整除🌟</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//7</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 当优先级相同时会从左向右计算</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 得出：2 % 9 * 2 = 4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>⚠️NaN 代表一个计算错误，它是一个不正确的或者一个未定义的数学操作所得到的结果</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘桑'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr></table></figure><ul>\n<li>⚠️NaN 是粘性的，任何对 NaN 的操作都会返回 NaN</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr></table></figure><ul>\n<li>⚠️两个 NaN 进行比较，结果为 false</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"字符串类型string\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型string\">#</a> 字符串类型 (string)🎄</h2>\n<p>💠</p>\n<p>通过<font style=\"color:red\">单引号 (’ ') , 双引号 (&quot;&quot;) 或反引号 (``) 包裹的数据都叫字符串</font>, 单引号和双引号没有本质上的区别，<font style=\"color:red\">推荐使用单引号</font>.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 三种不同的声明字符串类型的形式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'单引号-刘桑'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"双引号-刘桑\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">反引号-刘桑</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109301.png\" alt=\"image-20230421210501160\"></p>\n<p>⚠️如果不使用单引号，双引号，反引号形式来声明字符串的话会报错:<mark>Uncaught ReferenceError: 刘桑 is not defined</mark>.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 三种不同的声明字符串类型的形式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//console.log (' 单引号 - 刘桑 ');</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//console.log (\"双引号 - 刘桑\");</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//console.log (`反引号 - 刘桑`);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> 刘桑<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught ReferenceError: 刘桑 is not defined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109191.png\" alt=\"image-20230421210833740\"></p>\n<p>⚠️<strong>注意事项</strong>：</p>\n<ol>\n<li>\n<p>无论单引号或是双引号必须成对使用</p>\n</li>\n<li>\n<p>单引号 / 双引号可以互相嵌套，但是不以自己嵌套自己 (口诀：<strong>外双内单</strong>或者<strong>外单内双</strong>)</p>\n<p>🌰</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外部'</span>内部<span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught SyntaxError: missing ) after argument list</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部\"</span>内部<span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Uncaught SyntaxError: missing ) after argument list</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外部\"内部\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 外部 \"内部\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部'内部'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 外部 ' 内部'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>必要时可以使用转义符 <code>\\</code>  ，输出单引号或双引号</p>\n<p>🌰</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外部\\'内部\\''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 外部 ' 内部'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部\\\"内部\\\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 外部 \"内部\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'外部\"内部\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 外部 \"内部\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"外部'内部'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 外部 ' 内部'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211109544.png\" alt=\"image-20230421212739008\"></p>\n</li>\n</ol>\n<h3 id=\"字符串拼接️\"><a class=\"markdownIt-Anchor\" href=\"#字符串拼接️\">#</a> 字符串拼接⭐️</h3>\n<p>💠</p>\n<p><strong>场景</strong>： <code>+</code>  运算符，可以实现字符串的拼接</p>\n<p>🎲<strong>口诀</strong>：数字相加，字符相连</p>\n<p>📗<strong>绝世秘籍<a href=\"../../../java/Java%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93/String%E7%B1%BB%E7%9A%84%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8.md\">出自 Java 文章</a></strong> ：推荐使用 <code>&quot;&quot;+变量</code> 来将这个数据类型转换为字符串类型.</p>\n<h3 id=\"模板字符串️\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串️\">#</a> 模板字符串⭐️</h3>\n<p>💠</p>\n<ul>\n<li><strong>使用场景</strong>\n<ul>\n<li>拼接字符串和变量</li>\n<li>在没有它之前，要拼接变量比较麻烦</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好,我是'</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">',今年'</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">'岁'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>语法</strong>:🎲\n<ul>\n<li>`` (反引号)</li>\n<li>在英文输入模式下按键盘的 tab 键上方的那个键 (1 左边那个键)</li>\n<li>内容拼接变量时，用<font style=\"color:red\">${ }</font>包住变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'刘桑'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">我叫</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,我今年</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>age<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">岁了</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211114281.png\" alt=\"image-20230422161321755\"></p>\n<p>字符串拼接比较麻烦，我们可以使用<font style=\"color:red\"><strong>模板字符串</strong></font>, 可以让我们拼接字符串更加简便</p>\n<p>模板字符串使用注意事项:⚠️</p>\n<ul>\n<li>用<strong>反引号</strong>来包含数据</li>\n<li>用 **${变量名}** 来使用变量</li>\n</ul>\n<h2 id=\"布尔类型font-stylecolorredbooleanfont\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型font-stylecolorredbooleanfont\">#</a> 布尔类型 (<font style=\"color:red\">boolean</font>)🎄</h2>\n<p>💠</p>\n<p>表示<mark>肯定</mark>或<mark>否定</mark>时在计算机中对应的是布尔类型数据</p>\n<p>它有两个固定的值<mark> true</mark> 和<mark> false</mark>, 表示<mark>肯定的数据用 true</mark> (真), 表示<mark>否定的数据用 false</mark> (假)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JavaScript好玩不?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'好玩'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不好玩'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"未定义类型font-stylecolorredundefinedfont\"><a class=\"markdownIt-Anchor\" href=\"#未定义类型font-stylecolorredundefinedfont\">#</a> 未定义类型 (<font style=\"color:red\">undefined</font>)🎄</h2>\n<p>💠</p>\n<p>未定义是比较特殊的类型，只有一个值  <code>undefined</code>  ,<font style=\"color:red\"> 除字符串外 (数字类型，布尔值) 对 undefined 进行运算操作结果为 NaN</font>.</p>\n<p><strong>什么情况出现未定义类型</strong>❓</p>\n<p>📋<mark>只声明变量，不赋值</mark>的情况下，<mark> 变量的默认值为</mark> <code>undefined</code> , 一般很少 **[<strong>直接</strong>]** 为某个变量赋值为 <code>undefined</code> .</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 声明一个变量未给值就是 undefined</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> name<span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 隐式类型转换 '1' = name - 1 = NaN</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">-</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined+null=NaN</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211115810.png\" alt=\"image-20230422163720559\"></p>\n<p><strong>工作中的使用场景</strong>:📋</p>\n<p>我们开发中经常声明一个变量，等待传送过来的数据</p>\n<p>如果我们不知道这个数据是否传递过来，此时我们可以通过检测这个变量是不是 undefined, 就判断用户是否有数据传递过来</p>\n<h3 id=\"案例-查看是否载入jqueryjs文件\"><a class=\"markdownIt-Anchor\" href=\"#案例-查看是否载入jqueryjs文件\">#</a> 案例 - 查看是否载入 jQuery.js 文件🌳</h3>\n<p>💠</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> jQuery<span class=\"token operator\">!=</span><span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jQuery已经加载完成'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   \t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jQuery未被加载'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>📋如果没有引入 jQuery.js 文件则会执行 else 下语句，如果引入了就会执行 if 下语句</p>\n<h2 id=\"font-stylecolorrednullfont空类型\"><a class=\"markdownIt-Anchor\" href=\"#font-stylecolorrednullfont空类型\">#</a> <font style=\"color:red\">null</font>(空类型)🎄</h2>\n<p>💠</p>\n<p>📋在 Java 中<font style=\"color:red\">null</font>只能是<strong>对象</strong>或者是<strong>字符串</strong>和<strong>包装类</strong>类型，对象不能使用 + 进行拼接，包装类赋值为 null 会直接报错<font style=\"color:red\">NullpointerException</font>，字符串使用 + 就会拼接为 null1</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>String str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//null1</span></pre></td></tr></table></figure><p>JavaScript 中的 null 仅仅是一个代表 “无” , “空” 或 “值未知” 的特殊值，<font style=\"color:red\">null 是一个 object 对象</font>.</p>\n<p>null 任何数字等于其数字值，true 为 1，fasle 为 0，加字符串则会拼接</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">//null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">//object</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name + 1 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> , 值为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 类型 object1 值 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name + null 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> , 值为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 类型 objectnull 值 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name - 1 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> , 值为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 类型 NaN 值 - 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name - '1' 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">-</span> <span class=\"token string\">'1'</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> , 值为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name <span class=\"token operator\">-</span> <span class=\"token string\">'1'</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 类型 NaN 值 - 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name + '1' 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> , 值为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 类型 object1 值 null1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name + 1 的type = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> , 值为 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token comment\">//object1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211139930.png\" alt=\"image-20230422164915348\"></p>\n<h6 id=\"null和undefined区别\"><a class=\"markdownIt-Anchor\" href=\"#null和undefined区别\">#</a> <strong>null</strong> 和<strong> undefined</strong> 区别:🗡</h6>\n<ul>\n<li><code>undefined</code> : 表示声明变量没有赋值，如果检测变量是 <code>undefined</code>  就说明没有值传递过来，undefined 对任何数据操作运算结果都为 NaN</li>\n<li><code>null</code> : 表示赋值了，但是内容为空，null 任何数字等于其数字值，true 为 1，fasle 为 0，加字符串则会拼接</li>\n</ul>\n<p><a href=\"#undefined%E4%B8%8Enull%E7%9A%84%E8%AE%A1%E7%AE%97%E5%8C%BA%E5%88%AB\"><strong>查看 null 和 undefined 计算区别</strong></a> .</p>\n<h6 id=\"null开发中的使用场景\"><a class=\"markdownIt-Anchor\" href=\"#null开发中的使用场景\">#</a> null 开发中的使用场景:🗡</h6>\n<p>💠</p>\n<p><strong>官方解释</strong>：把 null 作为尚未创建的对象</p>\n<p><strong>白话</strong>：将来有个变量里面存放的是一个对象，但是对象还没创建好，可以先给个 null</p>\n<h2 id=\"undefined与null的计算区别\"><a class=\"markdownIt-Anchor\" href=\"#undefined与null的计算区别\">#</a> undefined 与 null 的计算区别🗡</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//-1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//null+'1' 字符串相加</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//null1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//null-'1' 隐式转换为 NaN</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//-1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//object1,num 是一个对象为 null 加 1 为 object1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t <span class=\"token comment\">//true: 1 , fasle: 0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> person</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 出字符串外 (数字类型，布尔值) 对 undefined 进行运算操作结果为 NaN</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//undefined 加上字符串为 undefined1, 字符串相加</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//'1' 隐式转换为数字类型减去 undefined 结果为 NaN \"-\" 号会隐式转换字符串为数字</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">-</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined+null=NaN</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> person<span class=\"token punctuation\">)</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">)</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211258044.png\" alt=\"image-20230425091036124\"></p>\n<h2 id=\"检测数据类型️\"><a class=\"markdownIt-Anchor\" href=\"#检测数据类型️\">#</a> 检测数据类型⭐️</h2>\n<p>💠</p>\n<p><font style=\"color:red\"><strong>通过 typeof 关键字</strong></font>检测数字类型</p>\n<p>typeof 运算符可以返回被检测的数据类型，它支持两种语法形式:</p>\n<ol>\n<li>作为运算符: <font style=\"color:red\">typeof x</font>(常用的写法)</li>\n<li>函数形式: typeof (x)</li>\n</ol>\n<p>换言之，有括号和没有括号，得到的结果都是一样的，所以我们直接使用<font style=\"color:red\">运算符</font>的写法.</p>\n<h1 id=\"数据类型转换\"><a class=\"markdownIt-Anchor\" href=\"#数据类型转换\">#</a> 数据类型转换🎄</h1>\n<p>💠</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您要输入的值:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您输入的数据类型为:'</span><span class=\"token operator\">+</span><span class=\"token keyword\">typeof</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在 JavaScript 中<strong> prompt</strong>,<strong> 表单</strong>，<strong> 单选框</strong>，<strong> 复选框</strong>，<strong> 多选框</strong>，这些表单默认取过来的值就是<font style=\"color:red\">string</font>类型</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211258894.png\" alt=\"image-20230422172333098\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211258141.png\" alt=\"image-20230422172350041\"></p>\n<h2 id=\"为什么需要类型转换\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要类型转换\">#</a> 为什么需要类型转换🌳</h2>\n<p>💠</p>\n<p>JavaScript 是弱数据类型: JavaScript 也不知道变量到底属于那种数据类型，只有赋值了才清楚.</p>\n<p>坑💫 使用表单，prompt 获取过来的数据默认都是字符串类型的，此时就不能直接简单的进行加法运算</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1000'</span><span class=\"token operator\">+</span><span class=\"token string\">'2000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出结果: 10002000</span></pre></td></tr></table></figure><p>此时需要转换变量的数据类型</p>\n<p>通俗来说，就是<font style=\"color:red\">把一种数据类型的变量转换成我们需要的数据类型</font>.</p>\n<h2 id=\"隐式转换\"><a class=\"markdownIt-Anchor\" href=\"#隐式转换\">#</a> 隐式转换🌳</h2>\n<p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换成为隐式转换</p>\n<p>规则：</p>\n<ul>\n<li><code>+</code>  号两边只要有一个是字符串，都会把另外一个转换成字符串</li>\n<li>⚠️<font style=\"color:red\">除了 <code>+</code>  以外的算术运算符</font>，比如 <code>-</code> , <code>*</code> , <code>/</code> , 都会把数据转成数字类型</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>转换类型不明确，靠经验才能总结</li>\n</ul>\n<p>小技巧：🗡</p>\n<ul>\n<li><font style=\"color:red\"> <code>+</code>  号作为正号解析可以转换成数字型</font>.</li>\n<li><font style=\"color:red\">任何数据和字符串相加，结果都是字符串</font>.</li>\n</ul>\n<p><strong>与 Java 的区别</strong>：⚠️</p>\n<ul>\n<li>在 Java 中只能使用 + 号来将其它类型转换为字符串进行拼接，而不能使用 <code>-</code> , <code>*</code> , <code>/</code> , <code>%</code>  来进行对字符串的运算否则将会报错:<font style=\"color:red\">Operator ‘%’ cannot be applied to ‘int’, ‘java.lang.String’</font>.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211259000.png\" alt=\"image-20230423105637508\"></p>\n<p>⚠️<font style=\"color:red\"><strong>注意</strong></font>：JavaScript 中 += 也会将其它数据类型隐式转换为字符串类型或者 -= 转换为数字类型，但在 Java 中这么写就会报错</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 隐式转换</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 从左到右检测到有字符串类型则将后面的也转换成字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//p1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'p'</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 减号检测到有数字类型则将字符串转换为数字类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// 减，乘，除都类似只有加号不同</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'2'</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span> <span class=\"token operator\">/</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">%</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span> <span class=\"token operator\">%</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 前面加上 + 为正数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//12</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token operator\">+</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">// 将字符串转换为数字型</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//12</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token operator\">+</span><span class=\"token string\">'12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"显式转换\"><a class=\"markdownIt-Anchor\" href=\"#显式转换\">#</a> 显式转换🌳</h2>\n<p>💠</p>\n<p>编写程序时过程依靠系统内部的隐式转换是不严谨的，因为隐式转换规律并不清晰，大多是靠经验总结的规律<br>\n为了避免隐式转换带来的问题，通常根逻辑需要对数据进行显式转换</p>\n<p><strong>概念</strong>:🎲</p>\n<p>自己写代码告诉系统该转成什么类型</p>\n<h3 id=\"转换为数字型\"><a class=\"markdownIt-Anchor\" href=\"#转换为数字型\">#</a> 转换为数字型🌲</h3>\n<ul>\n<li>\n<p>Number (数据)</p>\n<ul>\n<li>转成数字类型</li>\n<li>如果字符串内容里有非数字，转换失败时结果为 NaN (Not a Number) 既不是一个数字</li>\n<li>NaN 也是 Number 类型的数据，代表非数字</li>\n</ul>\n</li>\n<li>\n<p>转换为数字型有四种方式：</p>\n<ul>\n<li>第一个为：隐式类型转换使用:   <code>+</code></li>\n<li>第二个为：显式类型转换使用：Number (数据)</li>\n<li>第三个为：显式类型转换使用: parseInt (数据)\n<ul>\n<li>只保留整数</li>\n</ul>\n</li>\n<li>第四个为：显式类型转换使用: parseFloat (数据)\n<ul>\n<li>可以保留小数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token string\">'18.1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age的数据类型:'</span><span class=\"token operator\">+</span><span class=\"token keyword\">typeof</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'强制类型转换为Number:'</span><span class=\"token operator\">+</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18.1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'强制类型转换为Number后的数据类型:'</span><span class=\"token operator\">+</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'将abc强制转换为数字型:'</span><span class=\"token operator\">+</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年薪:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//string</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年薪:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年薪:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">let</span> parseAge <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> parseAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number, 只能保留整数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">let</span> parseFloatAge <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> parseFloatAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number, 可以保留小数，也可以保留整数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">18.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18, 只能保留整数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18.1, 可以保留小数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   num <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">let</span> num3 <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18, 也可以保留整数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc12.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>；<span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>；<span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>🔴parseInt 和 parseFloat 可以检测参数中是否有数字，从左边开始检测到有非数字为止，如果并没有或者说一开始就是非数字的字符那么结果就是 NaN</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 检测前面是否有数字类型，直到没有数字类型为止</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 检测没有数字类型结束前面没有检测到数字类型则为 NaN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//12</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'150px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//150</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'px12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1a2r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>总结</strong>: 📗</p>\n<p>转换为数字类型有三种显式类型转换和一种隐式类型转换</p>\n<p>显式转换: Number (数据),parseInt (数据),parseFloat (数据)</p>\n<p>隐式转换: +</p>\n<ul>\n<li>案例：使用 prompt 将两个数相加 alert 返回结果</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 第一种写法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'相加的结果为:'</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果不加括号将会又被转换为字符串类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 第二种写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">let</span> num3 <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">相加的结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>num3<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 同样使用上面的写法写 prompt 上转换这里不会被转换为字符串类型，例如下面代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">let</span> num3 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">相加的结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num2 <span class=\"token operator\">+</span> num3<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>结合以上知识的综合案例：确认订单案例</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token selector\">h1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token selector\">#table,tr,td</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> red 1px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>rebeccapurple<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>确认订单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入商品名称:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入商品价格:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入商品数量:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">let</span> address <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入收货地址:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            &lt;table id=\"table\"></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                &lt;tr></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    &lt;th>商品名称&lt;/th></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    &lt;th>商品价格&lt;/th></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    &lt;th>商品数量&lt;/th></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    &lt;th>总价&lt;/th></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    &lt;th>收货地址&lt;/th></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                &lt;/tr></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                &lt;tr></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    &lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    &lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 元&lt;/td></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    &lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num1<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    &lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>total<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 元&lt;/td></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    &lt;td></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>address<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/td></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                &lt;/tr></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            &lt;/table></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211305440.gif\" alt=\"test\"></p>\n<h1 id=\"常见的报错信息\"><a class=\"markdownIt-Anchor\" href=\"#常见的报错信息\">#</a> 常见的报错信息🎄</h1>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211306335.png\" alt=\"image-20230423130251705\"></p>\n<p>翻译: const 声明中缺少初始化式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//const, 声明变量后必须赋值</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211306176.png\" alt=\"image-20230423130448726\"></p>\n<p>翻译：年龄没有定义</p>\n<p>分析：📋</p>\n<ul>\n<li>提示 age 变量没有定义过</li>\n<li>很可能 age 变量没有声明和赋值</li>\n<li>或者我们输出变量名和声明的变量不一致引起的（简单说写错变量名了）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211306285.png\" alt=\"image-20230423130709427\"></p>\n<p>翻译：标识符‘年龄’已经声明</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，let 不允许重复声明</span></pre></td></tr></table></figure><p>分析：</p>\n<ul>\n<li>提示 &quot;age&quot; 已经声明</li>\n<li>很大概率是因为重复声明了一个变量</li>\n<li>注意 let 或者 const 不允许多次声明同一个变量</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211306307.png\" alt=\"image-20230423130939493\"></p>\n<p>翻译:  . 分配给常量变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误，常量不能被重新赋值</span></pre></td></tr></table></figure><ul>\n<li>常量被重新赋值了</li>\n<li>常量不能被重新赋值</li>\n</ul>\n<h1 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符🎄</h1>\n<p><a href=\"https://eqeq.js.org/#zh\">练习 JavaScript 运算符游戏网站</a> - 主要练习： ==  运算符</p>\n<h2 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符🌳</h2>\n<p>💠</p>\n<p>📋 <code>+</code> , <code>-</code> , <code>*</code> , <code>/</code> , <code>%</code>  都属于算术运算符</p>\n<p>取模 <code>%</code> : 被取模数为 0 就会 NaN, 而在 Java 中会报错算术异常 /by zero</p>\n<pre><code>JavaScript: console.log(10 % 0)//NaN\nJava: ArithmeticException: / by zero\n</code></pre>\n<p>取模数 取模 被取模数 被取模数大于 取模数则 取 取模数比如:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 只要后面比前面的大取模都是前面的 4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符🌳</h2>\n<p>💠</p>\n<p>对变量进行赋值的运算符就是赋值运算符</p>\n<ul>\n<li>💫已经学过的运算符:  <code>=</code>  <font style=\"color:red\">将等号右边的值赋予给左边，要求左边必须是一个容器</font>.</li>\n<li>🌠其它赋值运算符:\n<ul>\n<li>+=</li>\n<li>-=</li>\n<li>*=</li>\n<li>/=</li>\n<li>%=</li>\n</ul>\n</li>\n<li>+= 出现是为了简化代码，比如让 let num = 10,num 加 5 怎么写呢？\n<ul>\n<li>num += 5</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//num+1=2 但是这个 2 并没有赋值给任何人所以 num 还是 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num+1 = '</span><span class=\"token operator\">+</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   num1 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num1 = num1 + 1 = '</span><span class=\"token operator\">+</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   num2 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'num2 += 2 = '</span><span class=\"token operator\">+</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"一元运算符\"><a class=\"markdownIt-Anchor\" href=\"#一元运算符\">#</a> 一元运算符🌳</h2>\n<p>💠</p>\n<p>众多的 JavaScript 的运算符可以根据所需表达式的个数，分为<font style=\"color:red\"><strong>一元运算符，二元运算符，三元运算符</strong></font>.</p>\n<p>比如：一元运算符</p>\n<ul>\n<li>例如：正号，负号</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>比如：二元运算符</p>\n<ul>\n<li>例如：变量 + 变量</li>\n<li>例如：变量 &gt; 变量  或者 &lt;或者 = 或者&gt;= 或者 &lt;= 或者 ==</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>用到了两个操作数，表达式的个数为 2，所以 + 为二元运算符</li>\n</ul>\n<p>比如：三元运算符</p>\n<ul>\n<li>例如：变量 &gt; 值？true:false;</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 判断 num 的值是否大于 11, 大于为 true, 否则为 false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//true:YES , false:NO</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> num <span class=\"token operator\">></span> <span class=\"token number\">11</span> <span class=\"token operator\">?</span> <span class=\"token string\">'YES'</span><span class=\"token operator\">:</span><span class=\"token string\">'NO'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NO</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>用到了三个操作数，表达式的个数为 3</li>\n</ul>\n<p><strong>自增</strong>：</p>\n<ul>\n<li>符号：+ +</li>\n<li>作用：让变量的值 + 1</li>\n</ul>\n<p><strong>自减</strong>：</p>\n<ul>\n<li>符号：- -</li>\n<li>作用：让变量的值 - 1</li>\n</ul>\n<p><strong>使用场景</strong>：经常用于<font style=\"color:red\">计数</font>来使用。比如进行 10 次操作，用它来计算进行了多少次了</p>\n<ul>\n<li><strong>自增运算符的使用</strong>：</li>\n</ul>\n<h3 id=\"前置自增\"><a class=\"markdownIt-Anchor\" href=\"#前置自增\">#</a> 前置自增🌲</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><p>每次执行 1 次，当前变量数值加 1</p>\n<p>其作用相当于 num += 1</p>\n<h3 id=\"后置自增\"><a class=\"markdownIt-Anchor\" href=\"#后置自增\">#</a> 后置自增🌲</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><p>每执行 1 次，当前变量数值加 1</p>\n<p>其作用相当于 num += 1</p>\n<h3 id=\"前置自增和后置自增的区别\"><a class=\"markdownIt-Anchor\" href=\"#前置自增和后置自增的区别\">#</a> 前置自增和后置自增的区别🌲</h3>\n<p>前置自增和后置自增如果参与运算就有区别：（难点，但是了解即可）</p>\n<p><strong>前置自增</strong>:</p>\n<ul>\n<li>前置自增：先自增再使用（记忆口诀：++ 在前 <font style=\"color:red\">先加</font>）</li>\n<li>先计算后输出结果</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 参与运算时 num+1 的值只在运算范围内有效</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 执行到此处 num 的值为 2 ++2 + 1 = 4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>后置自增</strong>:</p>\n<ul>\n<li>后置自增：先使用再自增（记忆口诀：++ 在后 <font style=\"color:red\">后加</font>）</li>\n<li>先输出结果在进行自增</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>📗前置自增和后置自增在独立使用时二者并没有差别！</p>\n<h3 id=\"面试题\"><a class=\"markdownIt-Anchor\" href=\"#面试题\">#</a> 面试题🗡</h3>\n<p>这个计算的结果和 Java 相同的💫</p>\n<p>⭐️提示：看下面的计算公式要想到<mark>优先级</mark>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//num++ :1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//+</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//++num :2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 计算后原本为 3num++ 自增 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// = 4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//num :3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//3 + 4 = 7</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">++</span> <span class=\"token operator\">+</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//7</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>自我理解的公式为: (1+2+1)+3=7</li>\n<li>(num++ + ++num) + num = 7</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>(1+2+2) = 5</li>\n<li>num + (<ins>num + num</ins>) = 5</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>num <span class=\"token operator\">+</span> num <span class=\"token operator\">+</span> num<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>2+2+2=6</li>\n<li><ins>num + num + num</ins> = 6</li>\n</ul>\n<h2 id=\"比较运算符\"><a class=\"markdownIt-Anchor\" href=\"#比较运算符\">#</a> 比较运算符🌳</h2>\n<p>💠</p>\n<p>比较运算符的介绍</p>\n<ul>\n<li>使用场景：比较两个数据大小，是否相等</li>\n<li>比较运算符\n<ul>\n<li><code>&gt;</code>  : 左边是否大于右边</li>\n<li><code>&lt;</code>  : 左边是否小于右边</li>\n<li><code>&gt;=</code>  : 左边是否大于或等于右边</li>\n<li><code>&lt;=</code>  : 左边是否小于或等于右边</li>\n<li><code>==</code>  : <font style=\"color:red\">左右两边值是否相等</font>.</li>\n<li><code>===</code>  : <font style=\"color:red\">左右两边是否类型和值都相等</font>.</li>\n<li><code>!==</code>  : 左右两边是否不全等</li>\n<li><code>!=</code>  : 左右两边值是否不相等</li>\n</ul>\n</li>\n<li>比较结果为 boolean 类型，即只会得到 true 或 false</li>\n<li><font style=\"color:red\">开发中判断是否相等，强烈推荐使用 <code>===</code> .</font>.</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">//1=='1' 会将 '1' 转换为数字类型，比较为 true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//NaN 不等于任何人包括它自己</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">// 判断类型和值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token comment\">// 不判断类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>字符串比较，是比较字符对应的 ASCII 码</p>\n<p>比较规则是一一对应比较大小</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211717773.png\" alt=\"image-20230423183209921\"></p>\n<ul>\n<li>从左往右依次比较</li>\n<li>如果第一位一样在比较第二位，以此类推</li>\n<li>尽量不要比较小数，因为小数有精度问题</li>\n</ul>\n<p><a href=\"https://www.asciim.cn/\">查看 ASCII 码表</a></p>\n<ul>\n<li>💫<font style=\"color:red\">不同类型之间比较会发生隐式转换</font>.\n<ul>\n<li><mark>最终把数据隐式转换成 number 类型再比较</mark> 。</li>\n<li>开发中，如果进行准确比较推荐使用 <code>===</code> , 或者 <code>!==</code> .</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符🌳</h2>\n<p>💠</p>\n<p><strong>使用场景</strong>：逻辑运算符用来解决多重条件判断</p>\n<p><strong>语法</strong>:🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>日常读法</th>\n<th>特点</th>\n<th>口诀</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>逻辑与</td>\n<td>并且</td>\n<td>符号两边都为 true 结果才为 true</td>\n<td>一假则假</td>\n</tr>\n<tr>\n<td>||</td>\n<td>逻辑或</td>\n<td>或者</td>\n<td>符号两边有一个 true 就为 true</td>\n<td>一真则真</td>\n</tr>\n<tr>\n<td>！</td>\n<td>逻辑非</td>\n<td>取反</td>\n<td>true 变 false<br>false 变 true</td>\n<td>真变假，假变真</td>\n</tr>\n</tbody>\n</table>\n<p>👹</p>\n<ul>\n<li>\n<p><code>&amp;&amp;</code> , <code>||</code>  它们都是具有短路性的</p>\n<ul>\n<li><code>&amp;&amp;</code> : 前面为 false 则不会执行后面的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li><code>||</code> : 前面为 true 则不会执行后面的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> <span class=\"token operator\">++</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n<p>🌠这只是执行流程的区别，与返回的布尔值不耽搁</p>\n<h3 id=\"逻辑中断\"><a class=\"markdownIt-Anchor\" href=\"#逻辑中断\">#</a> 逻辑中断🌴</h3>\n<p>💠</p>\n<p>💫在 Java 中布尔值要么是 true，要么是 false，不能被其它的数据定义，逻辑判断必须返回的是一个布尔类型的值不能 <code>false||0</code>  这种操作.</p>\n<p>开发中，还会见到一下写法：</p>\n<p>解释：简单说就是初始化参数<mark>避免 undefined</mark> 的。</p>\n<blockquote>\n<p>0 在 JavaScript 中 为 false 如果传入的参数为 0 或者没有传入参数那么，就会短路或判断，如果为 false 则赋值为 0 作为初始值，如果不为 0 则赋值为传入的值其它值都是 true 不会指向 || 后面的操作。</p>\n<p>在 JavaScript 中，记住一句话： <mark>非 0 即为真</mark>！ <strong style=\"color:red\">这句话在 Java 中不存在因为 Java 中数字不能代表布尔值</strong>。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   x <span class=\"token operator\">=</span> x <span class=\"token operator\">||</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   y <span class=\"token operator\">=</span> y <span class=\"token operator\">||</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其实类似参数的默认值写法</p>\n<ul>\n<li><strong>短路</strong>：只存在于 &amp;&amp; 和 || 中，当满足一定条件会让右边代码不执行</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>短路条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>左边为 false 就短路</td>\n</tr>\n<tr>\n<td>||</td>\n<td>左边为 true 就短路</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>原因</strong>：通过左边能得到整个式子的结果，因此没必要再判断右边</li>\n<li><strong>非 0 即为真</strong>！！！📗\n<ul>\n<li>Java 语言的布尔类型变量，其赋值只能是 true 和 false，所以非 0 即 true 并不存在于 java 中。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 非 0 即为真</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//22</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span> <span class=\"token operator\">||</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>🌠<strong>结论</strong>：短路 || 前为真则返回前值，前为假则判断后，后为真或者假都返回后值</li>\n</ul>\n<h2 id=\"运算符优先级\"><a class=\"markdownIt-Anchor\" href=\"#运算符优先级\">#</a> 运算符优先级🌳</h2>\n<p>💠</p>\n<ul>\n<li>一元运算符中<font style=\"color:red\">逻辑非 (!) 的优先级很高</font>.</li>\n<li><font style=\"color:red\">逻辑与 比 逻辑或优先级高</font>.（口诀：先与后或）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n<th>顺序</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>小括号</td>\n<td>()</td>\n</tr>\n<tr>\n<td>2</td>\n<td>一元运算符</td>\n<td>++ – !</td>\n</tr>\n<tr>\n<td>3</td>\n<td>算术运算符</td>\n<td>先 * / % 后 + -</td>\n</tr>\n<tr>\n<td>4</td>\n<td>关系运算符</td>\n<td>&gt; &gt;= &lt; &lt;=</td>\n</tr>\n<tr>\n<td>5</td>\n<td>相等运算符</td>\n<td><code>==</code>   <code>!=</code>   <code>===</code>   <code>!==</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td>逻辑运算符</td>\n<td>先 &amp;&amp; 后 ||</td>\n</tr>\n<tr>\n<td>7</td>\n<td>赋值运算符</td>\n<td>=</td>\n</tr>\n<tr>\n<td>8</td>\n<td>逗号运算符</td>\n<td>,</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"问-一个变量满足三个条件\"><a class=\"markdownIt-Anchor\" href=\"#问-一个变量满足三个条件\">#</a> (问)- 一个变量满足三个条件🎄</h1>\n<p>💍</p>\n<p>问题：如果让一个变量满足 if 条件为 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 的条件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 初始值 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重写 valueOf</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 vlaue 值，并自增 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'符合条件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'不符合条件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>结果:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211717083.png\" alt=\"image-20230423142229703\"></p>\n<h1 id=\"语句\"><a class=\"markdownIt-Anchor\" href=\"#语句\">#</a> 语句🎉</h1>\n<h2 id=\"表达式和语句\"><a class=\"markdownIt-Anchor\" href=\"#表达式和语句\">#</a> 表达式和语句🎺</h2>\n<p>💠</p>\n<p><strong>什么是表达式</strong>:❓</p>\n<p>表达式是可以被求值的代码，JavaScript 引擎会将其计算出一个结果</p>\n<p>例如:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num<span class=\"token operator\">++</span></pre></td></tr></table></figure><ul>\n<li>这些都是式子，都可以被求出值</li>\n</ul>\n<p>💠</p>\n<p><strong>什么是语句</strong>:❓</p>\n<p>语句是一段可以执行的代码。</p>\n<p>比如：prompt ( ) 可以弹出一个输入框，还有 if 语句 for 循环语句等等</p>\n<p><strong>表达式和语句的区别</strong>：🚧</p>\n<p><strong>表达式</strong>：<font style=\"color:red\">因为表达式可被求值，所以它可以写在赋值 语句的右侧</font>.</p>\n<ul>\n<li>表达式 \tnum = 3 + 4</li>\n</ul>\n<p><strong>语句</strong>：<font style=\"color:red\">而语句不一定有值，所以比如 alert ( ) for 和 break 等语句就不能被用于赋值</font>.</p>\n<ul>\n<li>语句\t alert () 弹出对话框 console.log () 控制台打印输出</li>\n</ul>\n<h2 id=\"分支语句\"><a class=\"markdownIt-Anchor\" href=\"#分支语句\">#</a> 分支语句🏆</h2>\n<h6 id=\"顺序结构️\"><a class=\"markdownIt-Anchor\" href=\"#顺序结构️\">#</a> 顺序结构〽️</h6>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>代码1<span class=\"token arrow operator\">--></span>代码2<span class=\"token arrow operator\">--></span>代码3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"分支结构️\"><a class=\"markdownIt-Anchor\" href=\"#分支结构️\">#</a> 分支结构〽️</h6>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>代码1<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">满足条件</span><span class=\"token arrow operator\">--></span></span>代码2<span class=\"token arrow operator\">--></span>代码3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>代码1<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">不满足</span><span class=\"token arrow operator\">--></span></span>代码3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h6 id=\"循环结构️\"><a class=\"markdownIt-Anchor\" href=\"#循环结构️\">#</a> 循环结构〽️</h6>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TD<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>代码1<span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span><span class=\"token label property\">重复执行</span><span class=\"token arrow operator\">--></span></span>重复代码<span class=\"token arrow operator\">--></span>代码3<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>分支语句可以让我们有<font style=\"color:red\">选择性</font>的执行想要的代码</p>\n<h3 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\">#</a> if 语句🍃</h3>\n<p>💠</p>\n<p>if 语句有三种使用：单分支，双分支，多分支</p>\n<p><strong>单分支使用语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   满足条件要执行的代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>括号内的条件为 true 时，进入大括号里执行代码</li>\n<li>小括号内的结果若不是布尔类型时，会发生隐式转换为布尔类型</li>\n<li>如果大括号只有一个语句，大括号可以省略，但是，不提倡这么做</li>\n</ul>\n<p><strong>多分支使用</strong>:</p>\n<p>💠</p>\n<p><strong>使用场景</strong>：适合于有多个结果的时候，比如学习成绩可以分为：优 \t良 \t中 \t差</p>\n<p><strong>释义</strong>：</p>\n<ul>\n<li>先判断条件 1，若满足条件 1 就执行代码 1，其它不执行</li>\n<li>若不满足则向下判断条件 2，满足条件 2 执行代码 2，其它不执行</li>\n<li>若依然不满足继续往下判断，依此类推</li>\n<li>若以上条件都不满足，执行 else 里的代码</li>\n<li>注：可以写 N 个条件</li>\n</ul>\n<p><strong>判断学生成绩</strong>:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入成绩:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">90</span> <span class=\"token operator\">&amp;&amp;</span> str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'优'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">80</span> <span class=\"token operator\">&amp;&amp;</span> str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">89</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'优良'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">70</span> <span class=\"token operator\">&amp;&amp;</span> str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">79</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'及格'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">>=</span> <span class=\"token number\">60</span> <span class=\"token operator\">&amp;&amp;</span> str <span class=\"token operator\">&lt;=</span> <span class=\"token number\">69</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'差'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202307211719583.gif\" alt=\"test\"></p>\n<h4 id=\"案例-输入一个年份判断是闰年还是平年\"><a class=\"markdownIt-Anchor\" href=\"#案例-输入一个年份判断是闰年还是平年\">#</a> 案例 - 输入一个年份判断是闰年还是平年🌠</h4>\n<p>💠</p>\n<p><strong>分析</strong>：🎮</p>\n<ol>\n<li>能被 4 整除但不能被 100 整除，或者能被 400 整除的年份是闰年，否则都是平年</li>\n<li>需要逻辑运算符</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   \t<span class=\"token keyword\">let</span> year <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年份:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'闰年'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'平年'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"三元运算符\"><a class=\"markdownIt-Anchor\" href=\"#三元运算符\">#</a> 三元运算符🌴</h3>\n<p>💠</p>\n<p><strong>使用场景</strong>：其实是比 if 双分支更简单的写法，可以使用三元表达式</p>\n<ul>\n<li><strong>符号</strong>：？与：配合使用</li>\n</ul>\n<p><strong>语法</strong>：🎯</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>条件 <span class=\"token operator\">?</span> 满足条件执行的代码 <span class=\"token operator\">:</span> 不满足条件执行的代码</pre></td></tr></table></figure><ul>\n<li>一般用来取值</li>\n</ul>\n<h4 id=\"输出两个数的最大值\"><a class=\"markdownIt-Anchor\" href=\"#输出两个数的最大值\">#</a> 输出两个数的最大值🌠</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> unum <span class=\"token operator\">=</span> num <span class=\"token operator\">&lt;</span> num1 <span class=\"token operator\">?</span> num1 <span class=\"token operator\">:</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">最大值:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>unum<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\">#</a> switch 语句🌴</h3>\n<p>💠</p>\n<p>释义:</p>\n<ul>\n<li>🌠找到跟小括号里数据<strong>全等</strong>的 case 值，并执行里面对应的代码</li>\n<li>💫若没有全等<font style=\"color:red\">===</font>的则执行 default 里的代码</li>\n<li>📋例：数据若跟值 2 全等，则执行代码 2</li>\n</ul>\n<p>⚠️</p>\n<p><font style=\"color:red\">1.switch case 语句一般用于等值判断，不适合于区间判断</font>.</p>\n<p><font style=\"color:red\">2.switch case 一般需要配合 break 关键字使用，没有 break 会造成 case 穿透</font>.</p>\n<p>语法格式: 🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>数据<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 选择判断表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">case</span> 值<span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>目标值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      代码<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token comment\">// 跳出当前循环结构，执行后面的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">case</span> 值<span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>目标值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      代码<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token comment\">// 跳出当前循环结构，执行后面的代码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>没有对应的目标值则执行<span class=\"token keyword\">default</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      代码n</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token comment\">// 跳出当前循环结构，执行后面的代码，以最后一条语句可以写 break 也可以不写</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"案例实现简单计算器\"><a class=\"markdownIt-Anchor\" href=\"#案例实现简单计算器\">#</a> 案例 — 实现简单计算器</h4>\n<p>需求：用户输入 2 个数字，然后输入 + - * / 任何一个，可以计算结果</p>\n<p>分析：</p>\n<ol>\n<li>用户输入数字</li>\n<li>用户输入不同算术运算符，可以去执行不同的运算 (switch)</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入操作符(+ - * / %):'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入数字:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'+'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           number <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算两个数相加结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>number<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'-'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            number <span class=\"token operator\">=</span> num <span class=\"token operator\">-</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算两个数相减结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>number<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'*'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            number <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算两个数相乘结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>number<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'/'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            number <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算两个数相除结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>number<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'%'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            number <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">计算两个数相取模结果为:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>number<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          \t<span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入正确的计算符号'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"循环语句\"><a class=\"markdownIt-Anchor\" href=\"#循环语句\">#</a> 循环语句🌮</h2>\n<p>💠</p>\n<p><strong>补充知识点</strong>：<font style=\"color:red\">断点调试</font>.(重要)🔴</p>\n<ul>\n<li>\n<p><strong>作用</strong>：学习时可以帮助更好的理解代码运行，工作时可以更快找到 bug</p>\n</li>\n<li>\n<p>浏览器打开调试界面</p>\n<ol>\n<li>按 F12 打开开发者工具</li>\n<li>点到 sources 一栏</li>\n<li>选择代码文件</li>\n</ol>\n</li>\n</ul>\n<img src=\"./images/image-20230424143407847.png\" alt=\"image-20230424143407847\" style=\"zoom:50%;\" />\n<h3 id=\"while循环\"><a class=\"markdownIt-Anchor\" href=\"#while循环\">#</a> while 循环🌳</h3>\n<p>💠</p>\n<p><strong>循环</strong>：重复执行一些操作，<strong>while</strong>: 在… 期间，所以<font style=\"color:red\"><strong>while 循环</strong></font>, 就是在<font style=\"color:red\"><strong>满足条件</strong></font>期间，重复执行某些代码</p>\n<p><strong>while 循环基本语法</strong>:🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>循环条件<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">重复执行的代码</span><span class=\"token punctuation\">(</span>循环体<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>释义：📋</p>\n<ul>\n<li>跟 if 语句很像，都满足小括号里的条件为 true 才会进入<font style=\"color:red\">循环体</font>执行代码</li>\n<li>while 大括号里代码执行完毕后不会跳出，而是继续回到小括号里判断条件是否满足，若满足又执行大括号里的代码，然后再回到小括号判断条件，直到括号内条件不满足，即跳出</li>\n</ul>\n<p><strong>while 循环三要素</strong>:🌠</p>\n<p>循环的本质就是以某个变量为起始值，然后不断产生变化量，慢慢靠近终止条件的过程。<br>\n所以，<font  style=\"color:red\">while 循环需要具备三要素</font>：⚠️</p>\n<ol>\n<li>变量起始值</li>\n<li>终止条件 (没有终止条件，循环会一直执行，造成死循环)</li>\n<li>变量变化量 (用自增或自减)</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 变量的起始值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 循环条件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 我们要执行的代码语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我会循环三次&lt;br>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 自增，用于不满足循环条件结束循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> or <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你猜我为啥不执行'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"dowhile循环\"><a class=\"markdownIt-Anchor\" href=\"#dowhile循环\">#</a> do\twhile 循环🌳</h3>\n<p>💠</p>\n<p><strong>执行流程</strong>：先无条件的执行一次循环后判断循环条件是否成立</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你好,js</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>num<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 条件为 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> or <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1.继续</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2.不玩了</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'1'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                or <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'2'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                or <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入存在的选项'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'do!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>or<span class=\"token punctuation\">)</span><span class=\"token comment\">// 初始条件为 false, 但是先让你玩一局</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>while 和 do\twhile 的区别</strong>：🗡</p>\n<p>while: 执行时先判断循环条件是否成立</p>\n<p>do\twhile: 先无条件执行一次，再判断循环条件是否成立</p>\n<h3 id=\"for循环\"><a class=\"markdownIt-Anchor\" href=\"#for循环\">#</a> for 循环🌳</h3>\n<p>💠</p>\n<p><strong>作用</strong>：重复执行代码</p>\n<p><strong>好处</strong>：把声明起始值，循环条件，变化值写到一起，让人一目了然，它是最常使用的循环形式</p>\n<p>语法格式：🎲</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>变量起始值<span class=\"token punctuation\">;</span>终止条件<span class=\"token punctuation\">;</span>变量变化量<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 变量起始值；终止条件；变量变化量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你好,js&lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>for 循环的最大价值</strong>：<font style=\"color:red\">循环遍历数组</font>.</p>\n<p>📋<strong>需求</strong>：将数组 [‘马超’,‘赵云’,‘张飞’,‘关羽’,‘黄忠’] 依次打印出来</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'马超'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'赵云'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'关羽'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'黄忠'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 循环遍历数组中的元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>end <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 判断如果 i 小于数组长度说明后面还有元素，i+1 略过最后一个的打印</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 写出的元素后面跟着，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 写出最后一个元素后面什么没有</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>效果:</p>\n<p><img src=\"./images/image-20230424164126948.png\" alt=\"image-20230424164126948\"></p>\n<h3 id=\"for循环和while循环的区别\"><a class=\"markdownIt-Anchor\" href=\"#for循环和while循环的区别\">#</a> for 循环和 while 循环的区别🌳</h3>\n<p>💠</p>\n<p><strong>for</strong>: 在已知循环次数的情况下使用 for 循环</p>\n<p><strong>while</strong>：在不确定循环次数的情况下使用 while 循环，它是判断执行的</p>\n<h3 id=\"for循环嵌套\"><a class=\"markdownIt-Anchor\" href=\"#for循环嵌套\">#</a> for 循环嵌套🌳</h3>\n<p>💠</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>外部声明记录循环次数的变量<span class=\"token punctuation\">;</span>循环条件<span class=\"token punctuation\">;</span>变化值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>内部声明记录循环次数的变量<span class=\"token punctuation\">;</span>循环条件<span class=\"token punctuation\">;</span>变化值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      循环体</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>一个循环里再嵌套一个循环，一般用在 for 循环里，当然其它循环也可以嵌套，但是没有不知道循环次数的情况下还要嵌套循环的情况的！<mark>建议循环嵌套使用 for</mark> !</li>\n</ul>\n<p>📋<strong>计算</strong>：每天记住 5 个单词，3 天后一共能记住多少单词？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">第</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">天&lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">记住了</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">个单词&lt;br></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>效果:</p>\n<p><img src=\"./images/image-20230424171529564.png\" alt=\"image-20230424171529564\"></p>\n<h3 id=\"循环跳转\"><a class=\"markdownIt-Anchor\" href=\"#循环跳转\">#</a> 循环跳转🌳</h3>\n<h4 id=\"break\"><a class=\"markdownIt-Anchor\" href=\"#break\">#</a> break🌴</h4>\n<p>💠</p>\n<p>跳出当前循环结构，执行后面的代码</p>\n<h4 id=\"continue\"><a class=\"markdownIt-Anchor\" href=\"#continue\">#</a> continue🌴</h4>\n<p>💠</p>\n<p>结束本次循环，继续下次循环</p>\n<p><strong>区别</strong>：🗡</p>\n<ul>\n<li>continue 退出本次循环，执行下一次循环，一般用于排除或者跳过某一个选项的时候，可以使用 continue</li>\n<li>break 退出整个循环，并不是结束程序，还会执行循环后面的代码，一般用于结果已经得到，后续的循环不需要的时候可以使用</li>\n</ul>\n<h3 id=\"案例-模拟银行存取款\"><a class=\"markdownIt-Anchor\" href=\"#案例-模拟银行存取款\">#</a> 案例 - 模拟银行存取款🎄</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> money <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    1.存钱💲</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    2.取钱💲</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    3.查看余额💲</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    4.退出💫</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> n_num</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'1'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您存的数😁:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这么穷🥱?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你Tm认真的吗🤬?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    money <span class=\"token operator\">+=</span> num</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'您输入的是数字吗?🤔'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'2'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您要取的数🙄:'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你一个穷光蛋🥚取什么钱,没钱滚蛋😡'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                n_num <span class=\"token operator\">=</span> money</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                money <span class=\"token operator\">-=</span> num1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    money <span class=\"token operator\">=</span> n_num</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你TM别那么多钱就别取👿'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'3'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>money <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">您存储的余额为🤨:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>money<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 💲 穷B</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">您存储的余额为🥰:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>money<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 💲</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">'4'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'确认,程序退出 ? -_-!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "js"
            ]
        }
    ]
}