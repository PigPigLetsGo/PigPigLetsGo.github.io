{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"linux\" category",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A4/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%8C%87%E4%BB%A4/",
            "title": "linux网络配置指令",
            "date_published": "2024-04-02T10:00:51.634Z",
            "content_html": "<blockquote>\n<p>指定 ip</p>\n</blockquote>\n<blockquote>\n<p>我们每次开机有可能 ip 地址分配不同如果想要固定 ip 则如下设置操作</p>\n</blockquote>\n<p>说明:</p>\n<p>直接修改配置文件来指定 ip, 并可以连接到外网 (程序员推荐)</p>\n<p>编辑: <code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>\n<ul>\n<li>ifcfg-ens33 文件说明</li>\n</ul>\n<p>DEVICE=eth9     #接口名 (设备，网卡)</p>\n<p>HWADDR=00:0C:2x:6x:0x:xx        #MAC 地址</p>\n<p>TYPE=Ethernet       #网络类型 (通常是 Ethemet)</p>\n<p>UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44       #随机</p>\n<p>#系统启动的时候网络接口是否有效 (yes/no)</p>\n<p>NOBOOT=yes      #默认为 no 则不使用该配置启动网络接口，如果使用则改为 yes</p>\n<p>#IP 的配置方法 [none|static|bootp|dhcp (动态分配主机)] (引导时不使用协议 | 静态分配 IP|BOOTP 协议 | DHCP 协议)</p>\n<p>BOOTPROTO=static</p>\n<p>#IP 地址</p>\n<p>IPADDR=192.168.200.130</p>\n<p>#网关</p>\n<p>GATEWAY=192.168.200.2</p>\n<p>#域名解析器</p>\n<p>DNS1=192.168.200.2</p>\n<blockquote>\n<p>重启网络服务器或者重启系统生效</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> network restart 或者 <span class=\"token function\">reboot</span></pre></td></tr></table></figure><p>再将虚拟机中的网络适配器更改对应的子网掩码和网关</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124822023.png\" alt=\"image-20240208124822023\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124833571.png\" alt=\"image-20240208124833571\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/Linux_NAT%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/Linux_NAT%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/",
            "title": "linux网络原理",
            "date_published": "2024-04-02T10:00:51.632Z",
            "content_html": "<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-21-42-30.png\" alt=\"image_2023-01-05-21-42-30\"></p>\n<p>Linux 虚拟机与 vmnet8 是互通的，如果 Linux 虚拟机访问不到 vmnet8 则将 windows 的防火墙关闭再次尝试</p>\n<p>Linux 虚拟机访问 vmnet8, vmnet8 通过代理 无线网卡来访问外部网络来达到上网</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%A3%81%E7%9B%98/%E6%9F%A5%E8%AF%A2%E7%A3%81%E7%9B%98%E6%83%85%E5%86%B5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%A3%81%E7%9B%98/%E6%9F%A5%E8%AF%A2%E7%A3%81%E7%9B%98%E6%83%85%E5%86%B5/",
            "title": "linux查询磁盘情况",
            "date_published": "2024-04-02T10:00:51.628Z",
            "content_html": "<h2 id=\"查询磁盘情况\"><a class=\"markdownIt-Anchor\" href=\"#查询磁盘情况\">#</a> 查询磁盘情况</h2>\n<p>基本语法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span></pre></td></tr></table></figure><p>查询系统整体磁盘使用情况</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-19-25-29.png\" alt=\"image_2023-01-05-19-25-29\"></p>\n<p><strong>参数说明</strong>：</p>\n<p>Filesystem：标识该文件系统位于哪个分区，因此该列显示的是设备名称；</p>\n<p>1K-blocks：此列表示文件系统的总大小，默认以 KB 为单位</p>\n<p>Used：表示用掉的硬盘空间大小</p>\n<p>Available：表示剩余的硬盘空间大小</p>\n<p>Use%：硬盘空间使用率，如果使用率高达 90% 以上，就需要额外注意，因为容量不足，会严重影响系统的正常运行</p>\n<p>Mounted on：文件系统的挂载点，也就是硬盘挂载的目录位置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token parameter variable\">-h</span> /目录</pre></td></tr></table></figure><p>查询指定目录的磁盘占用情况，默认为当前目录</p>\n<ul>\n<li>参数:</li>\n</ul>\n<p>-s 指定目录占用大小汇总</p>\n<p>-h 带计量单位</p>\n<p>-a 含文件</p>\n<p>–max-depth=1 子目录深度</p>\n<p>-c 列出明细的同时，增加汇总值</p>\n<p>应用实例:</p>\n<p>查询 /opt 目录的磁盘占用情况，深度为 1</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124032631.png\" alt=\"image-20240208124032631\"></p>\n<blockquote>\n<p>练习</p>\n</blockquote>\n<ul>\n<li>统计 /opt 目录下的文件数量</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#ll 列出 目录 | 管道 过滤 以 - 开头的 | 管道 wc:wordcount 统计文件数量 -l 显示统计数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dkx@192  ~  ll /opt<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'^-'</span><span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span>                                                                                        ✔  <span class=\"token number\">901</span>  06:38:02</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr></table></figure><ul>\n<li>统计 /opt 文件夹下目录的个数</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#文件都是以 d 开头的:dwrxwrxwrx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> dkx@192  ~  ll /opt<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'^d'</span><span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span>                                                                                        ✔  <span class=\"token number\">902</span>  06:38:22</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr></table></figure><ul>\n<li>统计 /opt 文件夹下文件的个数，包括子文件夹里的</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#-R 递归显示出所有的文件个数，然后统计数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> dkx@192  ~  ll <span class=\"token parameter variable\">-R</span> /opt<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'^-'</span><span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span>                                                                                     ✔  <span class=\"token number\">904</span>  06:48:48</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1302</span></pre></td></tr></table></figure><ul>\n<li>统计 /opt 文件夹下目录的个数，包括子文件夹里的</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#-R 递归显示出所有的文件夹个数，然后统计数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> dkx@192  ~  ll <span class=\"token parameter variable\">-R</span> /opt<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token string\">'^d'</span><span class=\"token operator\">|</span><span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span>                                                                                     ✔  <span class=\"token number\">903</span>  06:47:27</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">161</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%A3%81%E7%9B%98/Linux%E5%88%86%E5%8C%BA%E6%9C%BA%E5%88%B6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E7%A3%81%E7%9B%98/Linux%E5%88%86%E5%8C%BA%E6%9C%BA%E5%88%B6/",
            "title": "Linux分区",
            "date_published": "2024-04-02T10:00:51.625Z",
            "content_html": "<h2 id=\"linux分区\"><a class=\"markdownIt-Anchor\" href=\"#linux分区\">#</a> Linux 分区</h2>\n<p>原理介绍</p>\n<ol>\n<li>\n<p>对 Linux 来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，Linux 中每个分区都是用来组成整个文件系统的一部分</p>\n</li>\n<li>\n<p>Linux 采用了一种叫 <code>载入</code>  的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来，这时要载入的一个分区将使它的存储空间在一个目录下获得</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-18-11-08.png\" alt=\"image_2023-01-05-18-11-08\"></p>\n<ul>\n<li>查看所有设备挂载情况</li>\n</ul>\n<p>命令: <code>lsblk</code>  或者 <code>lsblk -f</code></p>\n<p>参数: -f : 显示文件系统信息</p>\n<p>​\t\t -m : 显示权限信息</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124153263.png\" alt=\"image-20240208124153263\"></p>\n<ul>\n<li>硬盘说明</li>\n</ul>\n<ol>\n<li>\n<p>Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘</p>\n</li>\n<li>\n<p>对于<font color='red'>IDE 硬盘</font>, 驱动器标识符为 &quot;hdx~&quot;, 其中 &quot;hd&quot; 表明分区所在设备的类型，这里是指 IDE 硬盘了.&quot;x&quot; 为盘号 (a 为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘), &quot;~&quot; 代表分区，前四个分区用数字 1 到 4 表示，它们是主分区或扩展分区，从 5 开始就是逻辑分区。例:hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区，hdb2 表示为第二个 IDE 硬盘上的第二个主分区或扩展分区</p>\n</li>\n<li>\n<p>对于<font color='red'>SCSI 硬盘</font>则标识为 &quot;sdx~&quot;, SCSI 硬盘是用 &quot;sd&quot; 来表示分区所在设备的类型的，其余则和 IDE 硬盘的表示方法一样</p>\n</li>\n</ol>\n<h3 id=\"增加硬盘\"><a class=\"markdownIt-Anchor\" href=\"#增加硬盘\">#</a> 增加硬盘</h3>\n<p>虚拟机增加硬盘的步骤</p>\n<p>在 [虚拟机] 菜单中，选择 [设置], 然后设备列表里添加硬盘，然后一路 [下一步], 中间只有选择磁盘大小的地方需要修改，直到完成，然后<font color='red'>重启系统</font>(才能识别！)</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-18-18-02.png\" alt=\"image_2023-01-05-18-18-02\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124211316.png\" alt=\"image-20240208124211316\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-18-19-22.png\" alt=\"image_2023-01-05-18-19-22\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-18-20-05.png\" alt=\"image_2023-01-05-18-20-05\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-18-22-53.png\" alt=\"image_2023-01-05-18-22-53\"></p>\n<blockquote>\n<p>分区</p>\n</blockquote>\n<p>分区命令: <code>fdisk /dev/sdb</code></p>\n<p>/dev: 字符设备文件</p>\n<p>开始对 /sdb 分区</p>\n<ul>\n<li>\n<p>m 显示命令列表</p>\n</li>\n<li>\n<p>p 显示磁盘分区 同 fdisk -l</p>\n</li>\n<li>\n<p>n 新增分区</p>\n</li>\n<li>\n<p>d 删除分区</p>\n</li>\n<li>\n<p>w 写入并退出</p>\n</li>\n</ul>\n<p>说明：开始分区后输入 n, 新增分区，然后选择 p, 分区类型为主分区，两次回车默认剩余全部空间，最后输入 w 写入分区并退出，若不保存退出输入 q</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-18-33-34.png\" alt=\"image_2023-01-05-18-33-34\"></p>\n<h3 id=\"格式化磁盘\"><a class=\"markdownIt-Anchor\" href=\"#格式化磁盘\">#</a> 格式化磁盘</h3>\n<p>分区命令: <code>mkfs -t ext4 /dev/sdb1</code></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/1286512-20190206141059483-251392832.png\" alt=\"img\"></p>\n<p>其中 ext4 是分区类型</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124231127.png\" alt=\"image-20240208124231127\"></p>\n<p>挂载：将一个分区与一个目录联系起来</p>\n<p>mount   设备名称  挂载目录</p>\n<ul>\n<li>挂载分区: <code>mount /dev/sdb1 /newdisk</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124240563.png\" alt=\"image-20240208124240563\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124255145.png\" alt=\"image-20240208124255145\"></p>\n<ul>\n<li>注意:<font color='red'>用命令挂载重启后会生效</font></li>\n</ul>\n<blockquote>\n<p>断开挂载点：注意切出挂载点目录</p>\n</blockquote>\n<ul>\n<li>断开挂载点: <code>umount /dev/sdb1</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124305347.png\" alt=\"image-20240208124305347\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124323320.png\" alt=\"image-20240208124323320\"></p>\n<blockquote>\n<p>永久挂载</p>\n</blockquote>\n<p>通过修改 <code>/etc/fstab</code>  实现挂载</p>\n<p>添加完成后 执行 mount -a 立刻生效</p>\n<p>第一个数组：0/1 = 备份 / 不备份，第二个数字：2/1/0 = 根目录 / 其它目录文件检查 / 不检查</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-19-07-32.png\" alt=\"image_2023-01-05-19-07-32\"></p>\n<p>重启之后还是挂载的状态说明成功了</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-19-09-52.png\" alt=\"image_2023-01-05-19-09-52\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/Linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%861/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/Linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%861/",
            "title": "linux服务管理",
            "date_published": "2024-04-02T10:00:51.621Z",
            "content_html": "<blockquote>\n<p>介绍</p>\n</blockquote>\n<p>服务 (service) 本质就是进程，但是是运行在后台的，通常会监听某个端口，等待其它程序的请求，比如 (mysqld,sshd, 防火墙等等), 因此我们又成为守护进程，是 Linux 中非常重要的知识点</p>\n<blockquote>\n<p>service 管理指令</p>\n</blockquote>\n<ol>\n<li>\n<p>service 服务名 [start|stop|restart|reload|status]</p>\n</li>\n<li>\n<p>在 CentOS7.0 后<font color='red'>很多服务不再使用 service</font>, 而是<font color='red'>systemctl</font></p>\n</li>\n<li>\n<p>service 指令管理的服务在 <code>/etc/init.d</code>  查看</p>\n</li>\n</ol>\n<p><code>ls -l /etc/init.d/</code></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-06-15-37-26.png\" alt=\"image_2023-01-06-15-37-26\"></p>\n<blockquote>\n<p>查看全部系统服务</p>\n</blockquote>\n<p><code>setup</code></p>\n<p>如果提示不存在则进行安装 <code>sudo yum -y install setuptool</code></p>\n<p>安装完成后即可执行命令:setup</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124524934.png\" alt=\"image-20240208124524934\"></p>\n<blockquote>\n<p>服务的运行级别 (runlevel)</p>\n</blockquote>\n<p>Linux 系统有 7 种运行级别 (runlevel):<font color='red'>常用的是级别 3 和 5</font></p>\n<ul>\n<li>\n<p>运行级别 0: 系统停机状态，系统默认运行级别不能设为 0, 否则不能正常启动</p>\n</li>\n<li>\n<p>运行级别 1: 单用户工作状态，root 权限，用于系统维护，禁止远程登陆</p>\n</li>\n<li>\n<p>运行级别 2: 多用户状态 (没有 NFS), 不持支网络</p>\n</li>\n<li>\n<p>运行级别 3: 完全的多用户状态 (有 NFS), 登录后进入控制台命令行模式</p>\n</li>\n<li>\n<p>运行级别 4: 系统未使用，保留</p>\n</li>\n<li>\n<p>运行级别 5:X11 控制台，登录后进入图形 GUI 模式</p>\n</li>\n<li>\n<p>运行级别 6: 系统正常关闭并重启，默认运行级别不能设为 6, 否则不能正常启动</p>\n</li>\n</ul>\n<p>开机的流程说明:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124539115.png\" alt=\"image-20240208124539115\"></p>\n<p>CentOS7 后台运行级别说明</p>\n<p>在 <code>/etc/initab</code></p>\n<p>进行了简化，如下</p>\n<p>multi-user.target:analogous to runlevel 3</p>\n<p>graphical.target:analogous to runlevel 5</p>\n<blockquote>\n<p>chkconfig</p>\n</blockquote>\n<ol>\n<li>\n<p>通过 chkconfig 命令可以给服务的各个运行级别设置自 启动 / 关闭</p>\n</li>\n<li>\n<p>chkconfig 指令管理的服务在 <code>/etc/initab.d</code>  查看</p>\n</li>\n<li>\n<p>注意：CentOS7.0 后，很多服务使用<font color='red'>systemctl</font>管理</p>\n</li>\n</ol>\n<p>chkconfig 基本语法:</p>\n<p>查看服务:chkconfig  --list [|grep xxx]</p>\n<p>chkconfig   服务名  --list</p>\n<p>chkconfig   --level 5   服务名  on/off</p>\n<blockquote>\n<p>使用细节</p>\n</blockquote>\n<p>chkconfig 重新设置服务后自启动或关闭，需要重启机器 reboot 生效</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-06-17-29-29.png\" alt=\"image_2023-01-06-17-29-29\"></p>\n<p>比如将 network 服务在指定的运行级别下让其关闭的则执行下面命令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chkconfig</span> <span class=\"token parameter variable\">--level</span> <span class=\"token number\">5</span> network off</pre></td></tr></table></figure><blockquote>\n<p>Systemctl 管理指令</p>\n</blockquote>\n<ol>\n<li>\n<p>基本语法:systemctl [start|stop|restart|status] 服务名</p>\n</li>\n<li>\n<p>systemctl 指令管理的服务在 <code>/usr/lib/systemd/system</code>  查看</p>\n</li>\n</ol>\n<blockquote>\n<p>systemctl 设置服务的自启动状态</p>\n</blockquote>\n<ol>\n<li>\n<p>systemctl list-unit-files [|grep 服务名] (查看服务开机启动状态，grep 可以进行过滤)</p>\n</li>\n<li>\n<p>systemctl enable 服务名 (设置服务开机启动)</p>\n</li>\n<li>\n<p>systemctl disable 服务名 (关闭服务开机启动)</p>\n</li>\n<li>\n<p>systemctl is-enabled 服务名 (查询某个服务是否是自启动的)</p>\n</li>\n<li>\n<p>systemctl status 服务名 (查看服务的状态)</p>\n</li>\n<li>\n<p>systemctl daemon reload (重新加载系统服务)</p>\n</li>\n</ol>\n<ul>\n<li>细节讨论</li>\n</ul>\n<ol>\n<li>关闭或者启用防火墙后，立即生效 [telnet 测试，某个端口即可]</li>\n</ol>\n<p>telnet 命令为 Windows 中的命令详细查看 Windows 中笔记<a href=\"......%5CTyporanote%5CWindows%5C%E5%BC%80%E5%90%AFtelnet%E5%8A%9F%E8%83%BD.md\"> Windows:Telnet 开启</a></p>\n<p>如果开启了防火墙而且没有将端口开放则外部主机访问不到</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208124554601.png\" alt=\"image-20240208124554601\"></p>\n<ol start=\"2\">\n<li>\n<p>这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置</p>\n</li>\n<li>\n<p>如果希望设置某个服务自启动或关闭永久生效，要使用 systemctl [enable|disable] 服务名</p>\n</li>\n</ol>\n<blockquote>\n<p>打开或者关闭指定端口</p>\n</blockquote>\n<p>在真正的生产环境，往往需要将防火墙打开，但问题来了，如果我们把防火墙打开，那么外部请求数据包就不能跟服务器监听端口通讯，这时，需要打开指定的端口，比如 80,22,8080 等</p>\n<blockquote>\n<p>firewall 指令</p>\n</blockquote>\n<p>打开端口:firewall-cmd --permanent --add-port = 端口号 / 协议</p>\n<p>关闭端口:firewall-cmd --permanent --remove-port = 端口号 / 协议</p>\n<p>重新载入，才能生效:firewall-cmd --reload</p>\n<p>查询端口是否开放:firewall-cmd --query-port = 端口 / 协议</p>\n<p>查看所有开放端口:firewall-cmd --list-ports</p>\n<p>查看端口号:netstat -ntlp|grep [端口号]</p>\n<p>查看防火墙配置规则:iptables -nL</p>\n<p>对其它主机开放指定端口:firewall-cmd --permanent --add-rich-rule=“rule family=“ipv4” source address port protocol=“tcp” port=“8080” accept”</p>\n<p><strong>开放指定端口</strong>: firewall-cmd --permanent --zone=public --add-port=8080/tcp</p>\n<ul>\n<li>⚠️<strong>注意</strong>：执行操作后执行重载:firewall-cmd --reload</li>\n</ul>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E9%85%8D%E7%BD%AEJDK/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E9%85%8D%E7%BD%AEJDK/",
            "title": "配置JDK",
            "date_published": "2024-04-02T10:00:51.617Z",
            "content_html": "<h1 id=\"配置jdk\"><a class=\"markdownIt-Anchor\" href=\"#配置jdk\">#</a> 配置 JDK</h1>\n<p><mark>重要提示！</mark>: 下载 JDK 前先创建一个属于 JDK 的文件地址，因为这样好管理也好找到，虽然 linux 配置 JDK 没有 Windows 那么复杂，创建文件指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /opt/jdk</pre></td></tr></table></figure><p>下载前可以看下浏览器默认下载位置或者下载的时候弹出提示框进行选择下载到的位置我们就选择新创建的 jdk 目录</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208121140196.png\" alt=\"image-20240208121140196\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /opt/jdk</pre></td></tr></table></figure><p>切换到这个自己创建的 jdk 目录下再下载或者传输 jdk 压缩包</p>\n<p>首先去官网下载一个 JDK (注意：一定要下载对应自己 linux 系统的 JDK 不然可能会出现在执行 JDK 的时候报错)</p>\n<p>Arm 64 Compressed Archive</p>\n<p>x64 Compressed Archive</p>\n<p>这两个 linux 版本的看系统下载，我当前下载的是 64 为的 x64 Compressed Archive</p>\n<p>报错信息: <code>无法执行二进制文件</code> ！</p>\n<p>在虚拟机中下载或者在 Windows 中下载都可以在 Windows 中可以使用<mark> Xftp</mark> 工具将其传输到 linux 中，当然如果出现传输失败就切换下权限切换到 root 试试，应该会成功的</p>\n<p>下载完成后:</p>\n<p>使用 Xshell 或者 linux 中打开终端，在当前压缩包的目录下</p>\n<p>输入指令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xvzf</span> jdk-n.n.n_x64_tar.gz<span class=\"token punctuation\">[</span>如果只有这一个压缩包其实直接tab就好了,写这么多就是示个意<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>完成后终端输入指令:</p>\n<p>切换到跟目录下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vim</span> /etc/profile</pre></td></tr></table></figure><p>打开配置文件后，在配置文件的末尾输入:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/usr/local/jdk/jdk-17.0.4.1<span class=\"token comment\">#这里根据自己的 jdk 位置来进行配置即可</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure><p>输入好配置文件后执行指令让这个目录的 jdk 生效，不然还是不能使用的</p>\n<p>执行指令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><p>然后就可以输入指令来查看 jdk 是否安装成功了</p>\n<p><code>javac</code>  ,  <code>java -version</code>  ,  <code>java</code></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB/",
            "title": "Linux运行级别",
            "date_published": "2024-04-02T10:00:51.612Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>init 运行级别</th>\n<th>systemd 目标</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>poweroff.target</td>\n<td>关机</td>\n</tr>\n<tr>\n<td>1</td>\n<td>rescue.target</td>\n<td>单用户模式 [找回丢失密码]</td>\n</tr>\n<tr>\n<td>2</td>\n<td>multi-user.target</td>\n<td>多用户状态没有网络服务</td>\n</tr>\n<tr>\n<td>3</td>\n<td>multi-user.target</td>\n<td>多用户状态有网络服务</td>\n</tr>\n<tr>\n<td>4</td>\n<td>multi-user.target</td>\n<td>系统未使用</td>\n</tr>\n<tr>\n<td>5</td>\n<td>graphical.target</td>\n<td>多用户图形界面</td>\n</tr>\n<tr>\n<td>6</td>\n<td>reboot.target</td>\n<td>重启</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<h5 id=\"查看当前运行级别\"><a class=\"markdownIt-Anchor\" href=\"#查看当前运行级别\">#</a> 查看当前运行级别:</h5>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl get-default</pre></td></tr></table></figure><ul>\n<li>\n<h5 id=\"设置默认运行级别\"><a class=\"markdownIt-Anchor\" href=\"#设置默认运行级别\">#</a> 设置默认运行级别:</h5>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl set-default xxx.target</pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96root%E7%94%A8%E6%88%B7/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96root%E7%94%A8%E6%88%B7/",
            "title": "设置/初始化root用户",
            "date_published": "2024-04-02T10:00:51.609Z",
            "content_html": "<h1 id=\"设置初始化root用户\"><a class=\"markdownIt-Anchor\" href=\"#设置初始化root用户\">#</a> 设置 / 初始化 root 用户</h1>\n<p>【设置 root 用户密码】<br>\n默认安装好的 linux 系统是没有设置 root 用户密码的，下面介绍如何设置 root 用户的密码。</p>\n<p>由于 Linux 系统默认是没有激活 root 用户的，需要我们手动进行操作，步骤也非常简单，在命令行界面（终端）中输入如下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> 或者 <span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Password： 你当前用户的密码</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Enter new UNIX password： 设置是 root 用户的密码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Retype new UNIX password：重复以上 root 用户的密码</pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E9%93%BE%E6%8E%A5%E6%96%B9%E5%BC%8F/",
            "title": "vmware网络的三种连接方式",
            "date_published": "2024-04-02T10:00:51.607Z",
            "content_html": "<h3 id=\"1桥接模式\"><a class=\"markdownIt-Anchor\" href=\"#1桥接模式\">#</a> 1. 桥接模式</h3>\n<p>说明：桥接模式，虚拟机系统可以和外部系统通讯，但是容易造成 ip 冲突</p>\n<p>桥接模式需要和主机使用同一个网段</p>\n<p>问题：它们需要是同一个网段中那么如果一个教室中有 200 名学生呢，都是同一个网段这时 192.168.0 这个网段的 ip 地址就不够了，因为最多只有 255 个，就会造成重复 ip 造成 ip 冲突的问题</p>\n<p>桥接模式是与外界互通的</p>\n<h3 id=\"2nat模式\"><a class=\"markdownIt-Anchor\" href=\"#2nat模式\">#</a> 2.NAT 模式</h3>\n<p>说明：网络地址转换模式，虚拟系统可以和外部系统通讯，不造成 ip 冲突</p>\n<p>地址映射：虚拟机会在主机上产生另外一个 ip 地址，它们之间产生映射关系，它们之间会形成独立，可以相互通讯的网络</p>\n<p>NAT 模式可以通过主机的 ip 来与外部联系，但是使用的却不是同一个网段</p>\n<p>此时虚拟机的网段为内网，内网可以与外部通讯但是内网的那个线不成立，因为通过 192.168.0.33 代理与外部交互，但是外部不能与 192.168.100.88 进行通讯</p>\n<h3 id=\"3主机模式\"><a class=\"markdownIt-Anchor\" href=\"#3主机模式\">#</a> 3. 主机模式</h3>\n<p>独立模式，不与外部进行通讯</p>\n<h5 id=\"视图\"><a class=\"markdownIt-Anchor\" href=\"#视图\">#</a> 视图</h5>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230106002750581.png\" alt=\"image-20230106002750581\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E6%9D%83%E9%99%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E6%9D%83%E9%99%90%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/",
            "title": "权限的基本介绍",
            "date_published": "2024-04-02T10:00:51.605Z",
            "content_html": "<h2 id=\"权限的基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#权限的基本介绍\">#</a> 权限的基本介绍</h2>\n<p>ls -l 中显示的内容如下</p>\n<p>-rwxrw-r-- 1root root 1213 Feb 2 09:39 abc</p>\n<ul>\n<li>r: 可读</li>\n<li>w: 可写</li>\n<li>x: 可执行</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208120820450.png\" alt=\"image-20240208120820450\"></p>\n<p>0-9 位说明</p>\n<ol>\n<li>\n<p>第 0 位确定文件类型 (d,-,l,c,b)</p>\n<p>l: 是链接，相当于 windows 的快捷方式</p>\n<p>d: 是目录，相当于 windows 的文件夹</p>\n<p>c: 是<font color=blue>字符设备</font>文件，鼠标，键盘</p>\n<p>b: 是块设备，比如硬盘</p>\n<p>-: 普通文件</p>\n</li>\n<li>\n<p>第 1-3 位确定所有者 (该文件的所有者) 拥有该文件的权限 —User</p>\n</li>\n<li>\n<p>第 4-6 位确定所属者 (同用户组的) 拥有该文件的权限 —Group</p>\n</li>\n<li>\n<p>第 7-9 位确定其它用户拥有该文件的权限 —Other</p>\n</li>\n</ol>\n<h2 id=\"rwx权限详解\"><a class=\"markdownIt-Anchor\" href=\"#rwx权限详解\">#</a> rwx 权限详解</h2>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-04-21-08-34.png\" alt=\"image_2023-01-04-21-08-34\"></p>\n<p>rwx 作用文件</p>\n<ol>\n<li>[r] 代表可读 (read): 可读取，查看</li>\n<li>[w] 代表可写 (write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</li>\n<li>[x] 代表可执行 (execute): 可以被执行</li>\n</ol>\n<ul>\n<li>rwx 作用到目录</li>\n</ul>\n<ol>\n<li>[r] 代表可读 (read): 可读取，ls 查看目录内容</li>\n<li>[w] 代表可写 (write): 可以修改，对目录内容创建 + 删除 + 重命名目录</li>\n<li>[x] 代表可执行 (execute): 可以进入该目录</li>\n</ol>\n<p>可用数字表示为:r=4, w=2, x=1 因此 rwx=4+2+1=7</p>\n<p>其它说明:</p>\n<ul>\n<li>\n<p>1 文件：硬连接数或 目录：子目录数</p>\n</li>\n<li>\n<p>root 用户</p>\n</li>\n<li>\n<p>root 组</p>\n</li>\n<li>\n<p>1213 文件大小 (字节), 如果是文件夹，显示 4096 字节</p>\n</li>\n<li>\n<p>Feb 2 09:39 最后修改日期</p>\n</li>\n<li>\n<p>abc 文件名</p>\n</li>\n</ul>\n<h3 id=\"修改权限\"><a class=\"markdownIt-Anchor\" href=\"#修改权限\">#</a> 修改权限</h3>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-04-21-53-08.png\" alt=\"image_2023-01-04-21-53-08\"></p>\n<p>第一种方式: <code>+ - =</code>  变更权限</p>\n<p>u: 所有者 g: 所有组 o: 其它人 a: 所有人 (u, g, o 的总和)</p>\n<ol>\n<li>\n<p>chmod u=rwx, g=rx, o=x  文件 / 目录名</p>\n</li>\n<li>\n<p>chmod o+w 文件 / 目录名</p>\n</li>\n<li>\n<p>chmod a-x 文件 / 目录名</p>\n</li>\n</ol>\n<p>r=4, w=2, x=1 rwx=4+2+1=7</p>\n<p>chmod 7 (所有者) 5 (所有组) 1 (其它人) 文件目录</p>\n<blockquote>\n<p>细节</p>\n</blockquote>\n<ul>\n<li>如果目录权限为:drwx–x--x 而这个目录里面的文件权限为:-rw–rx-r-, 那么文件可执行 cd 而不能执行 ls 那可以对文件进行修改码？</li>\n</ul>\n<p>演示:</p>\n<p>登录 <code>milan</code>  用户进入到 <code>/opt</code>  目录下查看 test 的权限状态</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-12-05-09.png\" alt=\"image_2023-01-05-12-05-09\"></p>\n<p>可以看到所有者，所有组都是 dkx 的而其它组没有任何权限， <code>milan</code>  用户是 dkx 一组的所以可执行 x</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-12-06-18.png\" alt=\"image_2023-01-05-12-06-18\"></p>\n<p>进去之后除了可 x 不能 rw, 但是里面还有一个文件夹下面是文件夹的权限:-rw–rw-r-</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208120844328.png\" alt=\"image-20240208120844328\"></p>\n<p>可以看到所有组可读写其它组可读，那么问题来了目录为所有组可 x, 可以对文件进行编辑吗？</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-12-11-39.png\" alt=\"image_2023-01-05-12-11-39\"></p>\n<p>可以进去并且可修改，得出结论 目录的权限不会影响到文件的权限，但是目录不可 x 那么也不能操作到文件</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E6%8C%87%E4%BB%A4/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E6%8C%87%E4%BB%A4/",
            "title": "指令",
            "date_published": "2024-04-02T10:00:51.602Z",
            "content_html": "<p>清空控制台命令: clear</p>\n<p>查看 ip 地址的两种方式</p>\n<ol>\n<li>ip add</li>\n<li>ifconfig    如果不存在下载执行: sudo yum install net-tools.x86_64 -y</li>\n</ol>\n<h2 id=\"路径\"><a class=\"markdownIt-Anchor\" href=\"#路径\">#</a> 路径</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span>安全人员<span class=\"token punctuation\">[</span>必须<span class=\"token punctuation\">]</span>知道的路径<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> /var/log/messages <span class=\"token comment\">#Linux 系统日志文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span> /var/log/secure <span class=\"token comment\">#登入日志，ssh 远程连接安全，很重要</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span> /var/log/lastlog <span class=\"token comment\">#有哪些用户登入 lastlog</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">==</span>用户和组相关文件<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span> /etc/passwd <span class=\"token comment\">#用户 (user) 的配置文件，记录用户的各种信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>每行的含义:用户名<span class=\"token operator\">|</span>用户标识号<span class=\"token operator\">|</span>组标识号<span class=\"token operator\">|</span>注释性描述<span class=\"token operator\">|</span>主目录<span class=\"token operator\">|</span>登入Shell<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span> /etc/shadow <span class=\"token comment\">#口令的配置文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>每行的含义:登入名<span class=\"token operator\">|</span>加密口令<span class=\"token operator\">|</span>最后一次修改的时间<span class=\"token operator\">|</span>最小时间间隔<span class=\"token operator\">|</span>最大时间间隔<span class=\"token operator\">|</span>警告时间<span class=\"token operator\">|</span>不活动时间<span class=\"token operator\">|</span>失效时间<span class=\"token operator\">|</span>标志</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> /etc/group <span class=\"token comment\">#组 (group) 的配置文件，记录 Linux 包含的组的信息</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>每行含义:组名<span class=\"token operator\">|</span>口令<span class=\"token operator\">|</span>组标识号<span class=\"token operator\">|</span>组内用户列表</pre></td></tr></table></figure><h2 id=\"删除目录或文件\"><a class=\"markdownIt-Anchor\" href=\"#删除目录或文件\">#</a> 删除目录或文件</h2>\n<ul>\n<li>参数 <code>-r:</code>  或 <code>-R:</code>  删除指定目录及目录下的所有文件</li>\n<li>参数 <code>-f:</code>  强制删除，不进行提示</li>\n<li>参数 <code>-i:</code>  删除前进行提示</li>\n<li>参数 <code>-d:</code>  将欲删除目录的硬链接数据删成 0, 删除该目录</li>\n<li>参数 <code>-l:</code>  删除文件超过 3 个或递归删除前进行提示</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span>删除目录或文件<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rm英文全拼<span class=\"token punctuation\">(</span>remove<span class=\"token punctuation\">)</span>删除的意思</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>用于删除一个文件或目录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>注意:文件一旦通过rm命令删除,则无法恢复,所以必须格外小心的使用该命令</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>参数: </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-i</span> 删除前逐一确认是否删除</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-f</span> 即使原档案属性设为唯读,亦直接删除,无需逐一确认</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">-r</span> 将目录及以下之档案亦逐一删除</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>案例:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>删除一般文件</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">rm</span>  文件名</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>删除目录/文件</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> /目录</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rm:是否删除 目录XXX? 回复y就是确认删除</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>删除当前目录下所有文件及目录</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-r</span> *</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>删除指定目录所有文件及目录直接删除无需逐一确认</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> 文件名或者/目录/</pre></td></tr></table></figure><h2 id=\"添加用户删除用户\"><a class=\"markdownIt-Anchor\" href=\"#添加用户删除用户\">#</a> 添加用户 / 删除用户</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">==</span>添加<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># useradd 用户名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>说明:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span>.当创建成功后,会自动创建和用户名同名的家目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span>.通过useradd <span class=\"token parameter variable\">-d</span> /目录/ 用户名,指定目录,新的用户名,给新创建的用户指定家目录,注意:不用提前创建家目录因为自己创建的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># useradd -d /home/nidejia/ tom</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">==</span>删除<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span>.删除用户但保留家目录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># userdel 用户名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span>.删除用户与家目录一并删除,不用指定目录位置</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># userdel -r 用户名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>细节:讨论是否保留家目录</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>建议:保留,毕竟删了就找不回来了</pre></td></tr></table></figure><h2 id=\"指定修改用户密码\"><a class=\"markdownIt-Anchor\" href=\"#指定修改用户密码\">#</a> 指定 / 修改用户密码</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>passwd是password的缩写是密码的意思</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span> 用户名,注意:如果不指定密码则修改当前的用户密码很危险</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># passwd zwj</span></pre></td></tr></table></figure><h2 id=\"显示当前所在目录位置\"><a class=\"markdownIt-Anchor\" href=\"#显示当前所在目录位置\">#</a> 显示当前所在目录位置</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pwd:显示当前所在目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># pwd</span></pre></td></tr></table></figure><h2 id=\"查询用户信息\"><a class=\"markdownIt-Anchor\" href=\"#查询用户信息\">#</a> 查询用户信息</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>翻译:此用户不存在 id: jack: no such user</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># id 用户名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输出 <span class=\"token builtin class-name\">:</span> <span class=\"token assign-left variable\">uid</span><span class=\"token operator\">=</span><span class=\"token number\">1002</span><span class=\"token punctuation\">(</span>用户名<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">gid</span><span class=\"token operator\">=</span><span class=\"token number\">1003</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span> 组<span class=\"token operator\">=</span><span class=\"token number\">1003</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"查询当前用户第一次登入的用户信息\"><a class=\"markdownIt-Anchor\" href=\"#查询当前用户第一次登入的用户信息\">#</a> 查询当前用户 / 第一次登入的用户信息</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># who am i</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输出: root     pts/0        <span class=\"token number\">2022</span>-09-29 <span class=\"token number\">20</span>:43 <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.244.1<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"切换用户\"><a class=\"markdownIt-Anchor\" href=\"#切换用户\">#</a> 切换用户</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># su - dkx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果低权限转高权限则需要密码,反之高权限转低权限不需要密码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>通过logout指令回到上次的登入状态,注意此指令只能在Xshell中使用</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">logout</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>如果上次没有登入记录则退出登入</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># logout</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Connection closed. 翻译:连接关闭</pre></td></tr></table></figure><p>解释图:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019191019613.png\" alt=\"image-20221019191019613\"></p>\n<h2 id=\"用户组\"><a class=\"markdownIt-Anchor\" href=\"#用户组\">#</a> 用户组</h2>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019191034275.png\" alt=\"image-20221019191034275\"></p>\n<h3 id=\"新增组\"><a class=\"markdownIt-Anchor\" href=\"#新增组\">#</a> 新增组:</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># groupadd 组名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">==</span>查看组的位置<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/group</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">==</span>查看指定的组<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/group|grep 组名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>与上面的cat /etc/group<span class=\"token operator\">|</span><span class=\"token function\">grep</span> 组名 大同小异</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># getent group 组名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">==</span>删除组<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># groupdel 组名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">==</span>增加用户时直接存入组中<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># useradd -g 组名 用户名</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>可以通过id来查询这个用户的组</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">==</span>修改用户的组<span class=\"token operator\">==</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># usermod -g 组名 用户名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>可以通过id来查询这个用户的组</pre></td></tr></table></figure><h2 id=\"关机指令注销\"><a class=\"markdownIt-Anchor\" href=\"#关机指令注销\">#</a> 关机指令 / 注销</h2>\n<p><mark>注意</mark>:</p>\n<ol>\n<li>不管是重启系统还是关闭系统，首先要运行 == <code>sync</code> == 指令，把内存中的数据写到磁盘中</li>\n<li>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 == <code>sync</code> ==,<mark> 提醒</mark>：小心使得万年船</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">shutdown</span> <span class=\"token parameter variable\">-h</span> now ---立刻进行关机</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">shutdown</span> <span class=\"token parameter variable\">-h</span> 指定分钟 ---指定分钟后关机</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">shutdown</span> <span class=\"token parameter variable\">-r</span> now ---现在重新启动计算机</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">halt</span> ---关机,作用和上面一样</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">reboot</span> ---现在重新启动计算机</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sync</span> ---把内存的数据同步到磁盘</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>logout/exit ---注销/登出</pre></td></tr></table></figure><p><mark>logout [^ 示意图]</mark></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019190932609-1666177777190-1.png\" alt=\"image-20221019190932609\"></p>\n<h2 id=\"文件-a-href-删除目录或文件-删除目录或文件-查看其它相关标题-a\"><a class=\"markdownIt-Anchor\" href=\"#文件-a-href-删除目录或文件-删除目录或文件-查看其它相关标题-a\">#</a> 文件 <a href = \"#删除目录或文件\"> 删除目录或文件 查看其它相关标题 </a></h2>\n<p><strong>修改文件所在组查看 (<a href=\"http://xn--zouo53b.md\">用户.md</a>)</strong>[<a href=\"http://xn--h0tn5emc213g.md\">打开用户.md</a>](E:\\Typora\\ 笔记 \\Linux\\CentOS 7 Linux\\ 指令 \\<a href=\"http://xn--zouo53b.md\"> 用户.md</a>)</p>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chgrp</span> 组名 文件名</pre></td></tr></table></figure><h3 id=\"创建一个文件touch\"><a class=\"markdownIt-Anchor\" href=\"#创建一个文件touch\">#</a> 创建一个文件 (touch)</h3>\n<ul>\n<li>\n<p>参数 <code>-a:</code>  只修改文件的读取时间 (access)</p>\n</li>\n<li>\n<p>参数 <code>-m:</code>  只修改文件的修改时间 (modify)</p>\n</li>\n<li>\n<p>参数 <code>-c:</code>  若指定的文件不存在，不创建新的文件</p>\n</li>\n<li>\n<p>参数 <code>-d:</code>  修改时指定日期时间，而不是当前的系统时间，可设定多种格式 (date)</p>\n</li>\n<li>\n<p>参数 <code>-r:</code>  将指定文档和目录的日期时间设置成为与参考文档或目录日期时间一致</p>\n</li>\n<li>\n<p>参数 <code>-t:</code>  使用过指定的时间，而不是当前的系统时间，可设定多种格式 (time)</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 二进制文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">touch</span> 文件名.后缀名</pre></td></tr></table></figure><h3 id=\"查看文件内容cat\"><a class=\"markdownIt-Anchor\" href=\"#查看文件内容cat\">#</a> 查看文件内容 (cat)</h3>\n<ul>\n<li>参数 <code>-b:</code>  查看文件时对于空白行不编号</li>\n<li>参数 <code>-E:</code>  每行结尾显示 $ 符号</li>\n<li>参数 <code>-n:</code>  查看文件时对每一行进行显示行号，从 1 开始计数</li>\n<li>参数 <code>-s:</code>  当遇到两行以上的空白行时替换为一行空白行</li>\n<li>参数 <code>-T:</code>  将 tab 字符显示为 ^|</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> 文件名.后缀名</pre></td></tr></table></figure><p><code>cat</code>  只能浏览文件，而不能修改文件，为了方便，一般会带上<font size=4,font color=red>管道命令</font> <code>|more</code>  分页查看</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> 文件名.后缀名 <span class=\"token operator\">|</span> <span class=\"token function\">more</span></pre></td></tr></table></figure><p>查看文件内容并以分页的形式展示出来</p>\n<p>关于 more 详情查看<a href=\"#more\">more 介绍</a></p>\n<h3 id=\"管道符号\"><a class=\"markdownIt-Anchor\" href=\"#管道符号\">#</a> 管道符号 (|)</h3>\n<p>在一个语句后面加上  <code>|</code>  表示将前一个命令的处理结果输出传递给后面的命令再次处理</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 过滤 test.txt 文件内容并以分页形式展现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> he text.txt <span class=\"token operator\">|</span> <span class=\"token function\">more</span></pre></td></tr></table></figure><h3 id=\"编辑文件vivim\"><a class=\"markdownIt-Anchor\" href=\"#编辑文件vivim\">#</a> 编辑文件 (vi/vim)</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vi</span> 文件名.后缀名</pre></td></tr></table></figure><h3 id=\"拷贝文件或目录cp\"><a class=\"markdownIt-Anchor\" href=\"#拷贝文件或目录cp\">#</a> 拷贝文件或目录 (cp)</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将 data 目录下的 test.txt 文件拷贝到 tmp 目录中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> /data/test.txt <span class=\"token punctuation\">[</span>一个空格<span class=\"token punctuation\">]</span> /tmp/</pre></td></tr></table></figure><ul>\n<li><strong>将 test.txt 文件拷贝到当前目录下</strong> (. 为当前目录下), 使用特殊符号 <code>.</code>  表示当前目录</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /root/data/test.txt <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>使用 <code>cp -r</code>  命令，拷贝目录</p>\n<ul>\n<li>参数 <code>-r:</code>  为递归拷贝，拷贝目录及目录里的内容</li>\n<li>参数 <code>-p:</code>  拷贝时保持文件属性不变</li>\n<li>参数 <code>-a:</code>  为拷贝所有，与参数 <code>-pdr</code>  等价</li>\n<li>参数 <code>-d:</code>  若复制的源文件是符号链接，仅复制链接本身，并且保留符号链接所指向的目标文件或目录，复制时保留链接</li>\n<li>参数 <code>-f:</code>  强制覆盖已经存在的目标文件，不提示用户进行确认</li>\n<li>参数 <code>-i:</code>  在覆盖已经存在的目标文件前提示用户进行确认，防止覆盖重要文件</li>\n<li>参数 <code>-l:</code>  为源文件创建硬链接，与 ln 命令相同，(要求源文件和目标文件必须在同一个分区或同一个文件系统上)</li>\n<li>参数 <code>-p:</code>  复制文件时保留源文件的所有者，权限信息及事件属性</li>\n<li>参数 <code>-u:</code>  在目标文件不存在或源文件比目标文件新时才进行复制，否则，不进行复制</li>\n<li>参数 <code>-S:</code>  在备份文件时，用指定的后缀 SUFFIX 代替文件名的默认后缀</li>\n<li>参数 <code>-v:</code>  详细显示命令执行的操作</li>\n<li>参数 <code>-s:</code>  不进行真正的复制操作，仅为源文件创建符号链接，与 ls -s 功能相同</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将 data 目录下内容递归拷贝到 tmp 目录中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> /data/ /tmp/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果再次执行就会提示是否覆盖如果内容过多可以直接使用以下两种方式强制覆盖不提示</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">\\</span>cp <span class=\"token parameter variable\">-r</span> /data/ /tmp/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-rf</span> /data/ /tmp/</pre></td></tr></table></figure><h3 id=\"移动文件或目录mv注意移动跟拷贝不是一样含义的\"><a class=\"markdownIt-Anchor\" href=\"#移动文件或目录mv注意移动跟拷贝不是一样含义的\">#</a> 移动文件或目录 (mv)(注意：移动跟拷贝不是一样含义的)</h3>\n<p><strong>使用 <code>mv</code>  命令，全名为 <code>move</code> </strong></p>\n<ul>\n<li>参数: <code>-i:</code>  在目标文件已存在时提示用户是否覆盖</li>\n<li>参数 <code>-f:</code>  强制覆盖已存在的目标文件而不进行提示</li>\n<li>参数 <code>-b:</code>  在覆盖目标文件前进行备份</li>\n<li>参数 <code>-S:</code>  与参数 b 一起使用，可指定备份文件的所有附加的字尾</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将 data 目录移动到 root 目录中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mv</span> /data/ /root/</pre></td></tr></table></figure><ul>\n<li>将 /data/ 目录移动到当前目录下，使用特殊符号 <code>.</code>  表示当前目录</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> /data/ <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><h3 id=\"查找当前位置的文件或目录find\"><a class=\"markdownIt-Anchor\" href=\"#查找当前位置的文件或目录find\">#</a> 查找当前位置的文件或目录 (find)</h3>\n<p><strong>使用 <code>find</code>  命令，查找文件或目录</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-type</td>\n<td>查找类型，f 为文件 file<br>d 为目录 directory</td>\n</tr>\n<tr>\n<td>-name</td>\n<td>查找名称，可以使用 <code>*</code>  作为通配符<br>匹配名称</td>\n</tr>\n<tr>\n<td>-user</td>\n<td>查找属于指定用户的所有文件</td>\n</tr>\n<tr>\n<td>-size</td>\n<td>按指定大小查找文件 (+n 大于 -n 小于 n 等于，单位有 k,M,G)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>在 /opt/typora/ 目录中，查找 /note/ 目录，找到则输出位置，否则不输出</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 要找到的目录不能带有 / 符号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /opt/typora/ -type d -name note</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/opt/typora/note</pre></td></tr></table></figure><ul>\n<li><strong>在 /opt/typora/note/ 目录中，查找 MySQL.dm 文件，找到则输出，否则不输出</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /opt/typora/note/ -type f -name MySQL.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/typora/note/MySQL.md</pre></td></tr></table></figure><ul>\n<li><strong>使用 <code>*</code>  作为通配符，匹配名称</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /opt/ -type d -name typo*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/typora</pre></td></tr></table></figure><ul>\n<li><strong>使用 <code>*</code>  通配符查找 /opt/typora/note/ 目录下所有后缀名为.md 的文件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /opt/typora/note -type f -name *.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/typora/note/MySQL.md</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/opt/typora/note/test.md</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/opt/typora/note/cha.md</pre></td></tr></table></figure><ul>\n<li><strong> <code>find</code>  命令与管道 <code>|</code>  配合使用，管道的意思是， <code>|</code>  前面的命令执行成功后，交给后面的命令再执行</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查找 /opt/typora/note/ 目录下后缀名为 md 的文件并执行 ls 命令将它们列出来</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /opt/typora/note/ -type f -name *.md | xargs ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/opt/typora/note/cha.md  /opt/typora/note/MySQL.md  /opt/typora/note/test.md</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查找 /opt/typora/note/ 目录下后缀名为.md 的文件，并执行 cat 命令查看内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># find /opt/typora/note/ -type f -name *.md |xargs cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>二进制文件夹Linux你好</pre></td></tr></table></figure><ul>\n<li><strong>查找 /opt 目录下属于 root 的所有文件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">find</span> /opt <span class=\"token parameter variable\">-type</span> d <span class=\"token parameter variable\">-user</span> root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/opt/rh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/opt/JDK17</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/opt/IDEA</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/opt/dataGrip</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>/opt/MySQL</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>/opt/google</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/opt/google/chrome-unstable</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>/opt/google/chrome-unstable/MEIPreload</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>/opt/google/chrome-unstable/WidevineCdm</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/opt/google/chrome-unstable/WidevineCdm/_platform_specific</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>/opt/google/chrome-unstable/WidevineCdm/_platform_specific/linux_x64</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>/opt/google/chrome-unstable/default_apps</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>/opt/google/chrome-unstable/locales</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>/opt/googlechajian</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>/opt/tujie</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$</pre></td></tr></table></figure><ul>\n<li><strong>从 / 目录查找，大于 200M (兆) 的文件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token function\">find</span> /opt <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-size</span> +200M</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/opt/IDEA/ideaIU-2021.3.3.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/opt/dataGrip/datagrip-2021.3.3.tar.gz</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/opt/MySQL/mysql-8.0.28-1.el7.x86_64.rpm-bundle.tar</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/opt/MySQL/mysql-community-server-8.0.28-1.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/opt/MySQL/mysql-community-test-8.0.28-1.el7.x86_64.rpm</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>/opt/google/chrome-unstable/chrome</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$</pre></td></tr></table></figure><h3 id=\"定位文件路径locate\"><a class=\"markdownIt-Anchor\" href=\"#定位文件路径locate\">#</a> 定位文件路径 (locate)</h3>\n<p>locate 指令可以<font color=red>快速定位文件路径</font>,locate 指令利用事先建立的系统中所有文件名称及路径的<mark> locate 数据库实现快速定位给定的文件</mark>，locate 指令<mark>无须遍历整个文件系统，查询速度较快</mark>，为了<mark>保证查询结果的准备度</mark>，<mark> 管理员必须定期更新 locate 时刻</mark></p>\n<p>基本语法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建立数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>updatedb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用 locate 快速定位文件路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">locate</span> <span class=\"token punctuation\">[</span>文件/目录<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><font color=blue><strong>特别说明:</strong></font>由于 locate 指令基于数据库进行查询，所以第一次运行前必须使用<strong> updatedb</strong> 指令<font color =red>创建数据库</font>.</p>\n<h2 id=\"查看指令所存放的目录中的位置which\"><a class=\"markdownIt-Anchor\" href=\"#查看指令所存放的目录中的位置which\">#</a> 查看指令所存放的目录中的位置 (which)</h2>\n<ul>\n<li>which 指令会在环境变量 $PATH 设置的目录里查找符合条件的文件</li>\n</ul>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">which</span> <span class=\"token punctuation\">[</span>名称<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"在文件内容中筛选出执行内容grep\"><a class=\"markdownIt-Anchor\" href=\"#在文件内容中筛选出执行内容grep\">#</a> 在文件内容中筛选出执行内容 (grep)</h3>\n<h3 id=\"方法1使用grep命令筛选文件指定内容\"><a class=\"markdownIt-Anchor\" href=\"#方法1使用grep命令筛选文件指定内容\">#</a> 方法 1, 使用 <code>grep</code>  命令，筛选文件指定内容</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-v</td>\n<td>排除指定内容</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>忽略大小写</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>在 <code>test.txt</code>  文件内容中，找到包含 <code>he</code>  的内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep he /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello</pre></td></tr></table></figure><ul>\n<li>在 <code>test.txt</code>  文件内容中，找到排除 he 的内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -v he /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Linux</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello</pre></td></tr></table></figure><h4 id=\"方法2使用awk命令筛选文件指定内容查找的内容需要使用内容包含\"><a class=\"markdownIt-Anchor\" href=\"#方法2使用awk命令筛选文件指定内容查找的内容需要使用内容包含\">#</a> 方法 2, 使用 <code>awk</code>  命令，筛选文件指定内容 (查找的内容需要使用 <code>'/内容/'</code>  包含)</h4>\n<ul>\n<li>在 <code>test.txt</code>  文件内容中，找到包含 he 的内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk '/he/' /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello</pre></td></tr></table></figure><ul>\n<li>在 <code>test.txt</code>  文件内容中，查找不包含 he 的内容 (语法: <font color = Re,font size=5> <code>!'/内容/'</code> </font>)</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk '!/he/' /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Linux</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello</pre></td></tr></table></figure><h4 id=\"方式3使用sed命令筛选文件指定内容\"><a class=\"markdownIt-Anchor\" href=\"#方式3使用sed命令筛选文件指定内容\">#</a> 方式 3, 使用 <code>sed</code>  命令，筛选文件指定内容</h4>\n<ul>\n<li>使用 <code>sed</code>  命令，获取 <code>test.txt</code>  文件内容，删除 (并不是删除文件中的) 包含 he 字符的行</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hello<span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed '/he/d' /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Linux</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Hello</pre></td></tr></table></figure><p>其中参数 <code>'/he/d'</code>  表示删除包含 <code>he</code>  的选项行，最后的结果是不包含 he 的行</p>\n<h3 id=\"获取文件内容的前几行head\"><a class=\"markdownIt-Anchor\" href=\"#获取文件内容的前几行head\">#</a> 获取文件内容的前几行 (head)</h3>\n<p>使用 <code>head</code>  命令，取出文件的前几行，默认取出前 10 行</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n [数字]</td>\n<td>表示取出前几行<br>例如 <code>-n2</code>  表示取出前 2 行</td>\n</tr>\n<tr>\n<td>-[数字]</td>\n<td>表示取出前几行<br>例如 <code>-2</code>  表示取出前 2 行</td>\n</tr>\n</tbody>\n</table>\n<p>使用 <code>head -n2</code>  命令，取出 <code>test.txt</code>  文件的前 2 行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># head -2 /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Linux</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Hello</pre></td></tr></table></figure><h3 id=\"获取文件内容的最后几行tail\"><a class=\"markdownIt-Anchor\" href=\"#获取文件内容的最后几行tail\">#</a> 获取文件内容的最后几行 (tail)</h3>\n<p>使用 <code>tail</code>  命令，取出文件最后几行，默认去处最后 10 行</p>\n<ul>\n<li>参数 <code>-f:</code>  实时追踪该文件的所有更新</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n [数字]</td>\n<td>表示取出最后几行<br>例如 - n2 表示取出最后 2 行</td>\n</tr>\n<tr>\n<td>-[数字]</td>\n<td>表示取出最后几行<br>例如 - 2 表示取出最后 2 行</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -2 /opt/typora/note/test.md</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hello</pre></td></tr></table></figure><h4 id=\"获取文件某一行或连续几行\"><a class=\"markdownIt-Anchor\" href=\"#获取文件某一行或连续几行\">#</a> 获取文件某一行，或连续几行</h4>\n<p>题目：有一个 <code>text.txt</code>  文件，共有 100 行，要求显示出文件中的第 50 行至第 60 行内容</p>\n<p>使用 <code>seq</code>  命令，给 <code>test.txt</code>  文件写入 100 行内容</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># seq 100 >/opt/typora/note/test.md</span></pre></td></tr></table></figure><p>使用 sed 替换指定</p>\n<h4 id=\"方法1使用sed命令\"><a class=\"markdownIt-Anchor\" href=\"#方法1使用sed命令\">#</a> 方法 1, 使用 <code>sed</code>  命令</h4>\n<ul>\n<li>获取文件第 50 行内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost /<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -n '50p' /opt/typora/note/test.md </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">50</span></pre></td></tr></table></figure><p><code>sed</code>  命令默认输出文件全部内容，使用参数 <code>-n</code>  取消默认输出， <code>'50p'</code>  表示只输出第 50 行内容</p>\n<ul>\n<li>获取文件第 50 到 60 行内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># sed -n '50,60p' /opt/typora/note/test.md </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">51</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">52</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">53</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">54</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">55</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">56</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">57</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">58</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">59</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">60</span></pre></td></tr></table></figure><p>把参数改成’50,60p’即可</p>\n<h4 id=\"方法2使用head和tail命令\"><a class=\"markdownIt-Anchor\" href=\"#方法2使用head和tail命令\">#</a> 方法 2, 使用 <code>head</code>  和 <code>tail</code>  命令</h4>\n<ul>\n<li>首先，使用 <code>tail</code>  命令获取倒数 20 行</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -20 /opt/typora/note/test.md </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">81</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">82</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">83</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">84</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">85</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">86</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">87</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">88</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">89</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">90</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">91</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">92</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">93</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">94</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">95</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">96</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">97</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">98</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">99</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">100</span></pre></td></tr></table></figure><ul>\n<li>然后使用 <code>|</code>  管道加 <code>head</code>  命令，获取第 50 到 60 行内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># tail -50 /opt/typora/note/test.md |head -10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">51</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">52</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">53</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">54</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">55</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">56</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">57</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">58</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">59</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">60</span></pre></td></tr></table></figure><h4 id=\"方法3使用awk命令\"><a class=\"markdownIt-Anchor\" href=\"#方法3使用awk命令\">#</a> 方法 3, 使用 <code>awk</code>  命令</h4>\n<ul>\n<li>获取文件第 50 行内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'NR==50' /opt/typora/note/test.md </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">50</span></pre></td></tr></table></figure><p>参数中 <code>NR</code>  表示行号， <code>==</code>  表示等于</p>\n<ul>\n<li>获取文件第 50 到 60 行内容</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># awk 'NR==50,NR==60' /opt/typora/note/test.md </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">51</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">52</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">53</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">54</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">55</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">56</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">57</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">58</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">59</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">60</span></pre></td></tr></table></figure><p>参数中添加 <code>'NR==60'</code> , 限定行号范围，从第 50 行到第 60 行的内容</p>\n<h3 id=\"修改文件名mv\"><a class=\"markdownIt-Anchor\" href=\"#修改文件名mv\">#</a> 修改文件名 (mv)</h3>\n<p>例如：吧 <code>abc.txt</code>  文件重命名为 <code>abc123.txt</code></p>\n<p><strong><font color=red>注意</font>: 这是文件重命名，不是移动文件</strong></p>\n<p>可以使用 <code>mv</code>  命令，必须保证 <code>abc123.txt</code>  文件是不存在的，正是因为文件不存在，所以在使用 <code>mv</code>  命令时，直接重命名了该文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建一个文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost opt<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd typora/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>note  Typora-linux-x64  Typora-linux-x64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.tar.gz</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>note  <span class=\"token builtin class-name\">test</span>  Typora-linux-x64  Typora-linux-x64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.tar.gz</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv test/ 测试文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost typora<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>note  Typora-linux-x64  Typora-linux-x64<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.tar.gz  测试文件</pre></td></tr></table></figure><h3 id=\"写入文件\"><a class=\"markdownIt-Anchor\" href=\"#写入文件\">#</a> 写入文件</h3>\n<p>使用 <code>echo</code>  命令与 <code>&gt;&gt;</code>  追加重定向符号，将内容写入某个文件内的最后一行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将 \"Hello Linux\" 这句话写入到 Demo.txt 文件的最后一行中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> Hello Linux <span class=\"token operator\">>></span> Demo.txt</pre></td></tr></table></figure><h2 id=\"linux重定向相关知识\"><a class=\"markdownIt-Anchor\" href=\"#linux重定向相关知识\">#</a> Linux 重定向相关知识</h2>\n<p>配合 echo 使用，echo 原本输出到终端中，如果使用重定向那么就会输出到一个文件中</p>\n<p>水流：从一个地方流向另一个地方</p>\n<p>如果目标文件不存在则会创建目标文件</p>\n<p>数据流: &gt; 从左流向右</p>\n<p><code>&gt;</code>  把输出的内容写入到右边的文件，同时清理右边源文件内容，放入新写入的内容:</p>\n<p>鸠占鹊巢 :</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost 测试文件<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 1 >test.txt </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost 测试文件<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat test.txt </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure><p><code>&gt;&gt;</code>  把输出写入到文件，源文件内容不动，在尾部放入写入的内容</p>\n<p>1 &gt;&gt; 和 &gt;&gt; 相同，接收，标准 [追加] [输出] 重定向 === 正确的输出</p>\n<p>鸠鹊同居:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost 测试文件<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 1 >>test.txt </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost 测试文件<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat test.txt </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure><p><code>2&gt;</code> (没有空格) 标准 [错误] [输出] 重定向 === 错误的输出:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost 测试文件<span class=\"token punctuation\">]</span><span class=\"token comment\"># cho 2>test.txt </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost 测试文件<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat test.txt </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bash: cho: 未找到命令<span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>向文件中输出 1~100 个数字</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">seq</span> <span class=\"token number\">100</span> <span class=\"token operator\">></span>text.txt</pre></td></tr></table></figure><p>将日期输出重定向到 test 文件中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost 桌面<span class=\"token punctuation\">]</span>$ <span class=\"token function\">cal</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      十月 <span class=\"token number\">2022</span>     </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>日 一 二 三 四 五 六</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                   <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token number\">2</span>  <span class=\"token number\">3</span>  <span class=\"token number\">4</span>  <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>  <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token number\">9</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span> <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">16</span> <span class=\"token number\">17</span> <span class=\"token number\">18</span> <span class=\"token number\">19</span> <span class=\"token number\">20</span> <span class=\"token number\">21</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">23</span> <span class=\"token number\">24</span> <span class=\"token number\">25</span> <span class=\"token number\">26</span> <span class=\"token number\">27</span> <span class=\"token number\">28</span> <span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">30</span> <span class=\"token number\">31</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost 桌面<span class=\"token punctuation\">]</span>$ <span class=\"token function\">cal</span> <span class=\"token operator\">></span>test</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost 桌面<span class=\"token punctuation\">]</span>$ <span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      十月 <span class=\"token number\">2022</span>     </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>日 一 二 三 四 五 六</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                   <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token number\">2</span>  <span class=\"token number\">3</span>  <span class=\"token number\">4</span>  <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>  <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token number\">9</span> <span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span> <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">16</span> <span class=\"token number\">17</span> <span class=\"token number\">18</span> <span class=\"token number\">19</span> <span class=\"token number\">20</span> <span class=\"token number\">21</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">23</span> <span class=\"token number\">24</span> <span class=\"token number\">25</span> <span class=\"token number\">26</span> <span class=\"token number\">27</span> <span class=\"token number\">28</span> <span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">30</span> <span class=\"token number\">31</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost 桌面<span class=\"token punctuation\">]</span>$</pre></td></tr></table></figure><h2 id=\"文件夹\"><a class=\"markdownIt-Anchor\" href=\"#文件夹\">#</a> 文件夹</h2>\n<h3 id=\"创建文件夹目录mkdir\"><a class=\"markdownIt-Anchor\" href=\"#创建文件夹目录mkdir\">#</a> 创建文件夹 / 目录 (mkdir)</h3>\n<ul>\n<li>参数 <code>-m:</code>  设置新目录的存取权限，类似于 chmod</li>\n<li>参数 <code>-p:</code>  创建多级目录</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在 test 目录下 创建一级目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost opt<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test/demo</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 在 test 目录下 创建多级目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost opt<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir -p test/demoa/demob</span></pre></td></tr></table></figure><h3 id=\"rmdir删除空文件夹不可删除非空文件夹\"><a class=\"markdownIt-Anchor\" href=\"#rmdir删除空文件夹不可删除非空文件夹\">#</a> rmdir (删除空文件夹，不可删除非空文件夹)</h3>\n<ul>\n<li>\n<p>参数 <code>--ignore-fail-on-non-empty:</code>  忽略数据存在目录非空产生的错误</p>\n</li>\n<li>\n<p>参数 <code>-p:</code>  递归删除各级目录</p>\n</li>\n</ul>\n<p><strong>其它删除文件夹操作详情查看 (rm):</strong> <a href=\"#删除目录或文件\">删除目录或文件</a></p>\n<h2 id=\"more\"><a class=\"markdownIt-Anchor\" href=\"#more\">#</a> more</h2>\n<p>Linux  <code>more</code>  命令类似于 <code>cat</code> , 不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键 (space), 就往下一页显示，按 b 键就会往回 (back) 一页显示，而且还有搜寻字符串的功能 (与 <code>vi</code>  相似), 使用中的说明文件，请按 <code>h</code> , 退出命令 <code>q</code></p>\n<p><strong>常用操作</strong></p>\n<ul>\n<li>按 <code>Space</code>  键：显示文本的下一屏内容</li>\n<li>按 <code>Enter</code>  键：只显示文本的下一行内容</li>\n<li>按斜线符 <code>|</code> : 接着输入一个模式，可以在文本中寻找下一个相匹配的模式</li>\n<li>按 <code>H</code>  键：显示帮助屏，该屏上有相关的帮助信息</li>\n<li>按 <code>B</code>  键：显示上一行屏内容</li>\n<li>按 <code>Q</code>  键：退出 more 命令</li>\n<li><code>Ctrl+F</code>  向下滚动一屏</li>\n<li><code>=</code>  输出当前行的行号</li>\n<li><code>:f</code>  输出文件名和当前行的行号</li>\n<li><code>V</code>  调用 vi 编辑器</li>\n<li><code>l</code>  命令，调用 shell, 并执行命令</li>\n</ul>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">more</span> <span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>文件<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>&lt;数字&gt;</code> : 指定每屏显示的行数</li>\n<li>参数 <code>-d</code> : 显示 &quot;[press space to continue,‘q’ to quit]“和”[perss ‘h’ for instructions]&quot;</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>--More--<span class=\"token punctuation\">(</span><span class=\"token number\">68</span>%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>Press space to continue, <span class=\"token string\">'q'</span> to quit.<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>\n<p>参数 <code>-c</code> : 不进行滚屏操作，每次刷新这个屏幕</p>\n</li>\n<li>\n<p>参数 <code>-s</code> : 将多个空行压缩成一行显示</p>\n</li>\n<li>\n<p>参数 <code>-u</code> : 禁止下划线</p>\n</li>\n<li>\n<p>参数 <code>+&lt;数字&gt;</code> : 从指定数字的行开始显示</p>\n</li>\n<li>\n<p>参数 <code>-l</code> : 取消遇见特殊字元 ^L (送纸字元) 时会暂停的功能</p>\n</li>\n<li>\n<p>参数 <code>-p</code> : 不以卷动的方式显示每一页，而是先清除荧幕后再显示内容</p>\n</li>\n</ul>\n<h2 id=\"分屏查看less\"><a class=\"markdownIt-Anchor\" href=\"#分屏查看less\">#</a> 分屏查看 less</h2>\n<p>less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端，less 指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率</p>\n<p>常用操作</p>\n<ul>\n<li>\n<p>space bar: 向下翻动一页</p>\n</li>\n<li>\n<p>[pagedown] : 向下翻动一页</p>\n</li>\n<li>\n<p>[pageup] : 向上翻动一页</p>\n</li>\n<li>\n<p>/ 字串：向下搜寻 [字串] 的功能； <code>n</code> : 向下查； <code>N</code> : 向上查找</p>\n</li>\n<li>\n<p>? 字串：向上搜寻 [字串] 的功能； <code>n</code>  向上查找； <code>N</code>  向下查找</p>\n</li>\n<li>\n<p>q : 离开 less 这个程序</p>\n</li>\n</ul>\n<p>基本语法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">less</span> <span class=\"token punctuation\">[</span>文件<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>-b:&lt;缓冲区大小&gt;设置缓冲区的大小</code></li>\n<li>参数 <code>-e:</code>  当文件显示结束后，自动离开</li>\n<li>参数 <code>-f:</code>  强迫打开特殊文件，例如外围设备代号，目录和二进制文件</li>\n<li>参数 <code>-g:</code>  只标志追后搜索的关键词</li>\n<li>参数 <code>-i:</code>  忽略搜索时的大小写</li>\n<li>参数 <code>-m:</code>  显示类似 more 命令的百分比</li>\n<li>参数 <code>-N:</code>  显示每行的行号</li>\n<li>参数 <code>-o&lt;文件名&gt;:</code>  将 less 输出的内容在指定文件中保存起来</li>\n<li>参数 <code>-Q:</code>  不使用警告音</li>\n<li>参数 <code>-s:</code>  显示连续空行为一行</li>\n<li>参数 <code>-S:</code>  行过长时间将超出部分舍弃</li>\n<li>参数 <code>-x&lt;数字&gt;:</code>  将 &quot;tab&quot; 键显示为规定的数字空格</li>\n</ul>\n<h2 id=\"输出重定向查看a-href-linux重定向相关知识oa内容到控制台echo\"><a class=\"markdownIt-Anchor\" href=\"#输出重定向查看a-href-linux重定向相关知识oa内容到控制台echo\">#</a> 输出 (重定向查看<a href =\"#Linux重定向相关知识\">o</a>) 内容到控制台 (echo)</h2>\n<p>echo 命令用于在 shell 中打印 shell 变量的值，或者直接输出指定的字符串，linux 的 echo 命令，在 shell 编程中极为常用。在终端下打印变量 value 的时候也是常常用到的。因此有必要了解下 echo 的用法 echo 命令的功能是在显示器上显示一段文字，一般起到一个提示的作用</p>\n<p>使用 echo 输出环境变量演示:</p>\n<p>输出环境变量前面要加上 $ 并且大写</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$PATRH</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HOSTNAME</span></pre></td></tr></table></figure><p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span>参数<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>输出内容<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>-e:</code>  激活转移字符，使用 <code>-e</code>  参数时，若字符串中出现以下字符，则特殊加以处理，而不会将它当成一般文字输出:</li>\n<li><code>\\a:</code>  发出警告声</li>\n<li><code>\\b:</code>  删除前一个字符</li>\n<li><code>\\c:</code>  最后不加上换行符号</li>\n<li><code>\\f:</code>  换行但光标仍旧停留在原来的位置</li>\n<li><code>\\n:</code>  换行但光标移至行首</li>\n<li><code>\\r:</code>  光标移至行首，但不换行</li>\n<li><code>\\t:</code>  插入 rab</li>\n<li><code>\\v:</code>  与 \\f 相同</li>\n<li><code>\\\\:</code>  插入 \\ 字符</li>\n<li><code>\\nnn:</code>  插入 nnn (八进制) 所代表的的 ASCII 字符</li>\n</ul>\n<p>实例:</p>\n<p>设置文字颜色和样式</p>\n<p>颜色码：重置 = 0; 黑色 = 30; 绿色 = 31; 黄色 = 33; 蓝色 = 34; 洋红 = 35; 青色 = 36; 白色 = 37</p>\n<ul>\n<li>演示格式:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\e\">\\e</span>[36m 你好阿 <span class=\"token entity\" title=\"\\e\">\\e</span>[0m\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>你好阿<span class=\"token punctuation\">[</span>此时这个字体是青色的<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>背景色：重置 = 0; 黑色 = 40; 红色 = 41; 绿色 = 42; 黄色 = 43; 蓝色 = 44; 洋红 = 45; 青色 = 46; 白色 = 47</p>\n<ul>\n<li>演示格式:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\e\">\\e</span>[41m 你好阿 <span class=\"token entity\" title=\"\\e\">\\e</span>[0m\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 你好阿 <span class=\"token punctuation\">[</span>此时这个字体的背景颜色是红色的<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>文字样式：关闭所有属性 = 0; 设置高亮度 (加粗)=1; 下划线 = 4; 闪烁 = 5; 反显 = 7; 消隐 = 8</p>\n<ul>\n<li>演示格式:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\e\">\\e</span>[5m 你好阿 <span class=\"token entity\" title=\"\\e\">\\e</span>[0m\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 你好阿<span class=\"token punctuation\">[</span>此时这个字体为闪烁状态<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>组合演示:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>dkx@localhost ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token entity\" title=\"\\e\">\\e</span>[7;36;41m 你好Linux <span class=\"token entity\" title=\"\\e\">\\e</span>[1m\"</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221022185908381.png\" alt=\"image-20221022185908381\"></p>\n<p>ANSI 控制码说明:</p>\n<p><code>\\33[0m:</code>  关闭所有属性</p>\n<p><code>\\33[1m:</code>  设置高亮度</p>\n<p><code>\\33[4m:</code>  下划线</p>\n<p><code>\\33[5m:</code>  闪烁</p>\n<p><code>\\33[7m:</code>  反显</p>\n<p><code>\\33[8m:</code>  消隐</p>\n<p><code>\\33[30m--\\33[37m:</code>  设置前景色</p>\n<p><code>\\33[40m--\\33[47m:</code>  设置背景色</p>\n<p><code>\\33[nA:</code>  光标上移 n 行</p>\n<p><code>\\33[nB:</code>  光标下移 n 行</p>\n<p><code>\\33[nC:</code>  光标右移 n 行</p>\n<p><code>\\33[nD:</code>  光标左移 n 行</p>\n<p><code>\\33[y;xH:</code>  设置光标位置</p>\n<p><code>\\33[2J:</code>  清屏</p>\n<p><code>\\33[K:</code>  清除从光标到行尾的内容</p>\n<p><code>\\33[s:</code>  保存光标位置</p>\n<p><code>\\33[u:</code>  恢复光标位置</p>\n<p><code>\\33[?25|:</code>  隐藏光标</p>\n<p><code>\\33[?25h:</code>  显示光标</p>\n<h2 id=\"符号链接ln\"><a class=\"markdownIt-Anchor\" href=\"#符号链接ln\">#</a> 符号链接 (ln)</h2>\n<p>软连接也称为符号链接，类似于 Windows 里的快捷方式，主要存放了链接其它文件的路径</p>\n<p>示意图</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221022223300608.png\" alt=\"image-20221022223300608\"></p>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-s</span> <span class=\"token punctuation\">[</span>原文件或目录<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>目标文件或目录<span class=\"token punctuation\">]</span> <span class=\"token comment\">#功能描述：给原文件创建一个软连接</span></pre></td></tr></table></figure><ul>\n<li>刪除软连接使用 <code>rm</code>  删除掉软连接的那个文件夹即可</li>\n</ul>\n<h2 id=\"查看或执行历史命令history\"><a class=\"markdownIt-Anchor\" href=\"#查看或执行历史命令history\">#</a> 查看或执行历史命令 (history)</h2>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看历史命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">history</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 显示历史使用的 n 个命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">history</span> n<span class=\"token punctuation\">[</span>数字<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 执行历史命令</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">!</span>n<span class=\"token punctuation\">[</span>数字执行历史命令<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"显示当前进程的状态ps\"><a class=\"markdownIt-Anchor\" href=\"#显示当前进程的状态ps\">#</a> 显示当前进程的状态 (ps)</h2>\n<p>ps (英文全拼:<strong>process stafus</strong>) 命令用于显示当前进程的状态，类似于 windows 的任务管理器</p>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>--help<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>参数 <code>-A:</code>  列出所有的进程</li>\n<li>参数 <code>-w:</code>  显示加宽可以显示较多的资讯</li>\n<li>参数 <code>-au:</code>  显示较详细的资讯</li>\n<li>参数 <code>-aux:</code>  显示所有包含其它使用者的进程</li>\n<li>参数 <code>-e:</code>  显示所有进程</li>\n<li>参数 <code>-f:</code>  全格式</li>\n<li>参数 <code>-h:</code>  不显示标题</li>\n<li>参数 <code>-l:</code>  长格式</li>\n<li>参数 <code>-r:</code>  指显示正在运行的进程</li>\n<li>参数 <code>-x:</code>  显示没有控制终端的进程</li>\n</ul>\n<p><code>USER:</code>  行程拥有者</p>\n<p><code>PID:</code> pid</p>\n<p><code>%CPU:</code>  占用的 cpu 是用率</p>\n<p><code>%MEM:</code>  占用的记忆体使用率</p>\n<p><code>VSZ:</code>  占用的虚拟记忆体大小</p>\n<p><code>RSS:</code>  占用的记忆体大小</p>\n<p><code>TTY:</code>  终端的次要装置号码 (minor device number of tty)</p>\n<p><code>STAT:</code>  该行程的状态:</p>\n<ul>\n<li><code>D:</code>  无法终端的休眠状态 (通常 io 的进程)</li>\n<li><code>R:</code>  正在执行中</li>\n<li><code>S:</code>  静止状态</li>\n<li><code>T:</code>  暂停执行</li>\n<li><code>Z:</code>  不存在但暂时无法消除</li>\n<li><code>W:</code>  没有足够的记忆体分页可分配</li>\n<li><code>&lt;:</code>  高优先序的行程</li>\n<li><code>N:</code>  低优先序的行程</li>\n<li><code>L:</code>  有记忆体分页分配并锁在记忆体内 (实时系统或捱 A I/O)</li>\n<li><code>START:</code>  行程开始时间</li>\n<li><code>TIME:</code>  执行的时间</li>\n<li><code>COMMAND:</code>  所执行的指令</li>\n</ul>\n<h3 id=\"结束进程\"><a class=\"markdownIt-Anchor\" href=\"#结束进程\">#</a> 结束进程:</h3>\n<p>通过指令查看进程 PID</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token punctuation\">[</span>进程名称<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>然后得到 PID 再通过指令来终止这个进程</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token punctuation\">[</span>PID<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>当使用此命令时，一定要通过 <code>ps -ef</code>  确认没有剩下任何僵尸进程，只能通过终止父进程来消除僵尸进程，如果僵尸进程被 init 收养，问题就比较严重了，杀死 init 进程意味着关闭系统，如果系统中有僵尸进程，并且其父进程是 init, 而且僵尸进程占用了大量的系统资源，那么就需要在某个时候重启机器以清除进程表了</p>\n</blockquote>\n<h2 id=\"crond任何调度\"><a class=\"markdownIt-Anchor\" href=\"#crond任何调度\">#</a> crond 任何调度</h2>\n<p>crontab 进行，定时任务的设置</p>\n<ul>\n<li>概述</li>\n</ul>\n<blockquote>\n<p>任务调度：是指系统在某个时间执行的特定的命令或程序<br>任务调度分类：1. 系统工作：有些重要的工作必须周而复始的执行。如病毒扫描等<br>个别用户工作：个别用户可能希望执行某些程序，比如对 <code>mysql</code>  数据库的备份</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-13-34-54.png\" alt=\"image_2023-01-05-13-34-54\"></p>\n<p>基本语法:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">crontab</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>常用选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>-e</th>\n<th>编辑 crontab 定时任务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-l</td>\n<td>查询 crontab 任务</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>删除当前用户所有的 crontab 任务</td>\n</tr>\n<tr>\n<td>service crond restart</td>\n<td>重启任务调度</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>输入指令 <code>crontab -e</code>  后进入编辑任务文档</p>\n</blockquote>\n<p><strong>案例</strong>：每隔一分钟执行一次命令: <code>cal &gt; /opt/data.txt</code>  在 opt 目录下重定向 data 文件内容为当前时间</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-13-56-27.png\" alt=\"image_2023-01-05-13-56-27\"></p>\n<p><code>*</code>  号之间有空格</p>\n<ul>\n<li>参数说明:</li>\n</ul>\n<p><strong>五个占位符说明</strong>：速记口诀：分，时，月，年，星</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>含义</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一个 *</td>\n<td>一小时当中的第几分钟</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>第二个 *</td>\n<td>一天当中的第几个小时</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>第三个 *</td>\n<td>一个月当中的第几天</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>第四个 *</td>\n<td>一年当中的第几月</td>\n<td>1-12</td>\n</tr>\n<tr>\n<td>第五个 *</td>\n<td>一周当中的星期几</td>\n<td>0-7 (0 和 7 都代表星期日)</td>\n</tr>\n</tbody>\n</table>\n<p>特殊符号的说明</p>\n<table>\n<thead>\n<tr>\n<th>特殊符号</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>代表任何时间，比如第一个 * 就代表一小时中每分钟都执行一次的意思</td>\n</tr>\n<tr>\n<td>,</td>\n<td>代表不连续的时间。比如 &quot;0 8,12,16 * * * 命令&quot;, 就代表在每天的 8 点 0 分，12 点 0 分，16 点 0 分都执行一次命令</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td>代表连续性的时间范围，比如 &quot;0 5 * * 1-6 命令&quot; , 代表在周一到周六的凌晨 5 点 0 分执行命令</td>\n</tr>\n<tr>\n<td><code>*/n</code></td>\n<td>代表每个多久执行一次，比如 &quot;*/10 * * * * 命令&quot;, 代表每隔 10 分钟就执行一遍命令</td>\n</tr>\n</tbody>\n</table>\n<p>特定时间执行任务案例</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>45 22 * * * 命令</td>\n<td>在 22 点 45 分执行命令</td>\n</tr>\n<tr>\n<td>0 17 * * 1 命令</td>\n<td>每周 1 的 17 点 0 分执行命令</td>\n</tr>\n<tr>\n<td>0 5 1,15 * * 命令</td>\n<td>每月 1 号和 15 号的凌晨 5 点 0 分执行命令</td>\n</tr>\n<tr>\n<td>40 4 * * 1-5 命令</td>\n<td>每周一到周五的凌晨 4 点 40 分执行命令</td>\n</tr>\n<tr>\n<td>*/10 4 * * * 命令</td>\n<td>每天的凌晨 4 点，每隔 10 分钟执行一次命令</td>\n</tr>\n<tr>\n<td>0 0 1,15  <code>*</code>  1 命令</td>\n<td>每月 1 号和 15 号，每周 1 的 0 点 0 分都会执行命令，注意：星期几和几号最好不要同时出现，因为它们定义的都是天，非常容易让管理员混乱</td>\n</tr>\n</tbody>\n</table>\n<p>案例：每隔 1 分钟，将当前日期和日历都追加到 /home/mycal 文件中</p>\n<ol>\n<li>先写脚本:my.sh, 并给其脚本增加可执行权限:x</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token operator\">>></span> /home/mycal.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cal</span> <span class=\"token operator\">>></span> /home/mycal.txt</pre></td></tr></table></figure><ol start=\"2\">\n<li>编辑任务调度:crontab -e</li>\n</ol>\n<ul>\n<li>每 1 分钟执行一次脚本文件</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*/1 * * * * ~/./my.sh</pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-14-41-41.png\" alt=\"image_2023-01-05-14-41-41\"></p>\n<h2 id=\"at定时任务\"><a class=\"markdownIt-Anchor\" href=\"#at定时任务\">#</a> at 定时任务</h2>\n<ol>\n<li>\n<p>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行</p>\n</li>\n<li>\n<p>默认情况下，atd 守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</p>\n</li>\n<li>\n<p>at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</p>\n</li>\n<li>\n<p>在使用 at 命令的时候，一定要保证 atd 进程的启动，可以使用相关指令来查看</p>\n</li>\n</ol>\n<ul>\n<li>at 命令格式</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>at <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>时间<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-15-14-39.png\" alt=\"image_2023-01-05-15-14-39\"></p>\n<p>Ctrl + D 结束 at 命令的输入</p>\n<ul>\n<li>at 命令选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-m</td>\n<td>当指定的任务被完成后，将给用户发送邮件，即使没有标准输出</td>\n</tr>\n<tr>\n<td>-I</td>\n<td>atq 的别名</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>atrm 的别名</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示任务将被执行的时间</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>打印任务的内容到标准输出</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>-q &lt;队列&gt;</td>\n<td>使用指定的队列</td>\n</tr>\n<tr>\n<td>-f &lt;文件&gt;</td>\n<td>从指定文件读入任务而不是从标准输入读入</td>\n</tr>\n<tr>\n<td>-t &lt;时间参数&gt;</td>\n<td>以时间参数的形式提交要运行的任务</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>at 时间定义</li>\n</ul>\n<p>at 指定时间的方法:</p>\n<ol>\n<li>\n<p>接收在当天的 hh:mm (小时：分钟) 式的时间指定，假如该时间已过去，那么就放在第二天执行，例如：04:00</p>\n</li>\n<li>\n<p>使用 midnight (深夜), noon (中午), teatime (饮茶时间，一般是下午 4 点) 等比较模糊的词语来指定时间</p>\n</li>\n<li>\n<p>采用 12 小时计时制，即在时间后面加上 AM (上午) 或 PM (下午) 来说明是上午还是下午，例如：12pm</p>\n</li>\n<li>\n<p>指定命令执行的具体日期：指定格式为 month day (月日) 或 mm/dd/yy (月 / 日 / 年) 或 dd.mm.yy (日。月. 年) 指定的日期必须跟在指定时间的后面，例如：04:00 2021-03-1</p>\n</li>\n<li>\n<p>使用相对计时法，指定格式为:now+count time-units, now 就是当前时间，time-units 是时间单位，这里能够是 minutes (分钟), hours (小时), days (天), weeks (星期), count 是时间数量，几天，几小时，例如:now+5 minutes</p>\n</li>\n<li>\n<p>直接使用 today (今天), tomorrow (明天) 来指定完成命令的时间</p>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E6%89%BE%E5%9B%9Eroot%E5%AF%86%E7%A0%81/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E6%89%BE%E5%9B%9Eroot%E5%AF%86%E7%A0%81/",
            "title": "找回root密码",
            "date_published": "2024-04-02T10:00:51.600Z",
            "content_html": "<ol>\n<li>首先，启动系统，进入开机界面，在界面中按 &quot;e&quot; 进入编辑界面，如图</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208120620948.png\" alt=\"image-20240208120620948\"></p>\n<ol start=\"2\">\n<li>进入编辑界面，使用键盘上的上下键把光标往下移动，找到以 &quot;Linux16&quot; 开头的所在行数，在行的最后面输入: <code>init=/bin/sh</code></li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019165625164.png\" alt=\"image-20221019165625164\"></p>\n<ol start=\"3\">\n<li>接着，输入 <code>Ctrl+x</code>  进入单用户模式</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019165642791.png\" alt=\"image-20221019165642791\"></p>\n<ol start=\"4\">\n<li>接着，在光标闪烁的位置输入:</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> <span class=\"token parameter variable\">-o</span> remount,rw<span class=\"token punctuation\">[</span>空格<span class=\"token punctuation\">]</span>/</pre></td></tr></table></figure><p>注意：各个单词间有空格，完成后按 Enter 键</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019165949956.png\" alt=\"image-20221019165949956\"></p>\n<ol start=\"5\">\n<li>在新的一行最后面输入: <code>passwd</code> , 完成后按键盘的 Enter, 输入密码，然后再次输入确认密码，密码修改后，会显示 <code>passwd ...</code>  的样式，说明密码修改成功</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019170156539.png\" alt=\"image-20221019170156539\"></p>\n<p>输入密码</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019170232196.png\" alt=\"image-20221019170232196\"></p>\n<p>再次输入密码</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019170246789.png\" alt=\"image-20221019170246789\"></p>\n<p>修改成功</p>\n<ol start=\"6\">\n<li>接着，在鼠标闪烁的位置中 (最后一行中) 输入:</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> /.autorelabel</pre></td></tr></table></figure><p>注意格式: touch [空格]/ 输入完成后按 Enter</p>\n<ol start=\"7\">\n<li>继续在光标闪烁的位置中，输入:</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> /sbin/init</pre></td></tr></table></figure><p>注意格式:exec [空格]/ 等待系统自动修改密码。完成后，系统就会自动重启，新密码就生效了</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20221019170930729.png\" alt=\"image-20221019170930729\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208120648476.png\" alt=\"image-20240208120648476\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/",
            "title": "linux安装图形化界面",
            "date_published": "2024-04-02T10:00:51.598Z",
            "content_html": "<p>开启 CentOS7 以 root 用户登录 (普通用户权限不够) 如下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-20-06-38.png\" alt=\"image_2023-01-05-20-06-38\"></p>\n<p>配置网络网卡，确保与外网连通 (后续要下载响应的包)</p>\n<p>在命令行界面输入命令 <code>cd /etc/sysconfig/network-script</code>  进入 <code>network-script</code>  目录，在输入 ls 命令查看目录下的文件，我们可以看到 <code>ifcfg-ens32</code>  (有可能有区别) 文件，如下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208121959783.png\" alt=\"image-20240208121959783\"></p>\n<p>然后输入命令 <code>vi ifcfg-ens32</code>  打开网络配置文件，进行编辑，在文末加上下图所示内容</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-20-09-25.png\" alt=\"image_2023-01-05-20-09-25\"></p>\n<p>修改完成后保存并退出该网络文件，然后重新加载网络配置文件使其生效，命令为 <code>service network restart</code>  下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-20-11-08.png\" alt=\"image_2023-01-05-20-11-08\"></p>\n<p>然后检验是否可以上外网，输入命令 <code>ping -c 3 www.baidu.com</code>  下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208122013481.png\" alt=\"image-20240208122013481\"></p>\n<p>成功 ping 通，说明网络配置成功</p>\n<p>安装图形化界面 GNOME 的程序包</p>\n<p>先输入 yum 检查 yum 是否可以正常使用，如下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-20-12-38.png\" alt=\"image_2023-01-05-20-12-38\"></p>\n<p>然后输入命令 <code>yum grouplist</code>  列出本系统支持的图形化界面有哪些，我们默认选择 (GNOME Desktop) 下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208122024978.png\" alt=\"image-20240208122024978\"></p>\n<p>然后输入命令 <code>yum groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</code>  获取并安装图像化界面 GNOME 程序包 (大小写敏感)</p>\n<p>安装过程中会遇到提示 &quot;…is ok?(y/b/n)“直接选择 y, 回车等待自动安装，大约需要 5-10 分钟，提示&quot;Completed”, 表示安装完成，下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208122037130.png\" alt=\"image-20240208122037130\"></p>\n<p>修改 CentOS7 默认启动模式为图形化模式</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-20-16-07.png\" alt=\"image_2023-01-05-20-16-07\"></p>\n<p>输入命令 <code>systemctl get-default</code>  可查看当前默认的模式为 <code>multi-user.target</code>  即命令行模式，我们要将它修改为图形化界面模式，下图所示</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-05-20-17-14.png\" alt=\"image_2023-01-05-20-17-14\"></p>\n<p>重启 CentOS 即可为图形化界面</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%AE%89%E8%A3%85zsh%E9%85%8D%E7%BD%AEohmyzsh/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%AE%89%E8%A3%85zsh%E9%85%8D%E7%BD%AEohmyzsh/",
            "title": "CentOS 7 Linux安装ohmyzsh",
            "date_published": "2024-04-02T10:00:51.595Z",
            "content_html": "<p>最重要的一点：安装 <code>zsh</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">zsh</span></pre></td></tr></table></figure><p>确保在 <code>root</code>  的用户下，将 zsh 设置为默认的 shell, 然后再更换普通用户切换</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chsh <span class=\"token parameter variable\">-s</span> /bin/zsh</pre></td></tr></table></figure><p>查看是否切换成功输入指令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/shells</pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-03-18-26-19.png\" alt=\"image_2023-01-03-18-26-19\"></p>\n<p>如果还没有 <code>git</code>  的话就执行命令，安装 <code>git</code>  有的话就跳过</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">git</span></pre></td></tr></table></figure><p>安装最关键最有灵魂的插件 <code>oh-my-zsh</code>  !!!</p>\n<ul>\n<li>官方推荐的安装方式</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sh</span> <span class=\"token parameter variable\">-c</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">wget</span> -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class=\"token variable\">)</span></span>\"</span></pre></td></tr></table></figure><p>上面的方法尽管一步到位，但是在国内，我用上面的方法一直出现 clone 不下来的情况 (不光作者我也是)</p>\n<ul>\n<li>\n<p>如果出现一直 <code>clone</code>  不下来，就采用下面的方法</p>\n</li>\n<li>\n<p>先把 <code>install.sh</code>  文件下载下来 (这是 <code>gieet</code>  的国内镜像源)</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh</pre></td></tr></table></figure><ul>\n<li>然后给 <code>install.sh</code>  添加权限</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> +x install.sh</pre></td></tr></table></figure><ul>\n<li>用 <code>vim</code>  打开 <code>install.sh</code>  发现，有的地方还是 <code>clone github</code>  的代码，所以做如下修改</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> install.sh</pre></td></tr></table></figure><ul>\n<li>找到以下部分</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Default settings</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">ZSH</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;ZSH<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">REPO</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;REPO<span class=\"token operator\">:-</span>ohmyzsh<span class=\"token operator\">/</span>ohmyzsh&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">REMOTE</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;REMOTE<span class=\"token operator\">:-</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>github.com<span class=\"token operator\">/</span>$&#123;REPO&#125;</span>.git<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">BRANCH</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;BRANCH<span class=\"token operator\">:-</span>master&#125;</span></pre></td></tr></table></figure><ul>\n<li>把中间两行修改为:</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">REPO</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;REPO<span class=\"token operator\">:-</span>mirrors<span class=\"token operator\">/</span>oh-my-zsh&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">REMOTE</span><span class=\"token operator\">=</span><span class=\"token variable\">$&#123;REMOTE<span class=\"token operator\">:-</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>gitee.com<span class=\"token operator\">/</span>$&#123;REPO&#125;</span>.git<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>然后 <code>:wq!</code>  保存</p>\n</li>\n<li>\n<p>然后执行 <code>install.sh</code></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> install.sh</pre></td></tr></table></figure><ul>\n<li>出现如下说明安装成功了</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-03-18-32-29.png\" alt=\"image_2023-01-03-18-32-29\"></p>\n<p>oh-my-zsh 常用插件</p>\n<p>zsh-syntax-highighting: 提供了语法高亮</p>\n<p>zsh-autosuggestions: 它会根据历史记录和完成情况建议您键入的命令，而且快速 / 不干扰自动提示</p>\n<p>zsh-completions: 命令自动补全</p>\n<p>安装:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-syntax-highlighting</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-autosuggestions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-completions <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:=</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-completions</pre></td></tr></table></figure><ul>\n<li>你可能会发现，又双叒叕 <code>clone</code>  不下来，那就复制仓库名，去 <code>gieet</code>  中搜索，替换连接即可</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://gitee.com/mo2/zsh-syntax-highlighting.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-syntax-highlighting</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> clone https://gitee.com/yantaozhao/zsh-autosuggestions.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-autosuggestions</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> clone https://gitee.com/wangnd/zsh-completions.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:=</span>~<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/plugins/zsh-completions</pre></td></tr></table></figure><ul>\n<li>下载好了之后，修改 <code>~/.zshrc</code>  配置文件</li>\n</ul>\n<ol>\n<li>取消配置文件中的第二行注释 <code>注意这不是profile文件</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/bin:/usr/local/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>设置插件当然这个操作也是在配置文件中进行的</li>\n</ol>\n<p>修改 <code>plugins=(git)</code>  改成以下命令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>git zsh-completions zsh-autosuggestions zsh-syntax-highlighting<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>autoload <span class=\"token parameter variable\">-U</span> compinit <span class=\"token operator\">&amp;&amp;</span> compinit</pre></td></tr></table></figure><p>最后重载下配置文件即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> .zshrc</pre></td></tr></table></figure><p>安装 zsh 主题 <code>powerlevel9k</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</pre></td></tr></table></figure><ul>\n<li>如果 <code>clone</code>  不下来可以不屑的多尝试几次毕竟只是网络所造成的</li>\n</ul>\n<p>编辑 <code>~/.zshrc</code>  来启用主题，在配置文件中找到 <code>ZSH_THEME=&quot;xxxx&quot;</code>  将内容更改为</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"powerlevel9k/powerlevel9k\"</span></pre></td></tr></table></figure><p>执行命令：来重载一下就生效了</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> .zshrc</pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%91%BD%E4%BB%A4/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%91%BD%E4%BB%A4/",
            "title": "linux好玩的命令",
            "date_published": "2024-04-02T10:00:51.589Z",
            "content_html": "<p>需要先提前安装以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> epel-release</pre></td></tr></table></figure><p>火车</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> sl</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sl <span class=\"token comment\">#火车</span></pre></td></tr></table></figure><p>火焰</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> aalib</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>aafire <span class=\"token comment\">#火焰</span></pre></td></tr></table></figure><hr>\n<p>水族馆 <code>asciiquarium</code></p>\n<p>安装 <code>Term-Animation包</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. <span class=\"token function\">wget</span> http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.4.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>. <span class=\"token function\">tar</span> xf Term-Animation-2.4.tar.gz </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>. <span class=\"token builtin class-name\">cd</span> Term-Animation-2.4/</pre></td></tr></table></figure><p>下载 perl-Curses 和 perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker 软件并安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. yum <span class=\"token function\">install</span> perl-Curses.x86_64  <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>. yum <span class=\"token function\">install</span> perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker  <span class=\"token parameter variable\">-y</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>. perl Makefile.PL</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>. <span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>. <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>然后安装 asciiquarium</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. <span class=\"token function\">wget</span> http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span>. <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> asciiquarium.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3</span>. <span class=\"token builtin class-name\">cd</span> asciiquarium_1.1/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4</span>. <span class=\"token function\">cp</span> asciiquarium /usr/local/bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">5</span>. <span class=\"token function\">chmod</span> +x /usr/local/bin/asciiquarium</pre></td></tr></table></figure><p>输入命令: <code>asciiquarium</code></p>\n<hr>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/",
            "title": "压缩与解压",
            "date_published": "2024-04-02T10:00:51.587Z",
            "content_html": "<h2 id=\"查看压缩包中的内容\"><a class=\"markdownIt-Anchor\" href=\"#查看压缩包中的内容\">#</a> 查看压缩包中的内容</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-tf</span> <span class=\"token punctuation\">[</span>压缩包.XX<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"压缩和解压文件gzipgunzip\"><a class=\"markdownIt-Anchor\" href=\"#压缩和解压文件gzipgunzip\">#</a> 压缩和解压文件 (gzip/gunzip)</h2>\n<h3 id=\"用于压缩文件gzip\"><a class=\"markdownIt-Anchor\" href=\"#用于压缩文件gzip\">#</a> 用于压缩文件 (gzip)</h3>\n<h3 id=\"用于解压文件gunzip\"><a class=\"markdownIt-Anchor\" href=\"#用于解压文件gunzip\">#</a> 用于解压文件 (gunzip)</h3>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gzip</span> <span class=\"token punctuation\">[</span>文件名<span class=\"token punctuation\">]</span><span class=\"token comment\"># 功能描述：压缩文件，只能将文件压缩为 *.gz 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gunzip <span class=\"token punctuation\">[</span>文件名.gz<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 功能描述：解压缩文件</span></pre></td></tr></table></figure><h2 id=\"压缩和解压目录\"><a class=\"markdownIt-Anchor\" href=\"#压缩和解压目录\">#</a> 压缩和解压目录</h2>\n<h2 id=\"tar压缩解压命令\"><a class=\"markdownIt-Anchor\" href=\"#tar压缩解压命令\">#</a> tar 压缩 / 解压命令</h2>\n<p><strong>压缩组合</strong></p>\n<p><code>zcvf</code> — <code>zcf</code></p>\n<ul>\n<li>参数 <code>-z:</code>  压缩</li>\n<li>参数 <code>-c:</code>  创建</li>\n<li>参数 <code>-v:</code>  显示输出 (可省略)</li>\n<li>参数 <code>-f:</code>  文件打包</li>\n</ul>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 要压缩的文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token punctuation\">(</span>参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>压缩包.tar.gz<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 将压缩包.tar.gz 打包到目标目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tar</span> zcvf <span class=\"token punctuation\">[</span>压缩到的位置<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>压缩包.tar.gz的位置<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>解压组合</strong></p>\n<p><code>zxvf</code> — <code>xf</code></p>\n<ul>\n<li>参数 <code>-x:</code>  解压</li>\n<li>参数 <code>-C:</code>  解压到指定的目录</li>\n</ul>\n<p>语法格式:</p>\n<p>解压到当前目录下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> <span class=\"token punctuation\">[</span>压缩包.tar.gz<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>解压到指定目录下:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> <span class=\"token punctuation\">[</span>压缩包.tar.gz<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">-C</span> <span class=\"token punctuation\">[</span>解压的目标目录下<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"unzip压缩解压命令\"><a class=\"markdownIt-Anchor\" href=\"#unzip压缩解压命令\">#</a> unzip 压缩 / 解压命令</h2>\n<p>一般用于解压 Windows 放入 Linux 的.zip 压缩包</p>\n<p><strong>解压命令</strong></p>\n<p>语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">unzip</span> <span class=\"token punctuation\">[</span>压缩包.zip<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>压缩 / 打包命令</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gzip</span> <span class=\"token punctuation\">[</span>压缩文件夹.log<span class=\"token punctuation\">]</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F1/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F1/",
            "title": "CentOS 7 Linux安装动态监控htop",
            "date_published": "2024-04-02T10:00:51.584Z",
            "content_html": "<p>top 与 ps 命令很相似，它们都是用来显示正在执行的进程，top 与 ps 最大的不同之处，在于 top 在执行一段时间可以更新正在运行的进程</p>\n<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>top [选项]</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d 秒数</td>\n<td>指定 top 命令每隔几秒更新，默认是 3 秒</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>使 top 不显示任何闲置或者僵死进程</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>通过指定监控进程 ID 来仅仅监控某个进程的状态</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-06-21-08-03.png\" alt=\"image_2023-01-06-21-08-03\"></p>\n<blockquote>\n<p>交互操作说明</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>P</td>\n<td>以 CPU 使用率排序，默认就是此项</td>\n</tr>\n<tr>\n<td>M</td>\n<td>以内存的使用率排序</td>\n</tr>\n<tr>\n<td>N</td>\n<td>以 PID 排序</td>\n</tr>\n<tr>\n<td>q</td>\n<td>退出 top</td>\n</tr>\n<tr>\n<td>u</td>\n<td>输入指定进程监控指定的进程</td>\n</tr>\n<tr>\n<td>k</td>\n<td>输入指定进程 ID 号结束指定的进程</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>查看系统网络情况</p>\n</blockquote>\n<p>netstat</p>\n<p>基本语法格式:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>参数:</p>\n<p>-an 按一定顺序排列输出</p>\n<p>-p  显示哪个进程在调用</p>\n<blockquote>\n<p>htop</p>\n</blockquote>\n<p>安装指令:htop 工具在 epel 源中提供，需要配置 epel 源 执行: sudo yum -y install epel-release</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> <span class=\"token function\">htop</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/%E4%BF%AE%E6%94%B9root%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81/",
            "title": "CentOS 7 Linux修改root用户密码",
            "date_published": "2024-04-02T10:00:51.581Z",
            "content_html": "<h1 id=\"修改root用户密码\"><a class=\"markdownIt-Anchor\" href=\"#修改root用户密码\">#</a> 修改 root 用户密码</h1>\n<p>切换到 root 用户</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">su</span> - root</pre></td></tr></table></figure><p>然后输入命令进行修改</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span></pre></td></tr></table></figure><p>输入要修改的密码输入两次</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316213719254.png\" alt=\"image-20240316213719254\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/tree%E5%AE%89%E8%A3%85%E5%8D%B3%E4%BD%BF%E7%94%A8/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/tree%E5%AE%89%E8%A3%85%E5%8D%B3%E4%BD%BF%E7%94%A8/",
            "title": "CentOs-tree命令安装及使用",
            "date_published": "2024-04-02T10:00:51.575Z",
            "content_html": "<p>直接命令安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> tree</pre></td></tr></table></figure><p>等待安装即可</p>\n<p>安装完成后输入 tree / 来查看下是否安装成功</p>\n<p>tree -help</p>\n<blockquote>\n<p>tree 食用参数</p>\n<hr>\n<p>-a 显示所有文件和目录</p>\n<p>-A 使用 ASNI 绘图字符显示树状图而非 ASCII 字符组合</p>\n<p>-C 在文件和目录清单加上色彩，便于区分各种类型</p>\n<p>-d 显示目录名称而非内容</p>\n<p>-D 列出文件或目录的更改时间</p>\n<p>-f 在每个文件或目录之前，显示完整的相对路径名称</p>\n<p>-F 在执行文件，目录，Socket, 符号链接，管道名称名称，各自加上 &quot;*&quot;,&quot;/&quot;,&quot;=&quot;,&quot;@&quot;,&quot;|&quot; 号</p>\n<p>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码</p>\n<p>-i 不以阶梯状列出文件或目录名称</p>\n<p>-I &lt;范本样式&gt; 不显示符合范本样式的文件或目录名称</p>\n<p>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录</p>\n<p>-n 不在文件和目录清单加上色彩</p>\n<p>-N 直接列出文件和目录名称，包括控制字符</p>\n<p>-p 列出权限标示</p>\n<p>-P &lt;范本样式&gt; 只显示符合范本样式的文件或目录名称</p>\n<p>-q 用 &quot;?&quot; 号取代控制字符，列出文件和目录名称</p>\n<p>-s 列出文件或目录大小</p>\n<p>-t 用文件和目录的更改时间排序</p>\n<p>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码</p>\n<p>-x 将范围局限在现在的文件系统中，若指定目录下的某些子目录，某存放于另一个文件系统上</p>\n</blockquote>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/neofetch/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/neofetch/",
            "title": "CentOs安装neofetch",
            "date_published": "2024-04-02T10:00:51.572Z",
            "content_html": "<p>安装 <code>dnf命令</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> dnf</pre></td></tr></table></figure><p>安装 <code>dnf-plugins-core</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> dnf-plugins-core</pre></td></tr></table></figure><p>启用 COPR 仓库然后安装 neofetch</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> dnf copr <span class=\"token builtin class-name\">enable</span> konimex/neofetch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> dnf <span class=\"token function\">install</span> neofetch</pre></td></tr></table></figure><p>执行命令 <code>neofetch</code>  命令后查看</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-03-17-45-11.png\" alt=\"image_2023-01-03-17-45-11\"></p>\n<p>指定显示系统的 Logo</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>neofetch <span class=\"token parameter variable\">--ascii_distro</span> <span class=\"token punctuation\">[</span>系统比如:Mac<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20230603110201318.png\" alt=\"image-20230603110201318\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/curl/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/curl/",
            "title": "linux - curl的用法指南",
            "date_published": "2024-04-02T10:00:51.570Z",
            "content_html": "<h2 id=\"curl的用法指南\"><a class=\"markdownIt-Anchor\" href=\"#curl的用法指南\">#</a> curl 的用法指南</h2>\n<p><strong>简介</strong></p>\n<p>curl 是常用的命令工具，用来请求 web 服务器，它的名字就是客户端 (client) 的 URL 工具的意思<br>\n的</p>\n<p>它的功能非常强大，命令行参数多达几十种，如果熟练的话，完全可以取代 Postman 这一类的图形界面工具</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-02-01-07-44-09.png\" alt=\"image_2023-02-01-07-44-09\"></p>\n<p>不带任何参数时，curl 就是发出 GET 请求</p>\n<p><code>curl https://www.example.com</code></p>\n<p>上面命令向<font style=\"color:red\"><a href=\"http://www.example.com\">www.example.com</a></font>发出 GET 请求，服务器返回的内容会在命令行输出</p>\n<p><strong>-A</strong></p>\n<p><font style=\"color:red\">-A</font>参数指定客户端的用户代理标头，及<font style=\"color:red\">User-Agent</font>.curl 的默认用户代理字符串是<font style=\"color:red\">curl/[version]</font></p>\n<p><code>curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36' https://google.com</code></p>\n<p>上面个命令将<font style=\"color:red\">User_Agent</font>改成 Chrome 浏览器</p>\n<p><code>curl -A '' https://google.com</code></p>\n<p>上面个命令会移除<font style=\"color:red\">User-Agent</font>标头</p>\n<p>也可以通过<font style=\"color:red\">-H</font>参数直接指定标头，更改<font style=\"color:red\">User-Agent</font></p>\n<p><code>curl -H 'User-Agent: php/1.0' https://google.com</code></p>\n<p><strong>-b</strong></p>\n<p><font style=\"color:red\">-b</font>参数用来向服务器发送 Cookie</p>\n<p><code>curl -b 'foo=bar' https://google.com</code></p>\n<p>上面命令会生成一个标头<font style=\"color:red\">Cookie:foo=bar</font>, 向服务器发送一个名为<font style=\"color:red\">foo</font>, 值为<font style=\"color:red\">bar</font>的 Cookie</p>\n<p><code>curl -b 'foo1=bar;foo2=bar2' https://google.com</code></p>\n<p>上面命令发送两个 Cookie</p>\n<p><code>curl -b cookies.txt https://www.google.com</code></p>\n<p>上面命令读取本地文件<font style=\"color:red\">cookies.txt</font>, 这里面是服务器设置的 Cookie (参见<font style=\"color:red\">-c</font>参数), 将其发送到服务器</p>\n<p><strong>-c</strong></p>\n<p><font style=\"color:red\">-c</font>参数将服务器设置的 Cookie 写入一个文件</p>\n<p><code>curl -c cookies.txt https://www.google.com</code></p>\n<p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<font style=\"color:red\">cookies.txt</font></p>\n<p><strong>-d</strong></p>\n<p><font style=\"color:red\">-d</font>参数用于发送 POST 请求的数据体</p>\n<pre><code>curl -d'login=emma＆password=123'-X POST https://google.com/login\n# 或者\ncurl -d 'login=emma' -d 'password=123' -X POST  https://google.com/login\n</code></pre>\n<p>使用<font style=\"color:red\">-d</font>参数以后，HTTP 请求会自动加上标头</p>\n<p><font style=\"color:red\">Content-Type:application/x-www-form-urlencoded</font>, 并且会自动请求转为 POST 方法，因此可以省略<font style=\"color:red\">-X POST</font></p>\n<p><font style=\"color:red\">-d</font>参数可以读取本地文本文件的数据，向服务器发送</p>\n<p><code>curl -d '@data.txt' https://google.com/login</code></p>\n<p>上面个命令读取<font style=\"color:red\">data.txt</font>文件的内容，作为数据体向服务器发送</p>\n<p><strong>–data-urlencode</strong></p>\n<p><font style=\"color:red\">–data-urlencode</font>参数等同于<font style=\"color:red\">-d</font>, 发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码</p>\n<p><code>curl --data-urlencode 'comment=hello world' https://google.com/login</code></p>\n<p>上面改代码中，发送的数据<font style=\"color:red\">hello world</font>之间有一个空格，需要进行 URL 编码</p>\n<p><strong>-e</strong></p>\n<p><font style=\"color:red\">-e</font>参数用来设置 HTTP 的标头<font style=\"color:red\">Referer</font>, 表示请求的来源</p>\n<p><code>curl -e 'https://google.com?q=example' https://www.example.com</code></p>\n<p>上面命令将<font style=\"color:red\">Referer</font>标头设为<font style=\"color:red\"><a href=\"https://google.com?q=example\">https://google.com?q=example</a></font></p>\n<p><font style=\"color:red\">-H</font>参数可以用过直接添加标头<font style=\"color:red\">Referer</font>, 达到同样效果</p>\n<p><code>curl -H 'Referer: https://google.com?q=example' https://www.example.com</code></p>\n<p><strong>-F</strong></p>\n<p><font style=\"color:red\">-F</font>参数用来向服务器上传二进制文件</p>\n<p><code>curl -F 'file=@photo.png' https://google.com/profileH</code></p>\n<p>上面命令会给 HTTP 请求加上标头<font style=\"color:red\">Content-Type: multipart/form-data</font>, 返回将文件<font style=\"color:red\">photo.png</font>, 作为<font style=\"color:red\">file</font>字段上传</p>\n<p><font style=\"color:red\">-F</font>参数可以指定 MIME 类型</p>\n<p><code> curl -F 'file=@photo.png;type=image/png' https://google.com/profile</code></p>\n<p>上面命令指定 MIME 类型为<font style=\"color:red\">image/png</font>, 否则 curl 会把 MIME 类型设为<font style=\"color:red\">application/octet-stream</font></p>\n<p><font style=\"color:red\">-F</font>参数也可以指定文件名</p>\n<p><code>curl -F 'file=@photo.png;filename=me.png' https://google.com/profile</code></p>\n<p>上面命令中，原始文件名为<font style=\"color:red\">photo.png</font>, 但是服务器接收到的文件名为<font style=\"color:red\">me.png</font></p>\n<p><strong>-G</strong></p>\n<p><font style=\"color:red\">-G</font>参数用来构造 URL 的查询字符串</p>\n<p><code>curl -G -d 'q=kitties' -d 'count=20' https://google.com/search</code></p>\n<p>上面命令会发出一个 GET 请求，实际请求的 URL 为<font style=\"color:red\"><a href=\"https://google.com/search?q=kitties&amp;count=20\">https://google.com/search?q=kitties&amp;count=20</a></font>, 如果省略<font style=\"color:red\">-G</font>, 会发出一个 POST 请求</p>\n<p>如果数据需要 URL 编码，可以结合<font style=\"color:red\">–data–urlencodeH</font>参数</p>\n<p><code>curl -G --data-urlencode 'comment=hello world' https://www.example.com</code></p>\n<p><strong>-H</strong></p>\n<p><font style=\"color:red\">-H</font>参数添加 HTTP 请求的标头</p>\n<p><code>curl -H 'Accept-Language: en-US' https://google.com</code></p>\n<p>上面命令添加 HTTP 标头<font style=\"color:red\">Accept-Language: en-US</font></p>\n<p><code>curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://google.com</code></p>\n<p>上面命令添加两个 HTTP 标头</p>\n<p><code>curl -d '&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;' -H 'Content-Type: application/json' https://google.com/login</code></p>\n<p>上面命令添加 HTTP 请求的标头是<font style=\"color:red\">Content-Type: application/json</font>, 然后用<font style=\"color:red\">-d</font>参数发送 JSON 数据</p>\n<p><strong>-i</strong></p>\n<p><font style=\"color:red\">-i</font>参数打印出服务器回应的 HTTP 标头</p>\n<p><code>curl -i https://www.example.com</code></p>\n<p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，在输出网页的源码</p>\n<p><strong>-I</strong></p>\n<p><font style=\"color:red\">-I</font>参数向服务器发送 HEAD 请求，然后会将服务器返回的 HTTP 标头打印出来</p>\n<p><code>curl -I https://www.example.com</code></p>\n<p>上面命令输出服务器对 HEAD 请求的回应</p>\n<p><font style=\"color:red\">-head</font>参数等同于<font style=\"color:red\">-I</font></p>\n<p><code>curl --head https://www.example.com</code></p>\n<p><strong>-K</strong></p>\n<p><font style=\"color:red\">-K</font>参数指定跳过 SSL 检测</p>\n<p><code>curl -k https://www.example.com</code></p>\n<p>上面命令不会检查服务器的 SSL 证书是否正确</p>\n<p><strong>-L</strong></p>\n<p><font style=\"color:red\">-L</font>参数会让 HTTP 请求跟随服务器的重定向，curl 默认不跟随重定向</p>\n<p><code>curl -L -d 'tweet=hi' https://api.twitter.com/tweet</code></p>\n<p><strong>–limit-rate</strong></p>\n<p><font style=\"color:red\">–limit-rate</font>用来限制，HTTP 请求和回应的宽带，模拟慢网速的环境</p>\n<p><code>curl --limit-rate 200k https://google.com</code></p>\n<p>上面命令将带宽限制在每秒 200k 字节</p>\n<p><strong>-o</strong></p>\n<p><font style=\"color:red\">-o</font>参数将服务器的回应保存成文件，等同于<font style=\"color:red\">wget</font></p>\n<p>上面命令将<font style=\"color:red\"><a href=\"http://www.example.com\">www.example.com</a></font>保存成<font style=\"color:red\">example.html。</font></p>\n<p><strong>-O</strong></p>\n<p><font style=\"color:red\">-O</font>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名</p>\n<p><code>curl -O https://www.example.com/foo/bar.html</code></p>\n<p>上面命令将服务器回应保存成文件，文件名为<font style=\"color:red\">bar.html</font></p>\n<p><strong>-s</strong></p>\n<p><font style=\"color:red\">-s</font>参数将不输出错误和进度信息</p>\n<p><code>curl -s https://www.example.com</code></p>\n<p>上面命令一旦发生错误，不会显示错误信息，不发生错误的话，会正常显示运行结果</p>\n<p>如果想让 curl 不产生任何输出，可以使用下面的命令</p>\n<p><code>curl -s -o /dev/null https://google.com</code></p>\n<p><strong>-S</strong></p>\n<p><font style=\"color:red\">-S</font>参数指定只输出错误的信息，通常与<font style=\"color:red\">-s 一起使用</font></p>\n<p><code>curl -s -o /dev/null https://google.com</code></p>\n<p>上面命令没有任何输出，除非发生错误</p>\n<p><strong>-u</strong></p>\n<p><font style=\"color:red\">-u</font>参数用来设置服务器认证的用户名和密码</p>\n<p><code> curl -u 'bob:12345' https://google.com/login</code></p>\n<p>上面命令设置用户名为<font style=\"color:red\">bob</font>, 密码为<font style=\"color:red\">12345</font>, 然后将其转为 HTTP 标头<font style=\"color:red\">Authorization: Basic Ym9iOjEyMzQ1</font>.</p>\n<p>curl 能够识别 URL 里面的用户名和密码</p>\n<p><code>curl https://bob:12345@google.com/login</code></p>\n<p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头</p>\n<p><code>curl -u 'bob' https://google.com/login</code></p>\n<p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码</p>\n<p><strong>-v</strong></p>\n<p><font style=\"color:red\">-v</font>参数输出通信的整个过程，用于调式</p>\n<p><code> curl -v https://www.example.com</code></p>\n<p><font style=\"color:red\">-trace</font>参数也可以用于调式，还会输出原始的二进制数据</p>\n<p><code> curl --trace - https://www.example.com</code></p>\n<p><strong>-x</strong></p>\n<p><font style=\"color:red\">-x</font>参数指定 HTTP 请求的代理</p>\n<p><code>curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</code></p>\n<p>上面命令指定 HTTP 请求通过<font style=\"color:red\"><a href=\"http://myproxy.com:8081\">myproxy.com:8081</a></font>cks<br>\n5 代理发出</p>\n<p>如果没有指定代理协议，默认为 HTTP</p>\n<p><code>curl -x james:cats@myproxy.com:8080 https://www.example.com</code></p>\n<p>上面命令中，请求的代理使用 HTTP 协议</p>\n<p><strong>-X</strong></p>\n<p><font style=\"color:red\">-X</font>参数指定 HTTP 请求的方法</p>\n<p><code>curl -X POST https://www.example.com</code></p>\n<p>上面命令对<font style=\"color:red\"><a href=\"https://www.example.com\">https://www.example.com</a></font>发出 POST 请求</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/Linux%E6%89%93%E8%A1%A5%E4%B8%81,%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/Linux%E6%89%93%E8%A1%A5%E4%B8%81,%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/",
            "title": "Linux打补丁,安装常用软件 yum源",
            "date_published": "2024-04-02T10:00:51.568Z",
            "content_html": "<h1 id=\"linux打补丁安装常用软件\"><a class=\"markdownIt-Anchor\" href=\"#linux打补丁安装常用软件\">#</a> Linux 打补丁，安装常用软件</h1>\n<p>1. 配置官方源更新地址 (打补丁下载软件的地址)</p>\n<p>官方 ====&gt; 国内 (阿里云，网易 163, 清华源)</p>\n<p>CentOS7 默认是从官方下载软件的，改为从阿里云网站下载</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</pre></td></tr></table></figure><p>2. 配置第三方 epel 源更新地址</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /etc/yum. repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</pre></td></tr></table></figure><p>一块使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> <span class=\"token parameter variable\">-o</span> /etc/yum. repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</pre></td></tr></table></figure><p>3. 更新所有软件到最新 (注意以下说明再考虑是否要执行，不然后果自担)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum update <span class=\"token parameter variable\">-y</span> <span class=\"token comment\">#总下载量 279M</span></pre></td></tr></table></figure><p><mark>工作中服务器正式环境之前可以执行，否则不能执行，容易破坏服务器</mark></p>\n<p>要保证:</p>\n<p>1) 镜像备份</p>\n<p>2) 让服务的公司签字 (不承担责任)</p>\n<p>3) 搭建正式环境的测试环境测试好</p>\n<p>4.CentOS6 和 CentOS7 都要安装的企业运维常用基础工具包</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> nmap dos2unix lrzsz <span class=\"token function\">nc</span> <span class=\"token function\">lsof</span> <span class=\"token function\">wget</span> <span class=\"token parameter variable\">-y</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> tcpdump <span class=\"token function\">htop</span> iftop iotop sysstat nethogs <span class=\"token parameter variable\">-y</span></pre></td></tr></table></figure><p>CentOS7 要安装的企业运维常用基础工具包</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> psmisc net-tools bash-completion vim-enhanced <span class=\"token parameter variable\">-y</span></pre></td></tr></table></figure><p>好玩的工具</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> coway <span class=\"token parameter variable\">-y</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/Linux%E5%88%A0%E9%99%A4%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/Linux%E5%88%A0%E9%99%A4%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95/",
            "title": "linux删除特殊符号文件或目录",
            "date_published": "2024-04-02T10:00:51.565Z",
            "content_html": "<p>想要删除 time&amp;1.class, 用 <code>rm time&amp;1.class</code>  是不行的，可以用 <code>rm time&quot;&amp;&quot;1.class</code>  删掉</p>\n<p>假设 Linux 系统中有一个文件名叫 &quot;-polo&quot;, 如果用户想删除它，按照一般的删除方法在命令行中输入 <code>rm -polo</code>  命令后，界面会提示是 &quot;无效选项&quot;(invalid option)</p>\n<p>原因是 Linux 把文件名的第一个字符为 &quot;-“当作选项了，用户可以使用”–“符号来解决这个问题，输入 <code>rm -- -polo</code>  命令便可顺利删除名为”-polo&quot; 的文件</p>\n<p>如果是其它特殊字符的话可以在特殊字符前加一个 &quot;&quot;(双引号) 符号，或者&quot;&quot;(双引号) 把整个文件名括起来都可以</p>\n",
            "tags": [
                "linux",
                "计算机学科",
                "代码经验"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/LinuxinstallMySQL8.0.28/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/LinuxinstallMySQL8.0.28/",
            "title": "CentOs安装MySQL8.0.28",
            "date_published": "2024-04-02T10:00:51.562Z",
            "content_html": "<ol>\n<li>\n<p>去官网下载 MySQL</p>\n</li>\n<li>\n<p>创建一个存放 MySQL 的目录</p>\n</li>\n<li>\n<p>在解压之前查看以下系统是否自带了 mariadb 数据库</p>\n<ul>\n<li>查看指令：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mariadb</pre></td></tr></table></figure><ul>\n<li>可能会列出两个出来，将都卸载掉输入指令：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-e</span> <span class=\"token parameter variable\">--nodeps</span> mariadb</pre></td></tr></table></figure></li>\n<li>\n<p>解压 MySQL 输入指令：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> <span class=\"token punctuation\">[</span>mysql<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>在当前解压 MySQL 的目录中输入顺序安装 MySQL<mark> 注意：顺序很重要</mark></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> mysql-community-common-8.0.28-1.el7.x86_64.rpm</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> mysql-community-client-plugins-8.0.28-1.el7.x86_64.rpm</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> mysql-community-libs-8.0.28-1.el7.x86_64.rpm</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> mysql-community-client-8.0.28-1.el7.x86_64.rpm</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> mysql-community-icu-data-files-8.0.28-1.el7.x86_64.rpm</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span> mysql-community-server-8.0.28-1.el7.x86_64.rpm</pre></td></tr></table></figure><ol start=\"6\">\n<li>安装完成后进行初始化 MySQL</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token parameter variable\">--initialize</span> <span class=\"token parameter variable\">--console</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>修改 MySQL 所有者与所属组 [便以使用]</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chown</span> mysql:mysql <span class=\"token parameter variable\">-R</span> /var/lib/mysql/</pre></td></tr></table></figure><ol start=\"8\">\n<li>启动 MySQL 服务</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start mysqld</pre></td></tr></table></figure><ol start=\"9\">\n<li>MySQL 会自动帮我们创建一个密码使用指令查看密码</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /var/log/mysqld.log<span class=\"token operator\">|</span><span class=\"token function\">grep</span> localhost</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Enter 后显示 root@localhost: 后面就是密码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost opt<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /var/log/mysqld.log|grep localhost</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2022</span>-10-21T14:55:24.788588Z <span class=\"token number\">6</span> <span class=\"token punctuation\">[</span>Note<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>MY-010454<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Server<span class=\"token punctuation\">]</span> A temporary password is generated <span class=\"token keyword\">for</span> root@localhost: AqFwbqjyd1<span class=\"token punctuation\">;</span>_</pre></td></tr></table></figure><ol start=\"10\">\n<li>输入上面 MySQL 自动创建的密码进入 MySQL</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysql <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Enter passwd：AqFwbqjyd1<span class=\"token punctuation\">;</span>_ <span class=\"token punctuation\">[</span>最好复制粘贴因为容易出错<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ol start=\"11\">\n<li>更改这个密码</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'localhost'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'dkx'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/Linux_%E8%BF%9B%E7%A8%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/Linux_%E8%BF%9B%E7%A8%8B/",
            "title": "linux进程",
            "date_published": "2024-04-02T10:00:51.558Z",
            "content_html": "<ol>\n<li>\n<p>在 Linux 中，每个<font color='red'>执行的程序</font>都被称为一个进程，每一个进程都分配一个 ID 号 (pid, 进程号)</p>\n</li>\n<li>\n<p>每个进程都可能以两种方式存在，<font color='red'>前台</font>与<font color='red'>后台</font>, 所谓前台进程就是用户目前的屏幕上可以进行操作的，后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式进行</p>\n</li>\n<li>\n<p>一般系统的服务都是以后台进程的方式存在 (如，MySQL,Tomcat 等等), 而且都会常驻在系统中，直到关机才结束</p>\n</li>\n</ol>\n<blockquote>\n<p>显示系统执行的进程</p>\n</blockquote>\n<p>ps 命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况，可以不加任何参数</p>\n<p>ps 显示的信息选项:</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PID</td>\n<td>进程识别号</td>\n</tr>\n<tr>\n<td>TIY</td>\n<td>终端机号</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>此进程所消 CPU 时间</td>\n</tr>\n<tr>\n<td>CMD</td>\n<td>正在执行的命令或进程名</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>参数:</li>\n</ul>\n<p>-a : 显示当前终端的所有进程信息</p>\n<p>-u : 以用户的格式显示进程信息</p>\n<p>-x : 显示后台进程运行的参数</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208125421467.png\" alt=\"image-20240208125421467\"></p>\n<blockquote>\n<p>ps 详解</p>\n</blockquote>\n<ol>\n<li>\n<p>指令:ps -aux|grep xxx, 比如我看看有没有 sshd 服务</p>\n</li>\n<li>\n<p>指令说明:</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>System V 展示风格</p>\n</li>\n<li>\n<p>USER  用户名称</p>\n</li>\n<li>\n<p>PID   进程号</p>\n</li>\n<li>\n<p>% CPU  进程占用 CPU 的百分比</p>\n</li>\n<li>\n<p>$MEM  进程所占用物理内存的百分比</p>\n</li>\n<li>\n<p>VSZ   进程占用的虚拟内存大小 (单位：KB)</p>\n</li>\n<li>\n<p>RSS   进程占用的物理内存大小 (单位：KB)</p>\n</li>\n<li>\n<p>TTY    终端名称，缩写</p>\n</li>\n<li>\n<p>STAT  进程状态：其中 S: 睡眠，s: 表示该进程是会话的先导进程，N: 表示进程拥有比普通优先级更低的优先级，R: 表示正在运行，D: 短期等待，Z: 僵死进程，T: 被跟踪或者被停止等等</p>\n</li>\n<li>\n<p>STARTED   进程的启动时间</p>\n</li>\n<li>\n<p>TIME  CPU 时间，即进程使用 CPU 的总时间</p>\n</li>\n<li>\n<p>COMMAND   启动进程所用的命令和参数，如果过长会被截断显示</p>\n</li>\n</ul>\n<blockquote>\n<p>ps -ef 是以全格式显示当前所有的进程</p>\n</blockquote>\n<p>参数:-e 显示所有进程，-f 全格式</p>\n<p>格式: <code>ps -ef|grep xxx</code></p>\n<ul>\n<li>\n<p>是 BSD 风格</p>\n</li>\n<li>\n<p>UID   用户 ID</p>\n</li>\n<li>\n<p>PID   进程 ID</p>\n</li>\n<li>\n<p>PPID  父进程 ID</p>\n</li>\n<li>\n<p>C CPU 用于计算执行优先级的因子，数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I/O 密集型运算，执行优先级会提高</p>\n</li>\n<li>\n<p>STIME 进程启动时间</p>\n</li>\n<li>\n<p>TTY   完整的终端名称</p>\n</li>\n<li>\n<p>TIME  CPU 时间</p>\n</li>\n<li>\n<p>CMD   启动进程所用的命令和参数</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208125432431.png\" alt=\"image-20240208125432431\"></p>\n<ul>\n<li>查看 sshd 的父进程</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-06-13-49-12.png\" alt=\"image_2023-01-06-13-49-12\"></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208125446349.png\" alt=\"image-20240208125446349\"></p>\n<p><font style=\"color:red\"><strong>过滤掉 grep 的查询出来的 grep 进程</strong></font></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> Xxx.server<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span></pre></td></tr></table></figure><p>可以看到 Systemd 的进程的 PPID 为 0 表示它没有父进程</p>\n<blockquote>\n<p>终止进程 kill 和 killall</p>\n</blockquote>\n<ul>\n<li>介绍</li>\n</ul>\n<p>若是某个进程执行一半需要停止时，或是已取消了很大的系统资源，此时可以考虑停止该进程，使用 kill 命令来完成此项任务</p>\n<ul>\n<li>基本语法格式:</li>\n</ul>\n<p>kill    [选项] 进程号 (功能描述：通过进程号杀死进程)</p>\n<p>killall 进程名称 (功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用)</p>\n<ul>\n<li>常用选项</li>\n</ul>\n<p>-9  表示强迫进程立刻停止</p>\n<blockquote>\n<p>查看进程树 pstree</p>\n</blockquote>\n<ul>\n<li>基本语法格式:</li>\n</ul>\n<p>pstree  [选项], 可以更加直观的来看进程信息</p>\n<ul>\n<li>常用选项</li>\n</ul>\n<p>-p  显示进程的 PID</p>\n<p>-u  显示进程的所属用户</p>\n<p>命令不存在执行命令进行安装: <code>sudo yum -y install psmisc</code></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-06-15-07-14.png\" alt=\"image_2023-01-06-15-07-14\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/CentOS%E5%AE%89%E8%A3%85fortune+cowsay/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/CentOS%E5%AE%89%E8%A3%85fortune+cowsay/",
            "title": "CentOs安装forune+cowsay",
            "date_published": "2024-04-02T10:00:51.555Z",
            "content_html": "<p>先找下看有没有</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum search fortune</pre></td></tr></table></figure><p>安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> fortune-mod</pre></td></tr></table></figure><p>安装 cowsay</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> cowsay</pre></td></tr></table></figure><p>现在就可以玩了！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fortune<span class=\"token operator\">|</span>cowsay</pre></td></tr></table></figure><p>安装有意思的 <code>pokemonsay</code>  宝可梦</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208123610659.png\" alt=\"image-20240208123610659\"></p>\n<p>安装</p>\n<p>拿到连接</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-03-23-09-48.png\" alt=\"image_2023-01-03-23-09-48\"></p>\n<p>执行命令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://gitee.com/sunfei2021/pokemonsay.git</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> pokemonsay</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./install.sh</pre></td></tr></table></figure><p>退回到根目录下试一下命令 <code>pokemonsay</code>  这个软件被安装到了根目录了</p>\n<p>执行命令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pokemonsay Hello World</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fortune<span class=\"token operator\">|</span>pokemonsay</pre></td></tr></table></figure><ul>\n<li>添加 <code>$fortune|pokemonsay 内容自己定义</code>  到 <code>~/.zshrc</code>  配置文件的末尾，使得每次打开终端都可以随机输出一个宝可梦</li>\n</ul>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/CentOS%207%20Linux%E5%AE%89%E8%A3%85GoogleChrome/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/%E5%9F%BA%E7%A1%80/CentOS%207%20Linux%E5%AE%89%E8%A3%85GoogleChrome/",
            "title": "CentOS 7 Linux安装GoogleChrome",
            "date_published": "2024-04-02T10:00:51.553Z",
            "content_html": "<h1 id=\"centos-7-linux安装googlechrome\"><a class=\"markdownIt-Anchor\" href=\"#centos-7-linux安装googlechrome\">#</a> CentOS 7 Linux 安装 GoogleChrome</h1>\n<p>直接操作步骤:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> etc/yum.repos.d</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> google-chrome.repo</pre></td></tr></table></figure><p>编辑输入 vim</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>google-chrome<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span>google-chrome</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">baseurl</span><span class=\"token operator\">=</span>http://dl.google.com/linux/chrome/rpm/stable/<span class=\"token variable\">$basearch</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">enabled</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">gpgcheck</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">gpgkey</span><span class=\"token operator\">=</span>https://dl-ssl.google.com/linux/linux_signing_key.pub</pre></td></tr></table></figure><p>安装谷歌</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token parameter variable\">-y</span> <span class=\"token function\">install</span> google-chrome-stable <span class=\"token parameter variable\">--nogpgcheck</span></pre></td></tr></table></figure><p>OK!!!</p>\n<p>解决安装谷歌后 root 用户打不开情况</p>\n<p>终端输入:</p>\n<p>找到安装 google 的路径里面再找到 google-chrome 配置文件修改最后一行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /opt/google/chrome/google-chrome</pre></td></tr></table></figure><p>配置文件的最后一行修改为:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"<span class=\"token variable\">$0</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$HERE</span>/chrome\"</span> <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span> --no-sandbox</pre></td></tr></table></figure><p>保存就 OK 了！</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F/",
            "title": "shell预定义变量",
            "date_published": "2024-04-02T10:00:51.548Z",
            "content_html": "<blockquote>\n<p>基本介绍</p>\n</blockquote>\n<p>就是 shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用</p>\n<blockquote>\n<p>基本语法</p>\n</blockquote>\n<ol>\n<li>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mtext>功能描述</mtext><mo>:</mo><mtext>当前进程的进程号</mtext><mo stretchy=\"false\">(</mo><mi>P</mi><mi>I</mi><mi>D</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(功能描述:当前进程的进程号(PID))\n\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">当</span><span class=\"mord cjk_fallback\">前</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">程</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">进</span><span class=\"mord cjk_fallback\">程</span><span class=\"mord cjk_fallback\">号</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></span></p>\n</li>\n<li>\n<p>$?(功能描述：最后一次执行的命令的返回状态，如果这个变量的值为 0, 证明上一个命令正确执行；如果这个变量的值为非 0 (具体是哪个数，由命令自己来决定), 则证明上一个命令执行不正确了)</p>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "shell运算符",
            "date_published": "2024-04-02T10:00:51.544Z",
            "content_html": "<blockquote>\n<p>基本语法格式</p>\n</blockquote>\n<ol>\n<li>\n<p>&quot;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mtext>运算式</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">&quot;</mi><mtext>或</mtext><mi mathvariant=\"normal\">&quot;</mi></mrow><annotation encoding=\"application/x-tex\">((运算式))&quot;或&quot;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">算</span><span class=\"mord cjk_fallback\">式</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">&quot;</span><span class=\"mord cjk_fallback\">或</span><span class=\"mord\">&quot;</span></span></span></span>[运算式]&quot; 或者 expr m + n //expression: 表达式</p>\n</li>\n<li>\n<p>注意 expr 运算符间要有空格，如果希望将 expr 的结果赋给某个变量，使用:  <code> </code></p>\n</li>\n<li>\n<p>expr m - n</p>\n</li>\n<li>\n<p>expr *,/,%  乘，除，取模      乘的前面 \\ 是转移的</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#使用第一种方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果为：20</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#使用第二种方式 推荐使用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">B</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span>+3<span class=\"token punctuation\">)</span>*4<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token variable\">$B</span> <span class=\"token comment\">#输出结果为：20</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#使用第三种方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">C</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token number\">2</span> + <span class=\"token number\">3</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">E</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> $C <span class=\"token punctuation\">\\</span>* <span class=\"token number\">4</span><span class=\"token variable\">`</span></span> <span class=\"token comment\">#对于 expr 中的乘需要使用 \\ 进行转移</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">D</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">expr</span> <span class=\"token number\">2</span>+3<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">c</span><span class=\"token operator\">=</span><span class=\"token variable\">$C</span> <span class=\"token comment\">#输出结果：5</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">d</span><span class=\"token operator\">=</span><span class=\"token variable\">$D</span> <span class=\"token comment\">#输出结果：2+3                                                                                                                            </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">e</span><span class=\"token operator\">=</span><span class=\"token variable\">$E</span> <span class=\"token comment\">#输出结果为：20</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token variable\">$1</span>+<span class=\"token variable\">$2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#通过位置参数变量在命令行中赋值并计算</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token variable\">$SUM</span> <span class=\"token comment\">#输出结果为：你自己输入的数值相加后的数值</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "title": "shell设置环境变量",
            "date_published": "2024-04-02T10:00:51.540Z",
            "content_html": "<p>基本语法:</p>\n<ol>\n<li>\n<p>export 变量名 = 变量值 (功能描述：将 shell 变量输出为环境变量 / 全局变量)</p>\n</li>\n<li>\n<p>source 配置文件 (功能描述：让修改后的配置文件信息立即生效)</p>\n</li>\n<li>\n<p>echo $ 变量名 (功能描述：查询环境变量的值)</p>\n</li>\n</ol>\n<ul>\n<li>注意：在输出 TOMCAT_HOME 环境变量前，需要让其生效</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><blockquote>\n<p>shell 脚本的多行注释</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">!</span>内容<span class=\"token operator\">!</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/",
            "title": "shell-case语句",
            "date_published": "2024-04-02T10:00:51.537Z",
            "content_html": "<blockquote>\n<p>case 语句</p>\n</blockquote>\n<p>基本语法</p>\n<p>case $ 变量名 in</p>\n<p>“值 1”)</p>\n<p>如果变量的值等于值 1, 则执行程序 1</p>\n<p>;;</p>\n<p>“值 2”)</p>\n<p>如果变量的值等于值 2, 则执行程序 2</p>\n<p>;;</p>\n<p>… 省略其它分支…</p>\n<p>*)</p>\n<p>如果变量的值都不是以上的值，则执行此程序</p>\n<p>;;</p>\n<p>esac</p>\n<ul>\n<li>案例</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"周一\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"周二\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"周三\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"error\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/",
            "title": "shell判断语句",
            "date_published": "2024-04-02T10:00:51.533Z",
            "content_html": "<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>if [condition] (注意 condition 前后要有空格)</p>\n<p>then</p>\n<pre><code>    echo &quot;&quot; #执行体\n</code></pre>\n<p>fi #结束</p>\n<p>#非空返回 true, 可使用 $? 验证 (0 为 true,&gt;1 为 false)</p>\n<blockquote>\n<p>应用实例</p>\n</blockquote>\n<p>[hspEdu] 返回 true</p>\n<p>[ ] 返回 false</p>\n<p>[condition] &amp;&amp; echo OK || echo notok 条件满足，执行后面的语句</p>\n<blockquote>\n<p>判断语句</p>\n</blockquote>\n<p>常用判断条件</p>\n<table>\n<thead>\n<tr>\n<th>1)</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>字符串比较</td>\n</tr>\n<tr>\n<td>2)</td>\n<td><font color='green'>两个整数的比较</font></td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>-eq</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>3)</td>\n<td><font color='green'>按照文件权限进行判断</font></td>\n</tr>\n<tr>\n<td>-r</td>\n<td>有度的权限</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>有写的权限</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>有执行的权限</td>\n</tr>\n<tr>\n<td>4)</td>\n<td><font color='green'>按照文件类型进行判断</font></td>\n</tr>\n<tr>\n<td>-f</td>\n<td>文件存在并且是一个常规的文件</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>文件存在</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>文件存在并是一个目录</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>案例</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#判断两个 ok 字符串是否相同</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"ok\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ok\"</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"相同\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#判断 23 是否大于 22</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">23</span> <span class=\"token parameter variable\">-ge</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"大于\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#判断文件是否存在且是否常规</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-f</span> /opt/shcodetest/a.txt <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"存在且无异常\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">#细节</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> dkx <span class=\"token punctuation\">]</span> <span class=\"token comment\">#瞎写的非空即为 true 如果写 [] 中间没有空格则报错，如果有空格而为空那么就是 false 不输出 then 中的 echo</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OK\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><h3 id=\"多分支-if\"><a class=\"markdownIt-Anchor\" href=\"#多分支-if\">#</a> 多分支 if</h3>\n<p>基本语法</p>\n<p><font color='red'>单分支</font></p>\n<p>if [条件判断式]</p>\n<p>then</p>\n<p>代码</p>\n<p>fi</p>\n<p><font color='red' size=4>或者多分支</font></p>\n<p>if [条件判断式]</p>\n<p>then</p>\n<p>代码</p>\n<p>elif [条件判断式]</p>\n<p>then</p>\n<p>代码</p>\n<p>fi</p>\n<ul>\n<li>注意:[条件判断式], 中括号和条件判断式之间必须有空格</li>\n</ul>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%87%BD%E6%95%B0/",
            "title": "shell函数",
            "date_published": "2024-04-02T10:00:51.529Z",
            "content_html": "<blockquote>\n<p>函数介绍</p>\n</blockquote>\n<p>shell 编程和其它编程语言一样，有系统函数，也可以自定义函数，系统函数中，我们这里就介绍两个</p>\n<blockquote>\n<p>系统函数</p>\n</blockquote>\n<ul>\n<li>basename 基本语法</li>\n</ul>\n<p>功能：返回完整路径最后 / 的部分，常用于获取文件名</p>\n<p>basename [pathname] [suffix]</p>\n<p>basename [string] [suffix] (功能描述:basename 命令会删掉所有的前缀包括最后一个 (&quot;/&quot;) 字符，然后将字符显示出来)</p>\n<p>选项:</p>\n<p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉</p>\n<blockquote>\n<p>dirname 基本语法</p>\n</blockquote>\n<p>功能：返回完整路径最后 / 的前面的部分，常用于返回路径部分</p>\n<blockquote>\n<p>dirname 文件绝对路径 (功能描述：从给定的包含绝对路径的文件名中去除文件名 (非目录的部分), 然后返回剩下的路径 (目录的部分))</p>\n</blockquote>\n<blockquote>\n<p>自定义函数</p>\n</blockquote>\n<p>基本语法格式</p>\n<p>[ function ] funname [()]<br>\n{<br>\nAction;<br>\n[return int;]<br>\n}</p>\n<p>调用直接写函数名:funname [值]</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%85%A5%E9%97%A8/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E5%85%A5%E9%97%A8/",
            "title": "shell编程入门",
            "date_published": "2024-04-02T10:00:51.525Z",
            "content_html": "<blockquote>\n<p>为什么要学习 Shell 编程</p>\n</blockquote>\n<ol>\n<li>\n<p>Linux 运维工程师在进行服务器集群管理时，需要编写 Shell 程序来进行服务器管理</p>\n</li>\n<li>\n<p>对于 JavaEE 和 Python 程序员来说，工作的需要，你的老大会要求你编写一些 Shell 脚本进行程序或者是服务器的维护，比如编写一个定时备份数据库的脚本</p>\n</li>\n<li>\n<p>对于大数据程序员来说，需要编写 Shell 程序来管理集群</p>\n</li>\n</ol>\n<blockquote>\n<p>Shell 是什么</p>\n</blockquote>\n<p>Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动，挂起，停止甚至是编写一些程序</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2023-01-07-16-19-56.png\" alt=\"image_2023-01-07-16-19-56\"></p>\n<blockquote>\n<p>Shell 脚本的执行方式</p>\n</blockquote>\n<ul>\n<li>脚本格式要求</li>\n</ul>\n<ol>\n<li>\n<p>脚本以 #!/bin/bash 开头</p>\n</li>\n<li>\n<p>脚本需要有可执行权限</p>\n</li>\n</ol>\n<ul>\n<li>脚本的常用执行方式</li>\n</ul>\n<ol>\n<li>输入脚本的绝对路径或相对路径</li>\n</ol>\n<p>说明：首先要赋予 xxx.sh 脚本的 + x 权限，再执行脚本</p>\n<ol start=\"2\">\n<li>sh + 脚本:sh <a href=\"http://hello.sh\">hello.sh</a></li>\n</ol>\n<p>说明：不用赋予脚本 + x 权限，直接执行即可</p>\n<blockquote>\n<p>Shell 变量介绍</p>\n</blockquote>\n<ol>\n<li>\n<p>Linux Shell 中的变量分为，系统变量和用户自定义变量</p>\n</li>\n<li>\n<p>系统变量:<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">HOME,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mpunct\">,</span></span></span></span>PWD,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>H</mi><mi>E</mi><mi>L</mi><mi>L</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">SHELL,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mpunct\">,</span></span></span></span>USER 等等，比如:echo $HOME 等等</p>\n</li>\n<li>\n<p>显示当前 shell 中所有变量:set</p>\n</li>\n</ol>\n<blockquote>\n<p>Shell 变量的定义</p>\n</blockquote>\n<p>基本语法:</p>\n<ol>\n<li>\n<p>定义变量：变量 = 值</p>\n</li>\n<li>\n<p>撤销变量:unset 变量</p>\n</li>\n<li>\n<p>声明常量变量 (只读):readonly 变量，注意：不能 unset</p>\n</li>\n</ol>\n<ul>\n<li>演示:</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#echo \"hello,world!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#定义变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#输出变量 A 需要前面加上 $</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果 300</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#输出 A=300, 类似于 java 的拼接输出，先将 A = 输出再输出 A 变量的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果 A=300</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#同第二个效果只是加上了双引号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"A=<span class=\"token variable\">$A</span>\"</span> <span class=\"token comment\">#输出结果 A=300</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#撤销变量 A</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">unset</span> A</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\">$A</span> <span class=\"token comment\">#输出结果 A=</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#定义只读变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">readonly</span> <span class=\"token assign-left variable\">B</span><span class=\"token operator\">=</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token assign-left variable\">B</span><span class=\"token operator\">=</span><span class=\"token variable\">$B</span> <span class=\"token comment\">#输出结果 B=200</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin class-name\">unset</span> B <span class=\"token comment\">#hello.sh: line 17: unset: B: cannot unset: readonly variable  执行报错：无法设置渎职变量</span></pre></td></tr></table></figure><blockquote>\n<p>定义变量的规则</p>\n</blockquote>\n<ol>\n<li>\n<p>变量名称可以由字母，数字和下划线组成，但是不能以数字开头.5A=200 (错误的)</p>\n</li>\n<li>\n<p>等号两侧不能有空格</p>\n</li>\n<li>\n<p>变量名称一般习惯为大写</p>\n</li>\n</ol>\n<blockquote>\n<p>将命令的返回值赋给变量</p>\n</blockquote>\n<ol>\n<li>\n<p>A= <code>date</code>  反引号，运行里面的命令，并把结果返回给变量 A</p>\n</li>\n<li>\n<p>A=$(date) 等价于反引号</p>\n</li>\n</ol>\n",
            "tags": [
                "linux",
                "计算机学科",
                "介绍"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F/",
            "title": "位置参数变量",
            "date_published": "2024-04-02T10:00:51.522Z",
            "content_html": "<blockquote>\n<p>介绍</p>\n</blockquote>\n<p>当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量，比如: <code>./myshell.sh 100 200</code>  这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息</p>\n<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>$n (功能描述:n 为数字，$0 代表命令本身，$1- <code>$9</code>  代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如 ${10})</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mo stretchy=\"false\">(</mo><mtext>功能描述</mtext><mo>:</mo><mtext>这个变量代表命令行中所有的参数</mtext><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">*(功能描述:这个变量代表命令行中所有的参数.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∗</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord\">.</span></span></span></span>* 把所有的参数看成一个整体)</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">@</mi><mo stretchy=\"false\">(</mo><mtext>功能描述</mtext><mo>:</mo><mtext>这个变量也代表命令行中所有的参数</mtext><mo separator=\"true\">,</mo><mtext>不过</mtext></mrow><annotation encoding=\"application/x-tex\">@(功能描述:这个变量也代表命令行中所有的参数,不过</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">@</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">过</span></span></span></span> @把每个参数区分对待)</p>\n<p>$#(功能描述：这个变量代表命令行中所有参数的个数)</p>\n<blockquote>\n<p>位置参数变量</p>\n</blockquote>\n<p><a href=\"http://hello.sh\">hello.sh</a></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"0=<span class=\"token variable\">$0</span> 1=<span class=\"token variable\">$1</span> 2=<span class=\"token variable\">$2</span>\"</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"所有的参数=<span class=\"token variable\">$*</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"把每个参数区分对待=<span class=\"token variable\">$@</span>\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"参数的个数=<span class=\"token variable\">$#</span>\"</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"当前执行的进程id=<span class=\"token variable\">$$</span>\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#以后台的方式运行另一个脚本并获取它的进程号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sh</span> /opt/shcodetest/hello.sh <span class=\"token number\">100</span> <span class=\"token number\">200</span> <span class=\"token number\">300</span> <span class=\"token operator\">&amp;</span>                                                                                                          </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"最后一个后台方式运行的进程id=<span class=\"token variable\">$!</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"执行的结果为<span class=\"token variable\">$?</span>\"</span></pre></td></tr></table></figure><p>执行结果</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240208125729969.png\" alt=\"image-20240208125729969\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/while%E5%BE%AA%E7%8E%AF/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/while%E5%BE%AA%E7%8E%AF/",
            "title": "while循环",
            "date_published": "2024-04-02T10:00:51.518Z",
            "content_html": "<blockquote>\n<p>基本语法格式</p>\n</blockquote>\n<p>while [条件判断式]</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<ul>\n<li>注意:while 关键字和 [空格] 之间都有空格</li>\n</ul>\n<p>案例：从命令行输入一个数 n, 统计从 1+…+n 的值是多少</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$i</span> <span class=\"token parameter variable\">-le</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$SUM</span> + <span class=\"token variable\">$i</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">#i 自增</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token assign-left variable\">i</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$i</span>+1 <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin class-name\">echo</span>    <span class=\"token string\">\"总和:<span class=\"token variable\">$SUM</span>\"</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/for%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/",
            "title": "for循环语句",
            "date_published": "2024-04-02T10:00:51.515Z",
            "content_html": "<blockquote>\n<p>基本语法格式</p>\n</blockquote>\n<p>for 变量 in 值 1 值 2 值 3 …</p>\n<p>do</p>\n<p>程序代码</p>\n<p>done</p>\n<blockquote>\n<p>基本语法格式 2</p>\n</blockquote>\n<p>for ((初始值；循环；控制条件；变量变化))</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#打印 1-100 的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$i</span>\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"===================================================\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#打印 1-100 的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span>                                                                                                                           </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#如果这里使用 echo 输出那么下面的输出就是 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token assign-left variable\">SUM</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$SUM</span>+<span class=\"token variable\">$i</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"总和:<span class=\"token variable\">$SUM</span>\"</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Shell%E7%BC%96%E7%A8%8B%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Shell%E7%BC%96%E7%A8%8B%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/",
            "title": "shell编程综合案例",
            "date_published": "2024-04-02T10:00:51.512Z",
            "content_html": "<blockquote>\n<p>需求分析</p>\n</blockquote>\n<ol>\n<li>\n<p>每天凌晨 2:30 备份，数据库 <code>名字随意</code>  到 /date/backup/db</p>\n</li>\n<li>\n<p>备份开始和备份结束能够给出响应的提示信息</p>\n</li>\n<li>\n<p>备份后的文件要求以备份时间为文件名，并打包成 <code>tar.gz</code>  的形式，比如: <code>2022-03-12_230201.tar.gz</code></p>\n</li>\n<li>\n<p>在备份的同时，检查是否有 10 天前备份的数据库文件，如果有就将其删除</p>\n</li>\n</ol>\n<blockquote>\n<p>思路</p>\n</blockquote>\n<p>定时任务 --&gt; sh 脚本 --&gt; 数据库</p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Read%E8%AF%BB%E5%8F%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/shell%E7%BC%96%E7%A8%8B/Read%E8%AF%BB%E5%8F%96%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5/",
            "title": "Read读取控制台输入",
            "date_published": "2024-04-02T10:00:51.508Z",
            "content_html": "<blockquote>\n<p>基本语法</p>\n</blockquote>\n<p>read (选项)(参数)</p>\n<p>选项:</p>\n<p>-p  指定读取值时的提示符</p>\n<p>-t  指定读取值时等待的时间 (秒), 如果没有在指定的时间内输入，就不再等待了</p>\n<p>参数:</p>\n<p>变量：指定读取值的变量名</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"请输入数值=\"</span> NUM1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"你输入的数值为=<span class=\"token variable\">$NUM1</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"请输入数值2=\"</span> NUM2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"你输入的数值2为=<span class=\"token variable\">$NUM2</span>\"</span></pre></td></tr></table></figure>",
            "tags": [
                "linux",
                "计算机学科"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/VirtuBox/%E4%BD%BF%E7%94%A8Vagrant%E4%B8%8EVirtuBox%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Linux%E7%B3%BB%E7%BB%9F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/linux/VirtuBox/%E4%BD%BF%E7%94%A8Vagrant%E4%B8%8EVirtuBox%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Linux%E7%B3%BB%E7%BB%9F/",
            "title": "使用Vagrant与VirtuBox快速安装Linux系统",
            "date_published": "2024-04-02T10:00:51.499Z",
            "content_html": "<h1 id=\"使用vagrant与virtubox快速安装linux系统\"><a class=\"markdownIt-Anchor\" href=\"#使用vagrant与virtubox快速安装linux系统\">#</a> 使用 Vagrant 与 VirtuBox 快速安装 Linux 系统</h1>\n<p>首先我们下载 VirtuBox 与 Vagrant</p>\n<p>Vagrant 下载完成后需要重启一下电脑，开机后我们输入命令来查看是否安装成功了。</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316164625749.png\" alt=\"image-20240316164625749\"></p>\n<p>vagrant 的镜像仓库：<a href=\"https://app.vagrantup.com/boxes/search\">https://app.vagrantup.com/boxes/search</a></p>\n<p>vagrant 的官方下载地址：<a href=\"https://www.vagrantup.com/\">https://www.vagrantup.com/</a></p>\n<p>我们下面就可以通过 Vagrant 来安装一个 Linux 系统了</p>\n<ul>\n<li>\n<p>打开 window cmd 窗口，运行 vagrant init centos/7，即可初始化一个 centos7 系统</p>\n<p>下载虚拟机时 centos/7 是看镜像仓库中的名字的</p>\n<p>运行后提示：</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316165630971.png\" alt=\"image-20240316165630971\"></p>\n<p>运行后在指定目录下就会创建一个文件</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316165621225.png\" alt=\"image-20240316165621225\"></p>\n</li>\n<li>\n<p>运行 vgrant up 即可启动虚拟机，系统 root 用户的密码是 vagrant</p>\n<p>使用命令启动虚拟机</p>\n<p>过程比较漫长，因为他要从官方下载镜像然后启动系统</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316165755530.png\" alt=\"image-20240316165755530\"></p>\n<p>等待一会儿在 VirtuBox 中就可以看到虚拟机了</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316170809872.png\" alt=\"image-20240316170809872\"></p>\n<p>提示到如下消息后就直接 ctrl + c 停止</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316173641519.png\" alt=\"image-20240316173641519\"></p>\n<p>然后通过命令 vagrant ssh 连接上虚拟机就行了。</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316173718891.png\" alt=\"image-20240316173718891\"></p>\n</li>\n<li>\n<p>vagrant 其它常用命令</p>\n<ul>\n<li>vagrant ssh：自动使用 vagrant 用户连接虚拟机\n<ul>\n<li>vagrant upload source [destination] [name|id]：上传文件</li>\n</ul>\n</li>\n<li><a href=\"https://www.vagrantup.com/docs/cli/init.html\">https://www.vagrantup.com/docs/cli/init.html</a> Vagrant 命令行</li>\n</ul>\n</li>\n<li>\n<p>默认虚拟机的 ip 地址不是固定 ip，开发不方便</p>\n<ul>\n<li>修改 vagrantfile</li>\n</ul>\n<p>找到用户目录下的 vagrantfile 文件打开找到如下位置将注释解开</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316180659036.png\" alt=\"image-20240316180659036\"></p>\n<p>cmd 中查看 ip 输入命令 ipconfig 如果没有找到关于 VirtuBox 的使用这个命令：ipconfig /all</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316181051000.png\" alt=\"image-20240316181051000\"></p>\n<p>我们可以看到 ip 地址是 56.1 那么我们就需要在 vagrantfile 的当前位置写上 56.n 的 ip 地址如下：</p>\n<p>比如说：56.10</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316181207356.png\" alt=\"image-20240316181207356\"></p>\n<p>改完配置后我们就需要重启下虚拟机 输入命令：vagrant reload</p>\n<p>cmd 显示如下信息后直接 ctrl + c 退出就行了，然后重新连接虚拟机 vagrant ssh</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316181422136.png\" alt=\"image-20240316181422136\"></p>\n<p>使用命令 ip addr</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316182254038.png\" alt=\"image-20240316182254038\"></p>\n<p>此时我们可以看到 ip 地址就变成我们设置的 ip 了</p>\n<p>下面我们互相 ping 一下，先在 windows ping 下 linux 的 ip</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316182409325.png\" alt=\"image-20240316182409325\"></p>\n<p>ping 得通</p>\n<p>下面 linux ping windows 的 ip</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316182449309.png\" alt=\"image-20240316182449309\"></p>\n<p>也 ping 得通</p>\n</li>\n<li>\n<p>在命令窗口中退出虚拟机的连接状态执行如下命令：</p>\n<ul>\n<li>exit</li>\n</ul>\n</li>\n<li>\n<p>下次使用虚拟机我们启动时可以使用命令：vagrant up 它依靠用户目录下的 Vagrantfile 启动，启动之后使用 vagrant ssh 连接上就可以了。</p>\n</li>\n</ul>\n<p>注意：VirtuBox 会与括号带不限于如下软件冲突，需要卸载这些软件，然后重启电脑</p>\n<p>冲突的软件：红蜘蛛，360，净网大师 (有可能) 等.</p>\n<h2 id=\"环境-配置docker阿里云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#环境-配置docker阿里云镜像加速\">#</a> 环境 - 配置 docker 阿里云镜像加速</h2>\n<p>到阿里云的控制台首页中找到 “容器镜像服务” 里面得到镜像</p>\n<p><a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316185154088.png\" alt=\"image-20240316185154088\"></p>\n<p>依次执行图中的命令即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image-20240316185319343.png\" alt=\"image-20240316185319343\"></p>\n",
            "tags": [
                "linux",
                "计算机学科"
            ]
        }
    ]
}