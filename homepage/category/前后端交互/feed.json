{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"前后端交互\" category",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E5%88%9D%E5%A7%8B%E8%B7%A8%E5%9F%9F/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E5%88%9D%E5%A7%8B%E8%B7%A8%E5%9F%9F/",
            "title": "初始跨域",
            "date_published": "2024-02-12T12:19:51.932Z",
            "content_html": "<h1 id=\"初始跨域\"><a class=\"anchor\" href=\"#初始跨域\">#</a> 初始跨域</h1>\n<h2 id=\"跨域是什么\"><a class=\"anchor\" href=\"#跨域是什么\">#</a> 跨域是什么</h2>\n<p>同域，不是跨域</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'./index.html'</span></pre></td></tr></table></figure><p>不同域，跨域，被浏览器阻止</p>\n<p>当前页面开打时的地址，如果在 http://127.0.0.1:5500 / 后面改为 /index.html 那么就是请求 index.html 页面它们是同域的</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//127.0.0.1:5500/json.html</span></span></pre></td></tr></table></figure><p>如果请求地址为如下：</p>\n<p>一个端口号为：5500，一个端口号为：8080，此时就不是同域了，需要解决跨域问题否则报错</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//localhost:8080/json</span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span> <span class=\"token operator\">||</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">304</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 需要解决跨域问题</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://localhost:8080/json'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"zuqi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bingbqiu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token literal-property property\">userTo</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span><span class=\"token string\">\"sl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token literal-property property\">mother</span><span class=\"token operator\">:</span><span class=\"token string\">\"lidama\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>请求的结果：</p>\n<pre><code>Access to XMLHttpRequest at 'http://localhost:8080/json' from origin 'http://127.0.0.1:5500' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.\n翻译：\nCORS策略阻止了从源“http://127.0.0.1:5500”访问“http://localhost:8080/json”处的XMLHttpRequest：请求的资源上不存在“访问控制允许源”标头。\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040733601.png\" alt=\"image-20230530170322006\" /></p>\n<p>向一个域发送请求，如果要请求的域和当前域是不同域，就叫跨域，不同域之间的请求，就是跨域请求，默认会被浏览器阻止。</p>\n<h2 id=\"什么是不用域-什么是同域\"><a class=\"anchor\" href=\"#什么是不用域-什么是同域\">#</a> 什么是不用域 ，什么是同域</h2>\n<p>一个请求地址的解析：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>https(协议)://www.dkx.com(域名):8080(端口号)/index.html(路径)</pre></td></tr></table></figure><p>协议，域名，端口号任何一个不一样，就是不同域</p>\n<p>与路径无关，路径一不一样无所谓。</p>\n<p>根据上述，那么标题 1 中的不同域地址的问题就在于端口号的不同了，协议相同 ，地址都是本机，只有端口号不同。</p>\n<p>http 协议对应的默认端口：80</p>\n<p>https 协议对应的默认端口：443</p>\n<h2 id=\"跨域请求为什么会被阻止\"><a class=\"anchor\" href=\"#跨域请求为什么会被阻止\">#</a> 跨域请求为什么会被阻止</h2>\n<p>阻止跨域请求，其实是浏览器本身的一种安全策略 -- 同源策略</p>\n<h2 id=\"跨域解决方案\"><a class=\"anchor\" href=\"#跨域解决方案\">#</a> 跨域解决方案</h2>\n<p>优先使用 CORS 跨域资源共享，如果浏览器不支持 CORS 的话，再使用 JSONP</p>\n<p>如何跨域查看<a href=\"../../Spring/SpringBoot+vue%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AF%B9%E6%8E%A5.md\">查看详细</a></p>\n<h3 id=\"1cors-跨域共享资源\"><a class=\"anchor\" href=\"#1cors-跨域共享资源\">#</a> 1.CORS 跨域共享资源</h3>\n<h4 id=\"cors-是什么\"><a class=\"anchor\" href=\"#cors-是什么\">#</a> CORS 是什么</h4>\n<p>Access-Control-Allow-Origin: *</p>\n<p>表明允许所有的域名来跨域请求它，* 是通配符，没有任何限制。</p>\n<p>只允许指定域名的跨域请求：</p>\n<pre><code>Access-Control-Allow-Origin:http://127.0.0.1:5500\n</code></pre>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734566.png\" alt=\"image-20230530192931118\" /></p>\n<p><img data-src=\"./images/image-20230530192945840.png\" alt=\"image-20230530192945840\" /></p>\n<h4 id=\"使用cors跨域过程\"><a class=\"anchor\" href=\"#使用cors跨域过程\">#</a> 使用 CORS 跨域过程</h4>\n<p>1. 浏览器发送跨域请求</p>\n<p>2. 后端在响应头中添加 Access-Control-Allow-Origin 头信息</p>\n<p>3. 浏览器接收到响应</p>\n<p>4. 如果是同域下的 请求，浏览器不会额外做什么，这次前后端通信就圆满完成了</p>\n<p>5. 如果是跨域请求，浏览器会从响应头中查找是否允许跨域访问</p>\n<p>6. 如果允许跨域，通信圆满完成</p>\n<p>7. 如果没找到或不包含想要跨域的域名，就丢弃响应结果</p>\n<h4 id=\"cors的兼容性\"><a class=\"anchor\" href=\"#cors的兼容性\">#</a> CORS 的兼容性</h4>\n<p>IE10 及以上版本的浏览器可以正常使用 CORS</p>\n<h3 id=\"2jsonp\"><a class=\"anchor\" href=\"#2jsonp\">#</a> 2.JSONP</h3>\n<h4 id=\"jsonp的原理\"><a class=\"anchor\" href=\"#jsonp的原理\">#</a> JSONP 的原理</h4>\n<p>Script 标签跨域不会被浏览器阻止</p>\n<p>JSONP 主要就是利用 Script 标签，加载跨域文件</p>\n<h4 id=\"使用jsonp实现跨域\"><a class=\"anchor\" href=\"#使用jsonp实现跨域\">#</a> 使用 JSONP 实现跨域</h4>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/websql/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/websql/",
            "title": "初始websql",
            "date_published": "2024-02-12T12:19:51.925Z",
            "content_html": "<p>创建数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var db <span class=\"token operator\">=</span> openDatabase <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>person<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>person<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755693.png\" alt=\"image-20230529154635137\" /></p>\n<p>创建表</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">transaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'create table if not exists student (id unique,name)'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755846.png\" alt=\"image-20230529154933720\" /></p>\n<p>向表中添加数据</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">transaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'insert into student (id,name) values (?,?)'</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'insert into student (id,name) values (?,?)'</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755867.png\" alt=\"image-20230529155239715\" /></p>\n<p>查询</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span><span class=\"token keyword\">transaction</span><span class=\"token punctuation\">(</span>tx<span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    tx<span class=\"token punctuation\">.</span>executeSql<span class=\"token punctuation\">(</span><span class=\"token string\">'select * from student'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        let <span class=\"token keyword\">rows</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token keyword\">rows</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        let <span class=\"token keyword\">end</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">rows</span><span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token keyword\">rows</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &#125;<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t<img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755870.png\" alt=\"image-20230529155622959\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/localStorage/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/localStorage/",
            "title": "初始localStorage",
            "date_published": "2024-02-12T12:19:51.919Z",
            "content_html": "<h1 id=\"初始localstorage\"><a class=\"anchor\" href=\"#初始localstorage\">#</a> 初始 localStorage</h1>\n<h2 id=\"localstorage是什么\"><a class=\"anchor\" href=\"#localstorage是什么\">#</a> localStorage 是什么</h2>\n<p>localStorage 也是一种浏览器存储数据的方式 (本地存储)，它只是存储在本地，不会发送到服务器端。</p>\n<p>单个域名下的 localStorage 总大小有限制。</p>\n<h2 id=\"在浏览器中操作localstorage\"><a class=\"anchor\" href=\"#在浏览器中操作localstorage\">#</a> 在浏览器中操作 localStorage</h2>\n<h3 id=\"localstorage的基本用法\"><a class=\"anchor\" href=\"#localstorage的基本用法\">#</a> localStorage 的基本用法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740380.png\" alt=\"image-20230529160720332\" /></p>\n<h3 id=\"向localstorage中添加数据\"><a class=\"anchor\" href=\"#向localstorage中添加数据\">#</a> 向 localStorage 中添加数据</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'lisk'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741101.png\" alt=\"image-20230529160746545\" /></p>\n<h3 id=\"获取localstorage中的数据\"><a class=\"anchor\" href=\"#获取localstorage中的数据\">#</a> 获取 localStorage 中的数据</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取不存在的返回 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741897.png\" alt=\"image-20230529161039653\" /></p>\n<p>删除 localStorage 中的数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741739.png\" alt=\"image-20230529161250485\" /></p>\n<p>清空 localStorage 中所有数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040741469.png\" alt=\"image-20230529161408488\" /></p>\n<h2 id=\"使用localstorage实现自动填充\"><a class=\"anchor\" href=\"#使用localstorage实现自动填充\">#</a> 使用 localStorage 实现自动填充</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nth<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>提交<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token comment\">// 通过 id 获取 form 标签</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token keyword\">let</span> loginForm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token comment\">// 通过 id 获取按钮标签</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token keyword\">let</span> nth <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nth'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 从 localStorage 中获取 username 的值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token comment\">// 判断是否为 null</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 不为 null 则赋值给 username 里</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> username</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token comment\">// 绑定点击事件</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         nth<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 阻止默认的点击事件执行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将获取到 username 中的 value 添加到 localStorage 中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span>loginForm<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 执行提交事件</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040753445.png\" alt=\"image-20230529164617853\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040753926.png\" alt=\"image-20230529164606522\" /></p>\n<h2 id=\"localstorage的注意事项\"><a class=\"anchor\" href=\"#localstorage的注意事项\">#</a> localStorage 的注意事项</h2>\n<h3 id=\"localstorage的存储期限\"><a class=\"anchor\" href=\"#localstorage的存储期限\">#</a> localStorage 的存储期限</h3>\n<p>localStorage 是持久化的<mark>本地存储</mark>，除非<mark>手动清除</mark> (比如<mark>通过 js 删除</mark>，或者<mark>清除浏览器缓存</mark>)，否则数据是<mark>永远不会过期的</mark>。</p>\n<blockquote>\n<p>sessionStorage</p>\n<p>当会话结束 (比如关闭浏览器) 的时候，sessionStorage 中的数据会被清空</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"localstorage键和值的类型\"><a class=\"anchor\" href=\"#localstorage键和值的类型\">#</a> localStorage 键和值的类型</h3>\n<p>localStorage 存储的键和值 &lt;font color=red&gt;<strong> 只能是字符串类型</strong> &lt;/font&gt;.</p>\n<p>不是字符串类型，也会先转化为字符串类型再存进去</p>\n<h3 id=\"不同域名下能否共用localstorage\"><a class=\"anchor\" href=\"#不同域名下能否共用localstorage\">#</a> 不同域名下能否共用 localStorage</h3>\n<p>不同的域名是不能共用 localStorage 的</p>\n<h3 id=\"localstorage的兼容性\"><a class=\"anchor\" href=\"#localstorage的兼容性\">#</a> localStorage 的兼容性</h3>\n<p>查询网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jYW5pdXNlLmNvbS8=\">https://caniuse.com/</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040744887.png\" alt=\"image-20230529170617884\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/HTTP%E5%8D%8F%E8%AE%AE/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/HTTP%E5%8D%8F%E8%AE%AE/",
            "title": "初始Http协议",
            "date_published": "2024-02-12T12:19:51.911Z",
            "content_html": "<h1 id=\"初始http\"><a class=\"anchor\" href=\"#初始http\">#</a> 初始 HTTP</h1>\n<h2 id=\"http是什么\"><a class=\"anchor\" href=\"#http是什么\">#</a> HTTP 是什么</h2>\n<p><strong>HTTP 全称</strong>：HyperText Transfer Protocol ，<strong>翻译</strong>： <mark>超文本传输协议</mark>.</p>\n<p><strong>超文本</strong>：<mark>原先一个个单一的文本，通过超链接将其联系起来，由原先的单一的文本变成了可无限延伸，扩展的超级文本，立体文本</mark>。</p>\n<p><strong>传输协议</strong>：<mark>数据传输的规范</mark>.</p>\n<p>HTML，JS，CSS，图片，字体，音频，视频等等文件，都是通过 HTTP (超文本传输协议) 在服务器和浏览器之间传输。</p>\n<p><mark>每一次前后端通信，前端需要主动向后端发送请求，后端接收到前端的请求后，可以给出响应</mark>。</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;HTTP 是一个请求 - 响应协议 &lt;/font&gt;。</p>\n<h2 id=\"http请求响应的过程\"><a class=\"anchor\" href=\"#http请求响应的过程\">#</a> HTTP 请求响应的过程</h2>\n<p><strong>流程</strong>：</p>\n<p>浏览器查看是否有缓存，通过 DNS 域名解析服务器得到服务器的具体 IP 位置，跟服务器进行 TCP 连接通信请求到服务器，服务器响应回数据到浏览器。</p>\n<p>浏览器查看缓存中是否有缓存的记录，根据浏览器的不同缓存的处理方式也不同，有的会直接使用，有的需要再次跟服务器进行一次确认查看缓存是否过期再进行使用</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735413.png\" alt=\"image-20230528151325021\" /></p>\n<h2 id=\"http报文\"><a class=\"anchor\" href=\"#http报文\">#</a> HTTP 报文</h2>\n<h3 id=\"http报文是什么\"><a class=\"anchor\" href=\"#http报文是什么\">#</a> HTTP 报文是什么</h3>\n<p><mark>浏览器向服务器发送请求时</mark>，<mark>请求本身就是信息</mark>，叫<mark>请求报文</mark>。</p>\n<p><mark>服务器向浏览器发送响应时传输的信息</mark>，叫<mark>响应报文</mark>。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040736213.png\" alt=\"image-20230528204626626\" /></p>\n<h3 id=\"http报文格式\"><a class=\"anchor\" href=\"#http报文格式\">#</a> HTTP 报文格式</h3>\n<p><strong>请求</strong>：</p>\n<p><strong>请求头</strong>：起始行 + 首部</p>\n<p>请求体</p>\n<p>请求方式：GET 请求没有请求体<sup>在地址栏上</sup>，POST 请求有请求体</p>\n<p><strong>GET</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738305.png\" alt=\"image-20230528210416093\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738654.png\" alt=\"image-20230528210432601\" /></p>\n<p><strong>POST</strong></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738906.png\" alt=\"image-20230528210619125\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040738103.png\" alt=\"image-20230528210624990\" /></p>\n<p><strong>响应</strong>：</p>\n<p>响应头：起始行 + 首部</p>\n<p>响应体</p>\n<h2 id=\"http方法\"><a class=\"anchor\" href=\"#http方法\">#</a> HTTP 方法</h2>\n<h3 id=\"常用的http方法\"><a class=\"anchor\" href=\"#常用的http方法\">#</a> 常用的 HTTP 方法</h3>\n<p>浏览器发送请求时采用的方法，和响应无关</p>\n<p>GET，POST，PUT，DELETE，...</p>\n<h3 id=\"http方法的语义\"><a class=\"anchor\" href=\"#http方法的语义\">#</a> HTTP 方法的语义</h3>\n<p>增 (POST) 删 (DELETE) 改 (PUT) 查 (GET)，用来定义对于资源采取什么样的操作的，有各自的语义。</p>\n<p>这些方法虽然有各自的语义，但是并不是强制性的。</p>\n<h3 id=\"restful接口设计\"><a class=\"anchor\" href=\"#restful接口设计\">#</a> RESTful 接口设计</h3>\n<p>一种接口设计风格，充分利用 HTTP 方法的语义。</p>\n<p>详情查看<a href=\"../../Spring/SpringMVC/REST%E9%A3%8E%E6%A0%BC.md\">点击查看</a></p>\n<h2 id=\"get和post方法的对比\"><a class=\"anchor\" href=\"#get和post方法的对比\">#</a> GET 和 POST 方法的对比</h2>\n<h3 id=\"1语义\"><a class=\"anchor\" href=\"#1语义\">#</a> 1. 语义</h3>\n<p><strong>GET</strong>：获取数据</p>\n<p><strong>POST</strong>：创建数据</p>\n<h3 id=\"2发送数据\"><a class=\"anchor\" href=\"#2发送数据\">#</a> 2. 发送数据</h3>\n<p><strong><mark>GET</mark> 通过地址栏在请求头中携带数据</strong></p>\n<p>能携带的数据量和地址的长度有关系，一般最多就几 K</p>\n<p><strong><mark>POST</mark> 既可以通过地址在请求头中携带数据，也可以通过请求体携带数据</strong></p>\n<p>能携带的数据量理论上是无限的</p>\n<p>&lt;u&gt; 携带少量数据，可以使用 GET 请求，大量的数据可以使用 POST 请求 &lt;/u&gt;。</p>\n<h3 id=\"缓存\"><a class=\"anchor\" href=\"#缓存\">#</a> 缓存</h3>\n<p><strong>GET</strong>：可以被缓存</p>\n<ul>\n<li>GET 请求携带的数据在地址中的，而地址是会被浏览器缓存的。\n<ul>\n<li>比如，输入一个网址，后面再次访问只需要输入开头几个浏览器就自动补全了这就是被浏览器缓存了。</li>\n</ul>\n</li>\n</ul>\n<p><strong>POST</strong>：不会被缓存</p>\n<h3 id=\"安全性\"><a class=\"anchor\" href=\"#安全性\">#</a> 安全性</h3>\n<p>&lt;font style=&quot;color:red&quot;&gt;GET 和 POST 都不安全 &lt;/font&gt;。</p>\n<p>发送密码或其它敏感信息时不要使用 GET，主要是避免直接被它人窥屏或通过历史记录找到你的密码。</p>\n<h2 id=\"http状态码\"><a class=\"anchor\" href=\"#http状态码\">#</a> HTTP 状态码</h2>\n<h3 id=\"1http状态码是什么\"><a class=\"anchor\" href=\"#1http状态码是什么\">#</a> 1.HTTP 状态码是什么</h3>\n<p>定义服务器对请求的处理结果，是服务器返回的。</p>\n<h3 id=\"2http状态码的语义\"><a class=\"anchor\" href=\"#2http状态码的语义\">#</a> 2.HTTP 状态码的语义</h3>\n<p><mark>100~199 消息</mark>：代表请求已被接收，需要继续处理。</p>\n<ul>\n<li>websocket</li>\n</ul>\n<p><mark>200~299 成功</mark>：请求成功，服务器正常返回数据。</p>\n<p><mark>300~399</mark>：重定向</p>\n<ul>\n<li><strong>301</strong>：Moved Permanently 永久性的移动\n<ul>\n<li>有请求只要不出意外就有响应，重定向的地址就在响应中 <code>Location: https://www.xxx.com</code></li>\n<li>使用 301 方式是后端不可控的，因为 301 跳转地址会缓存到用户的本地，需要用户手动清理缓存才能跳转有更新的地址，使用比较谨慎</li>\n</ul>\n</li>\n<li><strong>302</strong>：Move Temporarily 临时性的移动\n<ul>\n<li>不会被缓存每一次都会向服务器发送一次请求确认一下往那个地址跳转。</li>\n</ul>\n</li>\n<li><strong>304</strong>：Not Modified 没有修改\n<ul>\n<li>向服务器发送请求确认资源是否过期，没有过期则使用过期则重新请求响应数据。</li>\n</ul>\n</li>\n</ul>\n<p><mark>400~499</mark>：请求错误，错误一般在前端，比如：请求地址不存在，请求数据错误导致异常</p>\n<ul>\n<li><strong>400</strong>：Bad Request\n<ul>\n<li>请求异常</li>\n</ul>\n</li>\n<li><strong>404</strong>： Not Found\n<ul>\n<li>请求找不到资源</li>\n</ul>\n</li>\n</ul>\n<p><mark>500~599</mark>：服务器错误，错误一般在后端</p>\n<ul>\n<li>500：Internal Server Error 服务器内部错误，后端代码报错之类的</li>\n</ul>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Cookie/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Cookie/",
            "title": "Cookie",
            "date_published": "2024-02-12T12:19:51.905Z",
            "content_html": "<h1 id=\"初始cookie\"><a class=\"anchor\" href=\"#初始cookie\">#</a> 初始 Cookie</h1>\n<h2 id=\"cookie是什么\"><a class=\"anchor\" href=\"#cookie是什么\">#</a> Cookie 是什么</h2>\n<p>Cookie 全称 HTTP Cookie ，简称 Cookie，是浏览器存储数据的一种方式，因为存储在用户本地，而不是存储在服务器上，是本地存储。一般会自动随着浏览器每次请求发给送到服务器端。</p>\n<h2 id=\"cookie有什么用\"><a class=\"anchor\" href=\"#cookie有什么用\">#</a> Cookie 有什么用</h2>\n<p>利用 Cookie 跟踪统计用户访问该网站的习惯，比如什么时间访问，访问了哪些页面，在每个网页的停留时间等。</p>\n<h2 id=\"在浏览器中操作cookie\"><a class=\"anchor\" href=\"#在浏览器中操作cookie\">#</a> 在浏览器中操作 Cookie</h2>\n<p>先看下页面的请求头信息，里面并没有 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040755678.png\" alt=\"image-20230529100840334\" /></p>\n<p>打开控制台找到 Cookies 在里面设置一个 Cookie 键值对</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756713.png\" alt=\"image-20230529100621798\" /></p>\n<p>设置完成后点击 NetWork，刷新下页面就会向服务器端发送一次 Cookie 请求</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756361.png\" alt=\"image-20230529100930844\" /></p>\n<p>控制台使用 js 代码来查看 Cookie，获取多个 Cookie 会以分号分隔。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756912.png\" alt=\"image-20230529101120541\" /></p>\n<p>Cookie 是明文显示的，不要使用 Cookie 存储敏感信息。</p>\n<h2 id=\"cookie的基本用法\"><a class=\"anchor\" href=\"#cookie的基本用法\">#</a> Cookie 的基本用法</h2>\n<h3 id=\"写入cookie\"><a class=\"anchor\" href=\"#写入cookie\">#</a> 写入 Cookie</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 写入 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username=刘桑'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'age=18'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 不能一起设置，只能一个一个设置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//document.cookie = 'username = 刘桑；age=18'</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756121.png\" alt=\"image-20230529102501653\" /></p>\n<h3 id=\"读取cookie\"><a class=\"anchor\" href=\"#读取cookie\">#</a> 读取 Cookie</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//2. 读取 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 读取的是一个由键值对构成的字符串，每个键值对之间由 \";\" (一个分号和一个空格) 隔开</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756735.png\" alt=\"image-20230529102516584\" /></p>\n<h2 id=\"cookie的属性\"><a class=\"anchor\" href=\"#cookie的属性\">#</a> Cookie 的属性</h2>\n<h3 id=\"1cookie的键name和值value\"><a class=\"anchor\" href=\"#1cookie的键name和值value\">#</a> 1.Cookie 的键 (name) 和值 (value)</h3>\n<p>最重要的两个属性，创建 Cookie 时必须填写，其它属性可以使用默认值</p>\n<blockquote>\n<p>Cookie 的键值如果包含非英文字母，则写入时需要使用 encodeURIComponent () 编码，读取时使用 decodeURIComponent () 解码。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 一般键使用英文字母，不要用中文，值可以用中文，但是要编码 &lt;/font&gt;。</p>\n<h3 id=\"2失效到期时间\"><a class=\"anchor\" href=\"#2失效到期时间\">#</a> 2. 失效 (到期) 时间</h3>\n<p>对于失效的 Cookie，会被浏览器清除</p>\n<p>默认会话 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756419.png\" alt=\"image-20230529105442704\" /></p>\n<blockquote>\n<p>如果没有设置失效 (到期) 时间，这样的 Cookie 称为会话 Cookie，它存在内存中，当会话结束，也就是浏览器关闭时 (不是关闭当前页面)，Cookie 消失</p>\n</blockquote>\n<p>想让 Cookie 长时间存在，设置 Expires 或 Max-Age</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//expires</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 值为 Date 类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username1=dkx; expires=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">'2100-1-01 00:00:00'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//max-age</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 值 为数字，表示当前时间 + 多少秒后过期，单位时秒</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token string\">'username=dkx1; max-age=5'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    设置 Cookie 存活时间为 30 天</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">24</span><span class=\"token operator\">*</span><span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">30</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756190.png\" alt=\"image-20230529105522647\" /></p>\n<p>如果 max-age 的值是 0 或负数，则 Cookie 会被删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=0</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">username=dkx1; max-age=-1</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756761.png\" alt=\"image-20230529105726676\" /></p>\n<h3 id=\"3domain域\"><a class=\"anchor\" href=\"#3domain域\">#</a> 3.Domain 域</h3>\n<p>Domain 限定了访问 Cookie 的范围</p>\n<p>使用 JS 只能读写当前域或父域的 Cookie，无法读写其它域的 Cookie</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username=dkx; domain=www.taobao.com'</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span>  <span class=\"exturl\" data-url=\"aHR0cDovL21haW4ubS50YW9iYW8uY29t\">main.m.taobao.com</span> 当前域</p>\n<p>父域：.taobao.com</p>\n<p>也就是需要在它们共同存在的域下设置的 Cookie 才能访问到</p>\n<p><strong>操作</strong>：</p>\n<p>PC 端淘宝：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50YW9iYW8uY29t\">www.taobao.com</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040756721.png\" alt=\"image-20230529111416183\" /></p>\n<p>查看 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757921.png\" alt=\"image-20230529111454087\" /></p>\n<p>查看：手机端的淘宝 <span class=\"exturl\" data-url=\"aHR0cDovL21haW4ubS50YW9iYW8uY29t\">main.m.taobao.com</span></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757707.png\" alt=\"image-20230529111528150\" /></p>\n<p>查看 Cookie</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757623.png\" alt=\"image-20230529111537366\" /></p>\n<h3 id=\"4path路径\"><a class=\"anchor\" href=\"#4path路径\">#</a> 4.Path 路径</h3>\n<p>Path 限定了访问 Cookie 的范围 (同一个域名下)</p>\n<p>使用 JS 只能读写当前路径和上级路径的 Cookie，无法读写下级路径的 Cookie</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie<span class=\"token operator\">=</span><span class=\"token string\">'username=dkx; path=\\路径'</span></pre></td></tr></table></figure><p>&lt;font style=&quot;color:red&quot;&gt; 当 Name，Domain，Path 这 3 个字段都相同的时候，才是同一个 Cookie&lt;/font&gt;。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757848.png\" alt=\"image-20230529112550487\" /></p>\n<h3 id=\"5httponly\"><a class=\"anchor\" href=\"#5httponly\">#</a> 5.HttpOnly</h3>\n<p>设置了 HttpOnly 属性的 Cookie 不能通过 js 去访问</p>\n<blockquote>\n<p>前端不能通过 js 去设置一个 HttpOnly 类型的 Cookie，这种类型的 Cookie 只能是后端来设置</p>\n<p>只要是 HttpOnly 类型的，通过 document.cookie 是获取不到的，也不能进行修改</p>\n</blockquote>\n<h3 id=\"6secure安全标志\"><a class=\"anchor\" href=\"#6secure安全标志\">#</a> 6.Secure 安全标志</h3>\n<p>Secure 限定了只有在使用了 https 而不是 http 的情况下才可以发送给服务端</p>\n<p>&lt;font style=&quot;color:red&quot;&gt;Domain，Path，Secure 都要满足条件，还不能过期的 Cookie 才能随着请求发送到服务器端 &lt;/font&gt;。</p>\n<h2 id=\"cookie的封装\"><a class=\"anchor\" href=\"#cookie的封装\">#</a> Cookie 的封装</h2>\n<h3 id=\"封装cookie\"><a class=\"anchor\" href=\"#封装cookie\">#</a> 封装 Cookie</h3>\n<p>创建 html 页面在 script 标签中导入封装的 js 文件和要使用的方法</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token comment\">// 导入 js 文件和对应要使用的方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/cookie.js'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token comment\">// 设置 cookie</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sex'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token comment\">// 删除 cookie</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token comment\">// 获取 cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建 js 文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 写入 Cookie</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//  可选赋值参数           默认值 undefined 设置为空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>maxAge<span class=\"token punctuation\">,</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span>secure<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">let</span> cookieText <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> maxAge <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; max-age=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>maxAge<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; domain=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>domain<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; path=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>path<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>secure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      cookieText <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">; secure</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> cookieText</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 通过 name 获取 cookie 值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   name <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token keyword\">const</span> cookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> itme <span class=\"token keyword\">of</span> cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>cookieName<span class=\"token punctuation\">,</span>cookieValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> itme<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookieName <span class=\"token operator\">==</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token keyword\">return</span> cookieValue</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 根据 name,domain,path 删除 cookie</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>domain<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">,</span><span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 导出方法</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757775.png\" alt=\"image-20230529152224212\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040757698.png\" alt=\"image-20230529152234954\" /></p>\n<h2 id=\"cookie的注意事项\"><a class=\"anchor\" href=\"#cookie的注意事项\">#</a> Cookie 的注意事项</h2>\n<h3 id=\"前后端都可以写入和获取cookie\"><a class=\"anchor\" href=\"#前后端都可以写入和获取cookie\">#</a> 前后端都可以写入和获取 Cookie</h3>\n<h3 id=\"cookie有数量-限制\"><a class=\"anchor\" href=\"#cookie有数量-限制\">#</a> Cookie 有数量 限制</h3>\n<p>每个域名下的 Cookie 数量有限</p>\n<p>当超过单个域名限制之后，再设置 Cookie，浏览器就会清除以前设置的 Cookie</p>\n<h3 id=\"cookie有大小-限制\"><a class=\"anchor\" href=\"#cookie有大小-限制\">#</a> Cookie 有大小 限制</h3>\n<p>每个 Cookie 的存储容量很小，最多只有 4KB 左右</p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E5%88%9D%E5%A7%8B%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E5%88%9D%E5%A7%8B%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1/",
            "title": "初始前后端通信",
            "date_published": "2024-02-12T12:19:51.898Z",
            "content_html": "<h1 id=\"初始前后端通信\"><a class=\"anchor\" href=\"#初始前后端通信\">#</a> 初始前后端通信</h1>\n<h2 id=\"前后端通信是什么\"><a class=\"anchor\" href=\"#前后端通信是什么\">#</a> 前后端通信是什么</h2>\n<h3 id=\"前后端通信的过程\"><a class=\"anchor\" href=\"#前后端通信的过程\">#</a> 前后端通信的过程</h3>\n<p>前后端的通信是在 ' 请求 - 响应 ' 中完成的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734264.png\" alt=\"image-20230528144412712\" /></p>\n<p><strong>概念解释</strong></p>\n<p><strong>前端</strong>：浏览器端</p>\n<p><strong>客户端</strong>：只要能和服务器通信的就叫客户端</p>\n<p><strong>后端</strong>：服务器端</p>\n<p><strong>通过终端向服务器发送请求</strong>： <code>curl https//www.imooc.com</code></p>\n<p>会响应回来一些数据但是不能被解析，终端能与服务器进行通信所以也是属于客户端的。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734651.png\" alt=\"image-20230528144928922\" /></p>\n<h3 id=\"前后端通信方式\"><a class=\"anchor\" href=\"#前后端通信方式\">#</a> 前后端通信方式</h3>\n<h4 id=\"1-使用浏览器访问网页\"><a class=\"anchor\" href=\"#1-使用浏览器访问网页\">#</a> 1. 使用浏览器访问网页</h4>\n<p>在浏览器地址栏输入网址，按下回车</p>\n<h4 id=\"2html的标签\"><a class=\"anchor\" href=\"#2html的标签\">#</a> 2.HTML 的标签</h4>\n<p>浏览器在解析 HTML 标签的时候，遇到一些特殊的标签，会再次向服务器发送请求</p>\n<p>比如：link ，img ，script ，iframe</p>\n<p>还有一些标签，浏览器解析的时候，不会向服务器发送请求，但是用户可以使用它们向服务器发送请求</p>\n<p>比如：a ，form</p>\n<h4 id=\"3ajax和fetch\"><a class=\"anchor\" href=\"#3ajax和fetch\">#</a> 3.ajax 和 Fetch</h4>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/AJAX/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/AJAX/",
            "title": "AJAX",
            "date_published": "2024-02-12T12:18:20.965Z",
            "content_html": "<h2 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> AJAX</h2>\n<h3 id=\"概念asynchronous-javascript-and-xml-异步的javascript和xml\"><a class=\"anchor\" href=\"#概念asynchronous-javascript-and-xml-异步的javascript和xml\">#</a> 概念：ASynchronous JavaScript And XML 异步的 JavaScript 和 XML</h3>\n<p>作用：提升用户的体验</p>\n<ol>\n<li>异步和同步：客户端和服务器端相互通信的基础上\n<ul>\n<li>同步：客户端必须等待服务器端的响应，在等待期间客户端不能做其它事情</li>\n<li>异步：客户端不需要等待服务器端的响应，在服务器端处理请求的过程中，客户端可以进行其它的操作</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/image_2022-12-26-19-23-35.png\" alt=\"image_2022-12-26-19-23-35\" /></p>\n<p>Ajax 是一种用于创建快速动态网页的技术</p>\n<p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术</p>\n<p>通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新，这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</p>\n<p>传统的网页 (不使用 Ajax) 如果需要更新内容，必须重载整个网页页面</p>\n<h3 id=\"实现方式\"><a class=\"anchor\" href=\"#实现方式\">#</a> 实现方式</h3>\n<ol>\n<li>原生的 js 实现方式 (了解)</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>head<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>title<span class=\"token punctuation\">></span></span><span class=\"token class-name\">Title</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/jquery-3.3.1.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/jquery-migrate-1.2.1.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>script<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 定义方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        function <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 发送异步请求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 创建核心对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">var</span> xmlhttp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">window<span class=\"token punctuation\">.</span></span>XMLHttpRequest</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                xmlhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                xmlhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 建立连接</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>             * 参数:</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             *  1. 请求方式：GET,POST</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             *      - get 方式，请求参数在 URL 后边拼接，send 方法为空参</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             *      - post 方法，请求参数在 send 方法中定义</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             *  2. 请求的 URL:</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             *  3. 同步或异步请求:true (异步) 或 false (同步)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             */</span>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            xmlhttp<span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"/ajaxServlet?username=tom\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            xmlhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 接受并处理来自服务器的响应结果</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 获取方式:xmlhttp.responseText</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 什么时候获取？当服务器响应成功后再获取</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 当 xmlhttp 对象的就绪状态改变时，触发事件 onreadystatechange</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            xmlhttp<span class=\"token punctuation\">.</span>onreadystatechange <span class=\"token operator\">=</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// 判断 readyState 就绪状态是否为 4, 判断 status 响应状态码是否为 200</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xmlhttp<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">==</span><span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xmlhttp<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token comment\">// 获取服务器的响应结果</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token keyword\">var</span> responseText <span class=\"token operator\">=</span> xmlhttp<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>body<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"发送异步请求\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"fun()\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>JQuery 实现方式</p>\n<ol>\n<li>$.ajax()\n<ul>\n<li>每个键值对尾都需要加上逗号，否则会报错而最后一行尾建议不要加逗号</li>\n<li>参数:\n<ol>\n<li>url: 请求路径\n<ul>\n<li>格式:url:&quot;路径&quot;</li>\n</ul>\n</li>\n<li>data: 请求参数\n<ul>\n<li username:jack,age:123=\"\">格式:data:</li>\n</ul>\n</li>\n<li>callback: 回调函数\n<ul>\n<li>格式:success:function ( )</li>\n</ul>\n</li>\n<li>type: 响应结果的类型\n<ul>\n<li>格式:type:&quot;GET&quot;</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Title<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/jquery-3.3.1.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/jquery-migrate-1.2.1.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 定义方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">let</span> password <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 使用 $.ajax () 方式来发送异步请求</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token string-property property\">'username'</span><span class=\"token operator\">:</span>username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token string-property property\">'password'</span><span class=\"token operator\">:</span>password</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 每个键值对后需要加上逗号否则会报错，但是最后一个键值对不要加逗号否则浏览器会报错           // 请求路径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 请求方式</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// data:\"username=jack&amp;age=123\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// http://localhost/user/login?username=jack&amp;age=123</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">\"username\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span><span class=\"token string-property property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 请求参数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       \t\t    <span class=\"token comment\">// 或者使用以下发送数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 设置接收到的响应数据的格式</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 设置发送给服务器的数据格式</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token literal-property property\">contentType</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// 设置用异步或同步方式执行脚本 true 为异步，false 为同步</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token literal-property property\">async</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token operator\">/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 响应成功后的回调函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">// 如果请求响应出错，会执行的回调函数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错啦\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"异步发送请求\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"fun()\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>$.get (): 发送 get 请求</p>\n<ul>\n<li>语法:$.get (url,[data],[callback],[type])\n<ul>\n<li>参数:</li>\n</ul>\n<ol>\n<li>url: 请求路径</li>\n<li>data: 请求参数</li>\n<li>callback: 回调函数</li>\n<li>type: 响应结果的类型</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>$.post (): 发送 post 请求</p>\n<ul>\n<li>\n<p>语法:$.post (url,[data],[callback],[type])</p>\n<ul>\n<li>参数:</li>\n</ul>\n<ol>\n<li>\n<p>url: 请求路径</p>\n</li>\n<li>\n<p>data: 请求参数</p>\n</li>\n<li>\n<p>callback: 回调函数</p>\n</li>\n<li>\n<p>type: 响应结果的类型</p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>head<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>title<span class=\"token punctuation\">></span></span><span class=\"token class-name\">Title</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/jquery-3.3.1.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/jquery-migrate-1.2.1.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>script<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 定义方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// function fun()&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//     $.get(\"ajaxServlet\",&#123;username:\"tom\",age:\"18\"&#125;,function(a)&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//         alert(a);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//     &#125;,\"text\");</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 定义方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        function <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//                路径                         参数                  回调函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            $<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ajaxServlet\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>username<span class=\"token operator\">:</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 弹出窗口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 类型</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>body<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"异步发送请求\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"fun()\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B/",
            "title": "黑马头条案例-主要演示axios",
            "date_published": "2024-02-12T11:13:33.680Z",
            "content_html": "<p><strong>技术</strong>：</p>\n<ul>\n<li>基于 Bootstrap 搭建网站标签和样式</li>\n<li>集成 &lt;font title='red'&gt;wangEditor 插件 &lt;/font &gt; 实现富文本编辑器</li>\n<li>使用原生 JS 完成 &lt;font title='red'&gt; 增删改查 &lt;/font &gt; 等业务</li>\n<li>基于 axios 与黑马头条线上接口交互</li>\n<li>使用 &lt;font title='red'&gt;axios 拦截器 &lt;/font &gt; 进行权限判断</li>\n</ul>\n<p>项目准备：准备配套的素材代码</p>\n<p>包含：html，css，js，静态图片，第三方插件等等</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151014703.png\" alt=\"image-20230815101452131\" /></p>\n<p>目录管理：建议这样管理，方便查找</p>\n<ul>\n<li>assets：资源文件夹 (图片，字体等)</li>\n<li>lib：资料文件夹 (第三方插件，例如：form-serialize)</li>\n<li>&lt;font title='red'&gt;page&lt;/font&gt;：页面文件夹</li>\n<li>&lt;font title='red'&gt;utils&lt;/font&gt;：使用程序文件夹 (工具插件)</li>\n</ul>\n<h3 id=\"验证码登录\"><a class=\"anchor\" href=\"#验证码登录\">#</a> 验证码登录</h3>\n<p><strong>目标</strong>：完成验证码登录，后端设置验证码默认为 246810</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>在 utils /request.js 配置 axios 请求 &lt;font title='red'&gt; 基地址 &lt;/font&gt;.</p>\n<ul>\n<li>作用：提取公共前缀地址，配置后 axios 请求时都会 baseURL + url</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://geek.itheima.net'</span></pre></td></tr></table></figure><ul>\n<li><strong>解决的场景</strong>：防止后端频繁更换基地址，解决需要重新部署很多个页面的情况！</li>\n</ul>\n</li>\n<li>\n<p>收集手机号和验证码数据</p>\n</li>\n<li>\n<p>基于 axios 调用验证码登录接口</p>\n</li>\n<li>\n<p>使用 Boostrap 的 Alert 警告框反馈结果给用户</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151024505.png\" alt=\"image-20230815102437892\" /></p>\n<p>request.js</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//axios 公共配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 基地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://geek.itheima.net'</span></pre></td></tr></table></figure><p>index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 1：验证码登录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1.1 在 utils/request.js 配置 axios 请求基地址</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.2 收集手机号和验证码数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.3 基于 axios 调用验证码登录接口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 1.4 使用 Bootstrap 的 Alert 警告框反馈结果给用户</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1.2 收集手机号和验证码数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 1.3 基于 axios 调用验证码登录接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/authorizations'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token comment\">// 手机号或验证码格式不正确</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>alert.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 弹窗插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 需要先准备 alert 样式相关的 DOM</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * BS 的 Alert 警告框函数，2 秒后自动消失</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param &#123;*&#125; isSuccess 成功 true，失败 false</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @param &#123;*&#125; msg 提示消息</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isSuccess<span class=\"token punctuation\">,</span> msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> myAlert <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.alert'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> msg</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token string\">'alert-success'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'alert-danger'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    myAlert<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151052133.png\" alt=\"image-20230815105239053\" /></p>\n<h3 id=\"token的介绍\"><a class=\"anchor\" href=\"#token的介绍\">#</a> token 的介绍</h3>\n<p><strong>概念</strong>：访问权限的 &lt;font title='red'&gt; 令牌 &lt;/font&gt;，本质上是一串 &lt;font title='red'&gt; 字符串 &lt;/font&gt;.</p>\n<p><strong>创建</strong>：正确登录后，由后端签发并返回</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151054393.png\" alt=\"image-20230815105410152\" /></p>\n<p><strong>作用</strong>：判断是否有 &lt;font title='red'&gt; 登录状态 &lt;/font &gt; 等，控制访问权限</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151056291.png\" alt=\"image-20230815105559967\" /></p>\n<p><strong>注意</strong>：&lt;font title='red'&gt; 前端 &lt;/font &gt; 只能判断 token&lt;font title='red'&gt; 有无 &lt;/font&gt;，而 &lt; font title='red'&gt; 后端 &lt;/font &gt; 才能判断 token 的 &lt; font title='red'&gt; 有效性 &lt;/font&gt;。</p>\n<h4 id=\"token的使用\"><a class=\"anchor\" href=\"#token的使用\">#</a> token 的使用</h4>\n<p><strong>目标</strong>：只有登录状态，才可以访问内容页面</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>在 utils /auth.js 中判断无 token 令牌字符串，则强制跳转到登录页 (手动修改地址栏测试)</p>\n<ul>\n<li>核心代码</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> locaStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 没有 token 令牌字符串，则强制跳转登录页</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在登录成功后，保存 token 令牌字符串到本地，再跳转到首页 (手动修改地址栏测试)</p>\n<ul>\n<li>核心代码</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 登录成功后，保存 token 令牌字符串到本地，并跳转到内容列表页面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../content/index.html'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p>auth.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 权限插件（引入到了除登录页面，以外的其他所有页面）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 目标 1：访问权限控制</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.1 判断无 token 令牌字符串，则强制跳转到登录页</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.2 登录成功后，保存 token 令牌字符串到本地，并跳转到内容列表页面</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//  1.1 判断无 token 令牌字符串，则强制跳转到登录页</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151151847.gif\" alt=\"test\" /></p>\n<p>index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 1：验证码登录</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 1.1 在 utils/request.js 配置 axios 请求基地址</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.2 收集手机号和验证码数据</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 1.3 基于 axios 调用验证码登录接口</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 1.4 使用 Bootstrap 的 Alert 警告框反馈结果给用户</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1.2 收集手机号和验证码数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.login-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 1.3 基于 axios 调用验证码登录接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/authorizations'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 1.4 使用 Bootstrap 的 Alert 警告框反馈结果给用户</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 登录成功后，保存 token 令牌字符串到本地，并跳转到内容列表页面</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../content/index.html'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">myAlert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token comment\">// 手机号或验证码格式不正确</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151157907.gif\" alt=\"test\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>token 的作用？\n<ul>\n<li>&lt;font title='red'&gt; 判断 &lt;/font &gt; 用户是否有 &lt; font title='red'&gt; 登录状态 &lt;/font &gt; 等</li>\n</ul>\n</li>\n<li>token 的注意：\n<ul>\n<li>&lt;font title='red'&gt; 前端 &lt;/font &gt; 只能判断 token 的 &lt; font title='red'&gt; 有无 &lt;/font&gt;.</li>\n<li>&lt;font title='red'&gt; 后端 &lt;/font &gt; 通过解密可以提取 token 字符串的原始信息，判断 &lt; font title='red'&gt; 有效性 &lt;/font&gt;.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"个人信息设置和axios请求拦截器\"><a class=\"anchor\" href=\"#个人信息设置和axios请求拦截器\">#</a> 个人信息设置和 axios 请求拦截器</h3>\n<p><strong>需求</strong>：设置用户昵称</p>\n<p><strong>语法</strong>：axioos 可以在 headers 选项传递请求头参数</p>\n<p><strong>问题</strong>：很多接口，都需要携带 token 令牌字符串</p>\n<p><strong>解决</strong>：在请求拦截器统一设置公共 headers 选项</p>\n<p><strong>axios 请求拦截器</strong>：发起请求之前，触发的配置函数，对 &lt;font title='red'&gt; 请求参数 &lt;/font &gt; 进行额外配置</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"./%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B.assets/202308151310161.png\" alt=\"token字符串\" /></p>\n<p>auth.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 目标 2：设置个人信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 2.1 在 utils/request.js 设置请求拦截器，统一携带 token</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 2.2 请求个人信息并设置到页面</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/user/profile'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.nick-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>request.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 统一携带 token 令牌字符串在请求头上</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断如果 token 不为空的话则将每个 header 请求头都加上 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    token <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>token<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151327770.png\" alt=\"image-20230815132709455\" /></p>\n<blockquote>\n<p>&lt;span alt='solid'&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 axios 请求拦截器？\n<ul>\n<li>发起请求之前，调用的一个 &lt;font title='red'&gt; 函数 &lt;/font&gt;，对 &lt; font title='red'&gt; 请求参数 &lt;/font &gt; 进行 &lt; font title='red'&gt; 设置 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>axios 请求拦截器，什么时候使用？\n<ul>\n<li>有 &lt;font title='red'&gt; 公共配置 &lt;/font &gt; 和设置时，统一设置在请求拦截器中</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"axios响应拦截器和身份验证失败\"><a class=\"anchor\" href=\"#axios响应拦截器和身份验证失败\">#</a> axios 响应拦截器和身份验证失败</h3>\n<p>axios 响应拦截器：相应回到 then /catch 之前，触发的 &lt;font title='red'&gt; 拦截函数 &lt;/font&gt;，对 &lt; font title='red'&gt; 响应结果统一处理 &lt;/font&gt;.</p>\n<p><strong>例如</strong>：身份验证失败，统一判断并做处理。</p>\n<p><img data-src=\"./%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B.assets/202308151332851.png\" alt=\"image-20230815133219452\" /></p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2xx 范围内的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 超出 2xx 范围的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么 例如：统一对 401 身份验证失败情况做出处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>判断内容页面的 token 的有效期或者是否是假的 token</p>\n<p>在内容页面中修改 localStorage 里面存储的 token 然后重新刷新页面请求一次后端，后端发现 token 不对就会响应一个错误信息，查看情况。</p>\n<p>修改内容页面的 token</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151344594.png\" alt=\"image-20230815134227005\" /></p>\n<p>刷新页面请求服务器。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151344975.png\" alt=\"image-20230815134314948\" /></p>\n<p>request.js</p>\n<p>if 判断中使用到的？是判断当前函数是否为 undefined 或者 Null 这种不满足条件的情况，如果不满足则不执行后面的函数，满足则继续链式调用防止异常。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2xx 范围内的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 超出 2xx 范围的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么 例如：统一对 401 身份验证失败情况做出处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用？链式调用如果前端有一个不满足条件则不调用后面的函数防止异常</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">?.</span>response<span class=\"token operator\">?.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'身份验证失败，请重新登录'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//token 不正确或者过期则删除当前对应的 token</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 跳转至登录页面重新登录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151354833.gif\" alt=\"test\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是 axios 响应拦截器？\n<ul>\n<li>响应回到 then /catch 之前，触发的 &lt;font title='red'&gt; 拦截函数 &lt;/font&gt;，对 &lt; font title='red'&gt; 响应结果统一处理 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>axios 响应拦截器，什么时候触发成功 / 失败的回调函数？\n<ul>\n<li>状态为 &lt;font title='red'&gt;2xx&lt;/font &gt; 触发 &lt; font title='red'&gt; 成功 &lt;/font &gt; 回调，&lt;font title='red'&gt; 其它 &lt;/font &gt; 则触发 &lt; font title='red'&gt; 失败 &lt;/font &gt; 的回调函数</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"优化axios响应结果\"><a class=\"anchor\" href=\"#优化axios响应结果\">#</a> 优化 axios 响应结果</h3>\n<p><strong>目标</strong>：axios 直接接收服务器返回的响应结果</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 个人信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/user/profile'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//result: 服务器响应数据对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 文章列表</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'/v1_0/mp/articles'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//result: 服务器响应数据对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>axios 内部封装的接口对象，它会将服务器返回的数据对象 挂载到 data 的属性下，所以我们想要访问它的昵称，那我们就需要在 result 中 这样调用 <span class=\"exturl\" data-url=\"aHR0cDovL3Jlc3VsdC5kYXRhLmRhdGEubmFtZQ==\">result.data.data.name</span> 如果每次都需要这样的话就会显得比较麻烦，那么可以对其进行一下优化。</p>\n<p><img data-src=\"./%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E6%A1%88%E4%BE%8B.assets/202308151400480.png\" alt=\"image-20230815140057937\" /></p>\n<p>我们可以基于 axios 的响应拦截器来完成</p>\n<p>在 request.js 中对响应拦截器进行编写</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 2xx 范围内的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么 例如：直接返回服务器响应结果对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 超出 2xx 范围的状态码都会触发该函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么 例如：统一对 401 身份验证失败情况做出处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 使用？链式调用如果前端有一个不满足条件则不调用后面的函数防止异常</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">?.</span>response<span class=\"token operator\">?.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'身份验证失败，请重新登录'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//token 不正确或者过期则删除当前对应的 token</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 跳转至登录页面重新登录</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'../login/index.html'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>config 是响应回来的 axios 数据对象，相当于 result 那么 config.data 就获取到了 服务器的 data 数据对象了。将 config.data 获取的数据对象 统一返回为响应结果。这样其它 axios 请求响应接收数据的时候直接调用 result.data.name 就可以取出服务器响应封装的数据对象 data 里面的用户昵称了。</p>\n<h3 id=\"发布文章富文本编辑器\"><a class=\"anchor\" href=\"#发布文章富文本编辑器\">#</a> 发布文章 — 富文本编辑器</h3>\n<p><strong>富文本</strong>：带样式，多格式的文本，在前端一般使用标签配合内联式实现</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151440229.png\" alt=\"image-20230815144009765\" /></p>\n<p><strong>目标</strong>：发布文章页，富文本编辑器的集成</p>\n<p><strong>使用</strong>：wangEditor 插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2FuZ2VkaXRvci5jb20vdjUvZ2V0dGluZy1zdGFydGVkLmh0bWw=\">点击查看文档</span></p>\n<p><strong>步骤</strong>：参考文档</p>\n<ol>\n<li>\n<p>引入 CSS 定义样式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;link href=\"https://unpkg.com/@wangeditor/editor@latest/dist/css/style.css\" rel=\"stylesheet\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;style></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  #editor—wrapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid #ccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 按需定义 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token selector\">#toolbar-container</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">border-bottom</span><span class=\"token punctuation\">:</span> 1px solid #ccc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token selector\">#editor-container</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 500px<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&lt;/style></pre></td></tr></table></figure></li>\n<li>\n<p>定义 HTML 结构</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>editor—wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toolbar-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 工具栏 --></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>editor-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 编辑器 --></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>引入 JS 创建编辑器</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/@wangeditor/editor@latest/dist/index.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> createEditor<span class=\"token punctuation\">,</span> createToolbar <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>wangEditor</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> editorConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">placeholder</span><span class=\"token operator\">:</span> <span class=\"token string\">'Type here...'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">editor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> editor<span class=\"token punctuation\">.</span><span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editor content'</span><span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 也可以同步到 &lt;textarea></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> editor <span class=\"token operator\">=</span> <span class=\"token function\">createEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span> <span class=\"token string\">'#editor-container'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;p>&lt;br>&lt;/p>'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> editorConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'simple'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> toolbarConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> toolbar <span class=\"token operator\">=</span> <span class=\"token function\">createToolbar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    editor<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span> <span class=\"token string\">'#toolbar-container'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> toolbarConfig<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// or 'simple'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>监听内容改变，保存在隐藏文本域 (便于后期收集)</p>\n</li>\n</ol>\n<p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308170737626.png\" alt=\"image-20230815150023155\" /></p>\n<p>使用 npm 安装到本地的使用方式：</p>\n",
            "tags": [
                "计算机学科",
                "web",
                "代码经验",
                "前后端交互",
                "axios"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Promise/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Promise/",
            "title": "Promise",
            "date_published": "2024-01-24T10:48:46.878Z",
            "content_html": "<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<h3 id=\"基本使用与概述\"><a class=\"anchor\" href=\"#基本使用与概述\">#</a> 基本使用与概述</h3>\n<p><strong>定义</strong>：</p>\n<p>Promise 对象用于表示一个<mark>异步操作</mark>的<mark>最终完成</mark> (或<mark>失败</mark>) 及其<mark>结果值</mark>。</p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 好处 &lt;/span&gt;：</p>\n<ol>\n<li>逻辑更清晰</li>\n<li>了解 axios 函数内部运作机制</li>\n<li>能解决回调函数地狱问题</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130946670.png\" alt=\"image-20230813094654122\" /></p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">//2. 执行异步任务 — 并传递结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 成功调用：resolve (值) 触发 then () 执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// 失败调用：reject (值) 触发 catch () 执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 接收结果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Promise?\n<ul>\n<li>表示 (管理) 一个 &lt; font title=red &gt; 异步 &lt;/font &gt; 操作 &lt; font title=red &gt; 最终状态 &lt;/font &gt; 和 &lt; font title=red &gt; 结果值 &lt;/font &gt; 的对象</li>\n</ul>\n</li>\n<li>为什么学习 Promise?\n<ul>\n<li>成功和失败状态，可以关联对应处理程序</li>\n<li>了解 axios 内部原理</li>\n</ul>\n</li>\n<li>Promise 使用步骤？\n<ol>\n<li>创建 Promise 对象  <code>new Promise((成功回调函数，失败回调函数)=&gt; &#123;&#125;)</code></li>\n<li>执行异步任务 — 并传递结果\n<ol>\n<li>成功调用：成功回调函数 (值) 触发 then () 执行</li>\n<li>失败调用：失败回调函数 (值) 触发 catch () 执行</li>\n</ol>\n</li>\n<li>接收结果\n<ol>\n<li>成功：then (回调函数 =&gt; {})</li>\n<li>失败：catch (回调函数 =&gt; {})</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promise三种状态\"><a class=\"anchor\" href=\"#promise三种状态\">#</a> Promise— 三种状态</h3>\n<p><strong>作用</strong>：理解 Promise 对象如何 &lt;font title=red&gt; 关联 &lt;/font&gt; 的 &lt; font title=red &gt; 处理函数 &lt;/font&gt;，以及代码执行顺序</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131009808.png\" alt=\"image-20230813100906484\" /></p>\n<p>待定 (pending)：初始状态，既没有被兑现，也没有拒绝</p>\n<p>已兑现 (fulfilled)：意味着，操作成功完成</p>\n<p>已拒绝 (rejected)：意味着，操作失败</p>\n<p>&lt;blockquote alt=danger&gt;<br />\n&lt;div&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;&lt;font title=red &gt; 注意 &lt;/font&gt;：&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;p&gt;<br />\n&lt;span&gt;Promise 对象一旦被 &lt; font title=red &gt; 兑现 / 拒绝 &lt;/font &gt; 就是 &lt; font title=red &gt; 已敲定了，状态无法再被改变 &lt;/font&gt;&lt;/span&gt;<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/blockquote&gt;</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 目标：使用 Promise 管理异步任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 在下面的定时器任务还没执行 成功或失败的回调函数之前展开 console</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">// Promise 处于 pending 状态 - 待定状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">//2. 执行异步代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">//resolve () => fulfilled 状态 - 已兑现状态 执行 = then ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求—成功结果'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//reject () => rejected 状态 - 已拒绝状态 执行 = catch ()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'模拟AJAX请求—失败结果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 程序执行到这里 Promise 的状态就已经敲定了不可改变了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 上面同时执行成功和失败最终是？ fulfilled 因为不可变</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 3. 获取结果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131023902.png\" alt=\"image-20230813102333221\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>Promise 对象有哪 3 中 &lt;font title=red&gt; 状态 &lt;/font&gt;？\n<ul>\n<li>待定：pending</li>\n<li>已兑现：fulfilled</li>\n<li>已拒绝：rejected</li>\n</ul>\n</li>\n<li>Promise 状态有什么用？\n<ul>\n<li>状态改变后，调用关联的处理函数</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promisexhr获取省份列表\"><a class=\"anchor\" href=\"#promisexhr获取省份列表\">#</a> Promise+XHR 获取省份列表</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：使用 Promise 管理 XHR 请求省份列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 创建 Promise 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 执行 XHR 异步代码，获取省份列表</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 关联成功或失败函数，做后续处理</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1. 创建 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 2. 执行 XHR 代码，获取省份列表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 3.xhr 如何判断响应成功还是失败的？</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 2xx 开头都是成功响应状态码</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// console.log(xhr.response)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 3. 关联成功或失败函数，做后续处理</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 将成功获取的数据添加到 p 标签中展示</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        p<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 错误对象要用 dir 详细打印</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 服务器返回错误提示信息，插入到 p 标签展示</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131100796.png\" alt=\"image-20230813110046300\" /></p>\n<p>如果要发送一个 JSON 数据而且后端接收数据警告了：text/plain;charset=UTF-8 此时需要设置下请求头的数据格式了：</p>\n<p>写在 open 与 send 之间</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhl<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"封装_简易axios-_-获取省份列表\"><a class=\"anchor\" href=\"#封装_简易axios-_-获取省份列表\">#</a> 封装_简易 axios _ 获取省份列表</h3>\n<p><strong>需求</strong>：基于<mark> Promise</mark> + <mark>XHR</mark> 封装 myAxios 函数，获取省份列表展示</p>\n<p><strong>步骤</strong>：</p>\n<ol>\n<li>\n<p>定义 myAxios 函数，接收 &lt;font title=red&gt; 配置对象 &lt;/font&gt;，返回 &lt; font title=red&gt;Promise 对象 &lt;/font&gt;.</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>发起 &lt;font title=red&gt;XHR 请求，默认请求方法 &lt;/font&gt; 为 GET</p>\n</li>\n<li>\n<p>调用 成功 / 失败 的处理程序</p>\n</li>\n<li>\n<p>使用 myAxios 函数，获取省份列表展示</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_获取省份列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 发起 XHR 请求，默认请求方法为 GET</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 调用 成功 / 失败 的处理程序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        4. 使用 myAxios 函数，获取省份列表展示</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131134277.png\" alt=\"image-20230813113448862\" /></p>\n<h3 id=\"封装_简易axios-_-获取地区列表-查询参数\"><a class=\"anchor\" href=\"#封装_简易axios-_-获取地区列表-查询参数\">#</a> 封装_简易 axios _ 获取地区列表 (查询参数)</h3>\n<p><strong>需求</strong>：修改 myAxios 函数支持传递 &lt;font title=red&gt; 查询参数 &lt;/font&gt;，获取 ‘辽宁省’ ，‘大连市’ 对应地区列表展示</p>\n<p><strong>要求</strong>：</p>\n<ol>\n<li>\n<p>myAxios 函数调用后，传入 &lt;font title=red&gt;params&lt;/font&gt; 选项</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求 - 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>基于  <code>URLSearchParams</code>  转换 &lt;font title=red&gt; 查询参数字符串 &lt;/font&gt;.</p>\n</li>\n<li>\n<p>使用自己封装的 myAxios 函数展示地区列表</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"my-p\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_获取地区列表</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 判断 params 选项，携带查询参数</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 使用 URLSearchParams 转换，并携带到 url 上</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 使用 myAxios 函数，获取地区列表</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 将获取到的查询参数转换为字符串类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 把查询参数字符串，拼接在 url 的？后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 4. 使用 myAxios 函数，获取省份列表展示</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> <span class=\"token string\">'辽宁省'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> <span class=\"token string\">'大连市'</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;/br>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 使用 dir 打印对象 详细查看</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>message</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131329652.png\" alt=\"image-20230813132951994\" /></p>\n<h3 id=\"封装_简易-_axios-_注册用户-请求体数据\"><a class=\"anchor\" href=\"#封装_简易-_axios-_注册用户-请求体数据\">#</a> 封装_简易 _axios _注册用户 (请求体数据)</h3>\n<p><strong>需求</strong>：修改 myAxios 函数支持传递 &lt;font title=red&gt; 请求体 &lt;/font &gt; 数据，完成注册用户功能</p>\n<p>步骤：</p>\n<ol>\n<li>\n<p>myAxios 函数调用后，判断 &lt;font title=red&gt;data&lt;/font &gt; 选项</p>\n<ul>\n<li>基本结构</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">//XHR 请求 - 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'目标资源地址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      参数名<span class=\"token number\">1</span><span class=\"token operator\">:</span> 值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      参数名<span class=\"token number\">2</span><span class=\"token operator\">:</span> 值<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>转换数据类型，在 <code>send()</code>  方法中发送</p>\n</li>\n<li>\n<p>使用自己封装的 myAxios 函数完成注册用户功能</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"reg-btn\"</span><span class=\"token operator\">></span>注册用户<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        目标：封装_简易 axios 函数_注册账号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        1. 判断 data 选项，携带请求体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        2. 转换数据类型，在 send 中发送</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        3. 使用 myAxios 函数，完成注册用户</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    1. 定义 myAxios 函数，接收配置对象，返回 Promise 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 params 选项，携带查询参数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token comment\">// 2. 使用 URLSearchParams 转换，并携带到 url 上</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">const</span> paramsObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>paramsObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token comment\">// 将获取到的查询参数转换为字符串类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">const</span> queryString <span class=\"token operator\">=</span> paramsObj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 把查询参数字符串，拼接在 url 的？后面</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>queryString<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 2. 发起 XHR 请求，默认请求方式为 GET</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">//config.method 调用请求方法 使用逻辑中断将默认值赋值为 GET 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                xhr<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loadend'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 3. 调用 成功 / 失败 的处理程序</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 1. 判断 data 选项，携带请求体</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token comment\">// 2. 转换数据类型，在 send 中发送</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">const</span> jsonStr <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token comment\">// 设置请求头数据类型为 application/json 是 JSON 数据格式</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token comment\">// 发送请求，携带请求体数据</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.reg-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 3. 使用 myAxios 函数，完成注册用户</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">myAxios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'qweqjisd1123'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123123'</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131400425.png\" alt=\"image-20230813140045017\" /></p>\n<h3 id=\"同步代码异步代码\"><a class=\"anchor\" href=\"#同步代码异步代码\">#</a> 同步代码 &amp; 异步代码</h3>\n<h4 id=\"同步代码\"><a class=\"anchor\" href=\"#同步代码\">#</a> 同步代码：</h4>\n<blockquote>\n<p>我们应该注意的是，实际上浏览器是按照我们 &lt;span alt=solid&gt; 书写代码的顺序一行一行执行程序的 &lt;/span&gt;。浏览器会等待代码的解析和工作，在 &lt; span alt=solid &gt; 上一行完成后才会执行下一行 &lt;/span&gt;。这样做是很有必要的，因为每一行新的代码都是建立在前面代码的基础之上的。</p>\n<p>这也使得它成为一个 &lt;span alt=solid&gt; 同步程序 &lt;/span&gt;.</p>\n</blockquote>\n<h4 id=\"异步代码\"><a class=\"anchor\" href=\"#异步代码\">#</a> 异步代码：</h4>\n<blockquote>\n<p>异步编程技术使得你的程序可以在执行一个 &lt;span alt=solid&gt; 可能长期运行的任务 &lt;/span &gt; 的同时继续对其它事件做出反应而 &lt; span alt=solid &gt; 不必等待任务完成 &lt;/span&gt;。与此同时，你的程序也将在任务 &lt; span alt=solid &gt; 完成后显示结果 &lt;/span&gt;。</p>\n</blockquote>\n<p><strong>同步代码</strong>：逐行执行，&lt;font title=red&gt; 需要原地等待结果 &lt;/font &gt; 后，才继续向下执行</p>\n<p><strong>异步代码</strong>：调用后 &lt;font title=red&gt; 耗时 &lt;/font&gt;，不阻塞代码继续执行 (不必原地等待)，在将来完成后触发一个 &lt;font title=red &gt; 回调函数 &lt;/font&gt;.</p>\n<blockquote>\n<p>JS 线程 详细查看 <a href=\"../Web/JavaScript/WebAPIs.md\">点击查看</a> 打开后 ctrl + F 搜索：JS 执行机制</p>\n</blockquote>\n<hr />\n<h3 id=\"回调函数地狱\"><a class=\"anchor\" href=\"#回调函数地狱\">#</a> 回调函数地狱</h3>\n<p><strong>需求</strong>：展示默认第一个省，第一个城市，第一个地区在下拉菜单中</p>\n<p><strong>概念</strong>：在回调函数中 &lt;font title=red&gt; 嵌套回调函数 &lt;/font&gt;，一直嵌套下去就形成了回调函数地狱</p>\n<p><strong>缺点</strong>：可读性差，异常无法捕获，耦合性严重，牵一发动全身</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131424346.png\" alt=\"image-20230813142433861\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 获取第一个省份默认下属的第一个城市名称</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>pname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 获取第一个城市默认下属第一个地区的名字</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>pname <span class=\"token punctuation\">,</span> cname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可读性 太差了，不好维护，耦合性严重</p>\n<p><strong>演示</strong>：</p>\n<h6 id=\"html代码\"><a class=\"anchor\" href=\"#html代码\">#</a> html 代码：</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>省份:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>城市:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>地区:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>js 代码</strong>：</p>\n<p>在第三个最里面的 axios 的 url 中 故意多加一个 1 然它报错看看最外层的是否能捕获到它的错误信息呢</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：演示回调函数地狱</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：获取默认第一个省，第一个市，第一个区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 概念：在回调函数中嵌套回调函数，一直嵌套下去就形成了回调函数地狱</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> 缺点：可读性差，异常无法捕获，耦合性严重，牵一发动全身</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//1. 获取默认第一个省份的名称</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 获取默认第一个城市的名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> city <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> city</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 3. 获取默认第一个地区的名称</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 我们故意将接口的地址写错看下异常的处理是什么样子的 多加一个 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> city <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>： &lt;font title=red&gt; 不行 &lt;/font&gt;！！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131533753.png\" alt=\"image-20230813153339502\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是回调函数地狱？\n<ul>\n<li>在回调函数一直向下 &lt;font title=red&gt; 嵌套回调函数 &lt;/font&gt;，形成回调函数地狱</li>\n</ul>\n</li>\n<li>回调函数地狱问题？\n<ul>\n<li>可读性差</li>\n<li>异常捕获困难</li>\n<li>耦合性严重</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"下面就是解决回调函数地狱问题的方式\"><a class=\"anchor\" href=\"#下面就是解决回调函数地狱问题的方式\">#</a> 下面就是解决回调函数地狱问题的方式：</h4>\n<h3 id=\"promise-链式调用\"><a class=\"anchor\" href=\"#promise-链式调用\">#</a> Promise - 链式调用</h3>\n<p>使用 Promise 的特性来解决 回调函数地狱问题！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131543365.png\" alt=\"image-20230813153913043\" /></p>\n<p><strong>上图解释</strong>：</p>\n<p>在创建一个 Promise 对象的时候，里面就会管理一个异步任务。而拿到异步任务成功的结果就可以调用对象内置的.then () 方法中传入回调函数接收成功的结果。而这个.then () 本身也是方法的调用本身也有返回值，而它的返回值又是一个新的 Promise 对象。这又是一个新的 Promise 对象，那里面还能再管理一个异步任务。</p>\n<p><strong>解决方式</strong>：</p>\n<p>获取省份的 Promise 中调用.then 在它的.then 中获取城市，而获取城市的 Promise 中调用.then 在它的.then 中获取地区。</p>\n<p>这样回调函数嵌套的问题就变成了线性的结构！</p>\n<blockquote>\n<p>概念：</p>\n<ul>\n<li>依靠 then () 方法返回一个 &lt; font title=red&gt; 新生成的 Promise 对象 &lt;/font &gt; 特性，继续串联下一环任务，直到结束</li>\n</ul>\n<p>细节：</p>\n<ul>\n<li>then () 回调函数中的 &lt; font title=red&gt; 返回值 &lt;/font&gt;，会影响新生成的 Promise 对象 &lt; font title=red &gt; 最终状态和结果 &lt;/font&gt;.</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131547443.png\" alt=\"image-20230813154716607\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 Promise 的链式调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：把省市的嵌套结构，改成链式调用的结构</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//1. 创建 Promise 对象 - 模拟请求省份名称</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'北京市'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 2. 获取省份名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token comment\">// 3. 创建 Promise 对象 - 模拟请求城市名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">//return Promise 对象最终状态和结果，影响到新的 Promise 对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token string\">'---北京'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//then () 返回的 Promise 是一个新对象 两个对象 的地址不同 返回 为 false</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">===</span> p<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131606112.png\" alt=\"image-20230813160612061\" /></p>\n<blockquote>\n<p>&lt;span alt=solid&gt; 总结 &lt;/span&gt;：</p>\n<ol>\n<li>什么是 Promise 的链式调用 ？\n<ul>\n<li>使用 then 函数返回新 Promise 对象特性，一直串联下去</li>\n</ul>\n</li>\n<li>then 回调函数中，return 的值会传给哪里？\n<ul>\n<li>传给 then 函数生成的新 Promise 对象</li>\n</ul>\n</li>\n<li>Promise 链式调用有什么用？\n<ul>\n<li>解决回调函数嵌套 (地狱) 问题</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"promise-链式应用\"><a class=\"anchor\" href=\"#promise-链式应用\">#</a> Promise - 链式应用</h3>\n<p><strong>目标</strong>：使用 Promise 链式调用，解决回调函数地狱问题。</p>\n<p><strong>做法</strong>：每个 Promise 对象中管理一个异步任务，用 then 返回 Promise 对象，串联起来。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131619195.png\" alt=\"image-20230813161938585\" /></p>\n<p>每一个 axios 就相当于 Promise 可以看下上面的 &lt;a href=&quot;#Promise+XHR 获取省份列表&quot;&gt;Promise+XHR&lt;/a&gt;.</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：把回调函数嵌套代码，改成 Promise 链式调用结构</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 需求：获取默认第一个省，第一个市，第一个地区并展示在下拉菜单中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 定义全局变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> pname <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//1. 获取第一个省 Promise 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   pname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 2. 获取第一个城市 Promise 对象 并返回 多加一个 1 让它报错查看捕获的结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   cname <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token comment\">// 3. 获取第一个地区 Promise 对象 并返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131646743.png\" alt=\"image-20230813164606240\" /></p>\n<h2 id=\"async函数和await\"><a class=\"anchor\" href=\"#async函数和await\">#</a> async 函数和 await</h2>\n<blockquote>\n<p>&lt;span alt=solid&gt; 定义 &lt;/span&gt;：</p>\n<p>async 函数是使用 <code>async</code>  关键字声明的函数。async 函数是  <code>AsyncFunction</code>  构造函数的实例，并且其中允许使用 <code>await</code>  关键字。&lt;span alt=solid&gt; <code>async</code>  和 <code>await</code>  关键字让我们可以用一种更简洁的方式写出基于 <code>Promise</code>  的异步行为，而无需刻意地链式调用 <code>Promise</code> &lt;/span&gt;。</p>\n<p>&lt;span alt=solid&gt; 概念 &lt;/span&gt;：在 async 函数内，使用 await 关键字取代 then 函数，&lt;font title=red &gt; 等待 &lt;/font &gt; 获取 Promise 对象成 &lt; font title=red &gt; 功状态的结果值 &lt;/font&gt;.</p>\n</blockquote>\n<p><strong>示例</strong>：</p>\n<h6 id=\"html代码-2\"><a class=\"anchor\" href=\"#html代码-2\">#</a> html 代码：</h6>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>省份:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>province<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>城市:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>city<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>地区:<span class=\"token entity named-entity\" title=\"&nbsp;\">&amp;nbsp;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>aname<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取默认省市区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getDefaultArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 赋予到页面上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.area'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">getDefaultArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h3 id=\"async函数和await_解决回调函数地狱问题\"><a class=\"anchor\" href=\"#async函数和await_解决回调函数地狱问题\">#</a> async 函数和 await_解决回调函数地狱问题</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 async 和 await 语法，解决回调函数地狱问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 概念：在 async 函数内，使用 await 关键字，获取 Promise 对象，\"成功状态\"   结果值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 注意：await 必须用在 async 修饰的函数内 (await 会阻止 \"异步函数\" 代码继续执行，原地等待结果)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">//axios 原地返回一个 Promise 对象而 await 等待一个 Promise 对象成功状态的结果值 所以在前面使用 await 接收将结果取在原地使用 一个变量接收</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">//await 必须用在 async 修饰内</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 故意在地址尾部多加一个 1 当这里发生错误后 后面不会再执行，你可能会想到下面不是依赖了这里一个变量吗应该是报错了吧不是没有执行。这个结论是错误的下面的代码并不会再去执行了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/area'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cname</span><span class=\"token operator\">:</span> cname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 只是终止了 aysnc 块中的代码执行并不是终止程序 哦～</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131748288.png\" alt=\"image-20230813174800891\" /></p>\n<p>没有对异常做处理，对异常做处理请看下章</p>\n<hr />\n<h3 id=\"async函数和await_捕获错误\"><a class=\"anchor\" href=\"#async函数和await_捕获错误\">#</a> async 函数和 await_捕获错误</h3>\n<p><strong>使用</strong>：try-catch</p>\n<p><code>try-catch</code>  语句标记要尝试的语句块，并指定一个出现异常时抛出的响应。</p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">// 要执行的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//error 接收的是，错误信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token comment\">//try 里面代码，如果有错误，直接进入这里执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> 目标：掌握 async 和 await 语法，解决回调函数地狱问题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> 概念：在 async 函数内，使用 await 关键字，获取 Promise 对象，\"成功状态\"   结果值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> 注意：await 必须用在 async 修饰的函数内 (await 会阻止 \"异步函数\" 代码继续执行，原地等待结果)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//1. 定义 async 修饰函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 1. 使用 try 包裹可能发生错误的代码</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//axios 原地返回一个 Promise 对象而 await 等待一个 Promise 对象成功状态的结果值 所以在前面使用 await 接收将结果取在原地使用 一个变量接收</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">//await 必须用在 async 修饰内</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">const</span> pObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> pname <span class=\"token operator\">=</span> pObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.province'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> pname</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 故意在地址尾部多加一个 1 当这里发生错误后 后面不会再执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">const</span> cObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/city1'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">pname</span><span class=\"token operator\">:</span> pname <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">const</span> cname <span class=\"token operator\">=</span> cObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> cname</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">const</span> aObj <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://hmajax.itheima.net/api/province'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">const</span> aname <span class=\"token operator\">=</span> aObj<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.aname'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> aname</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// 2. 使用 catch 捕获发生错误的信息</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 打印捕获到的错误信息 是一个对象是 axios 返回的错误使用 dir 查看详细</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 只是终止了 aysnc 块中的代码执行并不是终止程序 哦～</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131755747.png\" alt=\"image-20230813175557560\" /></p>\n<h2 id=\"宏任务与微任务\"><a class=\"anchor\" href=\"#宏任务与微任务\">#</a> 宏任务与微任务</h2>\n<p>ES6 之后引入了 Promise 对象，让 JS 引擎也可以发起异步任务</p>\n<p><strong>异步任务分为</strong>：</p>\n<p>&lt;span alt=solid&gt; 宏任务 &lt;/span&gt;：由 &lt; font title=red &gt; 浏览器 &lt;/font &gt; 环境执行的异步代码</p>\n<p>&lt;span alt=solid&gt; 微任务 &lt;/span&gt;：由 &lt; font title=red&gt;JS 引擎 &lt;/font &gt; 环境执行的异步代码</p>\n<p>宏任务</p>\n<table>\n<thead>\n<tr>\n<th>任务 (代码)</th>\n<th>执行所在环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JS 脚本执行事件 (Script)</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>setTimeout/setInterval</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>Ajax 请求完成事件</td>\n<td>浏览器</td>\n</tr>\n<tr>\n<td>用户交互事件等</td>\n<td>浏览器</td>\n</tr>\n</tbody>\n</table>\n<p>微任务</p>\n<table>\n<thead>\n<tr>\n<th>任务 (代码)</th>\n<th>执行所在环境</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise 对象.then ()</td>\n<td>JS 引擎</td>\n</tr>\n</tbody>\n</table>\n<p>Promise 本身是同步的，而 then 和 catch&lt;font title=red&gt; 回调函数 &lt;/font &gt; 是异步的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132000229.png\" alt=\"image-20230813195951215\" /></p>\n<p>执行步骤：</p>\n<pre><code> 1.script标签js脚本执行的事件就会交给浏览器环境\n\n 2.然后把整个js脚本代码推入到宏任务队列中\n\n 3.调用栈是空闲的它会立刻执行第一个宏任务就是script脚本(标签)然后执行里面代码\n\n 4.读到console.log(1)放入到调用栈进行执行\n  \n 5.读取setTimeout是异步任务，是个宏任务，宏任务交给浏览器来执行\n\n 6.读取new Promise放入到调用栈中，Promise对象本身是同步的,立刻打印里面的值\n\n 6.1 Promise是同步的立刻调用了里面的成功回调函数，它是微任务的\n\n 7.将console.log(5)推入调用栈执行\n\n 8.调用栈空闲了就反复去查看任务队列中是否有可执行的异步回调函数如果宏任务，微任务两个任务队列都有可执行的异步代码会优先执行微任务中的异步回调函数，因为微任务更接近与JS引擎\n\n 9.将微任务队列的任务推入到调用栈执行\n\n 10.此时微任务队列中没有任务了去找宏任务并将其推入到调用栈执行\n\n 11.程序运行完毕!!\n</code></pre>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是宏任务？\n<ul>\n<li>&lt;font title=red&gt; 浏览器执行 &lt;/font &gt; 的异步代码</li>\n<li>例如：JS 执行脚本事件，setTimeout /setInterval，Ajax 请求完成事件，用户交互事件等</li>\n</ul>\n</li>\n<li>什么是微服务？\n<ul>\n<li>&lt;font title=red&gt;JS 引擎 &lt;/font&gt; 执行的异步代码</li>\n<li>例如：Promise 对象.then () 的回调</li>\n</ul>\n</li>\n<li>JavaScript 内部代码如何执行？\n<ul>\n<li>执行第一个 script 脚本事件宏任务，里面 &lt;font title=red&gt; 同步 &lt;/font &gt; 代码</li>\n<li>遇到 &lt;font title=red&gt; 宏任务 / 微任务 &lt;/font &gt; 交给宿主环境，有结果回调函数进入对应队列</li>\n<li>当执行栈空闲时，&lt;font title=red&gt; 清空微任务 &lt;/font &gt; 队列，再执行 &lt; font title=red &gt; 下一个宏任务 &lt;/font&gt;，从 1 再来</li>\n</ul>\n</li>\n</ol>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132005359.png\" alt=\"image-20230813200500564\" /></p>\n</blockquote>\n<h2 id=\"promiseall静态方法\"><a class=\"anchor\" href=\"#promiseall静态方法\">#</a> Promise.all 静态方法</h2>\n<p><strong>概念</strong>：合并多个 Promise 对象，等待所有 &lt;font title=red&gt; 同时成功 &lt;/font &gt; 完成 (或某一个失败)，做后续逻辑</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132023381.png\" alt=\"image-20230813202342010\" /></p>\n<p><strong>语法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//all 的构造函数传入一个数组，数组里面就是要合并的一个一个小的 Promise 对象然后返回一个新的大 Promise 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promsie<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Promise对象，Promise对象，<span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">//result 结果：[Promise 对象成功结果，Promise 对象成功结果，...]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 第一个失败的 Promise 对象，抛出的异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/JSON/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/JSON/",
            "title": "初始JSON",
            "date_published": "2024-01-24T10:48:46.873Z",
            "content_html": "<h1 id=\"初始json\"><a class=\"anchor\" href=\"#初始json\">#</a> 初始 JSON</h1>\n<h2 id=\"json是什么\"><a class=\"anchor\" href=\"#json是什么\">#</a> JSON 是什么</h2>\n<p>Ajax 发送和接收数据的一种格式</p>\n<p>JSON 全称是 JavaScript Object Notation</p>\n<h2 id=\"为什么需要json\"><a class=\"anchor\" href=\"#为什么需要json\">#</a> 为什么需要 JSON</h2>\n<p>JSON 有 3 种形式，每种形式的写法都和 JS 中的数据类型很像，可以很轻松的和 JS 中的数据类型互相转换。</p>\n<h2 id=\"json的3中形式\"><a class=\"anchor\" href=\"#json的3中形式\">#</a> JSON 的 3 中形式</h2>\n<h3 id=\"简单值形式\"><a class=\"anchor\" href=\"#简单值形式\">#</a> 简单值形式</h3>\n<p>JSON 的简单值形式就对应着 JS 中的基础数据类型</p>\n<p>数字，字符串，布尔值，null</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"username\"</span></pre></td></tr></table></figure><p>注意事项：</p>\n<ol>\n<li>JSON 中没有 undefined 值</li>\n<li>JSON 中的字符串必须使用双引号</li>\n<li>JSON 中是不能注释的</li>\n</ol>\n<h3 id=\"对象形式\"><a class=\"anchor\" href=\"#对象形式\">#</a> 对象形式</h3>\n<p>JSON 的对象形式就对应着 JS 中的对象</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   \t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t<span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   \t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"20\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意事项：</p>\n<p>JSON 中对象的属性名必须用双引号，属性值如果是字符串也必须用双引号。</p>\n<p>JSON 中只要涉及到字符串，就必须使用双引号。</p>\n<p>不支持 undefined</p>\n<h3 id=\"数组形式\"><a class=\"anchor\" href=\"#数组形式\">#</a> 数组形式</h3>\n<p>JSON 的数组形式就对应着 JS 中的数组</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token string\">\"刘桑\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>注意事项：</p>\n<p>数组中的字符串必须使用双引号</p>\n<p>JSON 中只要涉及到字符串，就必须使用双引号</p>\n<p>不支持 undefined</p>\n<h2 id=\"json的常用方法\"><a class=\"anchor\" href=\"#json的常用方法\">#</a> JSON 的常用方法</h2>\n<h3 id=\"jsonparse\"><a class=\"anchor\" href=\"#jsonparse\">#</a> JSON.parse</h3>\n<p>JSON.parse 可以将 JSON 格式的字符串解析成 JS 中的对应值</p>\n<p>一定要是合法的 JSON 字符串，否则会报错</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"jsonstringify\"><a class=\"anchor\" href=\"#jsonstringify\">#</a> JSON.stringify</h3>\n<p>JSON.stringify 可以将 JS 的基本数据类型，对象或者数组转换成 JSON</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"zuqi\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bingbqiu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">userTo</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span><span class=\"token string\">\"sl\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token literal-property property\">mother</span><span class=\"token operator\">:</span><span class=\"token string\">\"lidama\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"使用jsonparse和jsonstringify封装localstorage\"><a class=\"anchor\" href=\"#使用jsonparse和jsonstringify封装localstorage\">#</a> 使用 JSON.parse 和 JSON.stringify 封装 localStorage</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740061.png\" alt=\"image-20230530164849606\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740654.png\" alt=\"image-20230530164902425\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span>clear<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740615.png\" alt=\"image-20230530165013596\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740239.png\" alt=\"image-20230530165025302\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>set<span class=\"token punctuation\">,</span>get<span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span>clear<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./js/storage.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dkx'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740337.png\" alt=\"image-20230530165051597\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040740675.png\" alt=\"image-20230530165100768\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互",
                "数据格式"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Fetch/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Fetch/",
            "title": "Fetch",
            "date_published": "2024-01-24T10:48:46.869Z",
            "content_html": "<h1 id=\"fetch\"><a class=\"anchor\" href=\"#fetch\">#</a> Fetch</h1>\n<h2 id=\"fetch是什么\"><a class=\"anchor\" href=\"#fetch是什么\">#</a> Fetch 是什么</h2>\n<p>Fetch 也是前后端通信的一种方式。</p>\n<p>Fetch 是 Ajax (XMLHttpRequest) 的一种替代方案，它是基于 Promise 的。</p>\n<p>Ajax 的兼容性比 Fetch 好。</p>\n<p>Fetch 中目前还没有 abort，timeout，这些想要使用还要我们去实现。</p>\n<h2 id=\"fetch的基本用法\"><a class=\"anchor\" href=\"#fetch的基本用法\">#</a> Fetch 的基本用法</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fetch<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：在 js 中是有 fetch 这个东西的</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040734678.png\" alt=\"image-20230531201344579\" /></p>\n<ol>\n<li>\n<pre><code>Response &#123;type: 'cors', url: 'http://127.0.0.1:81/data', redirected: false, status: 200, ok: true, …&#125;\nbody: ReadableStream\nbodyUsed: false\nheaders: Headers &#123;&#125;\nok: true\nredirected: false\nstatus: 200\nstatusText: &quot;&quot;\ntype: &quot;cors&quot;\nurl: &quot;http://127.0.0.1:81/data&quot;\n[[Prototype]]: Response\n</code></pre>\n</li>\n<li>\n<p>body/bodyUsed：只能读一次，读过之后就不让再读了。</p>\n</li>\n<li>\n<p>OK：如果 OK 为 true，表示可以读取数据，不用再去判断 HTTP 状态码了。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：返回了一个 Promise 对象，我们需要将他返回出去才能看到数据</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735239.png\" alt=\"image-20230531202444465\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>报错了，翻译一下：</p>\n<p><img data-src=\"./images/image-20230531202627455.png\" alt=\"image-20230531202627455\" /></p>\n<pre><code>类型错误：无法在“响应”上执行“json”：正文流已读取\n取.html：16：29\n</code></pre>\n<p>原因是读取了两次，上面 body 明确不可以读取两次的只能读取一次</p>\n<p>将返回值上面的 console.log 读取数据的给注释掉</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// console.log(response.json())</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>数据就读取出来了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735394.png\" alt=\"image-20230531202830539\" /></p>\n<p>如果数据不是 JSON 格式的则使用 response.text () 来返回文本格式的数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/data'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// console.log(response.json())</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// return response.json()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735213.png\" alt=\"image-20230531203055670\" /></p>\n<h2 id=\"fetch第二个参数是对象用来配置fetch\"><a class=\"anchor\" href=\"#fetch第二个参数是对象用来配置fetch\">#</a> Fetch 第二个参数是对象，用来配置 Fetch。</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">//boey 发送请求体数据，发送 json 使用 body 直接传会报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 直接传递对应的类型为 x-www-form-urlencoded</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// body:null,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token comment\">//body:'name = 张三 & amp;age=18',</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 不能直接传对象需要自己转</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 跨域资源共享，默认就是 cors</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span><span class=\"token string\">'cors'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token comment\">// 跨域请求是否携带 Cooki, 传入的不再是布尔值</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token literal-property property\">credentials</span><span class=\"token operator\">:</span><span class=\"token string\">'include'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040735416.png\" alt=\"image-20230531205447013\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Axios/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/web/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/Axios/",
            "title": "Axios",
            "date_published": "2024-01-24T10:48:46.865Z",
            "content_html": "<h1 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> Axios</h1>\n<h2 id=\"axios是什么\"><a class=\"anchor\" href=\"#axios是什么\">#</a> Axios 是什么</h2>\n<p>Axios 是一个给予 Peromise 的 HTTP 库，可以用在浏览器和 node.js 中</p>\n<p>第三方 Ajax 库</p>\n<p>Axios 中文官方文档：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20v\">http://www.axios-js.com/</span></p>\n<p>或者电脑安装了 node.js 则可以使用 node.js 来进行下载 axios.js 到本地，这样可以提升访问的速度了。</p>\n<p><strong>步骤</strong>：</p>\n<p>1 执行命令：下载 axios 到本地</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios</pre></td></tr></table></figure><p>执行后下载到的地方一般在用户文件夹中的 node_modules 中</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131717320.png\" alt=\"image-20230813171704981\" /></p>\n<p>2 也可以直接在项目中打开终端执行命令下载可以直接使用。然后将下载的 axios 文件夹 剪切到项目中</p>\n<blockquote>\n<p>注意：不要直接剪切走 node_modules 文件夹，这是在项目中执行命令生成的。</p>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131719218.png\" alt=\"image-20230813171832066\" /></p>\n<p>3 引入 axios 到 html 页面中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span>\"width<span class=\"token operator\">=</span>device<span class=\"token operator\">-</span>width<span class=\"token punctuation\">,</span> initial<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    minimun<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>maximun<span class=\"token operator\">-</span>scale<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>user<span class=\"token operator\">-</span>scalable<span class=\"token operator\">=</span>no\"<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 引入 axios</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javaScript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./node_modules/axios/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印一下 axios 函数 看看是否引入成功了。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>结果</strong>： OK ! 可以使用了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308131721605.png\" alt=\"image-20230813172101445\" /></p>\n<h2 id=\"axios的基本用法\"><a class=\"anchor\" href=\"#axios的基本用法\">#</a> Axios 的基本用法</h2>\n<p>引入 Axios 第三方库</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/axios@1.4.0/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>查看是否引入成功</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732260.png\" alt=\"image-20230531191826664\" /></p>\n<p>使用 Axios 发送请求：</p>\n<p>使用结构：</p>\n<p>url：请求地址</p>\n<p>method：直接使用 axios 需要使用 method 指定请求方式如：post，get</p>\n<p>headers：指定请求头信息</p>\n<p>params：请求头携带的数据</p>\n<p>data：请求体携带的数据</p>\n<p>params 和 data 可以同时设置参数不会报错</p>\n<p>timeout：设置请求超时时间</p>\n<p>withCredentials：跨域请求是否携带 Cookie</p>\n<p>Axios 的超时报错效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732887.png\" alt=\"image-20230531195700272\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 请求时的头信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token literal-property property\">heaers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 'Content-Type':'application/x-www-form-urlencoded'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token comment\">// 通过请求头携带的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token comment\">// 通过请求体携带的数据，传递 JSON 数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token comment\">// 传递 application/x-www-form-urlencoded 数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">//data:'name = 张三李四 & amp;age=18'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token comment\">// 设置超时时间，超出时间后报错</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   <span class=\"token comment\">// 跨域是否携带 Cookie</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732256.png\" alt=\"image-20230531194731633\" /></p>\n<p>使用 Axios 调用 get，post 请求方式：</p>\n<p>可以不用写 headers</p>\n<p><mark>GET</mark></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url1 <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json-get'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token literal-property property\">withCredentials</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308040732190.png\" alt=\"image-20230531195732003\" /></p>\n<p><mark>POST</mark></p>\n<p>还是同样的：'name = 张三 &amp; age=18' 对应数据格式为：application/x-www-form-urlencoded</p>\n<p>而 {name:' 张三 ',age:18} 对应数据格式为：appliction/json，如果后端需要 json 而传递了 x-www-form-urlencoded 则会报错 415</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'http://127.0.0.1:81/json'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'name=张三&amp;age=18'</span><span class=\"token comment\">/*&#123;name:' 张三 ',age:18&#125;*/</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"content-type与data-type的区别\"><a class=\"anchor\" href=\"#content-type与data-type的区别\">#</a> Content-Type 与 data-Type 的区别</h2>\n<p>content-Type：告诉服务器，我要发什么类型的数据。</p>\n<p>data-Type：告诉服务器，我想要什么类型的数据，如果没有指定，那么会自动推断是返回 XML，还是 JSON，还是 script，还是 String。</p>\n<h2 id=\"axios请求拦截器\"><a class=\"anchor\" href=\"#axios请求拦截器\">#</a> axios 请求拦截器</h2>\n<p>axios 请求拦截器：发起请求之前，触发的配置函数，对 &lt;font title=red&gt; 请求参数 &lt;/font &gt; 进行额外配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 做统一设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 统一携带 token 令牌字符串在请求头上 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 逻辑中断判断，如果有 token 则不进行设置，如果没有则进行设置 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   token <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>haeads<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>toke<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当我们在请求个人信息，所有频道，文章列表时都会先经过请求拦截器，然后访问服务器查看 token 是否合法，合法则返回数据到 axios 请求中 得到个人信息，所有频道数据，文章列表数据等。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151310161.png\" alt=\"image-20230813212511388\" /></p>\n<blockquote>\n<p>总结：</p>\n<ol>\n<li>什么是 axios 请求拦截器？\n<ul>\n<li>发起请求之前，调用一个 &lt;font title=red&gt; 函数 &lt;/font&gt;，对 &lt; font title=red &gt; 请求参数 &lt;/font &gt; 进行 &lt; font title=red &gt; 设置 &lt;/font&gt;.</li>\n</ul>\n</li>\n<li>axios 请求拦截器，什么时候使用？\n<ul>\n<li>有 &lt;font title=red&gt; 公共配置 &lt;/font &gt; 和设置时，<mark>统一</mark>设置在请求拦截器中</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308132155054.png\" alt=\"image-20230813215516420\" /></p>\n<h2 id=\"axios与axiosget的区别\"><a class=\"anchor\" href=\"#axios与axiosget的区别\">#</a> axios () 与 axios.get () 的区别</h2>\n<p>&lt;span alt='solid'&gt; 拿一个接口来做对比演示 &lt;/span&gt;：</p>\n<p>后端接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ApiOperation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加角色接口\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//  @RequestBody：不能使用 get 方式提交，传递 JSON 格式数据，把 json 格式数据封装到对象里面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">SysRole</span> sys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> sysRoleService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"一使用axios进行发送请求\"><a class=\"anchor\" href=\"#一使用axios进行发送请求\">#</a> 一，使用 axios () 进行发送请求</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 接口路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 请求方式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 请求参数，传递 JSON 格式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> sys</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061421525.png\" alt=\"image-20230906142119290\" /></p>\n<h5 id=\"二使用axiospost进行发送请求\"><a class=\"anchor\" href=\"#二使用axiospost进行发送请求\">#</a> 二，使用 axios.post () 进行发送请求</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 正确写法可以传递到后端接口值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">roleName</span><span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span>roleName<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">roleCode</span><span class=\"token operator\">:</span> sys<span class=\"token punctuation\">.</span>roleCode <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 错误写法不能传递到后端接口值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\">// request.post(`$&#123;url&#125;/save`, &#123; sys: sys &#125;)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061425789.png\" alt=\"image-20230906142507359\" /></p>\n<p>如果按照错误写法呢？ 结果如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">saveRole</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// roleName: sys.roleName, roleCode: sys.roleCode</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 正确写法可以传递到后端接口值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token comment\">/* request.post(`$&#123;url&#125;/save`, &#123; roleName: sys.roleName, roleCode: sys.roleCode &#125;) */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 错误写法不能传递到后端接口值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   request<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>url<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/save</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">sys</span><span class=\"token operator\">:</span> sys <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：结果就是接收到了两个没有传递过来的值 null 了。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309061426213.png\" alt=\"image-20230906142656845\" /></p>\n",
            "tags": [
                "计算机学科",
                "web",
                "前后端交互"
            ]
        }
    ]
}