{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"计算机底层\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/%E8%BF%9B%E5%88%B6%E6%95%B0/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/%E8%BF%9B%E5%88%B6%E6%95%B0/",
            "title": "进制数",
            "date_published": "2024-04-02T10:00:51.858Z",
            "content_html": "<h1 id=\"进制数\"><a class=\"markdownIt-Anchor\" href=\"#进制数\">#</a> 进制数</h1>\n<h3 id=\"二八十六转十进制️\"><a class=\"markdownIt-Anchor\" href=\"#二八十六转十进制️\">#</a> 二，八，十六转十进制⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>从最低位 (右边) 开始，将每个位上的位提取出来，剩以进制数 (2,8,16) 的 (位数 - 1 次方), 然后求和</p>\n</blockquote>\n<p>例如:</p>\n<pre><code>1.二进制：0b1011\n转十进制公式：[1*2^0]+[1*2^1]+[0*2^2]+[1*2^3]=1+2+0+8=11\n2.八进制：0234\n转十进制公式：[4*8^0]+[3*8^1]+[2*8^2]=4+24+128=156\n3.十六进制：0X23A\n转十进制公式：[10*16^0]+[3*16^1]+[2*16^2]=10+48+512=570\n六进制数：A:10,B:11,C:12,D:13,E:14,F:15。\n</code></pre>\n<h3 id=\"十进制转二八十六️\"><a class=\"markdownIt-Anchor\" href=\"#十进制转二八十六️\">#</a> 十进制转二，八，十六⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>将该数不断除以进制数 (2,8,16), 直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的进制数</p>\n</blockquote>\n<p>或者将进制数 (2,8,16) 剩商 减去 被除数得出准确的余数</p>\n<p>按照反顺序排列</p>\n<p>六进制数：A:10,B:11,C:12,D:13,E:14,F:15。</p>\n<p>例如:</p>\n<p>十进制数: 123 转二进制</p>\n<p>公式:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438124.png\" alt=\"image_2023-04-03-13-32-00\"></p>\n<p>十进制数: 678 转八进制数</p>\n<p>公式:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438397.png\" alt=\"image_2023-04-03-13-32-33\"></p>\n<p>十进制数：8912 转十六进制数</p>\n<p>公式:</p>\n<p><img src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438244.png\" alt=\"image_2023-04-03-13-32-56\"></p>\n<h3 id=\"十进制小数转二进制小数️\"><a class=\"markdownIt-Anchor\" href=\"#十进制小数转二进制小数️\">#</a> 十进制小数转二进制小数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>十进制小数，转换成二进制小数采用 &quot;剩 2 取整&quot; 顺序排列</p>\n</blockquote>\n<p>例如:</p>\n<pre><code>十进制小数0.96875\n  就是将0.96875乘2得出1.9375取1\n  为0.9375乘2得出1.875取1\n  为0.875乘2得出1.75取1\n  为0.75乘2得出1.5取1\n  为0.5乘2得出1\n  余1取1\n 结果为0.111111\n</code></pre>\n<h3 id=\"二进制数转八进制数️\"><a class=\"markdownIt-Anchor\" href=\"#二进制数转八进制数️\">#</a> 二进制数转八进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>从低位开始，将二进制数每三位一组，转成对应的八进制数即可</p>\n</blockquote>\n<p>案例:</p>\n<pre><code>案例：0B11010101\n0B[11][010][101]=0325\n1,2,4。 0不取数所以4+1=5\n0,1,0. 取数2 \n1,1. 取数1+2=3\n规律每三位右开始，以1.2.4.8.16的规律来计算。\n只取1的数不取0的数。\n</code></pre>\n<h3 id=\"二进制数转十六进制数️\"><a class=\"markdownIt-Anchor\" href=\"#二进制数转十六进制数️\">#</a> 二进制数转十六进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>从低位开始，将二进制数每四位一组，转成对应的六进制数即可</p>\n</blockquote>\n<p>案例:</p>\n<pre><code>0B11010101\n0B[1101][0101]=0XD5\n第一组是4+1=5\n第二组是1+4+8=13\n顺序倒过来即可\n六进制数：A:10,B:11,C:12,D:13,E:14,F:15。\n</code></pre>\n<h3 id=\"八进制数转二进制数️\"><a class=\"markdownIt-Anchor\" href=\"#八进制数转二进制数️\">#</a> 八进制数转二进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>将八进制数每 1 位，转成对应的一个 3 位的二进制数即可</p>\n</blockquote>\n<p>案例:</p>\n<pre><code>0237\n0237=0B010011111\n2=010\n3=011\n7=111\n</code></pre>\n<h3 id=\"十六进制数转二进制数️\"><a class=\"markdownIt-Anchor\" href=\"#十六进制数转二进制数️\">#</a> 十六进制数转二进制数⚡️</h3>\n<p>规则:</p>\n<blockquote>\n<p>将十六进制数每 1 位，转成对应的 4 位的一个二进制数即可</p>\n</blockquote>\n<p>数字 1 <code>~</code> 9，字母 A <code>~</code> F</p>\n<p>B 为 11</p>\n<p>案例:</p>\n<pre><code>0X23B\n0X23B=\nB=1011\n3=0011\n2=0010\n在不确定多少个1能满足进制数转换的情况下，可以将4位全部拿1，4个1为15，将15减去进制数B得4那么就将对应位数中的4的那个1去掉就是11。\n六进制数：A:10,B:11,C:12,D:13,E:14,F:15。\n</code></pre>\n",
            "tags": [
                "计算机底层"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/%E5%8E%9F%E7%A0%81,%E5%8F%8D%E7%A0%81,%E8%A1%A5%E7%A0%81/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/04/02/computer-science/%E5%8E%9F%E7%A0%81,%E5%8F%8D%E7%A0%81,%E8%A1%A5%E7%A0%81/",
            "title": "原码，反码，补码",
            "date_published": "2024-04-02T10:00:51.852Z",
            "content_html": "<h1 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h1>\n<ol>\n<li>进制数的最高位是<mark>符号位</mark>，0 表示正数，1 表示负数.(速记口诀，1 转 90° 就是 - 负号)</li>\n<li>正数的原码，反码，补码都一样 (三码合一)</li>\n<li>负数的反码 = 它的原码符号不变，其它位取反 (0-&gt;1 , 1-&gt;0) 零变成 1,1 变成零</li>\n<li>负数的补码 = 它的反码 + 1, 负数的反码 = 它的补码 - 1</li>\n<li>零的反码补码都是零</li>\n<li>Java 没有无符号数，换言之 Java 中的数都是有符号的</li>\n<li>在计算机运算时，都是以补码的方式来运算的</li>\n<li>当我们看到运算结果的时候，要看它的原码</li>\n</ol>\n<h3 id=\"原码反码补码的基础概念和计算方法\"><a class=\"markdownIt-Anchor\" href=\"#原码反码补码的基础概念和计算方法\">#</a> 原码，反码，补码的基础概念和计算方法</h3>\n<blockquote>\n<p>在探求为何机器要使用补码之前，让我们先了解原码，反码和补码的概念，对于一个数，计算机要使用一定的编码方式进行存储，原码，反码，补码是机器存储一个具体数字的编码方式:</p>\n</blockquote>\n<p><strong>1. 原码:</strong></p>\n<p>源码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值，比如如果是 8 位二进制</p>\n<p>[+1] 原码 = 0000 0001</p>\n<p>[-1] 原码 = 1000 0001</p>\n<p>第一位是符号位，因为第一位是符号位，所以 8 位进制数的取值范围就是</p>\n<p>[1111 1111 , 0111 1111]</p>\n<p>即</p>\n<p>[-127 , 127]</p>\n<p>原码是人脑最容易理解和计算的表示方式</p>\n<p><strong>2. 反码</strong></p>\n<p>反码的表示方法是:</p>\n<p>正数的反码是其本身.</p>\n<p>负数的反码是其原码的基础上，符号位不变，其余各个位取反</p>\n<p>[+1] = [00000001] 原 = [00000001] 反</p>\n<p>[-1] = [10000001] 原 = [11111110] 反</p>\n<p>可见如果一个反码表示的是负数，人脑无法直观看出来它的数值，通常要将其转换成原码再计算</p>\n<p><strong>3. 补码</strong></p>\n<p>补码的表示方法是:</p>\n<p>正数的补码就是其本身</p>\n<p>负数的补码是在其原码的基础上，符号位不变，其余各个位取反，最后 + 1 (即在反码的基础上 + 1)</p>\n<p>[+1] = [00000001] 原 = [00000001] 反 = [00000001] 补</p>\n<p>[-1] = [10000001] 原 = [11111110] 反 = [11111111] 补</p>\n<p>对于负数，补码表示方式也是人脑无法直观看出其数值的，通常也需要转换成原码在计算数值</p>\n",
            "tags": [
                "计算机底层"
            ]
        }
    ]
}