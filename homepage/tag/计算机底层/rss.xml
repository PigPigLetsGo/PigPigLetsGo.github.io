<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>homepage • Posts by &#34;计算机底层&#34; tag</title>
        <link>https://pigpigletsgo.github.io/homepage</link>
        <description>欢迎来我的博客空间</description>
        <language>zh-CN</language>
        <pubDate>Wed, 24 Jan 2024 18:48:45 +0800</pubDate>
        <lastBuildDate>Wed, 24 Jan 2024 18:48:45 +0800</lastBuildDate>
        <category>english</category>
        <category>mybatis</category>
        <category>问题总汇</category>
        <category>linux</category>
        <category>报错</category>
        <category>编码问题</category>
        <category>jdk版本问题</category>
        <category>springboot</category>
        <category>读取配置文件</category>
        <category>JdbcTemplate</category>
        <category>Jwt</category>
        <category>MyBatisPlus</category>
        <category>版本问题</category>
        <category>nginx</category>
        <category>java</category>
        <category>vim</category>
        <category>输入法</category>
        <category>Swing</category>
        <category>hexo</category>
        <category>shoka</category>
        <category>math</category>
        <category>算法</category>
        <category>计算机底层</category>
        <category>计算机学科</category>
        <category>C</category>
        <category>介绍</category>
        <category>基础</category>
        <category>mysql</category>
        <category>git</category>
        <category>web</category>
        <category>坑点</category>
        <category>tools</category>
        <category>idea</category>
        <category>项目</category>
        <category>nodeJs</category>
        <category>vscode</category>
        <category>windows</category>
        <category>config配置类</category>
        <category>密码管理</category>
        <category>jvm</category>
        <category>数据结构与算法</category>
        <category>图</category>
        <category>多路查找树</category>
        <category>递归</category>
        <category>链表</category>
        <category>队列</category>
        <category>栈</category>
        <category>数组</category>
        <category>排序</category>
        <category>查找</category>
        <category>哈希表</category>
        <category>树结构</category>
        <category>程序员常用的10中算法</category>
        <category>编程题</category>
        <category>动态规划</category>
        <category>二叉树</category>
        <category>层序遍历</category>
        <category>后序遍历</category>
        <category>广度优先搜索</category>
        <category>还原二叉树</category>
        <category>双指针</category>
        <category>贪心算法</category>
        <category>快慢指针</category>
        <category>分而治之</category>
        <category>对称二叉树</category>
        <category>单调栈</category>
        <category>堆</category>
        <category>小顶堆</category>
        <category>大顶堆</category>
        <category>逆波兰表达式</category>
        <category>maven</category>
        <category>servlet</category>
        <category>spring</category>
        <category>工具类</category>
        <category>开源项目框架</category>
        <category>知识点</category>
        <category>爬虫</category>
        <category>API的区别</category>
        <category>案例Demo</category>
        <category>菜单数据结构</category>
        <category>网络编程</category>
        <category>分页</category>
        <category>lombok</category>
        <category>多线程</category>
        <category>第三方库</category>
        <category>Thymeleaf</category>
        <category>Minio</category>
        <category>hutool</category>
        <category>七牛云</category>
        <category>设计模式</category>
        <category>代码经验</category>
        <category>database</category>
        <category>JDBC</category>
        <category>mongodb</category>
        <category>redis</category>
        <category>集群</category>
        <category>navicat</category>
        <category>vue3</category>
        <category>前后端交互</category>
        <category>websocket</category>
        <category>数据格式</category>
        <category>axios</category>
        <category>avl树</category>
        <category>二叉树搜索树</category>
        <category>二叉树的遍历</category>
        <category>优先级队列</category>
        <category>完全二叉树</category>
        <category>heapify</category>
        <category>堆排序</category>
        <category>动态数组</category>
        <category>红黑树</category>
        <category>阻塞队列</category>
        <category>进阶</category>
        <category>SSM</category>
        <category>springmvc</category>
        <category>springcloud</category>
        <category>源码</category>
        <category>springsecurity</category>
        <category>JWT</category>
        <category>MD5</category>
        <category>thymeleaf</category>
        <category>拦截器</category>
        <category>整合jar包</category>
        <category>Junit</category>
        <category>IO</category>
        <category>String</category>
        <category>http</category>
        <category>lambda</category>
        <category>number</category>
        <category>stream流</category>
        <category>对象</category>
        <category>泛型</category>
        <category>集合</category>
        <category>ORM</category>
        <category>mybatisplus-join</category>
        <category>jquery</category>
        <category>js</category>
        <category>springboot高级</category>
        <category>Knife4j</category>
        <category>JSR303</category>
        <category>devtools</category>
        <category>Elasticsearch</category>
        <category>Nacos</category>
        <category>Docker</category>
        <category>RabbitMQ</category>
        <category>部署</category>
        <category>OpenResty</category>
        <category>Canal</category>
        <category>Seata</category>
        <category>Sentinel</category>
        <category>持久化</category>
        <item>
            <guid isPermalink="true">https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/%E8%BF%9B%E5%88%B6%E6%95%B0/</guid>
            <title>进制数</title>
            <link>https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/%E8%BF%9B%E5%88%B6%E6%95%B0/</link>
            <category>计算机底层</category>
            <pubDate>Wed, 24 Jan 2024 18:48:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;进制数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进制数&#34;&gt;#&lt;/a&gt; 进制数&lt;/h1&gt;
&lt;h3 id=&#34;二八十六转十进制️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二八十六转十进制️&#34;&gt;#&lt;/a&gt; 二，八，十六转十进制⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从最低位 (右边) 开始，将每个位上的位提取出来，剩以进制数 (2,8,16) 的 (位数 - 1 次方), 然后求和&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.二进制：0b1011
转十进制公式：[1*2^0]+[1*2^1]+[0*2^2]+[1*2^3]=1+2+0+8=11
2.八进制：0234
转十进制公式：[4*8^0]+[3*8^1]+[2*8^2]=4+24+128=156
3.十六进制：0X23A
转十进制公式：[10*16^0]+[3*16^1]+[2*16^2]=10+48+512=570
六进制数：A:10,B:11,C:12,D:13,E:14,F:15。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十进制转二八十六️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十进制转二八十六️&#34;&gt;#&lt;/a&gt; 十进制转二，八，十六⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将该数不断除以进制数 (2,8,16), 直到商为 0 为止，然后将每步得到的余数倒过来，就是对应的进制数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者将进制数 (2,8,16) 剩商 减去 被除数得出准确的余数&lt;/p&gt;
&lt;p&gt;按照反顺序排列&lt;/p&gt;
&lt;p&gt;六进制数：A:10,B:11,C:12,D:13,E:14,F:15。&lt;/p&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;p&gt;十进制数: 123 转二进制&lt;/p&gt;
&lt;p&gt;公式:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438124.png&#34; alt=&#34;image_2023-04-03-13-32-00&#34; /&gt;&lt;/p&gt;
&lt;p&gt;十进制数: 678 转八进制数&lt;/p&gt;
&lt;p&gt;公式:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438397.png&#34; alt=&#34;image_2023-04-03-13-32-33&#34; /&gt;&lt;/p&gt;
&lt;p&gt;十进制数：8912 转十六进制数&lt;/p&gt;
&lt;p&gt;公式:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401081438244.png&#34; alt=&#34;image_2023-04-03-13-32-56&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;十进制小数转二进制小数️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十进制小数转二进制小数️&#34;&gt;#&lt;/a&gt; 十进制小数转二进制小数⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;十进制小数，转换成二进制小数采用 &amp;quot;剩 2 取整&amp;quot; 顺序排列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;十进制小数0.96875
  就是将0.96875乘2得出1.9375取1
  为0.9375乘2得出1.875取1
  为0.875乘2得出1.75取1
  为0.75乘2得出1.5取1
  为0.5乘2得出1
  余1取1
 结果为0.111111
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二进制数转八进制数️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二进制数转八进制数️&#34;&gt;#&lt;/a&gt; 二进制数转八进制数⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从低位开始，将二进制数每三位一组，转成对应的八进制数即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;案例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;案例：0B11010101
0B[11][010][101]=0325
1,2,4。 0不取数所以4+1=5
0,1,0. 取数2 
1,1. 取数1+2=3
规律每三位右开始，以1.2.4.8.16的规律来计算。
只取1的数不取0的数。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二进制数转十六进制数️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二进制数转十六进制数️&#34;&gt;#&lt;/a&gt; 二进制数转十六进制数⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从低位开始，将二进制数每四位一组，转成对应的六进制数即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;案例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0B11010101
0B[1101][0101]=0XD5
第一组是4+1=5
第二组是1+4+8=13
顺序倒过来即可
六进制数：A:10,B:11,C:12,D:13,E:14,F:15。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八进制数转二进制数️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八进制数转二进制数️&#34;&gt;#&lt;/a&gt; 八进制数转二进制数⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将八进制数每 1 位，转成对应的一个 3 位的二进制数即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;案例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0237
0237=0B010011111
2=010
3=011
7=111
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十六进制数转二进制数️&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十六进制数转二进制数️&#34;&gt;#&lt;/a&gt; 十六进制数转二进制数⚡️&lt;/h3&gt;
&lt;p&gt;规则:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将十六进制数每 1 位，转成对应的 4 位的一个二进制数即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字 1 &lt;code&gt;~&lt;/code&gt; 9，字母 A &lt;code&gt;~&lt;/code&gt; F&lt;/p&gt;
&lt;p&gt;B 为 11&lt;/p&gt;
&lt;p&gt;案例:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0X23B
0X23B=
B=1011
3=0011
2=0010
在不确定多少个1能满足进制数转换的情况下，可以将4位全部拿1，4个1为15，将15减去进制数B得4那么就将对应位数中的4的那个1去掉就是11。
六进制数：A:10,B:11,C:12,D:13,E:14,F:15。
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/%E5%8E%9F%E7%A0%81,%E5%8F%8D%E7%A0%81,%E8%A1%A5%E7%A0%81/</guid>
            <title>原码，反码，补码</title>
            <link>https://pigpigletsgo.github.io/homepage/2024/01/24/computer-science/%E5%8E%9F%E7%A0%81,%E5%8F%8D%E7%A0%81,%E8%A1%A5%E7%A0%81/</link>
            <category>计算机底层</category>
            <pubDate>Wed, 24 Jan 2024 18:48:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;进制数的最高位是&lt;mark&gt;符号位&lt;/mark&gt;，0 表示正数，1 表示负数.(速记口诀，1 转 90° 就是 - 负号)&lt;/li&gt;
&lt;li&gt;正数的原码，反码，补码都一样 (三码合一)&lt;/li&gt;
&lt;li&gt;负数的反码 = 它的原码符号不变，其它位取反 (0-&amp;gt;1 , 1-&amp;gt;0) 零变成 1,1 变成零&lt;/li&gt;
&lt;li&gt;负数的补码 = 它的反码 + 1, 负数的反码 = 它的补码 - 1&lt;/li&gt;
&lt;li&gt;零的反码补码都是零&lt;/li&gt;
&lt;li&gt;Java 没有无符号数，换言之 Java 中的数都是有符号的&lt;/li&gt;
&lt;li&gt;在计算机运算时，都是以补码的方式来运算的&lt;/li&gt;
&lt;li&gt;当我们看到运算结果的时候，要看它的原码&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;原码反码补码的基础概念和计算方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原码反码补码的基础概念和计算方法&#34;&gt;#&lt;/a&gt; 原码，反码，补码的基础概念和计算方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在探求为何机器要使用补码之前，让我们先了解原码，反码和补码的概念，对于一个数，计算机要使用一定的编码方式进行存储，原码，反码，补码是机器存储一个具体数字的编码方式:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 原码:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;源码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值，比如如果是 8 位二进制&lt;/p&gt;
&lt;p&gt;[+1] 原码 = 0000 0001&lt;/p&gt;
&lt;p&gt;[-1] 原码 = 1000 0001&lt;/p&gt;
&lt;p&gt;第一位是符号位，因为第一位是符号位，所以 8 位进制数的取值范围就是&lt;/p&gt;
&lt;p&gt;[1111 1111 , 0111 1111]&lt;/p&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;p&gt;[-127 , 127]&lt;/p&gt;
&lt;p&gt;原码是人脑最容易理解和计算的表示方式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 反码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反码的表示方法是:&lt;/p&gt;
&lt;p&gt;正数的反码是其本身.&lt;/p&gt;
&lt;p&gt;负数的反码是其原码的基础上，符号位不变，其余各个位取反&lt;/p&gt;
&lt;p&gt;[+1] = [00000001] 原 = [00000001] 反&lt;/p&gt;
&lt;p&gt;[-1] = [10000001] 原 = [11111110] 反&lt;/p&gt;
&lt;p&gt;可见如果一个反码表示的是负数，人脑无法直观看出来它的数值，通常要将其转换成原码再计算&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 补码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;补码的表示方法是:&lt;/p&gt;
&lt;p&gt;正数的补码就是其本身&lt;/p&gt;
&lt;p&gt;负数的补码是在其原码的基础上，符号位不变，其余各个位取反，最后 + 1 (即在反码的基础上 + 1)&lt;/p&gt;
&lt;p&gt;[+1] = [00000001] 原 = [00000001] 反 = [00000001] 补&lt;/p&gt;
&lt;p&gt;[-1] = [10000001] 原 = [11111110] 反 = [11111111] 补&lt;/p&gt;
&lt;p&gt;对于负数，补码表示方式也是人脑无法直观看出其数值的，通常也需要转换成原码在计算数值&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
