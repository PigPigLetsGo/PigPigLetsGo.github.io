{
    "version": "https://jsonfeed.org/version/1",
    "title": "homepage • All posts by \"tools\" tag",
    "description": "欢迎来我的博客空间",
    "home_page_url": "https://pigpigletsgo.github.io/homepage",
    "items": [
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/03/28/tools/idea/JRebel%E7%A0%B4%E8%A7%A3/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/03/28/tools/idea/JRebel%E7%A0%B4%E8%A7%A3/",
            "title": "JRebel破解以及问题解决",
            "date_published": "2024-03-28T01:22:11.492Z",
            "content_html": "<h2 id=\"破解\"><a class=\"anchor\" href=\"#破解\">#</a> 破解</h2>\n<h1 id=\"jrebel-license-server-兼容-202340\"><a class=\"anchor\" href=\"#jrebel-license-server-兼容-202340\">#</a> Jrebel License Server! (兼容 2023.4.0 +)</h1>\n<p>JRebel 激活地址: <span class=\"exturl\" data-url=\"aHR0cDovLzQyLjE5My4xOC4xNjg6ODA4OC9kMGNkZWRkZS0wOWVkLTQ0ZTctYjI5MS1iNTBkODFhYjQ2YzA=\">http://42.193.18.168:8088/d0cdedde-09ed-44e7-b291-b50d81ab46c0</span></p>\n<p>JRebel 激活邮箱: <span class=\"exturl\" data-url=\"bWFpbHRvOjI5NTQyOTQwNEBxcS5jb20=\">295429404@qq.com</span></p>\n<h2 id=\"jrebel-无限试用请将以下内容拷贝到命令提示符中执行\"><a class=\"anchor\" href=\"#jrebel-无限试用请将以下内容拷贝到命令提示符中执行\">#</a> JRebel 无限试用，请将以下内容拷贝到命令提示符中执行:</h2>\n<pre><code class=\"language-bat\">curl https://register.jpy.wang/ReRegister/src/main/java/jrebel/JrebelMain.java -o tmp.java &amp;&amp; java tmp.java &amp;&amp; del tmp.java\n</code></pre>\n<p>执行后会弹出一个提示框，点击中间的按钮后过一会儿它就会生成 一个加密字符串并存储到 idea 缓存中。这样就可以了</p>\n<h2 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h2>\n<h3 id=\"无法启动项目或模块\"><a class=\"anchor\" href=\"#无法启动项目或模块\">#</a> 无法启动项目或模块</h3>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/516ef17db5574de0a061c87b047a536b.png\" alt=\"img\" /></p>\n",
            "tags": [
                "java",
                "tools",
                "idea"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/03/18/tools/vscode/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/03/18/tools/vscode/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/",
            "title": "vscode插件推荐",
            "date_published": "2024-03-18T00:51:26.328Z",
            "content_html": "<h1 id=\"vscode插件推荐\"><a class=\"anchor\" href=\"#vscode插件推荐\">#</a> vscode 插件推荐</h1>\n<ol>\n<li>Easy LESS</li>\n<li>ESLint</li>\n<li>HTML CSS Support</li>\n<li>HTML Snippets</li>\n<li>JavaScript (ES6) code snippets</li>\n<li>Live Server</li>\n<li>open in browser</li>\n<li>vetur</li>\n<li>Vue-official</li>\n<li>Auto Close Tag</li>\n<li>Auto Complete Tag</li>\n<li>Auto Rename Tag</li>\n</ol>\n",
            "tags": [
                "tools",
                "vscode"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/03/08/tools/idea/Idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/03/08/tools/idea/Idea%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/",
            "title": "Idea插件推荐",
            "date_published": "2024-03-08T14:59:23.612Z",
            "content_html": "<h1 id=\"idea插件推荐\"><a class=\"anchor\" href=\"#idea插件推荐\">#</a> Idea 插件推荐</h1>\n<ol>\n<li>AceJump</li>\n<li>Atom Material Icons</li>\n<li>Free MyBatis Tool</li>\n<li>Grep Console</li>\n<li>Idea Vim</li>\n<li>IdeaVim-EsayMotion</li>\n<li>IdeaVimExtension</li>\n<li>Maven Helper</li>\n<li>PMD</li>\n<li>RestfulTool</li>\n<li>PlantUML Integration</li>\n<li>Rainbow Brackets</li>\n<li>JRebel and XRebel</li>\n<li>EditStarters</li>\n</ol>\n",
            "tags": [
                "java",
                "tools",
                "idea"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/03/03/tools/%E5%89%8D%E7%AB%AF/alova/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/03/03/tools/%E5%89%8D%E7%AB%AF/alova/",
            "title": "alova",
            "date_published": "2024-03-03T09:03:35.032Z",
            "content_html": "<h1 id=\"alova\"><a class=\"anchor\" href=\"#alova\">#</a> alova</h1>\n<h2 id=\"改变axios的用法后我的工作效率提升了3倍\"><a class=\"anchor\" href=\"#改变axios的用法后我的工作效率提升了3倍\">#</a> 改变 axios 的用法后，我的工作效率提升了 3 倍</h2>\n<p>实际场景下的请求问题</p>\n<p>作为前端开发，网络请求肯定是我们经常要面对的事情，在前端请求中，axios 和 fetch API 应该是我们最常用的请求工具了，它们在发送请求和接收响应数据已经做到了足够简单。</p>\n<p>但在实际项目中，为了达到更好的用户体验，我们还需要考虑下面这几个因素：</p>\n<ol>\n<li>展示加载中的请求状态</li>\n<li>展示请求错误状态</li>\n<li>展示上传 / 下载文件的进度信息</li>\n</ol>\n<p>上面这些都需要我们编写额外的代码，增加了不少的工作量，你的请求代码可能是下面这样的，我们以 vue3 代码为示例。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> loading <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">request</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    loading<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    data<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    error<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  loading<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果面对大量的 api，这工作量可想而知，想到这时就有点头疼啊。有没有一种方法可以自动帮我处理这些逻辑，让请求代码看起来更简洁呢？</p>\n<p>解决</p>\n<p>我们可以用封装的思路，把上面这些都封装为一个简单的 use hook，就可以很好地解决了，封装后的代码大概是下面这样的。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> loading <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">request</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      loading<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      data<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      error<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    loading<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    loading<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    error</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是一个最简单的 use hook 实现，它帮我们解决了请求模板代码的问题。当然你还可以使用 use hook 封装更多更高级的请求功能，而这些功能现在不必你自己封装了，使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGYWxvdmEuanMub3Jn\"> alova</span> 就可以了。</p>\n<p><strong>alova 是一个轻量级的请求策略库，针对分页请求、表单提交、上传和下载文件等不同请求场景使用对应的请求模块，让开发者使用非常少量的代码就可以实现高可用性和高流畅性的请求功能，这意味着，你再也不需要自己绞尽脑汁编写请求优化代码，再也不需要自己维护请求数据和相关状态，你只需要选择并使用请求模块，设置参数后，alova 帮你搞定！</strong></p>\n<p>在引入 alova 后，我的工作效率直接提高了 3 倍，强烈推荐给大家。</p>\n<p>你可以将 alova 理解成是 axios 或 fetch-api 等请求工具的一种武器装备，将 alova 与请求工具配合使用将会让它们变得更加强大。</p>\n<blockquote>\n<p>其实，alova 底层依然依赖 axios 或 fetch-api 等请求函数进行请求，因此你仍然可以使用你喜欢的请求库。</p>\n</blockquote>\n<p>以下是一个基于 <code>vue3+axios+alova</code>  的使用示例，alova 将自动为你创建请求相关的，可以直接用于视图的响应式状态，创建一个 vue3 的项目架子，然后运行：</p>\n<p><code>npm i</code>  初始化项目</p>\n<p><code>npm i alova --save-dev</code>  下载 alova</p>\n<p><code>npm i @alova/adapter-axios --save-dev</code>  下载 alova 配合 axios 使用的依赖</p>\n<p>代码如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"loading\"</span><span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span><span class=\"token keyword\">else</span><span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span>span v<span class=\"token operator\">-</span><span class=\"token keyword\">else</span><span class=\"token operator\">></span>responseData<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createAlova<span class=\"token punctuation\">,</span> useRequest <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'alova'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> VueHook <span class=\"token keyword\">from</span> <span class=\"token string\">'alova/vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> axiosRequestAdapter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@alova/adapter-axios'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> alovaInstance <span class=\"token operator\">=</span> <span class=\"token function\">createAlova</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token literal-property property\">statesHook</span><span class=\"token operator\">:</span> VueHook<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 设置使用 axios 作为请求工具</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">requestAdapter</span><span class=\"token operator\">:</span> <span class=\"token function\">axiosRequestAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 加载状态</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  loading<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 响应数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 错误信息，请求错误时才有值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  error</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRequest</span><span class=\"token punctuation\">(</span>alovaInstance<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todoList'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>是不是非常 nice！！！之前需要我们自己实现的各种功能，alova 都帮我们做了。</p>\n<p>alova 的 github 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmFsb3ZhanMlMkZhbG92YQ==\">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Falovajs%2Falova</span></p>\n<p>alova 的官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGYWxvdmEuanMub3JnJTJG\">https://link.juejin.cn/?target=https%3A%2F%2Falova.js.org%2F</span></p>\n<p><strong>总结</strong>：</p>\n<blockquote>\n<p>alova 目前提供了 8 种请求策略，如果你希望在不同的请求场景下方便地实现特定的请求需求，那千万别错过它哦。alova 还提供了缓存管理、请求共享等更多功能，可以覆盖绝大多数请求场景。</p>\n<p>所以，在你的下一个项目中，你也可以来试试 alova，一定能给你带来更愉快的开发体验！</p>\n</blockquote>\n",
            "tags": [
                "web",
                "tools"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/02/12/tools/%E5%89%8D%E7%AB%AF/json-server/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/02/12/tools/%E5%89%8D%E7%AB%AF/json-server/",
            "title": "JSON-SERVER",
            "date_published": "2024-02-12T11:08:25.818Z",
            "content_html": "<h1 id=\"json-server\"><a class=\"anchor\" href=\"#json-server\">#</a> JSON-SERVER</h1>\n<blockquote>\n<p>在 30 秒内获得零编码的完整 RESUTFULL API (认真的)</p>\n</blockquote>\n<p>使用 ❤️ 为需要快速后端进行原型设计和模拟的前端开发人员创建。</p>\n<p>目标：基于 json-server 工具，准备后端接口服务环境</p>\n<ol>\n<li>\n<p>安装全局工具 json-server (全局工具仅需要安装一次)</p>\n<p><code>yarn global add json-server 或 npm i json-server -g</code></p>\n</li>\n<li>\n<p>代码根目录创建一个 db 目录 ，用于模拟数据库 存放一些数据 然后编写 vue 代码的时候直接使用接口方便编写功能</p>\n</li>\n<li>\n<p>将资料 index.json 移入 db 目录</p>\n</li>\n<li>\n<p>进入 db 目录，执行命令，启动后端接口服务</p>\n<p><code>json-server --watch index.json</code></p>\n</li>\n<li>\n<p>访问接口测试：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAwL2NhcnQ=\">http://localhost:3000/cart</span></p>\n</li>\n</ol>\n<p>index.json</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"cart\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100001</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"低帮城市休闲户外鞋天然牛皮COOLMAX纤维\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"thumb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://yanxuan-item.nosdn.127.net/3a56a913e687dc2279473e325ea770a9.jpg\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100002</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"网易味央黑猪猪肘330g*1袋\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">39</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token property\">\"thumb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://yanxuan-item.nosdn.127.net/d0a56474a8443cf6abd5afc539aa2476.jpg\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100003</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"KENROLL男女简洁多彩一片式室外拖\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token property\">\"thumb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://yanxuan-item.nosdn.127.net/eb1556fcc59e2fd98d9b0bc201dd4409.jpg\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">100004</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"云音乐定制IN系列intar民谣木吉他\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">589</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token property\">\"thumb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://yanxuan-item.nosdn.127.net/4d825431a3587edb63cb165166f8fc76.jpg\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token property\">\"firend\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"刘桑\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>提供了数据它就能基于数据生成增删改查的接口，而提供这个接口也只需要一个命令就可以了。</p>\n<p>在 db 目录打开 powerShell 窗口 出现一下的场面就说明启动成了。两个地址可以进行访问</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308272113461.png\" alt=\"image-20230827211353269\" /></p>\n",
            "tags": [
                "web",
                "tools"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/%E5%AF%86%E7%A0%81%E5%AD%98%E5%82%A8%E5%BA%93%E4%BD%BF%E7%94%A8KeePass/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/%E5%AF%86%E7%A0%81%E5%AD%98%E5%82%A8%E5%BA%93%E4%BD%BF%E7%94%A8KeePass/",
            "title": "KeePass的使用",
            "date_published": "2024-01-24T10:48:47.017Z",
            "content_html": "<p>官网下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rZWVwYXNzLmluZm8v\">https://keepass.info/</span></p>\n<h2 id=\"自动输入\"><a class=\"anchor\" href=\"#自动输入\">#</a> 自动输入</h2>\n<p>右键数据库点击编辑，然后选择自动输入并输入以下的表达式：</p>\n<p><code>+&#123;DELAY 100&#125;&#123;CLEARFIELD&#125;&#123;USERNAME&#125;&#123;TAB&#125;&#123;PASSWORD&#125;&#123;ENTER&#125;</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211713827.png\" alt=\"image-20231121171345488\" /></p>\n<p>点击一个存储的账号密码的表然后在里面输入这个号要登录的对应的网址</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211714992.png\" alt=\"image-20231121171446704\" /></p>\n<p>然后在点击自动输入选择我们自定义的表达式然后下面点击添加，添加对应的浏览器打开的对应网址</p>\n<p>&lt;font color='red'&gt; 注意 &lt;/font&gt;.：添加只能是这个浏览器才生效其它浏览器开启对应网址不生效</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211716403.png\" alt=\"image-20231121171605580\" /></p>\n<p>然后点击输入框，按 <code>ctrl + alt + a</code>  就可以实现自动输入并登录了下面进行演示。</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202311211717549.gif\" alt=\"test\" /></p>\n<p>如果要只输入密码快捷键为： <code>shift + ctrl + alt + a</code></p>\n<p>演示如下：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401201056984.gif\" alt=\"recording\" /></p>\n",
            "tags": [
                "tools",
                "密码管理"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/%E5%89%8D%E7%AB%AF/form-serialize%E6%8F%92%E4%BB%B6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/%E5%89%8D%E7%AB%AF/form-serialize%E6%8F%92%E4%BB%B6/",
            "title": "form-serialize插件，快速收集表单元素的值",
            "date_published": "2024-01-24T10:48:47.007Z",
            "content_html": "<h2 id=\"form-serialize插件\"><a class=\"anchor\" href=\"#form-serialize插件\">#</a> form-serialize 插件</h2>\n<p><strong>作用</strong>：<mark>快速</mark>收集表单元素的值</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130850440.png\" alt=\"image-20230813085042213\" /></p>\n<p>这么多的用户填写的表单信息我们如果一个一个获取的话会很麻烦，可以使用 form-serialize 插件来完成。</p>\n<h5 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法：</h5>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取表单对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> ducment<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.example-form'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//serialize 函数 参数 1：指定获取哪个表单范围内的值传入表单对象，参数 2：传入配置对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308130853093.png\" alt=\"image-20230813085338699\" /></p>\n<p>无论有多少个表单元素都可以快速的一步到位的全部收集出来。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token string\">\"javaScript:;\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"form-data\"</span> method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"提交\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javaScript\"</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"./js/form-serialize.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 使用 form-serialize 函数，快速收集表单元素值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 参数 1：要获取哪个表单的数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">//      表单元素设置 name 属性，值会作为对象的属性名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">//      建议 name 属性的值，最好和接口文档参数名一致，否则后端接收不不到数据就会报错</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 参数 2：配置对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//      hash: 设置获取数据结构</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//           -  true ：JSON 格式的 JS 对象数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//           -  false：查询字符串 url ？后面的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">//      empty: 设置是否获取空值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.form-data'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>效果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308150957805.gif\" alt=\"test\" /></p>\n<h3 id=\"hash参数的true跟false的区别\"><a class=\"anchor\" href=\"#hash参数的true跟false的区别\">#</a> hash：参数的 true 跟 false 的区别</h3>\n<ul>\n<li>true ：JSON 格式的 JS 对象数据</li>\n<li>false：查询字符串 url ？后面的</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151003940.png\" alt=\"image-20230815100345134\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">empty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>结果</strong>：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308151004712.png\" alt=\"image-20230815100416896\" /></p>\n",
            "tags": [
                "web",
                "tools"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/windows/%E5%AE%89%E8%A3%85scoop/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/windows/%E5%AE%89%E8%A3%85scoop/",
            "title": "安装和使用scoop",
            "date_published": "2024-01-24T10:48:46.996Z",
            "content_html": "<h2 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h2>\n<ul>\n<li>寻找软件： <code>scoop search 软件名</code></li>\n<li>安装软件： <code>scoop install 软件名</code></li>\n<li>删除软件： <code>scoop uninstall 软件名</code></li>\n<li>查看已安装的软件：  <code>sccop list</code></li>\n<li>清理缓存： <code>scoop cache rm 软件名</code>  或者  <code>scoop cache rm *</code></li>\n<li>查看可添加仓库： <code>scoop bucket known</code></li>\n<li>添加额外仓库： <code>scoop bucket add 仓库名</code></li>\n</ul>\n<p>1 打开 PowerShell 输入，执行策略更改为 RemoteSigned</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set-executionpolicy RemoteSigned</pre></td></tr></table></figure><p>2 输入命令进行安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>iex <span class=\"token string\">\"&amp; &#123;<span class=\"token variable\"><span class=\"token variable\">$(</span>irm get.scoop.sh<span class=\"token variable\">)</span></span>&#125; -RunAsAdmin\"</span></pre></td></tr></table></figure><h3 id=\"中国用户专享\"><a class=\"anchor\" href=\"#中国用户专享\">#</a> 中国用户专享</h3>\n<p>如果访问 Github 有问题，下载资源失败可以尝试一下方式：</p>\n<ol>\n<li>设置 Scoop 代理。在命令行中输入 (PowerShell 或 CMD 中都行)，： <code>scoop config proxy 127.0.0.1:7890</code>  让 scoop 网络连接走代理，后面的 ip 地址和端口号根据自己的代理设置。</li>\n</ol>\n<h3 id=\"更改scoop的默认安装路径\"><a class=\"anchor\" href=\"#更改scoop的默认安装路径\">#</a> 更改 scoop 的默认安装路径</h3>\n<p>在终端输入：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>environment<span class=\"token punctuation\">]</span>::setEnvironmentVariable<span class=\"token punctuation\">(</span><span class=\"token string\">'SCOOP_GLOBAL'</span>,<span class=\"token string\">'F:\\GlobalScoopApps'</span>,<span class=\"token string\">'Machine'</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$env</span>:SCOOP_GLOBAL<span class=\"token operator\">=</span><span class=\"token string\">'F:\\GlobalScoopApps'</span></pre></td></tr></table></figure><ul>\n<li>路径自己创建存放的文件夹自己改路径</li>\n<li>当使用 scoop 命令进行安装时，注意加 -g ， scoop install &lt;app&gt; -g</li>\n</ul>\n<h2 id=\"建议安装程序aria2\"><a class=\"anchor\" href=\"#建议安装程序aria2\">#</a> 建议安装程序 aria2</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Installed apps:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Name           Version  Source Updated             Info</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>----           -------  ------ -------             ----</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>7zip           <span class=\"token number\">23.01</span>    main   <span class=\"token number\">2023</span>-07-14 00:16:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">git</span>            <span class=\"token number\">2.41</span>.0.2 main   <span class=\"token number\">2023</span>-07-14 00:16:42</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>neofetch       <span class=\"token number\">7.1</span>.0    main   <span class=\"token number\">2023</span>-07-14 00:17:26</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">vim</span>            <span class=\"token number\">9.0</span>      main   <span class=\"token number\">2023</span>-07-14 00:24:45</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>aria2          <span class=\"token number\">1.36</span>.0-1 main   <span class=\"token number\">2023</span>-08-26 <span class=\"token number\">11</span>:06:50 Global <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>quicklook      <span class=\"token number\">3.7</span>.3    extras <span class=\"token number\">2023</span>-08-26 <span class=\"token number\">13</span>:38:35 Global <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>youtube-dl-gui <span class=\"token number\">1.8</span>.5    extras <span class=\"token number\">2023</span>-08-26 <span class=\"token number\">11</span>:52:11 Global <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop <span class=\"token function\">install</span> aria2</pre></td></tr></table></figure><h2 id=\"使用bucket让windows软件包管理器变得更加强大\"><a class=\"anchor\" href=\"#使用bucket让windows软件包管理器变得更加强大\">#</a> 使用 bucket 让 windows 软件包管理器变得更加强大</h2>\n<h4 id=\"什么是bucket\"><a class=\"anchor\" href=\"#什么是bucket\">#</a> 什么是 bucket?</h4>\n<p>在 Scoop 里面，bucket 就是一个软件仓库。Scoop 将一个个仓库缓存至本地，当我们想要安装一个软件的时候，Scoop 就从本地的仓库中挑选出我们想要安装的软件的安装配置文件，并依照这个配置文件进行软件的安装工作，包括：</p>\n<ul>\n<li>从哪里下载软件</li>\n<li>如何安装软件、安装到哪里、需要修改更新什么环境变量</li>\n<li>安装之前、之后都要做什么准备（善后）工作</li>\n<li>……</li>\n</ul>\n<h4 id=\"添加一个bucket\"><a class=\"anchor\" href=\"#添加一个bucket\">#</a> 添加一个 bucket</h4>\n<p>首先，Scoop 给我们提供了很多可以直接使用的 bucket，就是为了方便我们安装更为常见的带有 GUI 的软件。一个最为常见，也是我推荐大家添加的 bucket 是  <code>extras</code> ，这里面基本涵盖了大部分不符合 main bucket 收录条件的常用软件，包括我们熟悉的：各个版本的 Firefox、福昕阅读器、Geek Uninstaller、Inkscape、Snipaste 等等。（甚至有 Steam，但是不推荐用这样的方式安装。）</p>\n<p>我们可以通过下面这个命令来添加  <code>extras</code>  这个 bucket：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket <span class=\"token function\">add</span> extras</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261124794.png\" alt=\"image-20230826112430785\" /></p>\n<p>之后，我们就可以下载更多更多常见的软件了。比方说，我们要下载 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC80MDU1Ng==\">ScreenToGif</span> 这个极为好用的 Gif 屏幕录制软件：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop <span class=\"token function\">install</span> screentogif</pre></td></tr></table></figure><h3 id=\"官方维护的-bucket\"><a class=\"anchor\" href=\"#官方维护的-bucket\">#</a> 官方维护的 bucket</h3>\n<p><code>extras</code>  这个 bucket 是最有用，也是我们大部分人肯定会用到的仓库。除此之外，我们可以通过这个命令查看 Scoop 还能直接识别哪些 bucket：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket known</pre></td></tr></table></figure><p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261126217.png\" alt=\"image-20230826112605419\" /></p>\n<p>下面列出的这几个仓库就是 Scoop 可以直接识别并添加的 bucket，即我们可以通过下面这个命令直接添加相应的 bucket：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>仓库名<span class=\"token operator\">></span></pre></td></tr></table></figure><p>比如：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop bucket known</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>extras</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>versions</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nirsoft</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sysinternals</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>php</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nerd-fonts</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>nonportable</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">java</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>games</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop bucket <span class=\"token function\">add</span> mages</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Unknown bucket <span class=\"token string\">'mages'</span><span class=\"token builtin class-name\">.</span> Try specifying <span class=\"token operator\">&lt;</span>repo<span class=\"token operator\">></span>.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>usage: scoop bucket <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>repo<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span> scoop bucket <span class=\"token function\">add</span> games</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Checking repo<span class=\"token punctuation\">..</span>. OK</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>The games bucket was added successfully.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>PS C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Administrator<span class=\"token operator\">></span></pre></td></tr></table></figure><p>这里面，我来介绍一下和开发环境的安装没有太大关系的几个仓库：</p>\n<ul>\n<li>\n<p><code>extras</code> ：就是我刚刚介绍的，Scoop 官方维护的一个仓库，涵盖了大部分因为种种原因不能被收录进主仓库的常用软件。地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGbHVrZXNhbXBzb24lMkZzY29vcC1leHRyYXMlMkZ0cmVlJTJGbWFzdGVyJTJGYnVja2V0\">lukesampson/scoop-extras</span></p>\n</li>\n<li>\n<p><code>nirsoft</code> ：是一个 NirSoft 开发的小工具的安装合集。NirSoft 制作了大量的（dozens and dozens）小工具，包括系统工具、网络工具、密码恢复等等，孜孜不倦、持续更新。</p>\n</li>\n<li>\n<ul>\n<li>Bucket 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGa29keWJyb3duJTJGc2Nvb3Atbmlyc29mdA==\">kodybrown/scoop-nirsoft</span></li>\n<li>NirSoft 官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cCUzQSUyRiUyRnd3dy5uaXJzb2Z0Lm5ldCUyRg==\">NirSoft</span></li>\n</ul>\n</li>\n<li>\n<p><code>games</code> ：顾名思义，是游戏（和与游戏相关的工具）合集。包含了大量免费 / 开源的小游戏，地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vbGluaz90YXJnZXQ9aHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGQ2FsaW5vdSUyRnNjb29wLWdhbWVz\">Calinou/scoop-games</span></p>\n</li>\n</ul>\n<p>剩下的几个 bucket 都是和开发环境相关的，比如  <code>java</code>  这个 bucket 就是为了安装 JDK 用的 bucket，这些我在这里就不过多赘述了。</p>\n<h2 id=\"备份与恢复配置文件\"><a class=\"anchor\" href=\"#备份与恢复配置文件\">#</a> 备份与恢复配置文件</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#[备份] 导出 scoop 的 bucket，已安装 apps 和 自定义配置信息到文件 scoopfile.json 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>scoop <span class=\"token builtin class-name\">export</span> <span class=\"token operator\">></span> scoopfile.json</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#[恢复] 从 scoopfile.json 文件中恢复信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>scoop <span class=\"token function\">import</span> scoopfile.json</pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "windows"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/windows/scoop%E5%AE%89%E8%A3%85mysql/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/windows/scoop%E5%AE%89%E8%A3%85mysql/",
            "title": "Scoop安装mysql",
            "date_published": "2024-01-24T10:48:46.993Z",
            "content_html": "<h2 id=\"scoop安装mysql\"><a class=\"anchor\" href=\"#scoop安装mysql\">#</a> Scoop 安装 mysql</h2>\n<ol>\n<li>\n<p>添加仓库： <code>main</code></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop bucket <span class=\"token function\">add</span> main</pre></td></tr></table></figure></li>\n<li>\n<p>执行命令安装 mysql</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>scoop <span class=\"token function\">install</span> mysql</pre></td></tr></table></figure></li>\n<li>\n<p>启动 mysql 数据库</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token parameter variable\">--console</span></pre></td></tr></table></figure><ol>\n<li>\n<p>这里启动的方式分为两种</p>\n<ol>\n<li>后台启动 <code>--standalone</code></li>\n<li>终端启动  <code>--console</code></li>\n</ol>\n</li>\n<li>\n<p>如果报错则执行下面代码：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqld <span class=\"token parameter variable\">--initialze</span> <span class=\"token parameter variable\">--user</span><span class=\"token operator\">=</span>mysql <span class=\"token parameter variable\">--console</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>执行命令： <code>mysqld -install</code>  安装服务</p>\n<ol>\n<li>\n<p>如果出现下面的情况</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040935540.png\" alt=\"image-20230904093551765\" /></p>\n</li>\n<li>\n<p>则执行命令： <code>sc delete mysql</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040936057.png\" alt=\"image-20230904093618438\" /></p>\n</li>\n<li>\n<p>再次执行： <code>mysqld -install</code></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040936016.png\" alt=\"image-20230904093638396\" /></p>\n</li>\n</ol>\n</li>\n<li>\n<p>最后启动服务： <code>net start mysql</code>  启动！</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202309040937628.png\" alt=\"image-20230904093707195\" /></p>\n</li>\n</ol>\n<p>最后一步可能会想，为什么不直接去任务管理器里面的服务去启动服务呢？因为这里有可能在任务管理器中启动不了，但是终端可以。</p>\n<p>启动后你想执行一下 sql 命令比如： <code>show databses;</code></p>\n<p>却报错了，不要慌它提示的是需要重置密码。</p>\n<p>重置密码执行命令： <code>ALTER USER 'root'@'localhost' IDENTIFIED BY 'new_password';</code>  然后你就可以正常的使用了。</p>\n",
            "tags": [
                "mysql",
                "tools",
                "windows"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/windows/PowerShell%E9%85%8D%E7%BD%AEohmyzsh/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/windows/PowerShell%E9%85%8D%E7%BD%AEohmyzsh/",
            "title": "PowerShell配置ohmyzsh",
            "date_published": "2024-01-24T10:48:46.989Z",
            "content_html": "<p>第一步</p>\n<p>windows 应用商店安装 WindowsTerminal</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261938192.png\" alt=\"image-20230826193816724\" /></p>\n<p>确保自己电脑有 PowerShell, 或者去下载一个也是在应用商店</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261938122.png\" alt=\"image-20230826193848906\" /></p>\n<p>安装字体否则一些显示有问题：字体上传到了云端可以去拉取获取下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vaG15cG9zaC5kZXYvZG9jcy9pbnN0YWxsYXRpb24vZm9udHMlRTclODIlQjklRTUlODclQkI=\">https://ohmyposh.dev/docs/installation/fonts 点击</span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3J5YW5vYXNpcy9uZXJkLWZvbnRzL3JlbGVhc2VzL2Rvd25sb2FkL3YzLjAuMi9NZXNsby56aXA=\">Meslo LGM NF</span> 即可下载字体包</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 安装 oh-my-posh</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>winget <span class=\"token function\">install</span> JanDeDobbeleer.OhMyPosh <span class=\"token parameter variable\">-s</span> winget</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用的是哪个 shell</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>oh-my-posh get shell</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 直接加载：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ScriptBlock<span class=\"token punctuation\">]</span>::Create<span class=\"token variable\"><span class=\"token punctuation\">((</span>oh<span class=\"token operator\">-</span>my<span class=\"token operator\">-</span>posh init pwsh <span class=\"token operator\">--</span>config \"$env<span class=\"token operator\">:</span>POSH_THEMES_PATH\\night<span class=\"token operator\">-</span>owl.omp.json\" <span class=\"token operator\">--</span>print<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>join \"`n\"<span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 编辑 PowerShell 配置文件脚本，每次启动之后自动加载</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>notepad <span class=\"token variable\">$PROFILE</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 当上述命令出错时，请确保先创建配置文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>New-Item <span class=\"token parameter variable\">-Path</span> <span class=\"token variable\">$PROFILE</span> <span class=\"token parameter variable\">-Type</span> File <span class=\"token parameter variable\">-Force</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 在配置文件里添加以下行：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>ScriptBlock<span class=\"token punctuation\">]</span>::Create<span class=\"token variable\"><span class=\"token punctuation\">((</span>oh<span class=\"token operator\">-</span>my<span class=\"token operator\">-</span>posh init pwsh <span class=\"token operator\">--</span>config \"$env<span class=\"token operator\">:</span>POSH_THEMES_PATH\\night<span class=\"token operator\">-</span>owl.omp.json\" <span class=\"token operator\">--</span>print<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span>join \"`n\"<span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>或者添加这行：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'$env:POSH_THEMES_PATH\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 重新加载配置文件以使更改生效</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token builtin class-name\">.</span> <span class=\"token variable\">$PROFILE</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 查看所有 themes:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Get-PoshThemes</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">#运行上面命令后，最后 3 行显示如下：</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># ---theme 存放的位置：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Themes location: C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>admin<span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>Programs<span class=\"token punctuation\">\\</span>oh-my-posh<span class=\"token punctuation\">\\</span>themes</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># --- 如果输入 $profile, 得出的路径跟以下是一致的：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>To change your theme, adjust the init script <span class=\"token keyword\">in</span> C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>admin<span class=\"token punctuation\">\\</span>Documents<span class=\"token punctuation\">\\</span>PowerShell<span class=\"token punctuation\">\\</span>Microsoft.PowerShell_profile.ps1.</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># --- 之前 $profile 配置文件，也可以改成以下这句（之前这句，向防病毒软件添加例外）里面路径写自己对应的</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># 安装文件图标库</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Install-Module <span class=\"token parameter variable\">-Name</span> Terminal-Icons <span class=\"token parameter variable\">-Repository</span> PSGallery</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#使用图标，可以把以下这条命令加到 $PROFILE 里（保存，.$profile 使生效），单独运行就是一次性：</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Import-Module <span class=\"token parameter variable\">-Name</span> Terminal-Icons</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">#BONUS：</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># 设置随机主题：</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 在 powershell 输入 code $profile，输入下面的脚本命令：</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr></table></figure><p>如果命令操作中出现创建文件的错误问题而无法解决则自己去对应的路径下创建一个如下：然后将下面配置信息写入</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr></table></figure><ul>\n<li><strong>注意</strong>：里面的路径按照自己执行命令：Get-PoshThemes 的时候最后一行看到的填写打开路径的目录可以按照自己喜欢的样式改。</li>\n</ul>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261939548.png\" alt=\"image-20230826193942959\" /></p>\n<p>最后就是 Windows Terminal 的配置了</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261942396.png\" alt=\"image-20230826194133851\" /><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261942154.png\" alt=\"image-20230826194150186\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308261942041.png\" alt=\"image-20230826194225862\" /></p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308271651695.png\" alt=\"image-20230827165110165\" /></p>\n<p>效果</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202308280929677.png\" alt=\"image-20230828092941987\" /></p>\n<p>也可以配合着 neofetch 使用</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>oh-my-posh init pwsh <span class=\"token parameter variable\">--config</span> <span class=\"token string\">'C:\\Users\\Administrator\\AppData\\Local\\Programs\\oh-my-posh\\themes\\night-owl.omp.json'</span> <span class=\"token operator\">|</span> Invoke-Expression</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>neofetch <span class=\"token parameter variable\">--ascii_distro</span> Mac</pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "windows"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/nodeJs/nvm-Node%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/nodeJs/nvm-Node%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/",
            "title": "nvm-Node版本控制",
            "date_published": "2024-01-24T10:48:46.978Z",
            "content_html": "<p>附：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1ub2RlJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\">node</span> 更换版本（简单操作）<br />\n安装 nvm<br />\n1 系统已经有 node</p>\n<ol start=\"2\">\n<li>网址：https://<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1naXRodWImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">github</span>.com/coreybutler/nvm-windows/releases</li>\n<li>下载 nvm-setup.zip, 解压之后会有个.exe 安装程序，第一步是同意，剩下的无脑 next 即可安装成功。</li>\n</ol>\n<h5 id=\"操作\"><a class=\"anchor\" href=\"#操作\">#</a> 操作</h5>\n<ol>\n<li>打开 cmd，使用 nvm ls 命令查看本地已有版本</li>\n<li>使用 安装命令 nvm install v10.16.0 即可（别忘了写 v）</li>\n<li>再次使用 nvm ls 命令查看本地已有版本。发现 12.15.0 和 10.16.0 均有</li>\n<li>切换版本 nvm use 12.15.0</li>\n</ol>\n<h3 id=\"基础命令\"><a class=\"anchor\" href=\"#基础命令\">#</a> 基础命令</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nvm ls               <span class=\"token comment\">// 查看已安装 node 版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nvm install vXX      <span class=\"token comment\">// 安装对应 vXX 版本的 node</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nvm uninstall vXX    <span class=\"token comment\">// 卸载对应 vXX 版本的 node</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nvm use xxx          <span class=\"token comment\">// 选择使用 XXX 版本</span></pre></td></tr></table></figure>",
            "tags": [
                "tools",
                "nodeJs"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/idea/idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/idea/idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E/",
            "title": "idea创建类或方法自动生成注释声明",
            "date_published": "2024-01-24T10:48:46.964Z",
            "content_html": "<p>创建类时自动生成注释声明：操作步骤:</p>\n<p><code>File --&gt; settings --&gt; Editor --&gt; File and Code Templates</code></p>\n<p>点击 <code>Includes</code>  选择 <code>File Header</code>  在右边内容框中输入如下内容:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @author Dkx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @$&#123;DATE&#125;$&#123;TIME&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @version 1.0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>* @function</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* @comment</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-04-28_20230323080818.png?v=1&amp;type=image&amp;token=V1:OyTyou1tw5AZ_pnL9RTe-fkw0H5HbvIq8k4G9iSL4wQ\" alt=\"image_2023-01-14-21-04-28\" /></p>\n<p>创建方法时自动生成注释声明：操作步骤:</p>\n<p><code>File --&gt; settings --&gt; Editor --&gt; Live Templates</code></p>\n<ol>\n<li>点击 + 号，再点击 <code>Template Group...</code></li>\n</ol>\n<p>创建名称随意，建议使用名称: <code>Method</code>  翻译为方法更为规范</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202401051449757.png\" alt=\"image-20240105144937718\" /></p>\n<p>选中刚才创建好的 Method 再次点击 + 号，选择 Live Template</p>\n<p>取名为: <code>/**</code>  注意：不能随便起名建议使用这个名称</p>\n<p>在展开 <code>Method</code>  选项点击 <code>/**</code>  标签</p>\n<p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-09-33_20230323080843.png?v=1&amp;type=image&amp;token=V1:GFig0QnwaLoCcCiUdET-hb1squrrMdI7wj9-sC1e6Eg\" alt=\"image_2023-01-14-21-09-33\" /></p>\n<p>在下面的内容框中输入如下内容:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*@param:$params$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*@return:$returns$</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*@Date:$date$</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-10-29_20230323080857.png?v=1&amp;type=image&amp;token=V1:oOF5UI_XfVYuwA4p0r6yVvsDFSuhwdzMsDlJnf4BZRM\" alt=\"image_2023-01-14-21-10-29\" /></p>\n<p>然后点击 <code>EDIT VARIABLES</code></p>\n<p>设置如下设置:</p>\n<p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-11-14_20230323080909.png?v=1&amp;type=image&amp;token=V1:L_nMc_WJc9fBed2PoQQBavSbR0qlPNK_SiUOE_3b66E\" alt=\"image_2023-01-14-21-11-14\" /></p>\n<p>更改调用方式为按 Enter 后触发</p>\n<p><img data-src=\"idea%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%88%96%E6%96%B9%E6%B3%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E6%B3%A8%E9%87%8A%E5%A3%B0%E6%98%8E_md_files/image_2023-01-14-21-11-47_20230323080922.png?v=1&amp;type=image&amp;token=V1:qKjGfIUD9JY-i1meZnGKDZa0GGQ7vOGDMNdeY8a6-7U\" alt=\"image_2023-01-14-21-11-47\" /></p>\n<p>点击 APPLY,OK 即可</p>\n",
            "tags": [
                "java",
                "tools",
                "idea",
                "项目"
            ]
        },
        {
            "id": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/idea/HTTP%20Client%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%8F%92%E4%BB%B6/",
            "url": "https://pigpigletsgo.github.io/homepage/2024/01/24/tools/idea/HTTP%20Client%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E6%8F%92%E4%BB%B6/",
            "title": "HTTP Client接口测试插件[idea-2022版本以上自带]",
            "date_published": "2024-01-24T10:48:46.960Z",
            "content_html": "<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310260909263.png\" alt=\"image-20231026090939362\" /></p>\n<p>使用方式：</p>\n<p>在项目的根目录创建一个名为 api 结尾的文件夹，里面存放 api 接口测试的代码：</p>\n<p><img data-src=\"https://raw.githubusercontent.com/PigPigLetsGo/imeages/master/202310260910384.png\" alt=\"image-20231026091037630\" /></p>\n<p>在该文件中编写代码如下：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST http://localhost:63040/content/course/list?pageNo=1&amp;pageSize=2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"auditStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"203001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"conurseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"publishStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure><p>&lt;font color='red'&gt; 注意 &lt;/font&gt;：如果写多个测试接口 uri 需要使用 ### 将其分隔否则会出现红色波浪线！比如，如下：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST http://localhost:63040/content/course/list?pageNo=1&amp;pageSize=2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"auditStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"203001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"conurseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"publishStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>###</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>GET http<span class=\"token operator\">:</span><span class=\"token comment\">//localhost:63040/content/course-category/tree-nodes</span></span></pre></td></tr></table></figure><p>启动对应的服务后进行测试结果如下：</p>\n<pre><code>POST http://localhost:63040/content/course/list?pageNo=1&amp;pageSize=2\n\nHTTP/1.1 200 \nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Thu, 26 Oct 2023 01:06:34 GMT\nKeep-Alive: timeout=60\nConnection: keep-alive\n\n&#123;\n  &quot;items&quot;: [\n    &#123;\n      &quot;id&quot;: 1,\n      &quot;companyId&quot;: 1232141425,\n      &quot;companyName&quot;: &quot;&quot;,\n      &quot;name&quot;: &quot;JAVA8/9/10新特性讲解&quot;,\n      &quot;users&quot;: &quot;java爱好者,有一定java基础&quot;,\n      &quot;tags&quot;: &quot;有个java 版本变化的新内容，帮助大家使用最新的思想和工具&quot;,\n      &quot;mt&quot;: &quot;1&quot;,\n      &quot;st&quot;: &quot;1-3-2&quot;,\n      &quot;grade&quot;: &quot;204002&quot;,\n      &quot;teachmode&quot;: &quot;200002&quot;,\n      &quot;description&quot;: null,\n      &quot;pic&quot;: &quot;https://cdn.educba.com/academy/wp-content/uploads/2018/08/Spring-BOOT-Interview-questions.jpg&quot;,\n      &quot;createDate&quot;: &quot;2019-09-03T17:48:19&quot;,\n      &quot;changeDate&quot;: &quot;2022-09-17T16:47:29&quot;,\n      &quot;createPeople&quot;: &quot;1&quot;,\n      &quot;changePeople&quot;: null,\n      &quot;auditStatus&quot;: &quot;202004&quot;,\n      &quot;status&quot;: &quot;203001&quot;\n    &#125;,\n    &#123;\n      &quot;id&quot;: 27,\n      &quot;companyId&quot;: 1232141425,\n      &quot;companyName&quot;: null,\n      &quot;name&quot;: &quot;Javascript之VueJS&quot;,\n      &quot;users&quot;: &quot;所有人&quot;,\n      &quot;tags&quot;: null,\n      &quot;mt&quot;: &quot;1-1&quot;,\n      &quot;st&quot;: &quot;1-1-9&quot;,\n      &quot;grade&quot;: &quot;200002&quot;,\n      &quot;teachmode&quot;: &quot;200002&quot;,\n      &quot;description&quot;: &quot;Vue系列课程：从Vue1.0讲到Vue2.0，从理论讲到实战，理论与案例巧妙结合，让课程更容易理解！&quot;,\n      &quot;pic&quot;: &quot;https://cdn.educba.com/academy/wp-content/uploads/2018/08/Spring-BOOT-Interview-questions.jpg&quot;,\n      &quot;createDate&quot;: &quot;2019-09-04T09:56:19&quot;,\n      &quot;changeDate&quot;: null,\n      &quot;createPeople&quot;: null,\n      &quot;changePeople&quot;: null,\n      &quot;auditStatus&quot;: &quot;202004&quot;,\n      &quot;status&quot;: &quot;203001&quot;\n    &#125;\n  ],\n  &quot;counts&quot;: 5,\n  &quot;page&quot;: 1,\n  &quot;pageSize&quot;: 2\n&#125;\nResponse file saved.\n&gt; 2023-10-26T090634.200.json\n\nResponse code: 200; Time: 32ms (32 ms); Content length: 987 bytes (987 B)\n</code></pre>\n<p>但是如果每次请求发生变化都需要改变的话很繁琐，我们可以对其进行定义变量</p>\n<p>创建一个名为： <code>http-client.env.json</code>  的文件，内容如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"access_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"gateway_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63010\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"content_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63040\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"system_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63110\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"media_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63050\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"search_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63080\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"auth_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63070\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"checkcode_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:6375\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"learning_host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost:63020\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义完成后怎么使用呢？</p>\n<p>使用方式如下：将 Post 请求中的 localhost 固定写法改为变量</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>POST &#125;/content/course/list?pageNo=1&amp;pageSize=2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">application/json</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token application-json\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"auditStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"203001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"conurseName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">\"publishStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></span></pre></td></tr></table></figure>",
            "tags": [
                "java",
                "tools",
                "idea",
                "项目"
            ]
        }
    ]
}